!function(e){function r(e,r,o){return 4===arguments.length?t.apply(this,arguments):void n(e,{declarative:!0,deps:r,declare:o})}function t(e,r,t,o){n(e,{declarative:!1,deps:r,executingRequire:t,execute:o})}function n(e,r){r.name=e,e in p||(p[e]=r),r.normalizedDeps=r.deps}function o(e,r){if(r[e.groupIndex]=r[e.groupIndex]||[],-1==v.call(r[e.groupIndex],e)){r[e.groupIndex].push(e);for(var t=0,n=e.normalizedDeps.length;n>t;t++){var a=e.normalizedDeps[t],u=p[a];if(u&&!u.evaluated){var d=e.groupIndex+(u.declarative!=e.declarative);if(void 0===u.groupIndex||u.groupIndex<d){if(void 0!==u.groupIndex&&(r[u.groupIndex].splice(v.call(r[u.groupIndex],u),1),0==r[u.groupIndex].length))throw new TypeError("Mixed dependency cycle detected");u.groupIndex=d}o(u,r)}}}}function a(e){var r=p[e];r.groupIndex=0;var t=[];o(r,t);for(var n=!!r.declarative==t.length%2,a=t.length-1;a>=0;a--){for(var u=t[a],i=0;i<u.length;i++){var s=u[i];n?d(s):l(s)}n=!n}}function u(e){return x[e]||(x[e]={name:e,dependencies:[],exports:{},importers:[]})}function d(r){if(!r.module){var t=r.module=u(r.name),n=r.module.exports,o=r.declare.call(e,function(e,r){if(t.locked=!0,"object"==typeof e)for(var o in e)n[o]=e[o];else n[e]=r;for(var a=0,u=t.importers.length;u>a;a++){var d=t.importers[a];if(!d.locked)for(var i=0;i<d.dependencies.length;++i)d.dependencies[i]===t&&d.setters[i](n)}return t.locked=!1,r},r.name);t.setters=o.setters,t.execute=o.execute;for(var a=0,i=r.normalizedDeps.length;i>a;a++){var l,s=r.normalizedDeps[a],c=p[s],v=x[s];v?l=v.exports:c&&!c.declarative?l=c.esModule:c?(d(c),v=c.module,l=v.exports):l=f(s),v&&v.importers?(v.importers.push(t),t.dependencies.push(v)):t.dependencies.push(null),t.setters[a]&&t.setters[a](l)}}}function i(e){var r,t=p[e];if(t)t.declarative?c(e,[]):t.evaluated||l(t),r=t.module.exports;else if(r=f(e),!r)throw new Error("Unable to load dependency "+e+".");return(!t||t.declarative)&&r&&r.__useDefault?r["default"]:r}function l(r){if(!r.module){var t={},n=r.module={exports:t,id:r.name};if(!r.executingRequire)for(var o=0,a=r.normalizedDeps.length;a>o;o++){var u=r.normalizedDeps[o],d=p[u];d&&l(d)}r.evaluated=!0;var c=r.execute.call(e,function(e){for(var t=0,n=r.deps.length;n>t;t++)if(r.deps[t]==e)return i(r.normalizedDeps[t]);throw new TypeError("Module "+e+" not declared as a dependency.")},t,n);c&&(n.exports=c),t=n.exports,t&&t.__esModule?r.esModule=t:r.esModule=s(t)}}function s(r){if(r===e)return r;var t={};if("object"==typeof r||"function"==typeof r)if(g){var n;for(var o in r)(n=Object.getOwnPropertyDescriptor(r,o))&&h(t,o,n)}else{var a=r&&r.hasOwnProperty;for(var o in r)(!a||r.hasOwnProperty(o))&&(t[o]=r[o])}return t["default"]=r,h(t,"__useDefault",{value:!0}),t}function c(r,t){var n=p[r];if(n&&!n.evaluated&&n.declarative){t.push(r);for(var o=0,a=n.normalizedDeps.length;a>o;o++){var u=n.normalizedDeps[o];-1==v.call(t,u)&&(p[u]?c(u,t):f(u))}n.evaluated||(n.evaluated=!0,n.module.execute.call(e))}}function f(e){if(D[e])return D[e];if("@node/"==e.substr(0,6))return y(e.substr(6));var r=p[e];if(!r)throw"Module "+e+" not present.";return a(e),c(e,[]),p[e]=void 0,r.declarative&&h(r.module.exports,"__esModule",{value:!0}),D[e]=r.declarative?r.module.exports:r.esModule}var p={},v=Array.prototype.indexOf||function(e){for(var r=0,t=this.length;t>r;r++)if(this[r]===e)return r;return-1},g=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(m){g=!1}var h;!function(){try{Object.defineProperty({},"a",{})&&(h=Object.defineProperty)}catch(e){h=function(e,r,t){try{e[r]=t.value||t.get.call(e)}catch(n){}}}}();var x={},y="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,D={"@empty":{}};return function(e,n,o){return function(a){a(function(a){for(var u={_nodeRequire:y,register:r,registerDynamic:t,get:f,set:function(e,r){D[e]=r},newModule:function(e){return e}},d=0;d<n.length;d++)(function(e,r){r&&r.__esModule?D[e]=r:D[e]=s(r)})(n[d],arguments[d]);o(u);var i=f(e[0]);if(e.length>1)for(var d=1;d<e.length;d++)f(e[d]);return i.__useDefault?i["default"]:i})}}}("undefined"!=typeof self?self:global)

(["npm:less@2.6.1/index.js"], [], function($__System) {

$__System.registerDynamic("npm:mime@1.3.4/types.json", [], false, function() {
  return {
    "application/andrew-inset": [
      "ez"
    ],
    "application/applixware": [
      "aw"
    ],
    "application/atom+xml": [
      "atom"
    ],
    "application/atomcat+xml": [
      "atomcat"
    ],
    "application/atomsvc+xml": [
      "atomsvc"
    ],
    "application/ccxml+xml": [
      "ccxml"
    ],
    "application/cdmi-capability": [
      "cdmia"
    ],
    "application/cdmi-container": [
      "cdmic"
    ],
    "application/cdmi-domain": [
      "cdmid"
    ],
    "application/cdmi-object": [
      "cdmio"
    ],
    "application/cdmi-queue": [
      "cdmiq"
    ],
    "application/cu-seeme": [
      "cu"
    ],
    "application/dash+xml": [
      "mdp"
    ],
    "application/davmount+xml": [
      "davmount"
    ],
    "application/docbook+xml": [
      "dbk"
    ],
    "application/dssc+der": [
      "dssc"
    ],
    "application/dssc+xml": [
      "xdssc"
    ],
    "application/ecmascript": [
      "ecma"
    ],
    "application/emma+xml": [
      "emma"
    ],
    "application/epub+zip": [
      "epub"
    ],
    "application/exi": [
      "exi"
    ],
    "application/font-tdpfr": [
      "pfr"
    ],
    "application/font-woff": [
      "woff"
    ],
    "application/font-woff2": [
      "woff2"
    ],
    "application/gml+xml": [
      "gml"
    ],
    "application/gpx+xml": [
      "gpx"
    ],
    "application/gxf": [
      "gxf"
    ],
    "application/hyperstudio": [
      "stk"
    ],
    "application/inkml+xml": [
      "ink",
      "inkml"
    ],
    "application/ipfix": [
      "ipfix"
    ],
    "application/java-archive": [
      "jar"
    ],
    "application/java-serialized-object": [
      "ser"
    ],
    "application/java-vm": [
      "class"
    ],
    "application/javascript": [
      "js"
    ],
    "application/json": [
      "json",
      "map"
    ],
    "application/json5": [
      "json5"
    ],
    "application/jsonml+json": [
      "jsonml"
    ],
    "application/lost+xml": [
      "lostxml"
    ],
    "application/mac-binhex40": [
      "hqx"
    ],
    "application/mac-compactpro": [
      "cpt"
    ],
    "application/mads+xml": [
      "mads"
    ],
    "application/marc": [
      "mrc"
    ],
    "application/marcxml+xml": [
      "mrcx"
    ],
    "application/mathematica": [
      "ma",
      "nb",
      "mb"
    ],
    "application/mathml+xml": [
      "mathml"
    ],
    "application/mbox": [
      "mbox"
    ],
    "application/mediaservercontrol+xml": [
      "mscml"
    ],
    "application/metalink+xml": [
      "metalink"
    ],
    "application/metalink4+xml": [
      "meta4"
    ],
    "application/mets+xml": [
      "mets"
    ],
    "application/mods+xml": [
      "mods"
    ],
    "application/mp21": [
      "m21",
      "mp21"
    ],
    "application/mp4": [
      "mp4s",
      "m4p"
    ],
    "application/msword": [
      "doc",
      "dot"
    ],
    "application/mxf": [
      "mxf"
    ],
    "application/octet-stream": [
      "bin",
      "dms",
      "lrf",
      "mar",
      "so",
      "dist",
      "distz",
      "pkg",
      "bpk",
      "dump",
      "elc",
      "deploy",
      "buffer"
    ],
    "application/oda": [
      "oda"
    ],
    "application/oebps-package+xml": [
      "opf"
    ],
    "application/ogg": [
      "ogx"
    ],
    "application/omdoc+xml": [
      "omdoc"
    ],
    "application/onenote": [
      "onetoc",
      "onetoc2",
      "onetmp",
      "onepkg"
    ],
    "application/oxps": [
      "oxps"
    ],
    "application/patch-ops-error+xml": [
      "xer"
    ],
    "application/pdf": [
      "pdf"
    ],
    "application/pgp-encrypted": [
      "pgp"
    ],
    "application/pgp-signature": [
      "asc",
      "sig"
    ],
    "application/pics-rules": [
      "prf"
    ],
    "application/pkcs10": [
      "p10"
    ],
    "application/pkcs7-mime": [
      "p7m",
      "p7c"
    ],
    "application/pkcs7-signature": [
      "p7s"
    ],
    "application/pkcs8": [
      "p8"
    ],
    "application/pkix-attr-cert": [
      "ac"
    ],
    "application/pkix-cert": [
      "cer"
    ],
    "application/pkix-crl": [
      "crl"
    ],
    "application/pkix-pkipath": [
      "pkipath"
    ],
    "application/pkixcmp": [
      "pki"
    ],
    "application/pls+xml": [
      "pls"
    ],
    "application/postscript": [
      "ai",
      "eps",
      "ps"
    ],
    "application/prs.cww": [
      "cww"
    ],
    "application/pskc+xml": [
      "pskcxml"
    ],
    "application/rdf+xml": [
      "rdf"
    ],
    "application/reginfo+xml": [
      "rif"
    ],
    "application/relax-ng-compact-syntax": [
      "rnc"
    ],
    "application/resource-lists+xml": [
      "rl"
    ],
    "application/resource-lists-diff+xml": [
      "rld"
    ],
    "application/rls-services+xml": [
      "rs"
    ],
    "application/rpki-ghostbusters": [
      "gbr"
    ],
    "application/rpki-manifest": [
      "mft"
    ],
    "application/rpki-roa": [
      "roa"
    ],
    "application/rsd+xml": [
      "rsd"
    ],
    "application/rss+xml": [
      "rss"
    ],
    "application/rtf": [
      "rtf"
    ],
    "application/sbml+xml": [
      "sbml"
    ],
    "application/scvp-cv-request": [
      "scq"
    ],
    "application/scvp-cv-response": [
      "scs"
    ],
    "application/scvp-vp-request": [
      "spq"
    ],
    "application/scvp-vp-response": [
      "spp"
    ],
    "application/sdp": [
      "sdp"
    ],
    "application/set-payment-initiation": [
      "setpay"
    ],
    "application/set-registration-initiation": [
      "setreg"
    ],
    "application/shf+xml": [
      "shf"
    ],
    "application/smil+xml": [
      "smi",
      "smil"
    ],
    "application/sparql-query": [
      "rq"
    ],
    "application/sparql-results+xml": [
      "srx"
    ],
    "application/srgs": [
      "gram"
    ],
    "application/srgs+xml": [
      "grxml"
    ],
    "application/sru+xml": [
      "sru"
    ],
    "application/ssdl+xml": [
      "ssdl"
    ],
    "application/ssml+xml": [
      "ssml"
    ],
    "application/tei+xml": [
      "tei",
      "teicorpus"
    ],
    "application/thraud+xml": [
      "tfi"
    ],
    "application/timestamped-data": [
      "tsd"
    ],
    "application/vnd.3gpp.pic-bw-large": [
      "plb"
    ],
    "application/vnd.3gpp.pic-bw-small": [
      "psb"
    ],
    "application/vnd.3gpp.pic-bw-var": [
      "pvb"
    ],
    "application/vnd.3gpp2.tcap": [
      "tcap"
    ],
    "application/vnd.3m.post-it-notes": [
      "pwn"
    ],
    "application/vnd.accpac.simply.aso": [
      "aso"
    ],
    "application/vnd.accpac.simply.imp": [
      "imp"
    ],
    "application/vnd.acucobol": [
      "acu"
    ],
    "application/vnd.acucorp": [
      "atc",
      "acutc"
    ],
    "application/vnd.adobe.air-application-installer-package+zip": [
      "air"
    ],
    "application/vnd.adobe.formscentral.fcdt": [
      "fcdt"
    ],
    "application/vnd.adobe.fxp": [
      "fxp",
      "fxpl"
    ],
    "application/vnd.adobe.xdp+xml": [
      "xdp"
    ],
    "application/vnd.adobe.xfdf": [
      "xfdf"
    ],
    "application/vnd.ahead.space": [
      "ahead"
    ],
    "application/vnd.airzip.filesecure.azf": [
      "azf"
    ],
    "application/vnd.airzip.filesecure.azs": [
      "azs"
    ],
    "application/vnd.amazon.ebook": [
      "azw"
    ],
    "application/vnd.americandynamics.acc": [
      "acc"
    ],
    "application/vnd.amiga.ami": [
      "ami"
    ],
    "application/vnd.android.package-archive": [
      "apk"
    ],
    "application/vnd.anser-web-certificate-issue-initiation": [
      "cii"
    ],
    "application/vnd.anser-web-funds-transfer-initiation": [
      "fti"
    ],
    "application/vnd.antix.game-component": [
      "atx"
    ],
    "application/vnd.apple.installer+xml": [
      "mpkg"
    ],
    "application/vnd.apple.mpegurl": [
      "m3u8"
    ],
    "application/vnd.aristanetworks.swi": [
      "swi"
    ],
    "application/vnd.astraea-software.iota": [
      "iota"
    ],
    "application/vnd.audiograph": [
      "aep"
    ],
    "application/vnd.blueice.multipass": [
      "mpm"
    ],
    "application/vnd.bmi": [
      "bmi"
    ],
    "application/vnd.businessobjects": [
      "rep"
    ],
    "application/vnd.chemdraw+xml": [
      "cdxml"
    ],
    "application/vnd.chipnuts.karaoke-mmd": [
      "mmd"
    ],
    "application/vnd.cinderella": [
      "cdy"
    ],
    "application/vnd.claymore": [
      "cla"
    ],
    "application/vnd.cloanto.rp9": [
      "rp9"
    ],
    "application/vnd.clonk.c4group": [
      "c4g",
      "c4d",
      "c4f",
      "c4p",
      "c4u"
    ],
    "application/vnd.cluetrust.cartomobile-config": [
      "c11amc"
    ],
    "application/vnd.cluetrust.cartomobile-config-pkg": [
      "c11amz"
    ],
    "application/vnd.commonspace": [
      "csp"
    ],
    "application/vnd.contact.cmsg": [
      "cdbcmsg"
    ],
    "application/vnd.cosmocaller": [
      "cmc"
    ],
    "application/vnd.crick.clicker": [
      "clkx"
    ],
    "application/vnd.crick.clicker.keyboard": [
      "clkk"
    ],
    "application/vnd.crick.clicker.palette": [
      "clkp"
    ],
    "application/vnd.crick.clicker.template": [
      "clkt"
    ],
    "application/vnd.crick.clicker.wordbank": [
      "clkw"
    ],
    "application/vnd.criticaltools.wbs+xml": [
      "wbs"
    ],
    "application/vnd.ctc-posml": [
      "pml"
    ],
    "application/vnd.cups-ppd": [
      "ppd"
    ],
    "application/vnd.curl.car": [
      "car"
    ],
    "application/vnd.curl.pcurl": [
      "pcurl"
    ],
    "application/vnd.dart": [
      "dart"
    ],
    "application/vnd.data-vision.rdz": [
      "rdz"
    ],
    "application/vnd.dece.data": [
      "uvf",
      "uvvf",
      "uvd",
      "uvvd"
    ],
    "application/vnd.dece.ttml+xml": [
      "uvt",
      "uvvt"
    ],
    "application/vnd.dece.unspecified": [
      "uvx",
      "uvvx"
    ],
    "application/vnd.dece.zip": [
      "uvz",
      "uvvz"
    ],
    "application/vnd.denovo.fcselayout-link": [
      "fe_launch"
    ],
    "application/vnd.dna": [
      "dna"
    ],
    "application/vnd.dolby.mlp": [
      "mlp"
    ],
    "application/vnd.dpgraph": [
      "dpg"
    ],
    "application/vnd.dreamfactory": [
      "dfac"
    ],
    "application/vnd.ds-keypoint": [
      "kpxx"
    ],
    "application/vnd.dvb.ait": [
      "ait"
    ],
    "application/vnd.dvb.service": [
      "svc"
    ],
    "application/vnd.dynageo": [
      "geo"
    ],
    "application/vnd.ecowin.chart": [
      "mag"
    ],
    "application/vnd.enliven": [
      "nml"
    ],
    "application/vnd.epson.esf": [
      "esf"
    ],
    "application/vnd.epson.msf": [
      "msf"
    ],
    "application/vnd.epson.quickanime": [
      "qam"
    ],
    "application/vnd.epson.salt": [
      "slt"
    ],
    "application/vnd.epson.ssf": [
      "ssf"
    ],
    "application/vnd.eszigno3+xml": [
      "es3",
      "et3"
    ],
    "application/vnd.ezpix-album": [
      "ez2"
    ],
    "application/vnd.ezpix-package": [
      "ez3"
    ],
    "application/vnd.fdf": [
      "fdf"
    ],
    "application/vnd.fdsn.mseed": [
      "mseed"
    ],
    "application/vnd.fdsn.seed": [
      "seed",
      "dataless"
    ],
    "application/vnd.flographit": [
      "gph"
    ],
    "application/vnd.fluxtime.clip": [
      "ftc"
    ],
    "application/vnd.framemaker": [
      "fm",
      "frame",
      "maker",
      "book"
    ],
    "application/vnd.frogans.fnc": [
      "fnc"
    ],
    "application/vnd.frogans.ltf": [
      "ltf"
    ],
    "application/vnd.fsc.weblaunch": [
      "fsc"
    ],
    "application/vnd.fujitsu.oasys": [
      "oas"
    ],
    "application/vnd.fujitsu.oasys2": [
      "oa2"
    ],
    "application/vnd.fujitsu.oasys3": [
      "oa3"
    ],
    "application/vnd.fujitsu.oasysgp": [
      "fg5"
    ],
    "application/vnd.fujitsu.oasysprs": [
      "bh2"
    ],
    "application/vnd.fujixerox.ddd": [
      "ddd"
    ],
    "application/vnd.fujixerox.docuworks": [
      "xdw"
    ],
    "application/vnd.fujixerox.docuworks.binder": [
      "xbd"
    ],
    "application/vnd.fuzzysheet": [
      "fzs"
    ],
    "application/vnd.genomatix.tuxedo": [
      "txd"
    ],
    "application/vnd.geogebra.file": [
      "ggb"
    ],
    "application/vnd.geogebra.tool": [
      "ggt"
    ],
    "application/vnd.geometry-explorer": [
      "gex",
      "gre"
    ],
    "application/vnd.geonext": [
      "gxt"
    ],
    "application/vnd.geoplan": [
      "g2w"
    ],
    "application/vnd.geospace": [
      "g3w"
    ],
    "application/vnd.gmx": [
      "gmx"
    ],
    "application/vnd.google-earth.kml+xml": [
      "kml"
    ],
    "application/vnd.google-earth.kmz": [
      "kmz"
    ],
    "application/vnd.grafeq": [
      "gqf",
      "gqs"
    ],
    "application/vnd.groove-account": [
      "gac"
    ],
    "application/vnd.groove-help": [
      "ghf"
    ],
    "application/vnd.groove-identity-message": [
      "gim"
    ],
    "application/vnd.groove-injector": [
      "grv"
    ],
    "application/vnd.groove-tool-message": [
      "gtm"
    ],
    "application/vnd.groove-tool-template": [
      "tpl"
    ],
    "application/vnd.groove-vcard": [
      "vcg"
    ],
    "application/vnd.hal+xml": [
      "hal"
    ],
    "application/vnd.handheld-entertainment+xml": [
      "zmm"
    ],
    "application/vnd.hbci": [
      "hbci"
    ],
    "application/vnd.hhe.lesson-player": [
      "les"
    ],
    "application/vnd.hp-hpgl": [
      "hpgl"
    ],
    "application/vnd.hp-hpid": [
      "hpid"
    ],
    "application/vnd.hp-hps": [
      "hps"
    ],
    "application/vnd.hp-jlyt": [
      "jlt"
    ],
    "application/vnd.hp-pcl": [
      "pcl"
    ],
    "application/vnd.hp-pclxl": [
      "pclxl"
    ],
    "application/vnd.ibm.minipay": [
      "mpy"
    ],
    "application/vnd.ibm.modcap": [
      "afp",
      "listafp",
      "list3820"
    ],
    "application/vnd.ibm.rights-management": [
      "irm"
    ],
    "application/vnd.ibm.secure-container": [
      "sc"
    ],
    "application/vnd.iccprofile": [
      "icc",
      "icm"
    ],
    "application/vnd.igloader": [
      "igl"
    ],
    "application/vnd.immervision-ivp": [
      "ivp"
    ],
    "application/vnd.immervision-ivu": [
      "ivu"
    ],
    "application/vnd.insors.igm": [
      "igm"
    ],
    "application/vnd.intercon.formnet": [
      "xpw",
      "xpx"
    ],
    "application/vnd.intergeo": [
      "i2g"
    ],
    "application/vnd.intu.qbo": [
      "qbo"
    ],
    "application/vnd.intu.qfx": [
      "qfx"
    ],
    "application/vnd.ipunplugged.rcprofile": [
      "rcprofile"
    ],
    "application/vnd.irepository.package+xml": [
      "irp"
    ],
    "application/vnd.is-xpr": [
      "xpr"
    ],
    "application/vnd.isac.fcs": [
      "fcs"
    ],
    "application/vnd.jam": [
      "jam"
    ],
    "application/vnd.jcp.javame.midlet-rms": [
      "rms"
    ],
    "application/vnd.jisp": [
      "jisp"
    ],
    "application/vnd.joost.joda-archive": [
      "joda"
    ],
    "application/vnd.kahootz": [
      "ktz",
      "ktr"
    ],
    "application/vnd.kde.karbon": [
      "karbon"
    ],
    "application/vnd.kde.kchart": [
      "chrt"
    ],
    "application/vnd.kde.kformula": [
      "kfo"
    ],
    "application/vnd.kde.kivio": [
      "flw"
    ],
    "application/vnd.kde.kontour": [
      "kon"
    ],
    "application/vnd.kde.kpresenter": [
      "kpr",
      "kpt"
    ],
    "application/vnd.kde.kspread": [
      "ksp"
    ],
    "application/vnd.kde.kword": [
      "kwd",
      "kwt"
    ],
    "application/vnd.kenameaapp": [
      "htke"
    ],
    "application/vnd.kidspiration": [
      "kia"
    ],
    "application/vnd.kinar": [
      "kne",
      "knp"
    ],
    "application/vnd.koan": [
      "skp",
      "skd",
      "skt",
      "skm"
    ],
    "application/vnd.kodak-descriptor": [
      "sse"
    ],
    "application/vnd.las.las+xml": [
      "lasxml"
    ],
    "application/vnd.llamagraphics.life-balance.desktop": [
      "lbd"
    ],
    "application/vnd.llamagraphics.life-balance.exchange+xml": [
      "lbe"
    ],
    "application/vnd.lotus-1-2-3": [
      "123"
    ],
    "application/vnd.lotus-approach": [
      "apr"
    ],
    "application/vnd.lotus-freelance": [
      "pre"
    ],
    "application/vnd.lotus-notes": [
      "nsf"
    ],
    "application/vnd.lotus-organizer": [
      "org"
    ],
    "application/vnd.lotus-screencam": [
      "scm"
    ],
    "application/vnd.lotus-wordpro": [
      "lwp"
    ],
    "application/vnd.macports.portpkg": [
      "portpkg"
    ],
    "application/vnd.mcd": [
      "mcd"
    ],
    "application/vnd.medcalcdata": [
      "mc1"
    ],
    "application/vnd.mediastation.cdkey": [
      "cdkey"
    ],
    "application/vnd.mfer": [
      "mwf"
    ],
    "application/vnd.mfmp": [
      "mfm"
    ],
    "application/vnd.micrografx.flo": [
      "flo"
    ],
    "application/vnd.micrografx.igx": [
      "igx"
    ],
    "application/vnd.mif": [
      "mif"
    ],
    "application/vnd.mobius.daf": [
      "daf"
    ],
    "application/vnd.mobius.dis": [
      "dis"
    ],
    "application/vnd.mobius.mbk": [
      "mbk"
    ],
    "application/vnd.mobius.mqy": [
      "mqy"
    ],
    "application/vnd.mobius.msl": [
      "msl"
    ],
    "application/vnd.mobius.plc": [
      "plc"
    ],
    "application/vnd.mobius.txf": [
      "txf"
    ],
    "application/vnd.mophun.application": [
      "mpn"
    ],
    "application/vnd.mophun.certificate": [
      "mpc"
    ],
    "application/vnd.mozilla.xul+xml": [
      "xul"
    ],
    "application/vnd.ms-artgalry": [
      "cil"
    ],
    "application/vnd.ms-cab-compressed": [
      "cab"
    ],
    "application/vnd.ms-excel": [
      "xls",
      "xlm",
      "xla",
      "xlc",
      "xlt",
      "xlw"
    ],
    "application/vnd.ms-excel.addin.macroenabled.12": [
      "xlam"
    ],
    "application/vnd.ms-excel.sheet.binary.macroenabled.12": [
      "xlsb"
    ],
    "application/vnd.ms-excel.sheet.macroenabled.12": [
      "xlsm"
    ],
    "application/vnd.ms-excel.template.macroenabled.12": [
      "xltm"
    ],
    "application/vnd.ms-fontobject": [
      "eot"
    ],
    "application/vnd.ms-htmlhelp": [
      "chm"
    ],
    "application/vnd.ms-ims": [
      "ims"
    ],
    "application/vnd.ms-lrm": [
      "lrm"
    ],
    "application/vnd.ms-officetheme": [
      "thmx"
    ],
    "application/vnd.ms-pki.seccat": [
      "cat"
    ],
    "application/vnd.ms-pki.stl": [
      "stl"
    ],
    "application/vnd.ms-powerpoint": [
      "ppt",
      "pps",
      "pot"
    ],
    "application/vnd.ms-powerpoint.addin.macroenabled.12": [
      "ppam"
    ],
    "application/vnd.ms-powerpoint.presentation.macroenabled.12": [
      "pptm"
    ],
    "application/vnd.ms-powerpoint.slide.macroenabled.12": [
      "sldm"
    ],
    "application/vnd.ms-powerpoint.slideshow.macroenabled.12": [
      "ppsm"
    ],
    "application/vnd.ms-powerpoint.template.macroenabled.12": [
      "potm"
    ],
    "application/vnd.ms-project": [
      "mpp",
      "mpt"
    ],
    "application/vnd.ms-word.document.macroenabled.12": [
      "docm"
    ],
    "application/vnd.ms-word.template.macroenabled.12": [
      "dotm"
    ],
    "application/vnd.ms-works": [
      "wps",
      "wks",
      "wcm",
      "wdb"
    ],
    "application/vnd.ms-wpl": [
      "wpl"
    ],
    "application/vnd.ms-xpsdocument": [
      "xps"
    ],
    "application/vnd.mseq": [
      "mseq"
    ],
    "application/vnd.musician": [
      "mus"
    ],
    "application/vnd.muvee.style": [
      "msty"
    ],
    "application/vnd.mynfc": [
      "taglet"
    ],
    "application/vnd.neurolanguage.nlu": [
      "nlu"
    ],
    "application/vnd.nitf": [
      "ntf",
      "nitf"
    ],
    "application/vnd.noblenet-directory": [
      "nnd"
    ],
    "application/vnd.noblenet-sealer": [
      "nns"
    ],
    "application/vnd.noblenet-web": [
      "nnw"
    ],
    "application/vnd.nokia.n-gage.data": [
      "ngdat"
    ],
    "application/vnd.nokia.radio-preset": [
      "rpst"
    ],
    "application/vnd.nokia.radio-presets": [
      "rpss"
    ],
    "application/vnd.novadigm.edm": [
      "edm"
    ],
    "application/vnd.novadigm.edx": [
      "edx"
    ],
    "application/vnd.novadigm.ext": [
      "ext"
    ],
    "application/vnd.oasis.opendocument.chart": [
      "odc"
    ],
    "application/vnd.oasis.opendocument.chart-template": [
      "otc"
    ],
    "application/vnd.oasis.opendocument.database": [
      "odb"
    ],
    "application/vnd.oasis.opendocument.formula": [
      "odf"
    ],
    "application/vnd.oasis.opendocument.formula-template": [
      "odft"
    ],
    "application/vnd.oasis.opendocument.graphics": [
      "odg"
    ],
    "application/vnd.oasis.opendocument.graphics-template": [
      "otg"
    ],
    "application/vnd.oasis.opendocument.image": [
      "odi"
    ],
    "application/vnd.oasis.opendocument.image-template": [
      "oti"
    ],
    "application/vnd.oasis.opendocument.presentation": [
      "odp"
    ],
    "application/vnd.oasis.opendocument.presentation-template": [
      "otp"
    ],
    "application/vnd.oasis.opendocument.spreadsheet": [
      "ods"
    ],
    "application/vnd.oasis.opendocument.spreadsheet-template": [
      "ots"
    ],
    "application/vnd.oasis.opendocument.text": [
      "odt"
    ],
    "application/vnd.oasis.opendocument.text-master": [
      "odm"
    ],
    "application/vnd.oasis.opendocument.text-template": [
      "ott"
    ],
    "application/vnd.oasis.opendocument.text-web": [
      "oth"
    ],
    "application/vnd.olpc-sugar": [
      "xo"
    ],
    "application/vnd.oma.dd2+xml": [
      "dd2"
    ],
    "application/vnd.openofficeorg.extension": [
      "oxt"
    ],
    "application/vnd.openxmlformats-officedocument.presentationml.presentation": [
      "pptx"
    ],
    "application/vnd.openxmlformats-officedocument.presentationml.slide": [
      "sldx"
    ],
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow": [
      "ppsx"
    ],
    "application/vnd.openxmlformats-officedocument.presentationml.template": [
      "potx"
    ],
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": [
      "xlsx"
    ],
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template": [
      "xltx"
    ],
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": [
      "docx"
    ],
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template": [
      "dotx"
    ],
    "application/vnd.osgeo.mapguide.package": [
      "mgp"
    ],
    "application/vnd.osgi.dp": [
      "dp"
    ],
    "application/vnd.osgi.subsystem": [
      "esa"
    ],
    "application/vnd.palm": [
      "pdb",
      "pqa",
      "oprc"
    ],
    "application/vnd.pawaafile": [
      "paw"
    ],
    "application/vnd.pg.format": [
      "str"
    ],
    "application/vnd.pg.osasli": [
      "ei6"
    ],
    "application/vnd.picsel": [
      "efif"
    ],
    "application/vnd.pmi.widget": [
      "wg"
    ],
    "application/vnd.pocketlearn": [
      "plf"
    ],
    "application/vnd.powerbuilder6": [
      "pbd"
    ],
    "application/vnd.previewsystems.box": [
      "box"
    ],
    "application/vnd.proteus.magazine": [
      "mgz"
    ],
    "application/vnd.publishare-delta-tree": [
      "qps"
    ],
    "application/vnd.pvi.ptid1": [
      "ptid"
    ],
    "application/vnd.quark.quarkxpress": [
      "qxd",
      "qxt",
      "qwd",
      "qwt",
      "qxl",
      "qxb"
    ],
    "application/vnd.realvnc.bed": [
      "bed"
    ],
    "application/vnd.recordare.musicxml": [
      "mxl"
    ],
    "application/vnd.recordare.musicxml+xml": [
      "musicxml"
    ],
    "application/vnd.rig.cryptonote": [
      "cryptonote"
    ],
    "application/vnd.rim.cod": [
      "cod"
    ],
    "application/vnd.rn-realmedia": [
      "rm"
    ],
    "application/vnd.rn-realmedia-vbr": [
      "rmvb"
    ],
    "application/vnd.route66.link66+xml": [
      "link66"
    ],
    "application/vnd.sailingtracker.track": [
      "st"
    ],
    "application/vnd.seemail": [
      "see"
    ],
    "application/vnd.sema": [
      "sema"
    ],
    "application/vnd.semd": [
      "semd"
    ],
    "application/vnd.semf": [
      "semf"
    ],
    "application/vnd.shana.informed.formdata": [
      "ifm"
    ],
    "application/vnd.shana.informed.formtemplate": [
      "itp"
    ],
    "application/vnd.shana.informed.interchange": [
      "iif"
    ],
    "application/vnd.shana.informed.package": [
      "ipk"
    ],
    "application/vnd.simtech-mindmapper": [
      "twd",
      "twds"
    ],
    "application/vnd.smaf": [
      "mmf"
    ],
    "application/vnd.smart.teacher": [
      "teacher"
    ],
    "application/vnd.solent.sdkm+xml": [
      "sdkm",
      "sdkd"
    ],
    "application/vnd.spotfire.dxp": [
      "dxp"
    ],
    "application/vnd.spotfire.sfs": [
      "sfs"
    ],
    "application/vnd.stardivision.calc": [
      "sdc"
    ],
    "application/vnd.stardivision.draw": [
      "sda"
    ],
    "application/vnd.stardivision.impress": [
      "sdd"
    ],
    "application/vnd.stardivision.math": [
      "smf"
    ],
    "application/vnd.stardivision.writer": [
      "sdw",
      "vor"
    ],
    "application/vnd.stardivision.writer-global": [
      "sgl"
    ],
    "application/vnd.stepmania.package": [
      "smzip"
    ],
    "application/vnd.stepmania.stepchart": [
      "sm"
    ],
    "application/vnd.sun.xml.calc": [
      "sxc"
    ],
    "application/vnd.sun.xml.calc.template": [
      "stc"
    ],
    "application/vnd.sun.xml.draw": [
      "sxd"
    ],
    "application/vnd.sun.xml.draw.template": [
      "std"
    ],
    "application/vnd.sun.xml.impress": [
      "sxi"
    ],
    "application/vnd.sun.xml.impress.template": [
      "sti"
    ],
    "application/vnd.sun.xml.math": [
      "sxm"
    ],
    "application/vnd.sun.xml.writer": [
      "sxw"
    ],
    "application/vnd.sun.xml.writer.global": [
      "sxg"
    ],
    "application/vnd.sun.xml.writer.template": [
      "stw"
    ],
    "application/vnd.sus-calendar": [
      "sus",
      "susp"
    ],
    "application/vnd.svd": [
      "svd"
    ],
    "application/vnd.symbian.install": [
      "sis",
      "sisx"
    ],
    "application/vnd.syncml+xml": [
      "xsm"
    ],
    "application/vnd.syncml.dm+wbxml": [
      "bdm"
    ],
    "application/vnd.syncml.dm+xml": [
      "xdm"
    ],
    "application/vnd.tao.intent-module-archive": [
      "tao"
    ],
    "application/vnd.tcpdump.pcap": [
      "pcap",
      "cap",
      "dmp"
    ],
    "application/vnd.tmobile-livetv": [
      "tmo"
    ],
    "application/vnd.trid.tpt": [
      "tpt"
    ],
    "application/vnd.triscape.mxs": [
      "mxs"
    ],
    "application/vnd.trueapp": [
      "tra"
    ],
    "application/vnd.ufdl": [
      "ufd",
      "ufdl"
    ],
    "application/vnd.uiq.theme": [
      "utz"
    ],
    "application/vnd.umajin": [
      "umj"
    ],
    "application/vnd.unity": [
      "unityweb"
    ],
    "application/vnd.uoml+xml": [
      "uoml"
    ],
    "application/vnd.vcx": [
      "vcx"
    ],
    "application/vnd.visio": [
      "vsd",
      "vst",
      "vss",
      "vsw"
    ],
    "application/vnd.visionary": [
      "vis"
    ],
    "application/vnd.vsf": [
      "vsf"
    ],
    "application/vnd.wap.wbxml": [
      "wbxml"
    ],
    "application/vnd.wap.wmlc": [
      "wmlc"
    ],
    "application/vnd.wap.wmlscriptc": [
      "wmlsc"
    ],
    "application/vnd.webturbo": [
      "wtb"
    ],
    "application/vnd.wolfram.player": [
      "nbp"
    ],
    "application/vnd.wordperfect": [
      "wpd"
    ],
    "application/vnd.wqd": [
      "wqd"
    ],
    "application/vnd.wt.stf": [
      "stf"
    ],
    "application/vnd.xara": [
      "xar"
    ],
    "application/vnd.xfdl": [
      "xfdl"
    ],
    "application/vnd.yamaha.hv-dic": [
      "hvd"
    ],
    "application/vnd.yamaha.hv-script": [
      "hvs"
    ],
    "application/vnd.yamaha.hv-voice": [
      "hvp"
    ],
    "application/vnd.yamaha.openscoreformat": [
      "osf"
    ],
    "application/vnd.yamaha.openscoreformat.osfpvg+xml": [
      "osfpvg"
    ],
    "application/vnd.yamaha.smaf-audio": [
      "saf"
    ],
    "application/vnd.yamaha.smaf-phrase": [
      "spf"
    ],
    "application/vnd.yellowriver-custom-menu": [
      "cmp"
    ],
    "application/vnd.zul": [
      "zir",
      "zirz"
    ],
    "application/vnd.zzazz.deck+xml": [
      "zaz"
    ],
    "application/voicexml+xml": [
      "vxml"
    ],
    "application/widget": [
      "wgt"
    ],
    "application/winhlp": [
      "hlp"
    ],
    "application/wsdl+xml": [
      "wsdl"
    ],
    "application/wspolicy+xml": [
      "wspolicy"
    ],
    "application/x-7z-compressed": [
      "7z"
    ],
    "application/x-abiword": [
      "abw"
    ],
    "application/x-ace-compressed": [
      "ace"
    ],
    "application/x-apple-diskimage": [
      "dmg"
    ],
    "application/x-authorware-bin": [
      "aab",
      "x32",
      "u32",
      "vox"
    ],
    "application/x-authorware-map": [
      "aam"
    ],
    "application/x-authorware-seg": [
      "aas"
    ],
    "application/x-bcpio": [
      "bcpio"
    ],
    "application/x-bittorrent": [
      "torrent"
    ],
    "application/x-blorb": [
      "blb",
      "blorb"
    ],
    "application/x-bzip": [
      "bz"
    ],
    "application/x-bzip2": [
      "bz2",
      "boz"
    ],
    "application/x-cbr": [
      "cbr",
      "cba",
      "cbt",
      "cbz",
      "cb7"
    ],
    "application/x-cdlink": [
      "vcd"
    ],
    "application/x-cfs-compressed": [
      "cfs"
    ],
    "application/x-chat": [
      "chat"
    ],
    "application/x-chess-pgn": [
      "pgn"
    ],
    "application/x-chrome-extension": [
      "crx"
    ],
    "application/x-conference": [
      "nsc"
    ],
    "application/x-cpio": [
      "cpio"
    ],
    "application/x-csh": [
      "csh"
    ],
    "application/x-debian-package": [
      "deb",
      "udeb"
    ],
    "application/x-dgc-compressed": [
      "dgc"
    ],
    "application/x-director": [
      "dir",
      "dcr",
      "dxr",
      "cst",
      "cct",
      "cxt",
      "w3d",
      "fgd",
      "swa"
    ],
    "application/x-doom": [
      "wad"
    ],
    "application/x-dtbncx+xml": [
      "ncx"
    ],
    "application/x-dtbook+xml": [
      "dtb"
    ],
    "application/x-dtbresource+xml": [
      "res"
    ],
    "application/x-dvi": [
      "dvi"
    ],
    "application/x-envoy": [
      "evy"
    ],
    "application/x-eva": [
      "eva"
    ],
    "application/x-font-bdf": [
      "bdf"
    ],
    "application/x-font-ghostscript": [
      "gsf"
    ],
    "application/x-font-linux-psf": [
      "psf"
    ],
    "application/x-font-otf": [
      "otf"
    ],
    "application/x-font-pcf": [
      "pcf"
    ],
    "application/x-font-snf": [
      "snf"
    ],
    "application/x-font-ttf": [
      "ttf",
      "ttc"
    ],
    "application/x-font-type1": [
      "pfa",
      "pfb",
      "pfm",
      "afm"
    ],
    "application/x-freearc": [
      "arc"
    ],
    "application/x-futuresplash": [
      "spl"
    ],
    "application/x-gca-compressed": [
      "gca"
    ],
    "application/x-glulx": [
      "ulx"
    ],
    "application/x-gnumeric": [
      "gnumeric"
    ],
    "application/x-gramps-xml": [
      "gramps"
    ],
    "application/x-gtar": [
      "gtar"
    ],
    "application/x-hdf": [
      "hdf"
    ],
    "application/x-install-instructions": [
      "install"
    ],
    "application/x-iso9660-image": [
      "iso"
    ],
    "application/x-java-jnlp-file": [
      "jnlp"
    ],
    "application/x-latex": [
      "latex"
    ],
    "application/x-lua-bytecode": [
      "luac"
    ],
    "application/x-lzh-compressed": [
      "lzh",
      "lha"
    ],
    "application/x-mie": [
      "mie"
    ],
    "application/x-mobipocket-ebook": [
      "prc",
      "mobi"
    ],
    "application/x-ms-application": [
      "application"
    ],
    "application/x-ms-shortcut": [
      "lnk"
    ],
    "application/x-ms-wmd": [
      "wmd"
    ],
    "application/x-ms-wmz": [
      "wmz"
    ],
    "application/x-ms-xbap": [
      "xbap"
    ],
    "application/x-msaccess": [
      "mdb"
    ],
    "application/x-msbinder": [
      "obd"
    ],
    "application/x-mscardfile": [
      "crd"
    ],
    "application/x-msclip": [
      "clp"
    ],
    "application/x-msdownload": [
      "exe",
      "dll",
      "com",
      "bat",
      "msi"
    ],
    "application/x-msmediaview": [
      "mvb",
      "m13",
      "m14"
    ],
    "application/x-msmetafile": [
      "wmf",
      "wmz",
      "emf",
      "emz"
    ],
    "application/x-msmoney": [
      "mny"
    ],
    "application/x-mspublisher": [
      "pub"
    ],
    "application/x-msschedule": [
      "scd"
    ],
    "application/x-msterminal": [
      "trm"
    ],
    "application/x-mswrite": [
      "wri"
    ],
    "application/x-netcdf": [
      "nc",
      "cdf"
    ],
    "application/x-nzb": [
      "nzb"
    ],
    "application/x-pkcs12": [
      "p12",
      "pfx"
    ],
    "application/x-pkcs7-certificates": [
      "p7b",
      "spc"
    ],
    "application/x-pkcs7-certreqresp": [
      "p7r"
    ],
    "application/x-rar-compressed": [
      "rar"
    ],
    "application/x-research-info-systems": [
      "ris"
    ],
    "application/x-sh": [
      "sh"
    ],
    "application/x-shar": [
      "shar"
    ],
    "application/x-shockwave-flash": [
      "swf"
    ],
    "application/x-silverlight-app": [
      "xap"
    ],
    "application/x-sql": [
      "sql"
    ],
    "application/x-stuffit": [
      "sit"
    ],
    "application/x-stuffitx": [
      "sitx"
    ],
    "application/x-subrip": [
      "srt"
    ],
    "application/x-sv4cpio": [
      "sv4cpio"
    ],
    "application/x-sv4crc": [
      "sv4crc"
    ],
    "application/x-t3vm-image": [
      "t3"
    ],
    "application/x-tads": [
      "gam"
    ],
    "application/x-tar": [
      "tar"
    ],
    "application/x-tcl": [
      "tcl"
    ],
    "application/x-tex": [
      "tex"
    ],
    "application/x-tex-tfm": [
      "tfm"
    ],
    "application/x-texinfo": [
      "texinfo",
      "texi"
    ],
    "application/x-tgif": [
      "obj"
    ],
    "application/x-ustar": [
      "ustar"
    ],
    "application/x-wais-source": [
      "src"
    ],
    "application/x-web-app-manifest+json": [
      "webapp"
    ],
    "application/x-x509-ca-cert": [
      "der",
      "crt"
    ],
    "application/x-xfig": [
      "fig"
    ],
    "application/x-xliff+xml": [
      "xlf"
    ],
    "application/x-xpinstall": [
      "xpi"
    ],
    "application/x-xz": [
      "xz"
    ],
    "application/x-zmachine": [
      "z1",
      "z2",
      "z3",
      "z4",
      "z5",
      "z6",
      "z7",
      "z8"
    ],
    "application/xaml+xml": [
      "xaml"
    ],
    "application/xcap-diff+xml": [
      "xdf"
    ],
    "application/xenc+xml": [
      "xenc"
    ],
    "application/xhtml+xml": [
      "xhtml",
      "xht"
    ],
    "application/xml": [
      "xml",
      "xsl",
      "xsd"
    ],
    "application/xml-dtd": [
      "dtd"
    ],
    "application/xop+xml": [
      "xop"
    ],
    "application/xproc+xml": [
      "xpl"
    ],
    "application/xslt+xml": [
      "xslt"
    ],
    "application/xspf+xml": [
      "xspf"
    ],
    "application/xv+xml": [
      "mxml",
      "xhvml",
      "xvml",
      "xvm"
    ],
    "application/yang": [
      "yang"
    ],
    "application/yin+xml": [
      "yin"
    ],
    "application/zip": [
      "zip"
    ],
    "audio/adpcm": [
      "adp"
    ],
    "audio/basic": [
      "au",
      "snd"
    ],
    "audio/midi": [
      "mid",
      "midi",
      "kar",
      "rmi"
    ],
    "audio/mp4": [
      "mp4a",
      "m4a"
    ],
    "audio/mpeg": [
      "mpga",
      "mp2",
      "mp2a",
      "mp3",
      "m2a",
      "m3a"
    ],
    "audio/ogg": [
      "oga",
      "ogg",
      "spx"
    ],
    "audio/s3m": [
      "s3m"
    ],
    "audio/silk": [
      "sil"
    ],
    "audio/vnd.dece.audio": [
      "uva",
      "uvva"
    ],
    "audio/vnd.digital-winds": [
      "eol"
    ],
    "audio/vnd.dra": [
      "dra"
    ],
    "audio/vnd.dts": [
      "dts"
    ],
    "audio/vnd.dts.hd": [
      "dtshd"
    ],
    "audio/vnd.lucent.voice": [
      "lvp"
    ],
    "audio/vnd.ms-playready.media.pya": [
      "pya"
    ],
    "audio/vnd.nuera.ecelp4800": [
      "ecelp4800"
    ],
    "audio/vnd.nuera.ecelp7470": [
      "ecelp7470"
    ],
    "audio/vnd.nuera.ecelp9600": [
      "ecelp9600"
    ],
    "audio/vnd.rip": [
      "rip"
    ],
    "audio/webm": [
      "weba"
    ],
    "audio/x-aac": [
      "aac"
    ],
    "audio/x-aiff": [
      "aif",
      "aiff",
      "aifc"
    ],
    "audio/x-caf": [
      "caf"
    ],
    "audio/x-flac": [
      "flac"
    ],
    "audio/x-matroska": [
      "mka"
    ],
    "audio/x-mpegurl": [
      "m3u"
    ],
    "audio/x-ms-wax": [
      "wax"
    ],
    "audio/x-ms-wma": [
      "wma"
    ],
    "audio/x-pn-realaudio": [
      "ram",
      "ra"
    ],
    "audio/x-pn-realaudio-plugin": [
      "rmp"
    ],
    "audio/x-wav": [
      "wav"
    ],
    "audio/xm": [
      "xm"
    ],
    "chemical/x-cdx": [
      "cdx"
    ],
    "chemical/x-cif": [
      "cif"
    ],
    "chemical/x-cmdf": [
      "cmdf"
    ],
    "chemical/x-cml": [
      "cml"
    ],
    "chemical/x-csml": [
      "csml"
    ],
    "chemical/x-xyz": [
      "xyz"
    ],
    "font/opentype": [
      "otf"
    ],
    "image/bmp": [
      "bmp"
    ],
    "image/cgm": [
      "cgm"
    ],
    "image/g3fax": [
      "g3"
    ],
    "image/gif": [
      "gif"
    ],
    "image/ief": [
      "ief"
    ],
    "image/jpeg": [
      "jpeg",
      "jpg",
      "jpe"
    ],
    "image/ktx": [
      "ktx"
    ],
    "image/png": [
      "png"
    ],
    "image/prs.btif": [
      "btif"
    ],
    "image/sgi": [
      "sgi"
    ],
    "image/svg+xml": [
      "svg",
      "svgz"
    ],
    "image/tiff": [
      "tiff",
      "tif"
    ],
    "image/vnd.adobe.photoshop": [
      "psd"
    ],
    "image/vnd.dece.graphic": [
      "uvi",
      "uvvi",
      "uvg",
      "uvvg"
    ],
    "image/vnd.djvu": [
      "djvu",
      "djv"
    ],
    "image/vnd.dvb.subtitle": [
      "sub"
    ],
    "image/vnd.dwg": [
      "dwg"
    ],
    "image/vnd.dxf": [
      "dxf"
    ],
    "image/vnd.fastbidsheet": [
      "fbs"
    ],
    "image/vnd.fpx": [
      "fpx"
    ],
    "image/vnd.fst": [
      "fst"
    ],
    "image/vnd.fujixerox.edmics-mmr": [
      "mmr"
    ],
    "image/vnd.fujixerox.edmics-rlc": [
      "rlc"
    ],
    "image/vnd.ms-modi": [
      "mdi"
    ],
    "image/vnd.ms-photo": [
      "wdp"
    ],
    "image/vnd.net-fpx": [
      "npx"
    ],
    "image/vnd.wap.wbmp": [
      "wbmp"
    ],
    "image/vnd.xiff": [
      "xif"
    ],
    "image/webp": [
      "webp"
    ],
    "image/x-3ds": [
      "3ds"
    ],
    "image/x-cmu-raster": [
      "ras"
    ],
    "image/x-cmx": [
      "cmx"
    ],
    "image/x-freehand": [
      "fh",
      "fhc",
      "fh4",
      "fh5",
      "fh7"
    ],
    "image/x-icon": [
      "ico"
    ],
    "image/x-mrsid-image": [
      "sid"
    ],
    "image/x-pcx": [
      "pcx"
    ],
    "image/x-pict": [
      "pic",
      "pct"
    ],
    "image/x-portable-anymap": [
      "pnm"
    ],
    "image/x-portable-bitmap": [
      "pbm"
    ],
    "image/x-portable-graymap": [
      "pgm"
    ],
    "image/x-portable-pixmap": [
      "ppm"
    ],
    "image/x-rgb": [
      "rgb"
    ],
    "image/x-tga": [
      "tga"
    ],
    "image/x-xbitmap": [
      "xbm"
    ],
    "image/x-xpixmap": [
      "xpm"
    ],
    "image/x-xwindowdump": [
      "xwd"
    ],
    "message/rfc822": [
      "eml",
      "mime"
    ],
    "model/iges": [
      "igs",
      "iges"
    ],
    "model/mesh": [
      "msh",
      "mesh",
      "silo"
    ],
    "model/vnd.collada+xml": [
      "dae"
    ],
    "model/vnd.dwf": [
      "dwf"
    ],
    "model/vnd.gdl": [
      "gdl"
    ],
    "model/vnd.gtw": [
      "gtw"
    ],
    "model/vnd.mts": [
      "mts"
    ],
    "model/vnd.vtu": [
      "vtu"
    ],
    "model/vrml": [
      "wrl",
      "vrml"
    ],
    "model/x3d+binary": [
      "x3db",
      "x3dbz"
    ],
    "model/x3d+vrml": [
      "x3dv",
      "x3dvz"
    ],
    "model/x3d+xml": [
      "x3d",
      "x3dz"
    ],
    "text/cache-manifest": [
      "appcache",
      "manifest"
    ],
    "text/calendar": [
      "ics",
      "ifb"
    ],
    "text/coffeescript": [
      "coffee"
    ],
    "text/css": [
      "css"
    ],
    "text/csv": [
      "csv"
    ],
    "text/hjson": [
      "hjson"
    ],
    "text/html": [
      "html",
      "htm"
    ],
    "text/jade": [
      "jade"
    ],
    "text/jsx": [
      "jsx"
    ],
    "text/less": [
      "less"
    ],
    "text/n3": [
      "n3"
    ],
    "text/plain": [
      "txt",
      "text",
      "conf",
      "def",
      "list",
      "log",
      "in",
      "ini"
    ],
    "text/prs.lines.tag": [
      "dsc"
    ],
    "text/richtext": [
      "rtx"
    ],
    "text/sgml": [
      "sgml",
      "sgm"
    ],
    "text/stylus": [
      "stylus",
      "styl"
    ],
    "text/tab-separated-values": [
      "tsv"
    ],
    "text/troff": [
      "t",
      "tr",
      "roff",
      "man",
      "me",
      "ms"
    ],
    "text/turtle": [
      "ttl"
    ],
    "text/uri-list": [
      "uri",
      "uris",
      "urls"
    ],
    "text/vcard": [
      "vcard"
    ],
    "text/vnd.curl": [
      "curl"
    ],
    "text/vnd.curl.dcurl": [
      "dcurl"
    ],
    "text/vnd.curl.mcurl": [
      "mcurl"
    ],
    "text/vnd.curl.scurl": [
      "scurl"
    ],
    "text/vnd.dvb.subtitle": [
      "sub"
    ],
    "text/vnd.fly": [
      "fly"
    ],
    "text/vnd.fmi.flexstor": [
      "flx"
    ],
    "text/vnd.graphviz": [
      "gv"
    ],
    "text/vnd.in3d.3dml": [
      "3dml"
    ],
    "text/vnd.in3d.spot": [
      "spot"
    ],
    "text/vnd.sun.j2me.app-descriptor": [
      "jad"
    ],
    "text/vnd.wap.wml": [
      "wml"
    ],
    "text/vnd.wap.wmlscript": [
      "wmls"
    ],
    "text/vtt": [
      "vtt"
    ],
    "text/x-asm": [
      "s",
      "asm"
    ],
    "text/x-c": [
      "c",
      "cc",
      "cxx",
      "cpp",
      "h",
      "hh",
      "dic"
    ],
    "text/x-component": [
      "htc"
    ],
    "text/x-fortran": [
      "f",
      "for",
      "f77",
      "f90"
    ],
    "text/x-handlebars-template": [
      "hbs"
    ],
    "text/x-java-source": [
      "java"
    ],
    "text/x-lua": [
      "lua"
    ],
    "text/x-markdown": [
      "markdown",
      "md",
      "mkd"
    ],
    "text/x-nfo": [
      "nfo"
    ],
    "text/x-opml": [
      "opml"
    ],
    "text/x-pascal": [
      "p",
      "pas"
    ],
    "text/x-sass": [
      "sass"
    ],
    "text/x-scss": [
      "scss"
    ],
    "text/x-setext": [
      "etx"
    ],
    "text/x-sfv": [
      "sfv"
    ],
    "text/x-uuencode": [
      "uu"
    ],
    "text/x-vcalendar": [
      "vcs"
    ],
    "text/x-vcard": [
      "vcf"
    ],
    "text/yaml": [
      "yaml",
      "yml"
    ],
    "video/3gpp": [
      "3gp"
    ],
    "video/3gpp2": [
      "3g2"
    ],
    "video/h261": [
      "h261"
    ],
    "video/h263": [
      "h263"
    ],
    "video/h264": [
      "h264"
    ],
    "video/jpeg": [
      "jpgv"
    ],
    "video/jpm": [
      "jpm",
      "jpgm"
    ],
    "video/mj2": [
      "mj2",
      "mjp2"
    ],
    "video/mp2t": [
      "ts"
    ],
    "video/mp4": [
      "mp4",
      "mp4v",
      "mpg4"
    ],
    "video/mpeg": [
      "mpeg",
      "mpg",
      "mpe",
      "m1v",
      "m2v"
    ],
    "video/ogg": [
      "ogv"
    ],
    "video/quicktime": [
      "qt",
      "mov"
    ],
    "video/vnd.dece.hd": [
      "uvh",
      "uvvh"
    ],
    "video/vnd.dece.mobile": [
      "uvm",
      "uvvm"
    ],
    "video/vnd.dece.pd": [
      "uvp",
      "uvvp"
    ],
    "video/vnd.dece.sd": [
      "uvs",
      "uvvs"
    ],
    "video/vnd.dece.video": [
      "uvv",
      "uvvv"
    ],
    "video/vnd.dvb.file": [
      "dvb"
    ],
    "video/vnd.fvt": [
      "fvt"
    ],
    "video/vnd.mpegurl": [
      "mxu",
      "m4u"
    ],
    "video/vnd.ms-playready.media.pyv": [
      "pyv"
    ],
    "video/vnd.uvvu.mp4": [
      "uvu",
      "uvvu"
    ],
    "video/vnd.vivo": [
      "viv"
    ],
    "video/webm": [
      "webm"
    ],
    "video/x-f4v": [
      "f4v"
    ],
    "video/x-fli": [
      "fli"
    ],
    "video/x-flv": [
      "flv"
    ],
    "video/x-m4v": [
      "m4v"
    ],
    "video/x-matroska": [
      "mkv",
      "mk3d",
      "mks"
    ],
    "video/x-mng": [
      "mng"
    ],
    "video/x-ms-asf": [
      "asf",
      "asx"
    ],
    "video/x-ms-vob": [
      "vob"
    ],
    "video/x-ms-wm": [
      "wm"
    ],
    "video/x-ms-wmv": [
      "wmv"
    ],
    "video/x-ms-wmx": [
      "wmx"
    ],
    "video/x-ms-wvx": [
      "wvx"
    ],
    "video/x-msvideo": [
      "avi"
    ],
    "video/x-sgi-movie": [
      "movie"
    ],
    "video/x-smv": [
      "smv"
    ],
    "x-conference/x-cooltalk": [
      "ice"
    ]
  };
});

$__System.registerDynamic("npm:mime@1.3.4/mime.js", ["@node/path", "@node/fs", "npm:mime@1.3.4/types.json", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var path = $__require('@node/path');
  var fs = $__require('@node/fs');
  function Mime() {
    this.types = Object.create(null);
    this.extensions = Object.create(null);
  }
  Mime.prototype.define = function(map) {
    for (var type in map) {
      var exts = map[type];
      for (var i = 0; i < exts.length; i++) {
        if (process.env.DEBUG_MIME && this.types[exts]) {
          console.warn(this._loading.replace(/.*\//, ''), 'changes "' + exts[i] + '" extension type from ' + this.types[exts] + ' to ' + type);
        }
        this.types[exts[i]] = type;
      }
      if (!this.extensions[type]) {
        this.extensions[type] = exts[0];
      }
    }
  };
  Mime.prototype.load = function(file) {
    this._loading = file;
    var map = {},
        content = fs.readFileSync(file, 'ascii'),
        lines = content.split(/[\r\n]+/);
    lines.forEach(function(line) {
      var fields = line.replace(/\s*#.*|^\s*|\s*$/g, '').split(/\s+/);
      map[fields.shift()] = fields;
    });
    this.define(map);
    this._loading = null;
  };
  Mime.prototype.lookup = function(path, fallback) {
    var ext = path.replace(/.*[\.\/\\]/, '').toLowerCase();
    return this.types[ext] || fallback || this.default_type;
  };
  Mime.prototype.extension = function(mimeType) {
    var type = mimeType.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();
    return this.extensions[type];
  };
  var mime = new Mime();
  mime.define($__require('npm:mime@1.3.4/types.json'));
  mime.default_type = mime.lookup('bin');
  mime.Mime = Mime;
  mime.charsets = {lookup: function(mimeType, fallback) {
      return (/^text\//).test(mimeType) ? 'UTF-8' : fallback;
    }};
  module.exports = mime;
  return module.exports;
});

$__System.registerDynamic("npm:source-map@0.5.4/lib/binary-search.js", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  {
    exports.GREATEST_LOWER_BOUND = 1;
    exports.LEAST_UPPER_BOUND = 2;
    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
      var mid = Math.floor((aHigh - aLow) / 2) + aLow;
      var cmp = aCompare(aNeedle, aHaystack[mid], true);
      if (cmp === 0) {
        return mid;
      } else if (cmp > 0) {
        if (aHigh - mid > 1) {
          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
        }
        if (aBias == exports.LEAST_UPPER_BOUND) {
          return aHigh < aHaystack.length ? aHigh : -1;
        } else {
          return mid;
        }
      } else {
        if (mid - aLow > 1) {
          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
        }
        if (aBias == exports.LEAST_UPPER_BOUND) {
          return mid;
        } else {
          return aLow < 0 ? -1 : aLow;
        }
      }
    }
    exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
      if (aHaystack.length === 0) {
        return -1;
      }
      var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports.GREATEST_LOWER_BOUND);
      if (index < 0) {
        return -1;
      }
      while (index - 1 >= 0) {
        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
          break;
        }
        --index;
      }
      return index;
    };
  }
  return module.exports;
});

$__System.registerDynamic("npm:source-map@0.5.4/lib/quick-sort.js", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  {
    function swap(ary, x, y) {
      var temp = ary[x];
      ary[x] = ary[y];
      ary[y] = temp;
    }
    function randomIntInRange(low, high) {
      return Math.round(low + (Math.random() * (high - low)));
    }
    function doQuickSort(ary, comparator, p, r) {
      if (p < r) {
        var pivotIndex = randomIntInRange(p, r);
        var i = p - 1;
        swap(ary, pivotIndex, r);
        var pivot = ary[r];
        for (var j = p; j < r; j++) {
          if (comparator(ary[j], pivot) <= 0) {
            i += 1;
            swap(ary, i, j);
          }
        }
        swap(ary, i + 1, j);
        var q = i + 1;
        doQuickSort(ary, comparator, p, q - 1);
        doQuickSort(ary, comparator, q + 1, r);
      }
    }
    exports.quickSort = function(ary, comparator) {
      doQuickSort(ary, comparator, 0, ary.length - 1);
    };
  }
  return module.exports;
});

$__System.registerDynamic("npm:source-map@0.5.4/lib/source-map-consumer.js", ["npm:source-map@0.5.4/lib/util.js", "npm:source-map@0.5.4/lib/binary-search.js", "npm:source-map@0.5.4/lib/array-set.js", "npm:source-map@0.5.4/lib/base64-vlq.js", "npm:source-map@0.5.4/lib/quick-sort.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  {
    var util = $__require('npm:source-map@0.5.4/lib/util.js');
    var binarySearch = $__require('npm:source-map@0.5.4/lib/binary-search.js');
    var ArraySet = $__require('npm:source-map@0.5.4/lib/array-set.js').ArraySet;
    var base64VLQ = $__require('npm:source-map@0.5.4/lib/base64-vlq.js');
    var quickSort = $__require('npm:source-map@0.5.4/lib/quick-sort.js').quickSort;
    function SourceMapConsumer(aSourceMap) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === 'string') {
        sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
      }
      return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap) : new BasicSourceMapConsumer(sourceMap);
    }
    SourceMapConsumer.fromSourceMap = function(aSourceMap) {
      return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
    };
    SourceMapConsumer.prototype._version = 3;
    SourceMapConsumer.prototype.__generatedMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {get: function() {
        if (!this.__generatedMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__generatedMappings;
      }});
    SourceMapConsumer.prototype.__originalMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {get: function() {
        if (!this.__originalMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }
        return this.__originalMappings;
      }});
    SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
      var c = aStr.charAt(index);
      return c === ";" || c === ",";
    };
    SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      throw new Error("Subclasses must implement _parseMappings");
    };
    SourceMapConsumer.GENERATED_ORDER = 1;
    SourceMapConsumer.ORIGINAL_ORDER = 2;
    SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
    SourceMapConsumer.LEAST_UPPER_BOUND = 2;
    SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
      var context = aContext || null;
      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
      var mappings;
      switch (order) {
        case SourceMapConsumer.GENERATED_ORDER:
          mappings = this._generatedMappings;
          break;
        case SourceMapConsumer.ORIGINAL_ORDER:
          mappings = this._originalMappings;
          break;
        default:
          throw new Error("Unknown order of iteration.");
      }
      var sourceRoot = this.sourceRoot;
      mappings.map(function(mapping) {
        var source = mapping.source === null ? null : this._sources.at(mapping.source);
        if (source != null && sourceRoot != null) {
          source = util.join(sourceRoot, source);
        }
        return {
          source: source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name === null ? null : this._names.at(mapping.name)
        };
      }, this).forEach(aCallback, context);
    };
    SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
      var line = util.getArg(aArgs, 'line');
      var needle = {
        source: util.getArg(aArgs, 'source'),
        originalLine: line,
        originalColumn: util.getArg(aArgs, 'column', 0)
      };
      if (this.sourceRoot != null) {
        needle.source = util.relative(this.sourceRoot, needle.source);
      }
      if (!this._sources.has(needle.source)) {
        return [];
      }
      needle.source = this._sources.indexOf(needle.source);
      var mappings = [];
      var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);
      if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (aArgs.column === undefined) {
          var originalLine = mapping.originalLine;
          while (mapping && mapping.originalLine === originalLine) {
            mappings.push({
              line: util.getArg(mapping, 'generatedLine', null),
              column: util.getArg(mapping, 'generatedColumn', null),
              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
            });
            mapping = this._originalMappings[++index];
          }
        } else {
          var originalColumn = mapping.originalColumn;
          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
            mappings.push({
              line: util.getArg(mapping, 'generatedLine', null),
              column: util.getArg(mapping, 'generatedColumn', null),
              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
            });
            mapping = this._originalMappings[++index];
          }
        }
      }
      return mappings;
    };
    exports.SourceMapConsumer = SourceMapConsumer;
    function BasicSourceMapConsumer(aSourceMap) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === 'string') {
        sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
      }
      var version = util.getArg(sourceMap, 'version');
      var sources = util.getArg(sourceMap, 'sources');
      var names = util.getArg(sourceMap, 'names', []);
      var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
      var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
      var mappings = util.getArg(sourceMap, 'mappings');
      var file = util.getArg(sourceMap, 'file', null);
      if (version != this._version) {
        throw new Error('Unsupported version: ' + version);
      }
      sources = sources.map(util.normalize).map(function(source) {
        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
      });
      this._names = ArraySet.fromArray(names, true);
      this._sources = ArraySet.fromArray(sources, true);
      this.sourceRoot = sourceRoot;
      this.sourcesContent = sourcesContent;
      this._mappings = mappings;
      this.file = file;
    }
    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
    BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap) {
      var smc = Object.create(BasicSourceMapConsumer.prototype);
      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
      smc.sourceRoot = aSourceMap._sourceRoot;
      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
      smc.file = aSourceMap._file;
      var generatedMappings = aSourceMap._mappings.toArray().slice();
      var destGeneratedMappings = smc.__generatedMappings = [];
      var destOriginalMappings = smc.__originalMappings = [];
      for (var i = 0,
          length = generatedMappings.length; i < length; i++) {
        var srcMapping = generatedMappings[i];
        var destMapping = new Mapping;
        destMapping.generatedLine = srcMapping.generatedLine;
        destMapping.generatedColumn = srcMapping.generatedColumn;
        if (srcMapping.source) {
          destMapping.source = sources.indexOf(srcMapping.source);
          destMapping.originalLine = srcMapping.originalLine;
          destMapping.originalColumn = srcMapping.originalColumn;
          if (srcMapping.name) {
            destMapping.name = names.indexOf(srcMapping.name);
          }
          destOriginalMappings.push(destMapping);
        }
        destGeneratedMappings.push(destMapping);
      }
      quickSort(smc.__originalMappings, util.compareByOriginalPositions);
      return smc;
    };
    BasicSourceMapConsumer.prototype._version = 3;
    Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {get: function() {
        return this._sources.toArray().map(function(s) {
          return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
        }, this);
      }});
    function Mapping() {
      this.generatedLine = 0;
      this.generatedColumn = 0;
      this.source = null;
      this.originalLine = null;
      this.originalColumn = null;
      this.name = null;
    }
    BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      var generatedLine = 1;
      var previousGeneratedColumn = 0;
      var previousOriginalLine = 0;
      var previousOriginalColumn = 0;
      var previousSource = 0;
      var previousName = 0;
      var length = aStr.length;
      var index = 0;
      var cachedSegments = {};
      var temp = {};
      var originalMappings = [];
      var generatedMappings = [];
      var mapping,
          str,
          segment,
          end,
          value;
      while (index < length) {
        if (aStr.charAt(index) === ';') {
          generatedLine++;
          index++;
          previousGeneratedColumn = 0;
        } else if (aStr.charAt(index) === ',') {
          index++;
        } else {
          mapping = new Mapping();
          mapping.generatedLine = generatedLine;
          for (end = index; end < length; end++) {
            if (this._charIsMappingSeparator(aStr, end)) {
              break;
            }
          }
          str = aStr.slice(index, end);
          segment = cachedSegments[str];
          if (segment) {
            index += str.length;
          } else {
            segment = [];
            while (index < end) {
              base64VLQ.decode(aStr, index, temp);
              value = temp.value;
              index = temp.rest;
              segment.push(value);
            }
            if (segment.length === 2) {
              throw new Error('Found a source, but no line and column');
            }
            if (segment.length === 3) {
              throw new Error('Found a source and line, but no column');
            }
            cachedSegments[str] = segment;
          }
          mapping.generatedColumn = previousGeneratedColumn + segment[0];
          previousGeneratedColumn = mapping.generatedColumn;
          if (segment.length > 1) {
            mapping.source = previousSource + segment[1];
            previousSource += segment[1];
            mapping.originalLine = previousOriginalLine + segment[2];
            previousOriginalLine = mapping.originalLine;
            mapping.originalLine += 1;
            mapping.originalColumn = previousOriginalColumn + segment[3];
            previousOriginalColumn = mapping.originalColumn;
            if (segment.length > 4) {
              mapping.name = previousName + segment[4];
              previousName += segment[4];
            }
          }
          generatedMappings.push(mapping);
          if (typeof mapping.originalLine === 'number') {
            originalMappings.push(mapping);
          }
        }
      }
      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
      this.__generatedMappings = generatedMappings;
      quickSort(originalMappings, util.compareByOriginalPositions);
      this.__originalMappings = originalMappings;
    };
    BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
      if (aNeedle[aLineName] <= 0) {
        throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);
      }
      if (aNeedle[aColumnName] < 0) {
        throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);
      }
      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
    };
    BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
      for (var index = 0; index < this._generatedMappings.length; ++index) {
        var mapping = this._generatedMappings[index];
        if (index + 1 < this._generatedMappings.length) {
          var nextMapping = this._generatedMappings[index + 1];
          if (mapping.generatedLine === nextMapping.generatedLine) {
            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
            continue;
          }
        }
        mapping.lastGeneratedColumn = Infinity;
      }
    };
    BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
      };
      var index = this._findMapping(needle, this._generatedMappings, "generatedLine", "generatedColumn", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));
      if (index >= 0) {
        var mapping = this._generatedMappings[index];
        if (mapping.generatedLine === needle.generatedLine) {
          var source = util.getArg(mapping, 'source', null);
          if (source !== null) {
            source = this._sources.at(source);
            if (this.sourceRoot != null) {
              source = util.join(this.sourceRoot, source);
            }
          }
          var name = util.getArg(mapping, 'name', null);
          if (name !== null) {
            name = this._names.at(name);
          }
          return {
            source: source,
            line: util.getArg(mapping, 'originalLine', null),
            column: util.getArg(mapping, 'originalColumn', null),
            name: name
          };
        }
      }
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };
    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
      if (!this.sourcesContent) {
        return false;
      }
      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
        return sc == null;
      });
    };
    BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      if (!this.sourcesContent) {
        return null;
      }
      if (this.sourceRoot != null) {
        aSource = util.relative(this.sourceRoot, aSource);
      }
      if (this._sources.has(aSource)) {
        return this.sourcesContent[this._sources.indexOf(aSource)];
      }
      var url;
      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
        var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
        if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
        }
        if ((!url.path || url.path == "/") && this._sources.has("/" + aSource)) {
          return this.sourcesContent[this._sources.indexOf("/" + aSource)];
        }
      }
      if (nullOnMissing) {
        return null;
      } else {
        throw new Error('"' + aSource + '" is not in the SourceMap.');
      }
    };
    BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
      var source = util.getArg(aArgs, 'source');
      if (this.sourceRoot != null) {
        source = util.relative(this.sourceRoot, source);
      }
      if (!this._sources.has(source)) {
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      }
      source = this._sources.indexOf(source);
      var needle = {
        source: source,
        originalLine: util.getArg(aArgs, 'line'),
        originalColumn: util.getArg(aArgs, 'column')
      };
      var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));
      if (index >= 0) {
        var mapping = this._originalMappings[index];
        if (mapping.source === needle.source) {
          return {
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          };
        }
      }
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    };
    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
    function IndexedSourceMapConsumer(aSourceMap) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === 'string') {
        sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
      }
      var version = util.getArg(sourceMap, 'version');
      var sections = util.getArg(sourceMap, 'sections');
      if (version != this._version) {
        throw new Error('Unsupported version: ' + version);
      }
      this._sources = new ArraySet();
      this._names = new ArraySet();
      var lastOffset = {
        line: -1,
        column: 0
      };
      this._sections = sections.map(function(s) {
        if (s.url) {
          throw new Error('Support for url field in sections not implemented.');
        }
        var offset = util.getArg(s, 'offset');
        var offsetLine = util.getArg(offset, 'line');
        var offsetColumn = util.getArg(offset, 'column');
        if (offsetLine < lastOffset.line || (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
          throw new Error('Section offsets must be ordered and non-overlapping.');
        }
        lastOffset = offset;
        return {
          generatedOffset: {
            generatedLine: offsetLine + 1,
            generatedColumn: offsetColumn + 1
          },
          consumer: new SourceMapConsumer(util.getArg(s, 'map'))
        };
      });
    }
    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
    IndexedSourceMapConsumer.prototype._version = 3;
    Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {get: function() {
        var sources = [];
        for (var i = 0; i < this._sections.length; i++) {
          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
            sources.push(this._sections[i].consumer.sources[j]);
          }
        }
        return sources;
      }});
    IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
      };
      var sectionIndex = binarySearch.search(needle, this._sections, function(needle, section) {
        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }
        return (needle.generatedColumn - section.generatedOffset.generatedColumn);
      });
      var section = this._sections[sectionIndex];
      if (!section) {
        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      }
      return section.consumer.originalPositionFor({
        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
        bias: aArgs.bias
      });
    };
    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
      return this._sections.every(function(s) {
        return s.consumer.hasContentsOfAllSources();
      });
    };
    IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var content = section.consumer.sourceContentFor(aSource, true);
        if (content) {
          return content;
        }
      }
      if (nullOnMissing) {
        return null;
      } else {
        throw new Error('"' + aSource + '" is not in the SourceMap.');
      }
    };
    IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
          continue;
        }
        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
        if (generatedPosition) {
          var ret = {
            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
          };
          return ret;
        }
      }
      return {
        line: null,
        column: null
      };
    };
    IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      this.__generatedMappings = [];
      this.__originalMappings = [];
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var sectionMappings = section.consumer._generatedMappings;
        for (var j = 0; j < sectionMappings.length; j++) {
          var mapping = sectionMappings[j];
          var source = section.consumer._sources.at(mapping.source);
          if (section.consumer.sourceRoot !== null) {
            source = util.join(section.consumer.sourceRoot, source);
          }
          this._sources.add(source);
          source = this._sources.indexOf(source);
          var name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);
          var adjustedMapping = {
            source: source,
            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name: name
          };
          this.__generatedMappings.push(adjustedMapping);
          if (typeof adjustedMapping.originalLine === 'number') {
            this.__originalMappings.push(adjustedMapping);
          }
        }
      }
      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
      quickSort(this.__originalMappings, util.compareByOriginalPositions);
    };
    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
  }
  return module.exports;
});

$__System.registerDynamic("npm:source-map@0.5.4/lib/base64.js", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  {
    var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
    exports.encode = function(number) {
      if (0 <= number && number < intToCharMap.length) {
        return intToCharMap[number];
      }
      throw new TypeError("Must be between 0 and 63: " + number);
    };
    exports.decode = function(charCode) {
      var bigA = 65;
      var bigZ = 90;
      var littleA = 97;
      var littleZ = 122;
      var zero = 48;
      var nine = 57;
      var plus = 43;
      var slash = 47;
      var littleOffset = 26;
      var numberOffset = 52;
      if (bigA <= charCode && charCode <= bigZ) {
        return (charCode - bigA);
      }
      if (littleA <= charCode && charCode <= littleZ) {
        return (charCode - littleA + littleOffset);
      }
      if (zero <= charCode && charCode <= nine) {
        return (charCode - zero + numberOffset);
      }
      if (charCode == plus) {
        return 62;
      }
      if (charCode == slash) {
        return 63;
      }
      return -1;
    };
  }
  return module.exports;
});

$__System.registerDynamic("npm:source-map@0.5.4/lib/base64-vlq.js", ["npm:source-map@0.5.4/lib/base64.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  {
    var base64 = $__require('npm:source-map@0.5.4/lib/base64.js');
    var VLQ_BASE_SHIFT = 5;
    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
    var VLQ_BASE_MASK = VLQ_BASE - 1;
    var VLQ_CONTINUATION_BIT = VLQ_BASE;
    function toVLQSigned(aValue) {
      return aValue < 0 ? ((-aValue) << 1) + 1 : (aValue << 1) + 0;
    }
    function fromVLQSigned(aValue) {
      var isNegative = (aValue & 1) === 1;
      var shifted = aValue >> 1;
      return isNegative ? -shifted : shifted;
    }
    exports.encode = function base64VLQ_encode(aValue) {
      var encoded = "";
      var digit;
      var vlq = toVLQSigned(aValue);
      do {
        digit = vlq & VLQ_BASE_MASK;
        vlq >>>= VLQ_BASE_SHIFT;
        if (vlq > 0) {
          digit |= VLQ_CONTINUATION_BIT;
        }
        encoded += base64.encode(digit);
      } while (vlq > 0);
      return encoded;
    };
    exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
      var strLen = aStr.length;
      var result = 0;
      var shift = 0;
      var continuation,
          digit;
      do {
        if (aIndex >= strLen) {
          throw new Error("Expected more digits in base 64 VLQ value.");
        }
        digit = base64.decode(aStr.charCodeAt(aIndex++));
        if (digit === -1) {
          throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
        }
        continuation = !!(digit & VLQ_CONTINUATION_BIT);
        digit &= VLQ_BASE_MASK;
        result = result + (digit << shift);
        shift += VLQ_BASE_SHIFT;
      } while (continuation);
      aOutParam.value = fromVLQSigned(result);
      aOutParam.rest = aIndex;
    };
  }
  return module.exports;
});

$__System.registerDynamic("npm:source-map@0.5.4/lib/array-set.js", ["npm:source-map@0.5.4/lib/util.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  {
    var util = $__require('npm:source-map@0.5.4/lib/util.js');
    var has = Object.prototype.hasOwnProperty;
    function ArraySet() {
      this._array = [];
      this._set = Object.create(null);
    }
    ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
      var set = new ArraySet();
      for (var i = 0,
          len = aArray.length; i < len; i++) {
        set.add(aArray[i], aAllowDuplicates);
      }
      return set;
    };
    ArraySet.prototype.size = function ArraySet_size() {
      return Object.getOwnPropertyNames(this._set).length;
    };
    ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
      var sStr = util.toSetString(aStr);
      var isDuplicate = has.call(this._set, sStr);
      var idx = this._array.length;
      if (!isDuplicate || aAllowDuplicates) {
        this._array.push(aStr);
      }
      if (!isDuplicate) {
        this._set[sStr] = idx;
      }
    };
    ArraySet.prototype.has = function ArraySet_has(aStr) {
      var sStr = util.toSetString(aStr);
      return has.call(this._set, sStr);
    };
    ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
      var sStr = util.toSetString(aStr);
      if (has.call(this._set, sStr)) {
        return this._set[sStr];
      }
      throw new Error('"' + aStr + '" is not in the set.');
    };
    ArraySet.prototype.at = function ArraySet_at(aIdx) {
      if (aIdx >= 0 && aIdx < this._array.length) {
        return this._array[aIdx];
      }
      throw new Error('No element indexed by ' + aIdx);
    };
    ArraySet.prototype.toArray = function ArraySet_toArray() {
      return this._array.slice();
    };
    exports.ArraySet = ArraySet;
  }
  return module.exports;
});

$__System.registerDynamic("npm:source-map@0.5.4/lib/mapping-list.js", ["npm:source-map@0.5.4/lib/util.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  {
    var util = $__require('npm:source-map@0.5.4/lib/util.js');
    function generatedPositionAfter(mappingA, mappingB) {
      var lineA = mappingA.generatedLine;
      var lineB = mappingB.generatedLine;
      var columnA = mappingA.generatedColumn;
      var columnB = mappingB.generatedColumn;
      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
    }
    function MappingList() {
      this._array = [];
      this._sorted = true;
      this._last = {
        generatedLine: -1,
        generatedColumn: 0
      };
    }
    MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
      this._array.forEach(aCallback, aThisArg);
    };
    MappingList.prototype.add = function MappingList_add(aMapping) {
      if (generatedPositionAfter(this._last, aMapping)) {
        this._last = aMapping;
        this._array.push(aMapping);
      } else {
        this._sorted = false;
        this._array.push(aMapping);
      }
    };
    MappingList.prototype.toArray = function MappingList_toArray() {
      if (!this._sorted) {
        this._array.sort(util.compareByGeneratedPositionsInflated);
        this._sorted = true;
      }
      return this._array;
    };
    exports.MappingList = MappingList;
  }
  return module.exports;
});

$__System.registerDynamic("npm:source-map@0.5.4/lib/source-map-generator.js", ["npm:source-map@0.5.4/lib/base64-vlq.js", "npm:source-map@0.5.4/lib/util.js", "npm:source-map@0.5.4/lib/array-set.js", "npm:source-map@0.5.4/lib/mapping-list.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  {
    var base64VLQ = $__require('npm:source-map@0.5.4/lib/base64-vlq.js');
    var util = $__require('npm:source-map@0.5.4/lib/util.js');
    var ArraySet = $__require('npm:source-map@0.5.4/lib/array-set.js').ArraySet;
    var MappingList = $__require('npm:source-map@0.5.4/lib/mapping-list.js').MappingList;
    function SourceMapGenerator(aArgs) {
      if (!aArgs) {
        aArgs = {};
      }
      this._file = util.getArg(aArgs, 'file', null);
      this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
      this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
      this._sources = new ArraySet();
      this._names = new ArraySet();
      this._mappings = new MappingList();
      this._sourcesContents = null;
    }
    SourceMapGenerator.prototype._version = 3;
    SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot: sourceRoot
      });
      aSourceMapConsumer.eachMapping(function(mapping) {
        var newMapping = {generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }};
        if (mapping.source != null) {
          newMapping.source = mapping.source;
          if (sourceRoot != null) {
            newMapping.source = util.relative(sourceRoot, newMapping.source);
          }
          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };
          if (mapping.name != null) {
            newMapping.name = mapping.name;
          }
        }
        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    };
    SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
      var generated = util.getArg(aArgs, 'generated');
      var original = util.getArg(aArgs, 'original', null);
      var source = util.getArg(aArgs, 'source', null);
      var name = util.getArg(aArgs, 'name', null);
      if (!this._skipValidation) {
        this._validateMapping(generated, original, source, name);
      }
      if (source != null && !this._sources.has(source)) {
        this._sources.add(source);
      }
      if (name != null && !this._names.has(name)) {
        this._names.add(name);
      }
      this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source: source,
        name: name
      });
    };
    SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot != null) {
        source = util.relative(this._sourceRoot, source);
      }
      if (aSourceContent != null) {
        if (!this._sourcesContents) {
          this._sourcesContents = Object.create(null);
        }
        this._sourcesContents[util.toSetString(source)] = aSourceContent;
      } else if (this._sourcesContents) {
        delete this._sourcesContents[util.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    };
    SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
          throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' + 'or the source map\'s "file" property. Both were omitted.');
        }
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      if (sourceRoot != null) {
        sourceFile = util.relative(sourceRoot, sourceFile);
      }
      var newSources = new ArraySet();
      var newNames = new ArraySet();
      this._mappings.unsortedForEach(function(mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source != null) {
            mapping.source = original.source;
            if (aSourceMapPath != null) {
              mapping.source = util.join(aSourceMapPath, mapping.source);
            }
            if (sourceRoot != null) {
              mapping.source = util.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name != null) {
              mapping.name = original.name;
            }
          }
        }
        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
          newSources.add(source);
        }
        var name = mapping.name;
        if (name != null && !newNames.has(name)) {
          newNames.add(name);
        }
      }, this);
      this._sources = newSources;
      this._names = newNames;
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aSourceMapPath != null) {
            sourceFile = util.join(aSourceMapPath, sourceFile);
          }
          if (sourceRoot != null) {
            sourceFile = util.relative(sourceRoot, sourceFile);
          }
          this.setSourceContent(sourceFile, content);
        }
      }, this);
    };
    SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
        return;
      } else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aOriginal && 'line' in aOriginal && 'column' in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
        return;
      } else {
        throw new Error('Invalid mapping: ' + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };
    SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result = '';
      var next;
      var mapping;
      var nameIdx;
      var sourceIdx;
      var mappings = this._mappings.toArray();
      for (var i = 0,
          len = mappings.length; i < len; i++) {
        mapping = mappings[i];
        next = '';
        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            next += ';';
            previousGeneratedLine++;
          }
        } else {
          if (i > 0) {
            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
              continue;
            }
            next += ',';
          }
        }
        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;
        if (mapping.source != null) {
          sourceIdx = this._sources.indexOf(mapping.source);
          next += base64VLQ.encode(sourceIdx - previousSource);
          previousSource = sourceIdx;
          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;
          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;
          if (mapping.name != null) {
            nameIdx = this._names.indexOf(mapping.name);
            next += base64VLQ.encode(nameIdx - previousName);
            previousName = nameIdx;
          }
        }
        result += next;
      }
      return result;
    };
    SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
      return aSources.map(function(source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot != null) {
          source = util.relative(aSourceRoot, source);
        }
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
      }, this);
    };
    SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
      var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._file != null) {
        map.file = this._file;
      }
      if (this._sourceRoot != null) {
        map.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
      }
      return map;
    };
    SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
      return JSON.stringify(this.toJSON());
    };
    exports.SourceMapGenerator = SourceMapGenerator;
  }
  return module.exports;
});

$__System.registerDynamic("npm:source-map@0.5.4/lib/util.js", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  {
    function getArg(aArgs, aName, aDefaultValue) {
      if (aName in aArgs) {
        return aArgs[aName];
      } else if (arguments.length === 3) {
        return aDefaultValue;
      } else {
        throw new Error('"' + aName + '" is a required argument.');
      }
    }
    exports.getArg = getArg;
    var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
    var dataUrlRegexp = /^data:.+\,.+$/;
    function urlParse(aUrl) {
      var match = aUrl.match(urlRegexp);
      if (!match) {
        return null;
      }
      return {
        scheme: match[1],
        auth: match[2],
        host: match[3],
        port: match[4],
        path: match[5]
      };
    }
    exports.urlParse = urlParse;
    function urlGenerate(aParsedUrl) {
      var url = '';
      if (aParsedUrl.scheme) {
        url += aParsedUrl.scheme + ':';
      }
      url += '//';
      if (aParsedUrl.auth) {
        url += aParsedUrl.auth + '@';
      }
      if (aParsedUrl.host) {
        url += aParsedUrl.host;
      }
      if (aParsedUrl.port) {
        url += ":" + aParsedUrl.port;
      }
      if (aParsedUrl.path) {
        url += aParsedUrl.path;
      }
      return url;
    }
    exports.urlGenerate = urlGenerate;
    function normalize(aPath) {
      var path = aPath;
      var url = urlParse(aPath);
      if (url) {
        if (!url.path) {
          return aPath;
        }
        path = url.path;
      }
      var isAbsolute = exports.isAbsolute(path);
      var parts = path.split(/\/+/);
      for (var part,
          up = 0,
          i = parts.length - 1; i >= 0; i--) {
        part = parts[i];
        if (part === '.') {
          parts.splice(i, 1);
        } else if (part === '..') {
          up++;
        } else if (up > 0) {
          if (part === '') {
            parts.splice(i + 1, up);
            up = 0;
          } else {
            parts.splice(i, 2);
            up--;
          }
        }
      }
      path = parts.join('/');
      if (path === '') {
        path = isAbsolute ? '/' : '.';
      }
      if (url) {
        url.path = path;
        return urlGenerate(url);
      }
      return path;
    }
    exports.normalize = normalize;
    function join(aRoot, aPath) {
      if (aRoot === "") {
        aRoot = ".";
      }
      if (aPath === "") {
        aPath = ".";
      }
      var aPathUrl = urlParse(aPath);
      var aRootUrl = urlParse(aRoot);
      if (aRootUrl) {
        aRoot = aRootUrl.path || '/';
      }
      if (aPathUrl && !aPathUrl.scheme) {
        if (aRootUrl) {
          aPathUrl.scheme = aRootUrl.scheme;
        }
        return urlGenerate(aPathUrl);
      }
      if (aPathUrl || aPath.match(dataUrlRegexp)) {
        return aPath;
      }
      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
        aRootUrl.host = aPath;
        return urlGenerate(aRootUrl);
      }
      var joined = aPath.charAt(0) === '/' ? aPath : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);
      if (aRootUrl) {
        aRootUrl.path = joined;
        return urlGenerate(aRootUrl);
      }
      return joined;
    }
    exports.join = join;
    exports.isAbsolute = function(aPath) {
      return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);
    };
    function relative(aRoot, aPath) {
      if (aRoot === "") {
        aRoot = ".";
      }
      aRoot = aRoot.replace(/\/$/, '');
      var level = 0;
      while (aPath.indexOf(aRoot + '/') !== 0) {
        var index = aRoot.lastIndexOf("/");
        if (index < 0) {
          return aPath;
        }
        aRoot = aRoot.slice(0, index);
        if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
          return aPath;
        }
        ++level;
      }
      return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
    }
    exports.relative = relative;
    var supportsNullProto = (function() {
      var obj = Object.create(null);
      return !('__proto__' in obj);
    }());
    function toSetString(aStr) {
      if (isProtoString(aStr)) {
        return '$' + aStr;
      }
      return aStr;
    }
    exports.toSetString = supportsNullProto ? identity : toSetString;
    function fromSetString(aStr) {
      if (isProtoString(aStr)) {
        return aStr.slice(1);
      }
      return aStr;
    }
    exports.fromSetString = supportsNullProto ? identity : fromSetString;
    function isProtoString(s) {
      if (!s) {
        return false;
      }
      var length = s.length;
      if (length < 9) {
        return false;
      }
      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {
        return false;
      }
      for (var i = length - 10; i >= 0; i--) {
        if (s.charCodeAt(i) !== 36) {
          return false;
        }
      }
      return true;
    }
    function identity(s) {
      return s;
    }
    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
      var cmp = mappingA.source - mappingB.source;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0 || onlyCompareOriginal) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      return mappingA.name - mappingB.name;
    }
    exports.compareByOriginalPositions = compareByOriginalPositions;
    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0 || onlyCompareGenerated) {
        return cmp;
      }
      cmp = mappingA.source - mappingB.source;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }
      return mappingA.name - mappingB.name;
    }
    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
    function strcmp(aStr1, aStr2) {
      if (aStr1 === aStr2) {
        return 0;
      }
      if (aStr1 > aStr2) {
        return 1;
      }
      return -1;
    }
    function compareByGeneratedPositionsInflated(mappingA, mappingB) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
  }
  return module.exports;
});

$__System.registerDynamic("npm:source-map@0.5.4/lib/source-node.js", ["npm:source-map@0.5.4/lib/source-map-generator.js", "npm:source-map@0.5.4/lib/util.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  {
    var SourceMapGenerator = $__require('npm:source-map@0.5.4/lib/source-map-generator.js').SourceMapGenerator;
    var util = $__require('npm:source-map@0.5.4/lib/util.js');
    var REGEX_NEWLINE = /(\r?\n)/;
    var NEWLINE_CODE = 10;
    var isSourceNode = "$$$isSourceNode$$$";
    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
      this.children = [];
      this.sourceContents = {};
      this.line = aLine == null ? null : aLine;
      this.column = aColumn == null ? null : aColumn;
      this.source = aSource == null ? null : aSource;
      this.name = aName == null ? null : aName;
      this[isSourceNode] = true;
      if (aChunks != null)
        this.add(aChunks);
    }
    SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
      var node = new SourceNode();
      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
      var shiftNextLine = function() {
        var lineContents = remainingLines.shift();
        var newLine = remainingLines.shift() || "";
        return lineContents + newLine;
      };
      var lastGeneratedLine = 1,
          lastGeneratedColumn = 0;
      var lastMapping = null;
      aSourceMapConsumer.eachMapping(function(mapping) {
        if (lastMapping !== null) {
          if (lastGeneratedLine < mapping.generatedLine) {
            addMappingWithCode(lastMapping, shiftNextLine());
            lastGeneratedLine++;
            lastGeneratedColumn = 0;
          } else {
            var nextLine = remainingLines[0];
            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
            remainingLines[0] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
            addMappingWithCode(lastMapping, code);
            lastMapping = mapping;
            return;
          }
        }
        while (lastGeneratedLine < mapping.generatedLine) {
          node.add(shiftNextLine());
          lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[0];
          node.add(nextLine.substr(0, mapping.generatedColumn));
          remainingLines[0] = nextLine.substr(mapping.generatedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this);
      if (remainingLines.length > 0) {
        if (lastMapping) {
          addMappingWithCode(lastMapping, shiftNextLine());
        }
        node.add(remainingLines.join(""));
      }
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aRelativePath != null) {
            sourceFile = util.join(aRelativePath, sourceFile);
          }
          node.setSourceContent(sourceFile, content);
        }
      });
      return node;
      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === undefined) {
          node.add(code);
        } else {
          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
          node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));
        }
      }
    };
    SourceNode.prototype.add = function SourceNode_add(aChunk) {
      if (Array.isArray(aChunk)) {
        aChunk.forEach(function(chunk) {
          this.add(chunk);
        }, this);
      } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
        if (aChunk) {
          this.children.push(aChunk);
        }
      } else {
        throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
      }
      return this;
    };
    SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
      if (Array.isArray(aChunk)) {
        for (var i = aChunk.length - 1; i >= 0; i--) {
          this.prepend(aChunk[i]);
        }
      } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
        this.children.unshift(aChunk);
      } else {
        throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
      }
      return this;
    };
    SourceNode.prototype.walk = function SourceNode_walk(aFn) {
      var chunk;
      for (var i = 0,
          len = this.children.length; i < len; i++) {
        chunk = this.children[i];
        if (chunk[isSourceNode]) {
          chunk.walk(aFn);
        } else {
          if (chunk !== '') {
            aFn(chunk, {
              source: this.source,
              line: this.line,
              column: this.column,
              name: this.name
            });
          }
        }
      }
    };
    SourceNode.prototype.join = function SourceNode_join(aSep) {
      var newChildren;
      var i;
      var len = this.children.length;
      if (len > 0) {
        newChildren = [];
        for (i = 0; i < len - 1; i++) {
          newChildren.push(this.children[i]);
          newChildren.push(aSep);
        }
        newChildren.push(this.children[i]);
        this.children = newChildren;
      }
      return this;
    };
    SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
      var lastChild = this.children[this.children.length - 1];
      if (lastChild[isSourceNode]) {
        lastChild.replaceRight(aPattern, aReplacement);
      } else if (typeof lastChild === 'string') {
        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
      } else {
        this.children.push(''.replace(aPattern, aReplacement));
      }
      return this;
    };
    SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
    };
    SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
      for (var i = 0,
          len = this.children.length; i < len; i++) {
        if (this.children[i][isSourceNode]) {
          this.children[i].walkSourceContents(aFn);
        }
      }
      var sources = Object.keys(this.sourceContents);
      for (var i = 0,
          len = sources.length; i < len; i++) {
        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
      }
    };
    SourceNode.prototype.toString = function SourceNode_toString() {
      var str = "";
      this.walk(function(chunk) {
        str += chunk;
      });
      return str;
    };
    SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
      var generated = {
        code: "",
        line: 1,
        column: 0
      };
      var map = new SourceMapGenerator(aArgs);
      var sourceMappingActive = false;
      var lastOriginalSource = null;
      var lastOriginalLine = null;
      var lastOriginalColumn = null;
      var lastOriginalName = null;
      this.walk(function(chunk, original) {
        generated.code += chunk;
        if (original.source !== null && original.line !== null && original.column !== null) {
          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
          lastOriginalSource = original.source;
          lastOriginalLine = original.line;
          lastOriginalColumn = original.column;
          lastOriginalName = original.name;
          sourceMappingActive = true;
        } else if (sourceMappingActive) {
          map.addMapping({generated: {
              line: generated.line,
              column: generated.column
            }});
          lastOriginalSource = null;
          sourceMappingActive = false;
        }
        for (var idx = 0,
            length = chunk.length; idx < length; idx++) {
          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
            generated.line++;
            generated.column = 0;
            if (idx + 1 === length) {
              lastOriginalSource = null;
              sourceMappingActive = false;
            } else if (sourceMappingActive) {
              map.addMapping({
                source: original.source,
                original: {
                  line: original.line,
                  column: original.column
                },
                generated: {
                  line: generated.line,
                  column: generated.column
                },
                name: original.name
              });
            }
          } else {
            generated.column++;
          }
        }
      });
      this.walkSourceContents(function(sourceFile, sourceContent) {
        map.setSourceContent(sourceFile, sourceContent);
      });
      return {
        code: generated.code,
        map: map
      };
    };
    exports.SourceNode = SourceNode;
  }
  return module.exports;
});

$__System.registerDynamic("npm:source-map@0.5.4/source-map.js", ["npm:source-map@0.5.4/lib/source-map-generator.js", "npm:source-map@0.5.4/lib/source-map-consumer.js", "npm:source-map@0.5.4/lib/source-node.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports.SourceMapGenerator = $__require('npm:source-map@0.5.4/lib/source-map-generator.js').SourceMapGenerator;
  exports.SourceMapConsumer = $__require('npm:source-map@0.5.4/lib/source-map-consumer.js').SourceMapConsumer;
  exports.SourceNode = $__require('npm:source-map@0.5.4/lib/source-node.js').SourceNode;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less-node/environment.js", ["npm:mime@1.3.4/mime.js", "npm:source-map@0.5.4/source-map.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"),
      Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    encodeBase64: function encodeBase64(str) {
      return new Buffer(str).toString('base64');
    },
    mimeLookup: function(filename) {
      return $__require('npm:mime@1.3.4/mime.js').lookup(filename);
    },
    charsetLookup: function(mime) {
      return $__require('npm:mime@1.3.4/mime.js').charsets.lookup(mime);
    },
    getSourceMapGenerator: function getSourceMapGenerator() {
      return $__require('npm:source-map@0.5.4/source-map.js').SourceMapGenerator;
    }
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less-node/file-manager.js", ["@node/path", "npm:less@2.6.1/lib/less-node/fs.js", "npm:less@2.6.1/lib/less/environment/abstract-file-manager.js", "npm:promise@7.1.1/index.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var path = $__require('@node/path'),
      fs = $__require('npm:less@2.6.1/lib/less-node/fs.js'),
      PromiseConstructor,
      AbstractFileManager = $__require('npm:less@2.6.1/lib/less/environment/abstract-file-manager.js');
  try {
    PromiseConstructor = typeof Promise === 'undefined' ? $__require('npm:promise@7.1.1/index.js') : Promise;
  } catch (e) {}
  var FileManager = function() {};
  FileManager.prototype = new AbstractFileManager();
  FileManager.prototype.supports = function(filename, currentDirectory, options, environment) {
    return true;
  };
  FileManager.prototype.supportsSync = function(filename, currentDirectory, options, environment) {
    return true;
  };
  FileManager.prototype.loadFile = function(filename, currentDirectory, options, environment, callback) {
    var fullFilename,
        data,
        isAbsoluteFilename = this.isPathAbsolute(filename),
        filenamesTried = [];
    options = options || {};
    if (options.syncImport || !PromiseConstructor) {
      data = this.loadFileSync(filename, currentDirectory, options, environment, 'utf-8');
      callback(data.error, data);
      return;
    }
    var paths = isAbsoluteFilename ? [""] : [currentDirectory];
    if (options.paths) {
      paths.push.apply(paths, options.paths);
    }
    if (!isAbsoluteFilename && paths.indexOf('.') === -1) {
      paths.push('.');
    }
    return new PromiseConstructor(function(fulfill, reject) {
      (function tryPathIndex(i) {
        if (i < paths.length) {
          fullFilename = filename;
          if (paths[i]) {
            fullFilename = path.join(paths[i], fullFilename);
          }
          fs.stat(fullFilename, function(err) {
            if (err) {
              filenamesTried.push(fullFilename);
              tryPathIndex(i + 1);
            } else {
              fs.readFile(fullFilename, 'utf-8', function(e, data) {
                if (e) {
                  reject(e);
                  return;
                }
                fulfill({
                  contents: data,
                  filename: fullFilename
                });
              });
            }
          });
        } else {
          reject({
            type: 'File',
            message: "'" + filename + "' wasn't found. Tried - " + filenamesTried.join(",")
          });
        }
      }(0));
    });
  };
  FileManager.prototype.loadFileSync = function(filename, currentDirectory, options, environment, encoding) {
    var fullFilename,
        paths,
        filenamesTried = [],
        isAbsoluteFilename = this.isPathAbsolute(filename),
        data;
    options = options || {};
    paths = isAbsoluteFilename ? [""] : [currentDirectory];
    if (options.paths) {
      paths.push.apply(paths, options.paths);
    }
    if (!isAbsoluteFilename && paths.indexOf('.') === -1) {
      paths.push('.');
    }
    var err,
        result;
    for (var i = 0; i < paths.length; i++) {
      try {
        fullFilename = filename;
        if (paths[i]) {
          fullFilename = path.join(paths[i], fullFilename);
        }
        filenamesTried.push(fullFilename);
        fs.statSync(fullFilename);
        break;
      } catch (e) {
        fullFilename = null;
      }
    }
    if (!fullFilename) {
      err = {
        type: 'File',
        message: "'" + filename + "' wasn't found. Tried - " + filenamesTried.join(",")
      };
      result = {error: err};
    } else {
      data = fs.readFileSync(fullFilename, encoding);
      result = {
        contents: data,
        filename: fullFilename
      };
    }
    return result;
  };
  module.exports = FileManager;
  return module.exports;
});

$__System.registerDynamic("npm:isarray@1.0.0/index.js", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var toString = {}.toString;
  module.exports = Array.isArray || function(arr) {
    return toString.call(arr) == '[object Array]';
  };
  return module.exports;
});

$__System.registerDynamic("npm:string_decoder@0.10.31/index.js", ["@node/buffer", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var Buffer = $__require('@node/buffer').Buffer;
  var isBufferEncoding = Buffer.isEncoding || function(encoding) {
    switch (encoding && encoding.toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
      case 'raw':
        return true;
      default:
        return false;
    }
  };
  function assertEncoding(encoding) {
    if (encoding && !isBufferEncoding(encoding)) {
      throw new Error('Unknown encoding: ' + encoding);
    }
  }
  var StringDecoder = exports.StringDecoder = function(encoding) {
    this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
    assertEncoding(encoding);
    switch (this.encoding) {
      case 'utf8':
        this.surrogateSize = 3;
        break;
      case 'ucs2':
      case 'utf16le':
        this.surrogateSize = 2;
        this.detectIncompleteChar = utf16DetectIncompleteChar;
        break;
      case 'base64':
        this.surrogateSize = 3;
        this.detectIncompleteChar = base64DetectIncompleteChar;
        break;
      default:
        this.write = passThroughWrite;
        return;
    }
    this.charBuffer = new Buffer(6);
    this.charReceived = 0;
    this.charLength = 0;
  };
  StringDecoder.prototype.write = function(buffer) {
    var charStr = '';
    while (this.charLength) {
      var available = (buffer.length >= this.charLength - this.charReceived) ? this.charLength - this.charReceived : buffer.length;
      buffer.copy(this.charBuffer, this.charReceived, 0, available);
      this.charReceived += available;
      if (this.charReceived < this.charLength) {
        return '';
      }
      buffer = buffer.slice(available, buffer.length);
      charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
      var charCode = charStr.charCodeAt(charStr.length - 1);
      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        this.charLength += this.surrogateSize;
        charStr = '';
        continue;
      }
      this.charReceived = this.charLength = 0;
      if (buffer.length === 0) {
        return charStr;
      }
      break;
    }
    this.detectIncompleteChar(buffer);
    var end = buffer.length;
    if (this.charLength) {
      buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
      end -= this.charReceived;
    }
    charStr += buffer.toString(this.encoding, 0, end);
    var end = charStr.length - 1;
    var charCode = charStr.charCodeAt(end);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      var size = this.surrogateSize;
      this.charLength += size;
      this.charReceived += size;
      this.charBuffer.copy(this.charBuffer, size, 0, size);
      buffer.copy(this.charBuffer, 0, 0, size);
      return charStr.substring(0, end);
    }
    return charStr;
  };
  StringDecoder.prototype.detectIncompleteChar = function(buffer) {
    var i = (buffer.length >= 3) ? 3 : buffer.length;
    for (; i > 0; i--) {
      var c = buffer[buffer.length - i];
      if (i == 1 && c >> 5 == 0x06) {
        this.charLength = 2;
        break;
      }
      if (i <= 2 && c >> 4 == 0x0E) {
        this.charLength = 3;
        break;
      }
      if (i <= 3 && c >> 3 == 0x1E) {
        this.charLength = 4;
        break;
      }
    }
    this.charReceived = i;
  };
  StringDecoder.prototype.end = function(buffer) {
    var res = '';
    if (buffer && buffer.length)
      res = this.write(buffer);
    if (this.charReceived) {
      var cr = this.charReceived;
      var buf = this.charBuffer;
      var enc = this.encoding;
      res += buf.slice(0, cr).toString(enc);
    }
    return res;
  };
  function passThroughWrite(buffer) {
    return buffer.toString(this.encoding);
  }
  function utf16DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 2;
    this.charLength = this.charReceived ? 2 : 0;
  }
  function base64DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 3;
    this.charLength = this.charReceived ? 3 : 0;
  }
  return module.exports;
});

$__System.registerDynamic("npm:readable-stream@2.0.6/lib/_stream_readable.js", ["npm:process-nextick-args@1.0.6/index.js", "npm:isarray@1.0.0/index.js", "@node/buffer", "@node/events", "npm:core-util-is@1.0.2/lib/util.js", "npm:inherits@2.0.1/inherits.js", "@node/util", "npm:readable-stream@2.0.6/lib/_stream_duplex.js", "npm:string_decoder@0.10.31/index.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"),
      Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = Readable;
  var processNextTick = $__require('npm:process-nextick-args@1.0.6/index.js');
  var isArray = $__require('npm:isarray@1.0.0/index.js');
  var Buffer = $__require('@node/buffer').Buffer;
  Readable.ReadableState = ReadableState;
  var EE = $__require('@node/events');
  var EElistenerCount = function(emitter, type) {
    return emitter.listeners(type).length;
  };
  var Stream;
  (function() {
    try {
      Stream = $__require('st' + 'ream');
    } catch (_) {} finally {
      if (!Stream)
        Stream = $__require('@node/events').EventEmitter;
    }
  })();
  var Buffer = $__require('@node/buffer').Buffer;
  var util = $__require('npm:core-util-is@1.0.2/lib/util.js');
  util.inherits = $__require('npm:inherits@2.0.1/inherits.js');
  var debugUtil = $__require('@node/util');
  var debug = undefined;
  if (debugUtil && debugUtil.debuglog) {
    debug = debugUtil.debuglog('stream');
  } else {
    debug = function() {};
  }
  var StringDecoder;
  util.inherits(Readable, Stream);
  var Duplex;
  function ReadableState(options, stream) {
    Duplex = Duplex || $__require('npm:readable-stream@2.0.6/lib/_stream_duplex.js');
    options = options || {};
    this.objectMode = !!options.objectMode;
    if (stream instanceof Duplex)
      this.objectMode = this.objectMode || !!options.readableObjectMode;
    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
    this.highWaterMark = ~~this.highWaterMark;
    this.buffer = [];
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    this.sync = true;
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.defaultEncoding = options.defaultEncoding || 'utf8';
    this.ranOut = false;
    this.awaitDrain = 0;
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      if (!StringDecoder)
        StringDecoder = $__require('npm:string_decoder@0.10.31/index.js').StringDecoder;
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  var Duplex;
  function Readable(options) {
    Duplex = Duplex || $__require('npm:readable-stream@2.0.6/lib/_stream_duplex.js');
    if (!(this instanceof Readable))
      return new Readable(options);
    this._readableState = new ReadableState(options, this);
    this.readable = true;
    if (options && typeof options.read === 'function')
      this._read = options.read;
    Stream.call(this);
  }
  Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    if (!state.objectMode && typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = new Buffer(chunk, encoding);
        encoding = '';
      }
    }
    return readableAddChunk(this, state, chunk, encoding, false);
  };
  Readable.prototype.unshift = function(chunk) {
    var state = this._readableState;
    return readableAddChunk(this, state, chunk, '', true);
  };
  Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
  };
  function readableAddChunk(stream, state, chunk, encoding, addToFront) {
    var er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (chunk === null) {
      state.reading = false;
      onEofChunk(stream, state);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (state.ended && !addToFront) {
        var e = new Error('stream.push() after EOF');
        stream.emit('error', e);
      } else if (state.endEmitted && addToFront) {
        var e = new Error('stream.unshift() after end event');
        stream.emit('error', e);
      } else {
        var skipAdd;
        if (state.decoder && !addToFront && !encoding) {
          chunk = state.decoder.write(chunk);
          skipAdd = !state.objectMode && chunk.length === 0;
        }
        if (!addToFront)
          state.reading = false;
        if (!skipAdd) {
          if (state.flowing && state.length === 0 && !state.sync) {
            stream.emit('data', chunk);
            stream.read(0);
          } else {
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront)
              state.buffer.unshift(chunk);
            else
              state.buffer.push(chunk);
            if (state.needReadable)
              emitReadable(stream);
          }
        }
        maybeReadMore(stream, state);
      }
    } else if (!addToFront) {
      state.reading = false;
    }
    return needMoreData(state);
  }
  function needMoreData(state) {
    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
  }
  Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder)
      StringDecoder = $__require('npm:string_decoder@0.10.31/index.js').StringDecoder;
    this._readableState.decoder = new StringDecoder(enc);
    this._readableState.encoding = enc;
    return this;
  };
  var MAX_HWM = 0x800000;
  function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
      n = MAX_HWM;
    } else {
      n--;
      n |= n >>> 1;
      n |= n >>> 2;
      n |= n >>> 4;
      n |= n >>> 8;
      n |= n >>> 16;
      n++;
    }
    return n;
  }
  function howMuchToRead(n, state) {
    if (state.length === 0 && state.ended)
      return 0;
    if (state.objectMode)
      return n === 0 ? 0 : 1;
    if (n === null || isNaN(n)) {
      if (state.flowing && state.buffer.length)
        return state.buffer[0].length;
      else
        return state.length;
    }
    if (n <= 0)
      return 0;
    if (n > state.highWaterMark)
      state.highWaterMark = computeNewHighWaterMark(n);
    if (n > state.length) {
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      } else {
        return state.length;
      }
    }
    return n;
  }
  Readable.prototype.read = function(n) {
    debug('read', n);
    var state = this._readableState;
    var nOrig = n;
    if (typeof n !== 'number' || n > 0)
      state.emittedReadable = false;
    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
      debug('read: emitReadable', state.length, state.ended);
      if (state.length === 0 && state.ended)
        endReadable(this);
      else
        emitReadable(this);
      return null;
    }
    n = howMuchToRead(n, state);
    if (n === 0 && state.ended) {
      if (state.length === 0)
        endReadable(this);
      return null;
    }
    var doRead = state.needReadable;
    debug('need readable', doRead);
    if (state.length === 0 || state.length - n < state.highWaterMark) {
      doRead = true;
      debug('length less than watermark', doRead);
    }
    if (state.ended || state.reading) {
      doRead = false;
      debug('reading or ended', doRead);
    }
    if (doRead) {
      debug('do read');
      state.reading = true;
      state.sync = true;
      if (state.length === 0)
        state.needReadable = true;
      this._read(state.highWaterMark);
      state.sync = false;
    }
    if (doRead && !state.reading)
      n = howMuchToRead(nOrig, state);
    var ret;
    if (n > 0)
      ret = fromList(n, state);
    else
      ret = null;
    if (ret === null) {
      state.needReadable = true;
      n = 0;
    }
    state.length -= n;
    if (state.length === 0 && !state.ended)
      state.needReadable = true;
    if (nOrig !== n && state.ended && state.length === 0)
      endReadable(this);
    if (ret !== null)
      this.emit('data', ret);
    return ret;
  };
  function chunkInvalid(state, chunk) {
    var er = null;
    if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    return er;
  }
  function onEofChunk(stream, state) {
    if (state.ended)
      return;
    if (state.decoder) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }
    state.ended = true;
    emitReadable(stream);
  }
  function emitReadable(stream) {
    var state = stream._readableState;
    state.needReadable = false;
    if (!state.emittedReadable) {
      debug('emitReadable', state.flowing);
      state.emittedReadable = true;
      if (state.sync)
        processNextTick(emitReadable_, stream);
      else
        emitReadable_(stream);
    }
  }
  function emitReadable_(stream) {
    debug('emit readable');
    stream.emit('readable');
    flow(stream);
  }
  function maybeReadMore(stream, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      processNextTick(maybeReadMore_, stream, state);
    }
  }
  function maybeReadMore_(stream, state) {
    var len = state.length;
    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
      debug('maybeReadMore read 0');
      stream.read(0);
      if (len === state.length)
        break;
      else
        len = state.length;
    }
    state.readingMore = false;
  }
  Readable.prototype._read = function(n) {
    this.emit('error', new Error('not implemented'));
  };
  Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;
      case 1:
        state.pipes = [state.pipes, dest];
        break;
      default:
        state.pipes.push(dest);
        break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : cleanup;
    if (state.endEmitted)
      processNextTick(endFn);
    else
      src.once('end', endFn);
    dest.on('unpipe', onunpipe);
    function onunpipe(readable) {
      debug('onunpipe');
      if (readable === src) {
        cleanup();
      }
    }
    function onend() {
      debug('onend');
      dest.end();
    }
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);
    var cleanedUp = false;
    function cleanup() {
      debug('cleanup');
      dest.removeListener('close', onclose);
      dest.removeListener('finish', onfinish);
      dest.removeListener('drain', ondrain);
      dest.removeListener('error', onerror);
      dest.removeListener('unpipe', onunpipe);
      src.removeListener('end', onend);
      src.removeListener('end', cleanup);
      src.removeListener('data', ondata);
      cleanedUp = true;
      if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
        ondrain();
    }
    src.on('data', ondata);
    function ondata(chunk) {
      debug('ondata');
      var ret = dest.write(chunk);
      if (false === ret) {
        if (state.pipesCount === 1 && state.pipes[0] === dest && src.listenerCount('data') === 1 && !cleanedUp) {
          debug('false write response, pause', src._readableState.awaitDrain);
          src._readableState.awaitDrain++;
        }
        src.pause();
      }
    }
    function onerror(er) {
      debug('onerror', er);
      unpipe();
      dest.removeListener('error', onerror);
      if (EElistenerCount(dest, 'error') === 0)
        dest.emit('error', er);
    }
    if (!dest._events || !dest._events.error)
      dest.on('error', onerror);
    else if (isArray(dest._events.error))
      dest._events.error.unshift(onerror);
    else
      dest._events.error = [onerror, dest._events.error];
    function onclose() {
      dest.removeListener('finish', onfinish);
      unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
      debug('onfinish');
      dest.removeListener('close', onclose);
      unpipe();
    }
    dest.once('finish', onfinish);
    function unpipe() {
      debug('unpipe');
      src.unpipe(dest);
    }
    dest.emit('pipe', src);
    if (!state.flowing) {
      debug('pipe resume');
      src.resume();
    }
    return dest;
  };
  function pipeOnDrain(src) {
    return function() {
      var state = src._readableState;
      debug('pipeOnDrain', state.awaitDrain);
      if (state.awaitDrain)
        state.awaitDrain--;
      if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
        state.flowing = true;
        flow(src);
      }
    };
  }
  Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    if (state.pipesCount === 0)
      return this;
    if (state.pipesCount === 1) {
      if (dest && dest !== state.pipes)
        return this;
      if (!dest)
        dest = state.pipes;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest)
        dest.emit('unpipe', this);
      return this;
    }
    if (!dest) {
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      for (var _i = 0; _i < len; _i++) {
        dests[_i].emit('unpipe', this);
      }
      return this;
    }
    var i = indexOf(state.pipes, dest);
    if (i === -1)
      return this;
    state.pipes.splice(i, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1)
      state.pipes = state.pipes[0];
    dest.emit('unpipe', this);
    return this;
  };
  Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    if (ev === 'data' && false !== this._readableState.flowing) {
      this.resume();
    }
    if (ev === 'readable' && !this._readableState.endEmitted) {
      var state = this._readableState;
      if (!state.readableListening) {
        state.readableListening = true;
        state.emittedReadable = false;
        state.needReadable = true;
        if (!state.reading) {
          processNextTick(nReadingNextTick, this);
        } else if (state.length) {
          emitReadable(this, state);
        }
      }
    }
    return res;
  };
  Readable.prototype.addListener = Readable.prototype.on;
  function nReadingNextTick(self) {
    debug('readable nexttick read 0');
    self.read(0);
  }
  Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
      debug('resume');
      state.flowing = true;
      resume(this, state);
    }
    return this;
  };
  function resume(stream, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      processNextTick(resume_, stream, state);
    }
  }
  function resume_(stream, state) {
    if (!state.reading) {
      debug('resume read 0');
      stream.read(0);
    }
    state.resumeScheduled = false;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading)
      stream.read(0);
  }
  Readable.prototype.pause = function() {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (false !== this._readableState.flowing) {
      debug('pause');
      this._readableState.flowing = false;
      this.emit('pause');
    }
    return this;
  };
  function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    if (state.flowing) {
      do {
        var chunk = stream.read();
      } while (null !== chunk && state.flowing);
    }
  }
  Readable.prototype.wrap = function(stream) {
    var state = this._readableState;
    var paused = false;
    var self = this;
    stream.on('end', function() {
      debug('wrapped end');
      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length)
          self.push(chunk);
      }
      self.push(null);
    });
    stream.on('data', function(chunk) {
      debug('wrapped data');
      if (state.decoder)
        chunk = state.decoder.write(chunk);
      if (state.objectMode && (chunk === null || chunk === undefined))
        return;
      else if (!state.objectMode && (!chunk || !chunk.length))
        return;
      var ret = self.push(chunk);
      if (!ret) {
        paused = true;
        stream.pause();
      }
    });
    for (var i in stream) {
      if (this[i] === undefined && typeof stream[i] === 'function') {
        this[i] = function(method) {
          return function() {
            return stream[method].apply(stream, arguments);
          };
        }(i);
      }
    }
    var events = ['error', 'close', 'destroy', 'pause', 'resume'];
    forEach(events, function(ev) {
      stream.on(ev, self.emit.bind(self, ev));
    });
    self._read = function(n) {
      debug('wrapped _read', n);
      if (paused) {
        paused = false;
        stream.resume();
      }
    };
    return self;
  };
  Readable._fromList = fromList;
  function fromList(n, state) {
    var list = state.buffer;
    var length = state.length;
    var stringMode = !!state.decoder;
    var objectMode = !!state.objectMode;
    var ret;
    if (list.length === 0)
      return null;
    if (length === 0)
      ret = null;
    else if (objectMode)
      ret = list.shift();
    else if (!n || n >= length) {
      if (stringMode)
        ret = list.join('');
      else if (list.length === 1)
        ret = list[0];
      else
        ret = Buffer.concat(list, length);
      list.length = 0;
    } else {
      if (n < list[0].length) {
        var buf = list[0];
        ret = buf.slice(0, n);
        list[0] = buf.slice(n);
      } else if (n === list[0].length) {
        ret = list.shift();
      } else {
        if (stringMode)
          ret = '';
        else
          ret = new Buffer(n);
        var c = 0;
        for (var i = 0,
            l = list.length; i < l && c < n; i++) {
          var buf = list[0];
          var cpy = Math.min(n - c, buf.length);
          if (stringMode)
            ret += buf.slice(0, cpy);
          else
            buf.copy(ret, c, 0, cpy);
          if (cpy < buf.length)
            list[0] = buf.slice(cpy);
          else
            list.shift();
          c += cpy;
        }
      }
    }
    return ret;
  }
  function endReadable(stream) {
    var state = stream._readableState;
    if (state.length > 0)
      throw new Error('endReadable called on non-empty stream');
    if (!state.endEmitted) {
      state.ended = true;
      processNextTick(endReadableNT, state, stream);
    }
  }
  function endReadableNT(state, stream) {
    if (!state.endEmitted && state.length === 0) {
      state.endEmitted = true;
      stream.readable = false;
      stream.emit('end');
    }
  }
  function forEach(xs, f) {
    for (var i = 0,
        l = xs.length; i < l; i++) {
      f(xs[i], i);
    }
  }
  function indexOf(xs, x) {
    for (var i = 0,
        l = xs.length; i < l; i++) {
      if (xs[i] === x)
        return i;
    }
    return -1;
  }
  return module.exports;
});

$__System.registerDynamic("npm:process-nextick-args@1.0.6/index.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  if (!process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
    module.exports = nextTick;
  } else {
    module.exports = process.nextTick;
  }
  function nextTick(fn) {
    var args = new Array(arguments.length - 1);
    var i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
  return module.exports;
});

$__System.registerDynamic("npm:core-util-is@1.0.2/lib/util.js", ["github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  function isArray(arg) {
    if (Array.isArray) {
      return Array.isArray(arg);
    }
    return objectToString(arg) === '[object Array]';
  }
  exports.isArray = isArray;
  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }
  exports.isBoolean = isBoolean;
  function isNull(arg) {
    return arg === null;
  }
  exports.isNull = isNull;
  function isNullOrUndefined(arg) {
    return arg == null;
  }
  exports.isNullOrUndefined = isNullOrUndefined;
  function isNumber(arg) {
    return typeof arg === 'number';
  }
  exports.isNumber = isNumber;
  function isString(arg) {
    return typeof arg === 'string';
  }
  exports.isString = isString;
  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }
  exports.isSymbol = isSymbol;
  function isUndefined(arg) {
    return arg === void 0;
  }
  exports.isUndefined = isUndefined;
  function isRegExp(re) {
    return objectToString(re) === '[object RegExp]';
  }
  exports.isRegExp = isRegExp;
  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  exports.isObject = isObject;
  function isDate(d) {
    return objectToString(d) === '[object Date]';
  }
  exports.isDate = isDate;
  function isError(e) {
    return (objectToString(e) === '[object Error]' || e instanceof Error);
  }
  exports.isError = isError;
  function isFunction(arg) {
    return typeof arg === 'function';
  }
  exports.isFunction = isFunction;
  function isPrimitive(arg) {
    return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
  }
  exports.isPrimitive = isPrimitive;
  exports.isBuffer = Buffer.isBuffer;
  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }
  return module.exports;
});

$__System.registerDynamic("npm:inherits@2.0.1/inherits.js", ["@node/util"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('@node/util').inherits;
  return module.exports;
});

$__System.registerDynamic("npm:util-deprecate@1.0.2/node.js", ["@node/util"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('@node/util').deprecate;
  return module.exports;
});

$__System.registerDynamic("npm:readable-stream@2.0.6/lib/_stream_writable.js", ["npm:process-nextick-args@1.0.6/index.js", "@node/buffer", "npm:core-util-is@1.0.2/lib/util.js", "npm:inherits@2.0.1/inherits.js", "npm:util-deprecate@1.0.2/node.js", "@node/events", "npm:readable-stream@2.0.6/lib/_stream_duplex.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"),
      Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = Writable;
  var processNextTick = $__require('npm:process-nextick-args@1.0.6/index.js');
  var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
  var Buffer = $__require('@node/buffer').Buffer;
  Writable.WritableState = WritableState;
  var util = $__require('npm:core-util-is@1.0.2/lib/util.js');
  util.inherits = $__require('npm:inherits@2.0.1/inherits.js');
  var internalUtil = {deprecate: $__require('npm:util-deprecate@1.0.2/node.js')};
  var Stream;
  (function() {
    try {
      Stream = $__require('st' + 'ream');
    } catch (_) {} finally {
      if (!Stream)
        Stream = $__require('@node/events').EventEmitter;
    }
  })();
  var Buffer = $__require('@node/buffer').Buffer;
  util.inherits(Writable, Stream);
  function nop() {}
  function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
  }
  var Duplex;
  function WritableState(options, stream) {
    Duplex = Duplex || $__require('npm:readable-stream@2.0.6/lib/_stream_duplex.js');
    options = options || {};
    this.objectMode = !!options.objectMode;
    if (stream instanceof Duplex)
      this.objectMode = this.objectMode || !!options.writableObjectMode;
    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
    this.highWaterMark = ~~this.highWaterMark;
    this.needDrain = false;
    this.ending = false;
    this.ended = false;
    this.finished = false;
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    this.defaultEncoding = options.defaultEncoding || 'utf8';
    this.length = 0;
    this.writing = false;
    this.corked = 0;
    this.sync = true;
    this.bufferProcessing = false;
    this.onwrite = function(er) {
      onwrite(stream, er);
    };
    this.writecb = null;
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    this.pendingcb = 0;
    this.prefinished = false;
    this.errorEmitted = false;
    this.bufferedRequestCount = 0;
    this.corkedRequestsFree = new CorkedRequest(this);
    this.corkedRequestsFree.next = new CorkedRequest(this);
  }
  WritableState.prototype.getBuffer = function writableStateGetBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while (current) {
      out.push(current);
      current = current.next;
    }
    return out;
  };
  (function() {
    try {
      Object.defineProperty(WritableState.prototype, 'buffer', {get: internalUtil.deprecate(function() {
          return this.getBuffer();
        }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')});
    } catch (_) {}
  })();
  var Duplex;
  function Writable(options) {
    Duplex = Duplex || $__require('npm:readable-stream@2.0.6/lib/_stream_duplex.js');
    if (!(this instanceof Writable) && !(this instanceof Duplex))
      return new Writable(options);
    this._writableState = new WritableState(options, this);
    this.writable = true;
    if (options) {
      if (typeof options.write === 'function')
        this._write = options.write;
      if (typeof options.writev === 'function')
        this._writev = options.writev;
    }
    Stream.call(this);
  }
  Writable.prototype.pipe = function() {
    this.emit('error', new Error('Cannot pipe. Not readable.'));
  };
  function writeAfterEnd(stream, cb) {
    var er = new Error('write after end');
    stream.emit('error', er);
    processNextTick(cb, er);
  }
  function validChunk(stream, state, chunk, cb) {
    var valid = true;
    if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
      var er = new TypeError('Invalid non-string/buffer chunk');
      stream.emit('error', er);
      processNextTick(cb, er);
      valid = false;
    }
    return valid;
  }
  Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }
    if (Buffer.isBuffer(chunk))
      encoding = 'buffer';
    else if (!encoding)
      encoding = state.defaultEncoding;
    if (typeof cb !== 'function')
      cb = nop;
    if (state.ended)
      writeAfterEnd(this, cb);
    else if (validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, chunk, encoding, cb);
    }
    return ret;
  };
  Writable.prototype.cork = function() {
    var state = this._writableState;
    state.corked++;
  };
  Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
      state.corked--;
      if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest)
        clearBuffer(this, state);
    }
  };
  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    if (typeof encoding === 'string')
      encoding = encoding.toLowerCase();
    if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1))
      throw new TypeError('Unknown encoding: ' + encoding);
    this._writableState.defaultEncoding = encoding;
  };
  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
      chunk = new Buffer(chunk, encoding);
    }
    return chunk;
  }
  function writeOrBuffer(stream, state, chunk, encoding, cb) {
    chunk = decodeChunk(state, chunk, encoding);
    if (Buffer.isBuffer(chunk))
      encoding = 'buffer';
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    if (!ret)
      state.needDrain = true;
    if (state.writing || state.corked) {
      var last = state.lastBufferedRequest;
      state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
      if (last) {
        last.next = state.lastBufferedRequest;
      } else {
        state.bufferedRequest = state.lastBufferedRequest;
      }
      state.bufferedRequestCount += 1;
    } else {
      doWrite(stream, state, false, len, chunk, encoding, cb);
    }
    return ret;
  }
  function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (writev)
      stream._writev(chunk, state.onwrite);
    else
      stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }
  function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync)
      processNextTick(cb, er);
    else
      cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  }
  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }
  function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    onwriteStateUpdate(state);
    if (er)
      onwriteError(stream, state, sync, er, cb);
    else {
      var finished = needFinish(state);
      if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
        clearBuffer(stream, state);
      }
      if (sync) {
        asyncWrite(afterWrite, stream, state, finished, cb);
      } else {
        afterWrite(stream, state, finished, cb);
      }
    }
  }
  function afterWrite(stream, state, finished, cb) {
    if (!finished)
      onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
  }
  function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream.emit('drain');
    }
  }
  function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
      var l = state.bufferedRequestCount;
      var buffer = new Array(l);
      var holder = state.corkedRequestsFree;
      holder.entry = entry;
      var count = 0;
      while (entry) {
        buffer[count] = entry;
        entry = entry.next;
        count += 1;
      }
      doWrite(stream, state, true, state.length, buffer, '', holder.finish);
      state.pendingcb++;
      state.lastBufferedRequest = null;
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;
        doWrite(stream, state, false, len, chunk, encoding, cb);
        entry = entry.next;
        if (state.writing) {
          break;
        }
      }
      if (entry === null)
        state.lastBufferedRequest = null;
    }
    state.bufferedRequestCount = 0;
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
  }
  Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new Error('not implemented'));
  };
  Writable.prototype._writev = null;
  Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === 'function') {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }
    if (chunk !== null && chunk !== undefined)
      this.write(chunk, encoding);
    if (state.corked) {
      state.corked = 1;
      this.uncork();
    }
    if (!state.ending && !state.finished)
      endWritable(this, state, cb);
  };
  function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  }
  function prefinish(stream, state) {
    if (!state.prefinished) {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
  function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
      if (state.pendingcb === 0) {
        prefinish(stream, state);
        state.finished = true;
        stream.emit('finish');
      } else {
        prefinish(stream, state);
      }
    }
    return need;
  }
  function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
      if (state.finished)
        processNextTick(cb);
      else
        stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
  }
  function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function(err) {
      var entry = _this.entry;
      _this.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      if (state.corkedRequestsFree) {
        state.corkedRequestsFree.next = _this;
      } else {
        state.corkedRequestsFree = _this;
      }
    };
  }
  return module.exports;
});

$__System.registerDynamic("npm:readable-stream@2.0.6/lib/_stream_duplex.js", ["npm:process-nextick-args@1.0.6/index.js", "npm:core-util-is@1.0.2/lib/util.js", "npm:inherits@2.0.1/inherits.js", "npm:readable-stream@2.0.6/lib/_stream_readable.js", "npm:readable-stream@2.0.6/lib/_stream_writable.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var objectKeys = Object.keys || function(obj) {
    var keys = [];
    for (var key in obj) {
      keys.push(key);
    }
    return keys;
  };
  module.exports = Duplex;
  var processNextTick = $__require('npm:process-nextick-args@1.0.6/index.js');
  var util = $__require('npm:core-util-is@1.0.2/lib/util.js');
  util.inherits = $__require('npm:inherits@2.0.1/inherits.js');
  var Readable = $__require('npm:readable-stream@2.0.6/lib/_stream_readable.js');
  var Writable = $__require('npm:readable-stream@2.0.6/lib/_stream_writable.js');
  util.inherits(Duplex, Readable);
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method])
      Duplex.prototype[method] = Writable.prototype[method];
  }
  function Duplex(options) {
    if (!(this instanceof Duplex))
      return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    if (options && options.readable === false)
      this.readable = false;
    if (options && options.writable === false)
      this.writable = false;
    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false)
      this.allowHalfOpen = false;
    this.once('end', onend);
  }
  function onend() {
    if (this.allowHalfOpen || this._writableState.ended)
      return;
    processNextTick(onEndNT, this);
  }
  function onEndNT(self) {
    self.end();
  }
  function forEach(xs, f) {
    for (var i = 0,
        l = xs.length; i < l; i++) {
      f(xs[i], i);
    }
  }
  return module.exports;
});

$__System.registerDynamic("npm:readable-stream@2.0.6/duplex.js", ["npm:readable-stream@2.0.6/lib/_stream_duplex.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('npm:readable-stream@2.0.6/lib/_stream_duplex.js');
  return module.exports;
});

$__System.registerDynamic("npm:bl@1.1.2/bl.js", ["npm:readable-stream@2.0.6/duplex.js", "@node/util", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var DuplexStream = $__require('npm:readable-stream@2.0.6/duplex.js'),
      util = $__require('@node/util');
  function BufferList(callback) {
    if (!(this instanceof BufferList))
      return new BufferList(callback);
    this._bufs = [];
    this.length = 0;
    if (typeof callback == 'function') {
      this._callback = callback;
      var piper = function piper(err) {
        if (this._callback) {
          this._callback(err);
          this._callback = null;
        }
      }.bind(this);
      this.on('pipe', function onPipe(src) {
        src.on('error', piper);
      });
      this.on('unpipe', function onUnpipe(src) {
        src.removeListener('error', piper);
      });
    } else {
      this.append(callback);
    }
    DuplexStream.call(this);
  }
  util.inherits(BufferList, DuplexStream);
  BufferList.prototype._offset = function _offset(offset) {
    var tot = 0,
        i = 0,
        _t;
    for (; i < this._bufs.length; i++) {
      _t = tot + this._bufs[i].length;
      if (offset < _t)
        return [i, offset - tot];
      tot = _t;
    }
  };
  BufferList.prototype.append = function append(buf) {
    var i = 0,
        newBuf;
    if (Array.isArray(buf)) {
      for (; i < buf.length; i++)
        this.append(buf[i]);
    } else if (buf instanceof BufferList) {
      for (; i < buf._bufs.length; i++)
        this.append(buf._bufs[i]);
    } else if (buf != null) {
      if (typeof buf == 'number')
        buf = buf.toString();
      newBuf = Buffer.isBuffer(buf) ? buf : new Buffer(buf);
      this._bufs.push(newBuf);
      this.length += newBuf.length;
    }
    return this;
  };
  BufferList.prototype._write = function _write(buf, encoding, callback) {
    this.append(buf);
    if (typeof callback == 'function')
      callback();
  };
  BufferList.prototype._read = function _read(size) {
    if (!this.length)
      return this.push(null);
    size = Math.min(size, this.length);
    this.push(this.slice(0, size));
    this.consume(size);
  };
  BufferList.prototype.end = function end(chunk) {
    DuplexStream.prototype.end.call(this, chunk);
    if (this._callback) {
      this._callback(null, this.slice());
      this._callback = null;
    }
  };
  BufferList.prototype.get = function get(index) {
    return this.slice(index, index + 1)[0];
  };
  BufferList.prototype.slice = function slice(start, end) {
    return this.copy(null, 0, start, end);
  };
  BufferList.prototype.copy = function copy(dst, dstStart, srcStart, srcEnd) {
    if (typeof srcStart != 'number' || srcStart < 0)
      srcStart = 0;
    if (typeof srcEnd != 'number' || srcEnd > this.length)
      srcEnd = this.length;
    if (srcStart >= this.length)
      return dst || new Buffer(0);
    if (srcEnd <= 0)
      return dst || new Buffer(0);
    var copy = !!dst,
        off = this._offset(srcStart),
        len = srcEnd - srcStart,
        bytes = len,
        bufoff = (copy && dstStart) || 0,
        start = off[1],
        l,
        i;
    if (srcStart === 0 && srcEnd == this.length) {
      if (!copy)
        return Buffer.concat(this._bufs);
      for (i = 0; i < this._bufs.length; i++) {
        this._bufs[i].copy(dst, bufoff);
        bufoff += this._bufs[i].length;
      }
      return dst;
    }
    if (bytes <= this._bufs[off[0]].length - start) {
      return copy ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes) : this._bufs[off[0]].slice(start, start + bytes);
    }
    if (!copy)
      dst = new Buffer(len);
    for (i = off[0]; i < this._bufs.length; i++) {
      l = this._bufs[i].length - start;
      if (bytes > l) {
        this._bufs[i].copy(dst, bufoff, start);
      } else {
        this._bufs[i].copy(dst, bufoff, start, start + bytes);
        break;
      }
      bufoff += l;
      bytes -= l;
      if (start)
        start = 0;
    }
    return dst;
  };
  BufferList.prototype.toString = function toString(encoding, start, end) {
    return this.slice(start, end).toString(encoding);
  };
  BufferList.prototype.consume = function consume(bytes) {
    while (this._bufs.length) {
      if (bytes >= this._bufs[0].length) {
        bytes -= this._bufs[0].length;
        this.length -= this._bufs[0].length;
        this._bufs.shift();
      } else {
        this._bufs[0] = this._bufs[0].slice(bytes);
        this.length -= bytes;
        break;
      }
    }
    return this;
  };
  BufferList.prototype.duplicate = function duplicate() {
    var i = 0,
        copy = new BufferList();
    for (; i < this._bufs.length; i++)
      copy.append(this._bufs[i]);
    return copy;
  };
  BufferList.prototype.destroy = function destroy() {
    this._bufs.length = 0;
    this.length = 0;
    this.push(null);
  };
  ;
  (function() {
    var methods = {
      'readDoubleBE': 8,
      'readDoubleLE': 8,
      'readFloatBE': 4,
      'readFloatLE': 4,
      'readInt32BE': 4,
      'readInt32LE': 4,
      'readUInt32BE': 4,
      'readUInt32LE': 4,
      'readInt16BE': 2,
      'readInt16LE': 2,
      'readUInt16BE': 2,
      'readUInt16LE': 2,
      'readInt8': 1,
      'readUInt8': 1
    };
    for (var m in methods) {
      (function(m) {
        BufferList.prototype[m] = function(offset) {
          return this.slice(offset, offset + methods[m])[m](0);
        };
      }(m));
    }
  }());
  module.exports = BufferList;
  return module.exports;
});

$__System.registerDynamic("npm:hawk@3.1.3/lib/server.js", ["npm:boom@2.10.1/lib/index.js", "npm:hoek@2.16.3/lib/index.js", "npm:cryptiles@2.0.5/lib/index.js", "npm:hawk@3.1.3/lib/crypto.js", "npm:hawk@3.1.3/lib/utils.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Boom = $__require('npm:boom@2.10.1/lib/index.js');
  var Hoek = $__require('npm:hoek@2.16.3/lib/index.js');
  var Cryptiles = $__require('npm:cryptiles@2.0.5/lib/index.js');
  var Crypto = $__require('npm:hawk@3.1.3/lib/crypto.js');
  var Utils = $__require('npm:hawk@3.1.3/lib/utils.js');
  var internals = {};
  exports.authenticate = function(req, credentialsFunc, options, callback) {
    callback = Hoek.nextTick(callback);
    options.nonceFunc = options.nonceFunc || internals.nonceFunc;
    options.timestampSkewSec = options.timestampSkewSec || 60;
    var now = Utils.now(options.localtimeOffsetMsec);
    var request = Utils.parseRequest(req, options);
    if (request instanceof Error) {
      return callback(Boom.badRequest(request.message));
    }
    var attributes = Utils.parseAuthorizationHeader(request.authorization);
    if (attributes instanceof Error) {
      return callback(attributes);
    }
    var artifacts = {
      method: request.method,
      host: request.host,
      port: request.port,
      resource: request.url,
      ts: attributes.ts,
      nonce: attributes.nonce,
      hash: attributes.hash,
      ext: attributes.ext,
      app: attributes.app,
      dlg: attributes.dlg,
      mac: attributes.mac,
      id: attributes.id
    };
    if (!attributes.id || !attributes.ts || !attributes.nonce || !attributes.mac) {
      return callback(Boom.badRequest('Missing attributes'), null, artifacts);
    }
    credentialsFunc(attributes.id, function(err, credentials) {
      if (err) {
        return callback(err, credentials || null, artifacts);
      }
      if (!credentials) {
        return callback(Boom.unauthorized('Unknown credentials', 'Hawk'), null, artifacts);
      }
      if (!credentials.key || !credentials.algorithm) {
        return callback(Boom.internal('Invalid credentials'), credentials, artifacts);
      }
      if (Crypto.algorithms.indexOf(credentials.algorithm) === -1) {
        return callback(Boom.internal('Unknown algorithm'), credentials, artifacts);
      }
      var mac = Crypto.calculateMac('header', credentials, artifacts);
      if (!Cryptiles.fixedTimeComparison(mac, attributes.mac)) {
        return callback(Boom.unauthorized('Bad mac', 'Hawk'), credentials, artifacts);
      }
      if (options.payload || options.payload === '') {
        if (!attributes.hash) {
          return callback(Boom.unauthorized('Missing required payload hash', 'Hawk'), credentials, artifacts);
        }
        var hash = Crypto.calculatePayloadHash(options.payload, credentials.algorithm, request.contentType);
        if (!Cryptiles.fixedTimeComparison(hash, attributes.hash)) {
          return callback(Boom.unauthorized('Bad payload hash', 'Hawk'), credentials, artifacts);
        }
      }
      options.nonceFunc(credentials.key, attributes.nonce, attributes.ts, function(err) {
        if (err) {
          return callback(Boom.unauthorized('Invalid nonce', 'Hawk'), credentials, artifacts);
        }
        if (Math.abs((attributes.ts * 1000) - now) > (options.timestampSkewSec * 1000)) {
          var tsm = Crypto.timestampMessage(credentials, options.localtimeOffsetMsec);
          return callback(Boom.unauthorized('Stale timestamp', 'Hawk', tsm), credentials, artifacts);
        }
        return callback(null, credentials, artifacts);
      });
    });
  };
  exports.authenticatePayload = function(payload, credentials, artifacts, contentType) {
    var calculatedHash = Crypto.calculatePayloadHash(payload, credentials.algorithm, contentType);
    return Cryptiles.fixedTimeComparison(calculatedHash, artifacts.hash);
  };
  exports.authenticatePayloadHash = function(calculatedHash, artifacts) {
    return Cryptiles.fixedTimeComparison(calculatedHash, artifacts.hash);
  };
  exports.header = function(credentials, artifacts, options) {
    options = options || {};
    if (!artifacts || typeof artifacts !== 'object' || typeof options !== 'object') {
      return '';
    }
    artifacts = Hoek.clone(artifacts);
    delete artifacts.mac;
    artifacts.hash = options.hash;
    artifacts.ext = options.ext;
    if (!credentials || !credentials.key || !credentials.algorithm) {
      return '';
    }
    if (Crypto.algorithms.indexOf(credentials.algorithm) === -1) {
      return '';
    }
    if (!artifacts.hash && (options.payload || options.payload === '')) {
      artifacts.hash = Crypto.calculatePayloadHash(options.payload, credentials.algorithm, options.contentType);
    }
    var mac = Crypto.calculateMac('response', credentials, artifacts);
    var header = 'Hawk mac="' + mac + '"' + (artifacts.hash ? ', hash="' + artifacts.hash + '"' : '');
    if (artifacts.ext !== null && artifacts.ext !== undefined && artifacts.ext !== '') {
      header += ', ext="' + Hoek.escapeHeaderAttribute(artifacts.ext) + '"';
    }
    return header;
  };
  internals.bewitRegex = /^(\/.*)([\?&])bewit\=([^&$]*)(?:&(.+))?$/;
  exports.authenticateBewit = function(req, credentialsFunc, options, callback) {
    callback = Hoek.nextTick(callback);
    var now = Utils.now(options.localtimeOffsetMsec);
    var request = Utils.parseRequest(req, options);
    if (request instanceof Error) {
      return callback(Boom.badRequest(request.message));
    }
    if (request.url.length > Utils.limits.maxMatchLength) {
      return callback(Boom.badRequest('Resource path exceeds max length'));
    }
    var resource = request.url.match(internals.bewitRegex);
    if (!resource) {
      return callback(Boom.unauthorized(null, 'Hawk'));
    }
    if (!resource[3]) {
      return callback(Boom.unauthorized('Empty bewit', 'Hawk'));
    }
    if (request.method !== 'GET' && request.method !== 'HEAD') {
      return callback(Boom.unauthorized('Invalid method', 'Hawk'));
    }
    if (request.authorization) {
      return callback(Boom.badRequest('Multiple authentications'));
    }
    var bewitString = Hoek.base64urlDecode(resource[3]);
    if (bewitString instanceof Error) {
      return callback(Boom.badRequest('Invalid bewit encoding'));
    }
    var bewitParts = bewitString.split('\\');
    if (bewitParts.length !== 4) {
      return callback(Boom.badRequest('Invalid bewit structure'));
    }
    var bewit = {
      id: bewitParts[0],
      exp: parseInt(bewitParts[1], 10),
      mac: bewitParts[2],
      ext: bewitParts[3] || ''
    };
    if (!bewit.id || !bewit.exp || !bewit.mac) {
      return callback(Boom.badRequest('Missing bewit attributes'));
    }
    var url = resource[1];
    if (resource[4]) {
      url += resource[2] + resource[4];
    }
    if (bewit.exp * 1000 <= now) {
      return callback(Boom.unauthorized('Access expired', 'Hawk'), null, bewit);
    }
    credentialsFunc(bewit.id, function(err, credentials) {
      if (err) {
        return callback(err, credentials || null, bewit.ext);
      }
      if (!credentials) {
        return callback(Boom.unauthorized('Unknown credentials', 'Hawk'), null, bewit);
      }
      if (!credentials.key || !credentials.algorithm) {
        return callback(Boom.internal('Invalid credentials'), credentials, bewit);
      }
      if (Crypto.algorithms.indexOf(credentials.algorithm) === -1) {
        return callback(Boom.internal('Unknown algorithm'), credentials, bewit);
      }
      var mac = Crypto.calculateMac('bewit', credentials, {
        ts: bewit.exp,
        nonce: '',
        method: 'GET',
        resource: url,
        host: request.host,
        port: request.port,
        ext: bewit.ext
      });
      if (!Cryptiles.fixedTimeComparison(mac, bewit.mac)) {
        return callback(Boom.unauthorized('Bad mac', 'Hawk'), credentials, bewit);
      }
      return callback(null, credentials, bewit);
    });
  };
  exports.authenticateMessage = function(host, port, message, authorization, credentialsFunc, options, callback) {
    callback = Hoek.nextTick(callback);
    options.nonceFunc = options.nonceFunc || internals.nonceFunc;
    options.timestampSkewSec = options.timestampSkewSec || 60;
    var now = Utils.now(options.localtimeOffsetMsec);
    if (!authorization.id || !authorization.ts || !authorization.nonce || !authorization.hash || !authorization.mac) {
      return callback(Boom.badRequest('Invalid authorization'));
    }
    credentialsFunc(authorization.id, function(err, credentials) {
      if (err) {
        return callback(err, credentials || null);
      }
      if (!credentials) {
        return callback(Boom.unauthorized('Unknown credentials', 'Hawk'));
      }
      if (!credentials.key || !credentials.algorithm) {
        return callback(Boom.internal('Invalid credentials'), credentials);
      }
      if (Crypto.algorithms.indexOf(credentials.algorithm) === -1) {
        return callback(Boom.internal('Unknown algorithm'), credentials);
      }
      var artifacts = {
        ts: authorization.ts,
        nonce: authorization.nonce,
        host: host,
        port: port,
        hash: authorization.hash
      };
      var mac = Crypto.calculateMac('message', credentials, artifacts);
      if (!Cryptiles.fixedTimeComparison(mac, authorization.mac)) {
        return callback(Boom.unauthorized('Bad mac', 'Hawk'), credentials);
      }
      var hash = Crypto.calculatePayloadHash(message, credentials.algorithm);
      if (!Cryptiles.fixedTimeComparison(hash, authorization.hash)) {
        return callback(Boom.unauthorized('Bad message hash', 'Hawk'), credentials);
      }
      options.nonceFunc(credentials.key, authorization.nonce, authorization.ts, function(err) {
        if (err) {
          return callback(Boom.unauthorized('Invalid nonce', 'Hawk'), credentials);
        }
        if (Math.abs((authorization.ts * 1000) - now) > (options.timestampSkewSec * 1000)) {
          return callback(Boom.unauthorized('Stale timestamp'), credentials);
        }
        return callback(null, credentials);
      });
    });
  };
  internals.nonceFunc = function(key, nonce, ts, nonceCallback) {
    return nonceCallback();
  };
  return module.exports;
});

$__System.registerDynamic("npm:cryptiles@2.0.5/lib/index.js", ["@node/crypto", "npm:boom@2.10.1/lib/index.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Crypto = $__require('@node/crypto');
  var Boom = $__require('npm:boom@2.10.1/lib/index.js');
  var internals = {};
  exports.randomString = function(size) {
    var buffer = exports.randomBits((size + 1) * 6);
    if (buffer instanceof Error) {
      return buffer;
    }
    var string = buffer.toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '');
    return string.slice(0, size);
  };
  exports.randomBits = function(bits) {
    if (!bits || bits < 0) {
      return Boom.internal('Invalid random bits count');
    }
    var bytes = Math.ceil(bits / 8);
    try {
      return Crypto.randomBytes(bytes);
    } catch (err) {
      return Boom.internal('Failed generating random bits: ' + err.message);
    }
  };
  exports.fixedTimeComparison = function(a, b) {
    if (typeof a !== 'string' || typeof b !== 'string') {
      return false;
    }
    var mismatch = (a.length === b.length ? 0 : 1);
    if (mismatch) {
      b = a;
    }
    for (var i = 0,
        il = a.length; i < il; ++i) {
      var ac = a.charCodeAt(i);
      var bc = b.charCodeAt(i);
      mismatch |= (ac ^ bc);
    }
    return (mismatch === 0);
  };
  return module.exports;
});

$__System.registerDynamic("npm:hawk@3.1.3/lib/client.js", ["@node/url", "npm:hoek@2.16.3/lib/index.js", "npm:cryptiles@2.0.5/lib/index.js", "npm:hawk@3.1.3/lib/crypto.js", "npm:hawk@3.1.3/lib/utils.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Url = $__require('@node/url');
  var Hoek = $__require('npm:hoek@2.16.3/lib/index.js');
  var Cryptiles = $__require('npm:cryptiles@2.0.5/lib/index.js');
  var Crypto = $__require('npm:hawk@3.1.3/lib/crypto.js');
  var Utils = $__require('npm:hawk@3.1.3/lib/utils.js');
  var internals = {};
  exports.header = function(uri, method, options) {
    var result = {
      field: '',
      artifacts: {}
    };
    if (!uri || (typeof uri !== 'string' && typeof uri !== 'object') || !method || typeof method !== 'string' || !options || typeof options !== 'object') {
      result.err = 'Invalid argument type';
      return result;
    }
    var timestamp = options.timestamp || Utils.nowSecs(options.localtimeOffsetMsec);
    var credentials = options.credentials;
    if (!credentials || !credentials.id || !credentials.key || !credentials.algorithm) {
      result.err = 'Invalid credential object';
      return result;
    }
    if (Crypto.algorithms.indexOf(credentials.algorithm) === -1) {
      result.err = 'Unknown algorithm';
      return result;
    }
    if (typeof uri === 'string') {
      uri = Url.parse(uri);
    }
    var artifacts = {
      ts: timestamp,
      nonce: options.nonce || Cryptiles.randomString(6),
      method: method,
      resource: uri.pathname + (uri.search || ''),
      host: uri.hostname,
      port: uri.port || (uri.protocol === 'http:' ? 80 : 443),
      hash: options.hash,
      ext: options.ext,
      app: options.app,
      dlg: options.dlg
    };
    result.artifacts = artifacts;
    if (!artifacts.hash && (options.payload || options.payload === '')) {
      artifacts.hash = Crypto.calculatePayloadHash(options.payload, credentials.algorithm, options.contentType);
    }
    var mac = Crypto.calculateMac('header', credentials, artifacts);
    var hasExt = artifacts.ext !== null && artifacts.ext !== undefined && artifacts.ext !== '';
    var header = 'Hawk id="' + credentials.id + '", ts="' + artifacts.ts + '", nonce="' + artifacts.nonce + (artifacts.hash ? '", hash="' + artifacts.hash : '') + (hasExt ? '", ext="' + Hoek.escapeHeaderAttribute(artifacts.ext) : '') + '", mac="' + mac + '"';
    if (artifacts.app) {
      header += ', app="' + artifacts.app + (artifacts.dlg ? '", dlg="' + artifacts.dlg : '') + '"';
    }
    result.field = header;
    return result;
  };
  exports.authenticate = function(res, credentials, artifacts, options) {
    artifacts = Hoek.clone(artifacts);
    options = options || {};
    if (res.headers['www-authenticate']) {
      var wwwAttributes = Utils.parseAuthorizationHeader(res.headers['www-authenticate'], ['ts', 'tsm', 'error']);
      if (wwwAttributes instanceof Error) {
        return false;
      }
      if (wwwAttributes.ts) {
        var tsm = Crypto.calculateTsMac(wwwAttributes.ts, credentials);
        if (tsm !== wwwAttributes.tsm) {
          return false;
        }
      }
    }
    if (!res.headers['server-authorization'] && !options.required) {
      return true;
    }
    var attributes = Utils.parseAuthorizationHeader(res.headers['server-authorization'], ['mac', 'ext', 'hash']);
    if (attributes instanceof Error) {
      return false;
    }
    artifacts.ext = attributes.ext;
    artifacts.hash = attributes.hash;
    var mac = Crypto.calculateMac('response', credentials, artifacts);
    if (mac !== attributes.mac) {
      return false;
    }
    if (!options.payload && options.payload !== '') {
      return true;
    }
    if (!attributes.hash) {
      return false;
    }
    var calculatedHash = Crypto.calculatePayloadHash(options.payload, credentials.algorithm, res.headers['content-type']);
    return (calculatedHash === attributes.hash);
  };
  exports.getBewit = function(uri, options) {
    if (!uri || (typeof uri !== 'string' && typeof uri !== 'object') || !options || typeof options !== 'object' || !options.ttlSec) {
      return '';
    }
    options.ext = (options.ext === null || options.ext === undefined ? '' : options.ext);
    var now = Utils.now(options.localtimeOffsetMsec);
    var credentials = options.credentials;
    if (!credentials || !credentials.id || !credentials.key || !credentials.algorithm) {
      return '';
    }
    if (Crypto.algorithms.indexOf(credentials.algorithm) === -1) {
      return '';
    }
    if (typeof uri === 'string') {
      uri = Url.parse(uri);
    }
    var exp = Math.floor(now / 1000) + options.ttlSec;
    var mac = Crypto.calculateMac('bewit', credentials, {
      ts: exp,
      nonce: '',
      method: 'GET',
      resource: uri.pathname + (uri.search || ''),
      host: uri.hostname,
      port: uri.port || (uri.protocol === 'http:' ? 80 : 443),
      ext: options.ext
    });
    var bewit = credentials.id + '\\' + exp + '\\' + mac + '\\' + options.ext;
    return Hoek.base64urlEncode(bewit);
  };
  exports.message = function(host, port, message, options) {
    if (!host || typeof host !== 'string' || !port || typeof port !== 'number' || message === null || message === undefined || typeof message !== 'string' || !options || typeof options !== 'object') {
      return null;
    }
    var timestamp = options.timestamp || Utils.nowSecs(options.localtimeOffsetMsec);
    var credentials = options.credentials;
    if (!credentials || !credentials.id || !credentials.key || !credentials.algorithm) {
      return null;
    }
    if (Crypto.algorithms.indexOf(credentials.algorithm) === -1) {
      return null;
    }
    var artifacts = {
      ts: timestamp,
      nonce: options.nonce || Cryptiles.randomString(6),
      host: host,
      port: port,
      hash: Crypto.calculatePayloadHash(message, credentials.algorithm)
    };
    var result = {
      id: credentials.id,
      ts: artifacts.ts,
      nonce: artifacts.nonce,
      hash: artifacts.hash,
      mac: Crypto.calculateMac('message', credentials, artifacts)
    };
    return result;
  };
  return module.exports;
});

$__System.registerDynamic("npm:hawk@3.1.3/lib/crypto.js", ["@node/crypto", "@node/url", "npm:hawk@3.1.3/lib/utils.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Crypto = $__require('@node/crypto');
  var Url = $__require('@node/url');
  var Utils = $__require('npm:hawk@3.1.3/lib/utils.js');
  var internals = {};
  exports.headerVersion = '1';
  exports.algorithms = ['sha1', 'sha256'];
  exports.calculateMac = function(type, credentials, options) {
    var normalized = exports.generateNormalizedString(type, options);
    var hmac = Crypto.createHmac(credentials.algorithm, credentials.key).update(normalized);
    var digest = hmac.digest('base64');
    return digest;
  };
  exports.generateNormalizedString = function(type, options) {
    var resource = options.resource || '';
    if (resource && resource[0] !== '/') {
      var url = Url.parse(resource, false);
      resource = url.path;
    }
    var normalized = 'hawk.' + exports.headerVersion + '.' + type + '\n' + options.ts + '\n' + options.nonce + '\n' + (options.method || '').toUpperCase() + '\n' + resource + '\n' + options.host.toLowerCase() + '\n' + options.port + '\n' + (options.hash || '') + '\n';
    if (options.ext) {
      normalized += options.ext.replace('\\', '\\\\').replace('\n', '\\n');
    }
    normalized += '\n';
    if (options.app) {
      normalized += options.app + '\n' + (options.dlg || '') + '\n';
    }
    return normalized;
  };
  exports.calculatePayloadHash = function(payload, algorithm, contentType) {
    var hash = exports.initializePayloadHash(algorithm, contentType);
    hash.update(payload || '');
    return exports.finalizePayloadHash(hash);
  };
  exports.initializePayloadHash = function(algorithm, contentType) {
    var hash = Crypto.createHash(algorithm);
    hash.update('hawk.' + exports.headerVersion + '.payload\n');
    hash.update(Utils.parseContentType(contentType) + '\n');
    return hash;
  };
  exports.finalizePayloadHash = function(hash) {
    hash.update('\n');
    return hash.digest('base64');
  };
  exports.calculateTsMac = function(ts, credentials) {
    var hmac = Crypto.createHmac(credentials.algorithm, credentials.key);
    hmac.update('hawk.' + exports.headerVersion + '.ts\n' + ts + '\n');
    return hmac.digest('base64');
  };
  exports.timestampMessage = function(credentials, localtimeOffsetMsec) {
    var now = Utils.nowSecs(localtimeOffsetMsec);
    var tsm = exports.calculateTsMac(now, credentials);
    return {
      ts: now,
      tsm: tsm
    };
  };
  return module.exports;
});

$__System.registerDynamic("npm:sntp@1.0.9/lib/index.js", ["@node/dgram", "@node/dns", "npm:hoek@2.16.3/lib/index.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"),
      Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var Dgram = $__require('@node/dgram');
  var Dns = $__require('@node/dns');
  var Hoek = $__require('npm:hoek@2.16.3/lib/index.js');
  var internals = {};
  exports.time = function(options, callback) {
    if (arguments.length !== 2) {
      callback = arguments[0];
      options = {};
    }
    var settings = Hoek.clone(options);
    settings.host = settings.host || 'pool.ntp.org';
    settings.port = settings.port || 123;
    settings.resolveReference = settings.resolveReference || false;
    var timeoutId = 0;
    var sent = 0;
    var finish = function(err, result) {
      if (timeoutId) {
        clearTimeout(timeoutId);
        timeoutId = 0;
      }
      socket.removeAllListeners();
      socket.once('error', internals.ignore);
      socket.close();
      return callback(err, result);
    };
    finish = Hoek.once(finish);
    var socket = Dgram.createSocket('udp4');
    socket.once('error', function(err) {
      return finish(err);
    });
    socket.on('message', function(buffer, rinfo) {
      var received = Date.now();
      var message = new internals.NtpMessage(buffer);
      if (!message.isValid) {
        return finish(new Error('Invalid server response'), message);
      }
      if (message.originateTimestamp !== sent) {
        return finish(new Error('Wrong originate timestamp'), message);
      }
      var T1 = message.originateTimestamp;
      var T2 = message.receiveTimestamp;
      var T3 = message.transmitTimestamp;
      var T4 = received;
      message.d = (T4 - T1) - (T3 - T2);
      message.t = ((T2 - T1) + (T3 - T4)) / 2;
      message.receivedLocally = received;
      if (!settings.resolveReference || message.stratum !== 'secondary') {
        return finish(null, message);
      }
      Dns.reverse(message.referenceId, function(err, domains) {
        if (!err) {
          message.referenceHost = domains[0];
        }
        return finish(null, message);
      });
    });
    if (settings.timeout) {
      timeoutId = setTimeout(function() {
        timeoutId = 0;
        return finish(new Error('Timeout'));
      }, settings.timeout);
    }
    var message = new Buffer(48);
    for (var i = 0; i < 48; i++) {
      message[i] = 0;
    }
    message[0] = (0 << 6) + (4 << 3) + (3 << 0);
    sent = Date.now();
    internals.fromMsecs(sent, message, 40);
    socket.send(message, 0, message.length, settings.port, settings.host, function(err, bytes) {
      if (err || bytes !== 48) {
        return finish(err || new Error('Could not send entire message'));
      }
    });
  };
  internals.NtpMessage = function(buffer) {
    this.isValid = false;
    if (buffer.length !== 48) {
      return;
    }
    var li = (buffer[0] >> 6);
    switch (li) {
      case 0:
        this.leapIndicator = 'no-warning';
        break;
      case 1:
        this.leapIndicator = 'last-minute-61';
        break;
      case 2:
        this.leapIndicator = 'last-minute-59';
        break;
      case 3:
        this.leapIndicator = 'alarm';
        break;
    }
    var vn = ((buffer[0] & 0x38) >> 3);
    this.version = vn;
    var mode = (buffer[0] & 0x7);
    switch (mode) {
      case 1:
        this.mode = 'symmetric-active';
        break;
      case 2:
        this.mode = 'symmetric-passive';
        break;
      case 3:
        this.mode = 'client';
        break;
      case 4:
        this.mode = 'server';
        break;
      case 5:
        this.mode = 'broadcast';
        break;
      case 0:
      case 6:
      case 7:
        this.mode = 'reserved';
        break;
    }
    var stratum = buffer[1];
    if (stratum === 0) {
      this.stratum = 'death';
    } else if (stratum === 1) {
      this.stratum = 'primary';
    } else if (stratum <= 15) {
      this.stratum = 'secondary';
    } else {
      this.stratum = 'reserved';
    }
    this.pollInterval = Math.round(Math.pow(2, buffer[2])) * 1000;
    this.precision = Math.pow(2, buffer[3]) * 1000;
    var rootDelay = 256 * (256 * (256 * buffer[4] + buffer[5]) + buffer[6]) + buffer[7];
    this.rootDelay = 1000 * (rootDelay / 0x10000);
    this.rootDispersion = ((buffer[8] << 8) + buffer[9] + ((buffer[10] << 8) + buffer[11]) / Math.pow(2, 16)) * 1000;
    this.referenceId = '';
    switch (this.stratum) {
      case 'death':
      case 'primary':
        this.referenceId = String.fromCharCode(buffer[12]) + String.fromCharCode(buffer[13]) + String.fromCharCode(buffer[14]) + String.fromCharCode(buffer[15]);
        break;
      case 'secondary':
        this.referenceId = '' + buffer[12] + '.' + buffer[13] + '.' + buffer[14] + '.' + buffer[15];
        break;
    }
    this.referenceTimestamp = internals.toMsecs(buffer, 16);
    this.originateTimestamp = internals.toMsecs(buffer, 24);
    this.receiveTimestamp = internals.toMsecs(buffer, 32);
    this.transmitTimestamp = internals.toMsecs(buffer, 40);
    if (this.version === 4 && this.stratum !== 'reserved' && this.mode === 'server' && this.originateTimestamp && this.receiveTimestamp && this.transmitTimestamp) {
      this.isValid = true;
    }
    return this;
  };
  internals.toMsecs = function(buffer, offset) {
    var seconds = 0;
    var fraction = 0;
    for (var i = 0; i < 4; ++i) {
      seconds = (seconds * 256) + buffer[offset + i];
    }
    for (i = 4; i < 8; ++i) {
      fraction = (fraction * 256) + buffer[offset + i];
    }
    return ((seconds - 2208988800 + (fraction / Math.pow(2, 32))) * 1000);
  };
  internals.fromMsecs = function(ts, buffer, offset) {
    var seconds = Math.floor(ts / 1000) + 2208988800;
    var fraction = Math.round((ts % 1000) / 1000 * Math.pow(2, 32));
    buffer[offset + 0] = (seconds & 0xFF000000) >> 24;
    buffer[offset + 1] = (seconds & 0x00FF0000) >> 16;
    buffer[offset + 2] = (seconds & 0x0000FF00) >> 8;
    buffer[offset + 3] = (seconds & 0x000000FF);
    buffer[offset + 4] = (fraction & 0xFF000000) >> 24;
    buffer[offset + 5] = (fraction & 0x00FF0000) >> 16;
    buffer[offset + 6] = (fraction & 0x0000FF00) >> 8;
    buffer[offset + 7] = (fraction & 0x000000FF);
  };
  internals.last = {
    offset: 0,
    expires: 0,
    host: '',
    port: 0
  };
  exports.offset = function(options, callback) {
    if (arguments.length !== 2) {
      callback = arguments[0];
      options = {};
    }
    var now = Date.now();
    var clockSyncRefresh = options.clockSyncRefresh || 24 * 60 * 60 * 1000;
    if (internals.last.offset && internals.last.host === options.host && internals.last.port === options.port && now < internals.last.expires) {
      process.nextTick(function() {
        callback(null, internals.last.offset);
      });
      return;
    }
    exports.time(options, function(err, time) {
      if (err) {
        return callback(err, 0);
      }
      internals.last = {
        offset: Math.round(time.t),
        expires: now + clockSyncRefresh,
        host: options.host,
        port: options.port
      };
      return callback(null, internals.last.offset);
    });
  };
  internals.now = {intervalId: 0};
  exports.start = function(options, callback) {
    if (arguments.length !== 2) {
      callback = arguments[0];
      options = {};
    }
    if (internals.now.intervalId) {
      process.nextTick(function() {
        callback();
      });
      return;
    }
    exports.offset(options, function(err, offset) {
      internals.now.intervalId = setInterval(function() {
        exports.offset(options, function() {});
      }, options.clockSyncRefresh || 24 * 60 * 60 * 1000);
      return callback();
    });
  };
  exports.stop = function() {
    if (!internals.now.intervalId) {
      return;
    }
    clearInterval(internals.now.intervalId);
    internals.now.intervalId = 0;
  };
  exports.isLive = function() {
    return !!internals.now.intervalId;
  };
  exports.now = function() {
    var now = Date.now();
    if (!exports.isLive() || now >= internals.last.expires) {
      return now;
    }
    return now + internals.last.offset;
  };
  internals.ignore = function() {};
  return module.exports;
});

$__System.registerDynamic("npm:sntp@1.0.9/index.js", ["npm:sntp@1.0.9/lib/index.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('npm:sntp@1.0.9/lib/index.js');
  return module.exports;
});

$__System.registerDynamic("npm:hoek@2.16.3/lib/escape.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"),
      Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var internals = {};
  exports.escapeJavaScript = function(input) {
    if (!input) {
      return '';
    }
    var escaped = '';
    for (var i = 0,
        il = input.length; i < il; ++i) {
      var charCode = input.charCodeAt(i);
      if (internals.isSafe(charCode)) {
        escaped += input[i];
      } else {
        escaped += internals.escapeJavaScriptChar(charCode);
      }
    }
    return escaped;
  };
  exports.escapeHtml = function(input) {
    if (!input) {
      return '';
    }
    var escaped = '';
    for (var i = 0,
        il = input.length; i < il; ++i) {
      var charCode = input.charCodeAt(i);
      if (internals.isSafe(charCode)) {
        escaped += input[i];
      } else {
        escaped += internals.escapeHtmlChar(charCode);
      }
    }
    return escaped;
  };
  internals.escapeJavaScriptChar = function(charCode) {
    if (charCode >= 256) {
      return '\\u' + internals.padLeft('' + charCode, 4);
    }
    var hexValue = new Buffer(String.fromCharCode(charCode), 'ascii').toString('hex');
    return '\\x' + internals.padLeft(hexValue, 2);
  };
  internals.escapeHtmlChar = function(charCode) {
    var namedEscape = internals.namedHtml[charCode];
    if (typeof namedEscape !== 'undefined') {
      return namedEscape;
    }
    if (charCode >= 256) {
      return '&#' + charCode + ';';
    }
    var hexValue = new Buffer(String.fromCharCode(charCode), 'ascii').toString('hex');
    return '&#x' + internals.padLeft(hexValue, 2) + ';';
  };
  internals.padLeft = function(str, len) {
    while (str.length < len) {
      str = '0' + str;
    }
    return str;
  };
  internals.isSafe = function(charCode) {
    return (typeof internals.safeCharCodes[charCode] !== 'undefined');
  };
  internals.namedHtml = {
    '38': '&amp;',
    '60': '&lt;',
    '62': '&gt;',
    '34': '&quot;',
    '160': '&nbsp;',
    '162': '&cent;',
    '163': '&pound;',
    '164': '&curren;',
    '169': '&copy;',
    '174': '&reg;'
  };
  internals.safeCharCodes = (function() {
    var safe = {};
    for (var i = 32; i < 123; ++i) {
      if ((i >= 97) || (i >= 65 && i <= 90) || (i >= 48 && i <= 57) || i === 32 || i === 46 || i === 44 || i === 45 || i === 58 || i === 95) {
        safe[i] = null;
      }
    }
    return safe;
  }());
  return module.exports;
});

$__System.registerDynamic("npm:hoek@2.16.3/lib/index.js", ["@node/crypto", "@node/path", "@node/util", "npm:hoek@2.16.3/lib/escape.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"),
      Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var Crypto = $__require('@node/crypto');
  var Path = $__require('@node/path');
  var Util = $__require('@node/util');
  var Escape = $__require('npm:hoek@2.16.3/lib/escape.js');
  var internals = {};
  exports.clone = function(obj, seen) {
    if (typeof obj !== 'object' || obj === null) {
      return obj;
    }
    seen = seen || {
      orig: [],
      copy: []
    };
    var lookup = seen.orig.indexOf(obj);
    if (lookup !== -1) {
      return seen.copy[lookup];
    }
    var newObj;
    var cloneDeep = false;
    if (!Array.isArray(obj)) {
      if (Buffer.isBuffer(obj)) {
        newObj = new Buffer(obj);
      } else if (obj instanceof Date) {
        newObj = new Date(obj.getTime());
      } else if (obj instanceof RegExp) {
        newObj = new RegExp(obj);
      } else {
        var proto = Object.getPrototypeOf(obj);
        if (proto && proto.isImmutable) {
          newObj = obj;
        } else {
          newObj = Object.create(proto);
          cloneDeep = true;
        }
      }
    } else {
      newObj = [];
      cloneDeep = true;
    }
    seen.orig.push(obj);
    seen.copy.push(newObj);
    if (cloneDeep) {
      var keys = Object.getOwnPropertyNames(obj);
      for (var i = 0,
          il = keys.length; i < il; ++i) {
        var key = keys[i];
        var descriptor = Object.getOwnPropertyDescriptor(obj, key);
        if (descriptor && (descriptor.get || descriptor.set)) {
          Object.defineProperty(newObj, key, descriptor);
        } else {
          newObj[key] = exports.clone(obj[key], seen);
        }
      }
    }
    return newObj;
  };
  exports.merge = function(target, source, isNullOverride, isMergeArrays) {
    exports.assert(target && typeof target === 'object', 'Invalid target value: must be an object');
    exports.assert(source === null || source === undefined || typeof source === 'object', 'Invalid source value: must be null, undefined, or an object');
    if (!source) {
      return target;
    }
    if (Array.isArray(source)) {
      exports.assert(Array.isArray(target), 'Cannot merge array onto an object');
      if (isMergeArrays === false) {
        target.length = 0;
      }
      for (var i = 0,
          il = source.length; i < il; ++i) {
        target.push(exports.clone(source[i]));
      }
      return target;
    }
    var keys = Object.keys(source);
    for (var k = 0,
        kl = keys.length; k < kl; ++k) {
      var key = keys[k];
      var value = source[key];
      if (value && typeof value === 'object') {
        if (!target[key] || typeof target[key] !== 'object' || (Array.isArray(target[key]) ^ Array.isArray(value)) || value instanceof Date || Buffer.isBuffer(value) || value instanceof RegExp) {
          target[key] = exports.clone(value);
        } else {
          exports.merge(target[key], value, isNullOverride, isMergeArrays);
        }
      } else {
        if (value !== null && value !== undefined) {
          target[key] = value;
        } else if (isNullOverride !== false) {
          target[key] = value;
        }
      }
    }
    return target;
  };
  exports.applyToDefaults = function(defaults, options, isNullOverride) {
    exports.assert(defaults && typeof defaults === 'object', 'Invalid defaults value: must be an object');
    exports.assert(!options || options === true || typeof options === 'object', 'Invalid options value: must be true, falsy or an object');
    if (!options) {
      return null;
    }
    var copy = exports.clone(defaults);
    if (options === true) {
      return copy;
    }
    return exports.merge(copy, options, isNullOverride === true, false);
  };
  exports.cloneWithShallow = function(source, keys) {
    if (!source || typeof source !== 'object') {
      return source;
    }
    var storage = internals.store(source, keys);
    var copy = exports.clone(source);
    internals.restore(copy, source, storage);
    return copy;
  };
  internals.store = function(source, keys) {
    var storage = {};
    for (var i = 0,
        il = keys.length; i < il; ++i) {
      var key = keys[i];
      var value = exports.reach(source, key);
      if (value !== undefined) {
        storage[key] = value;
        internals.reachSet(source, key, undefined);
      }
    }
    return storage;
  };
  internals.restore = function(copy, source, storage) {
    var keys = Object.keys(storage);
    for (var i = 0,
        il = keys.length; i < il; ++i) {
      var key = keys[i];
      internals.reachSet(copy, key, storage[key]);
      internals.reachSet(source, key, storage[key]);
    }
  };
  internals.reachSet = function(obj, key, value) {
    var path = key.split('.');
    var ref = obj;
    for (var i = 0,
        il = path.length; i < il; ++i) {
      var segment = path[i];
      if (i + 1 === il) {
        ref[segment] = value;
      }
      ref = ref[segment];
    }
  };
  exports.applyToDefaultsWithShallow = function(defaults, options, keys) {
    exports.assert(defaults && typeof defaults === 'object', 'Invalid defaults value: must be an object');
    exports.assert(!options || options === true || typeof options === 'object', 'Invalid options value: must be true, falsy or an object');
    exports.assert(keys && Array.isArray(keys), 'Invalid keys');
    if (!options) {
      return null;
    }
    var copy = exports.cloneWithShallow(defaults, keys);
    if (options === true) {
      return copy;
    }
    var storage = internals.store(options, keys);
    exports.merge(copy, options, false, false);
    internals.restore(copy, options, storage);
    return copy;
  };
  exports.deepEqual = function(obj, ref, options, seen) {
    options = options || {prototype: true};
    var type = typeof obj;
    if (type !== typeof ref) {
      return false;
    }
    if (type !== 'object' || obj === null || ref === null) {
      if (obj === ref) {
        return obj !== 0 || 1 / obj === 1 / ref;
      }
      return obj !== obj && ref !== ref;
    }
    seen = seen || [];
    if (seen.indexOf(obj) !== -1) {
      return true;
    }
    seen.push(obj);
    if (Array.isArray(obj)) {
      if (!Array.isArray(ref)) {
        return false;
      }
      if (!options.part && obj.length !== ref.length) {
        return false;
      }
      for (var i = 0,
          il = obj.length; i < il; ++i) {
        if (options.part) {
          var found = false;
          for (var r = 0,
              rl = ref.length; r < rl; ++r) {
            if (exports.deepEqual(obj[i], ref[r], options, seen)) {
              found = true;
              break;
            }
          }
          return found;
        }
        if (!exports.deepEqual(obj[i], ref[i], options, seen)) {
          return false;
        }
      }
      return true;
    }
    if (Buffer.isBuffer(obj)) {
      if (!Buffer.isBuffer(ref)) {
        return false;
      }
      if (obj.length !== ref.length) {
        return false;
      }
      for (var j = 0,
          jl = obj.length; j < jl; ++j) {
        if (obj[j] !== ref[j]) {
          return false;
        }
      }
      return true;
    }
    if (obj instanceof Date) {
      return (ref instanceof Date && obj.getTime() === ref.getTime());
    }
    if (obj instanceof RegExp) {
      return (ref instanceof RegExp && obj.toString() === ref.toString());
    }
    if (options.prototype) {
      if (Object.getPrototypeOf(obj) !== Object.getPrototypeOf(ref)) {
        return false;
      }
    }
    var keys = Object.getOwnPropertyNames(obj);
    if (!options.part && keys.length !== Object.getOwnPropertyNames(ref).length) {
      return false;
    }
    for (var k = 0,
        kl = keys.length; k < kl; ++k) {
      var key = keys[k];
      var descriptor = Object.getOwnPropertyDescriptor(obj, key);
      if (descriptor.get) {
        if (!exports.deepEqual(descriptor, Object.getOwnPropertyDescriptor(ref, key), options, seen)) {
          return false;
        }
      } else if (!exports.deepEqual(obj[key], ref[key], options, seen)) {
        return false;
      }
    }
    return true;
  };
  exports.unique = function(array, key) {
    var index = {};
    var result = [];
    for (var i = 0,
        il = array.length; i < il; ++i) {
      var id = (key ? array[i][key] : array[i]);
      if (index[id] !== true) {
        result.push(array[i]);
        index[id] = true;
      }
    }
    return result;
  };
  exports.mapToObject = function(array, key) {
    if (!array) {
      return null;
    }
    var obj = {};
    for (var i = 0,
        il = array.length; i < il; ++i) {
      if (key) {
        if (array[i][key]) {
          obj[array[i][key]] = true;
        }
      } else {
        obj[array[i]] = true;
      }
    }
    return obj;
  };
  exports.intersect = function(array1, array2, justFirst) {
    if (!array1 || !array2) {
      return [];
    }
    var common = [];
    var hash = (Array.isArray(array1) ? exports.mapToObject(array1) : array1);
    var found = {};
    for (var i = 0,
        il = array2.length; i < il; ++i) {
      if (hash[array2[i]] && !found[array2[i]]) {
        if (justFirst) {
          return array2[i];
        }
        common.push(array2[i]);
        found[array2[i]] = true;
      }
    }
    return (justFirst ? null : common);
  };
  exports.contain = function(ref, values, options) {
    var valuePairs = null;
    if (typeof ref === 'object' && typeof values === 'object' && !Array.isArray(ref) && !Array.isArray(values)) {
      valuePairs = values;
      values = Object.keys(values);
    } else {
      values = [].concat(values);
    }
    options = options || {};
    exports.assert(arguments.length >= 2, 'Insufficient arguments');
    exports.assert(typeof ref === 'string' || typeof ref === 'object', 'Reference must be string or an object');
    exports.assert(values.length, 'Values array cannot be empty');
    var compare,
        compareFlags;
    if (options.deep) {
      compare = exports.deepEqual;
      var hasOnly = options.hasOwnProperty('only'),
          hasPart = options.hasOwnProperty('part');
      compareFlags = {
        prototype: hasOnly ? options.only : hasPart ? !options.part : false,
        part: hasOnly ? !options.only : hasPart ? options.part : true
      };
    } else {
      compare = function(a, b) {
        return a === b;
      };
    }
    var misses = false;
    var matches = new Array(values.length);
    for (var i = 0,
        il = matches.length; i < il; ++i) {
      matches[i] = 0;
    }
    if (typeof ref === 'string') {
      var pattern = '(';
      for (i = 0, il = values.length; i < il; ++i) {
        var value = values[i];
        exports.assert(typeof value === 'string', 'Cannot compare string reference to non-string value');
        pattern += (i ? '|' : '') + exports.escapeRegex(value);
      }
      var regex = new RegExp(pattern + ')', 'g');
      var leftovers = ref.replace(regex, function($0, $1) {
        var index = values.indexOf($1);
        ++matches[index];
        return '';
      });
      misses = !!leftovers;
    } else if (Array.isArray(ref)) {
      for (i = 0, il = ref.length; i < il; ++i) {
        for (var j = 0,
            jl = values.length,
            matched = false; j < jl && matched === false; ++j) {
          matched = compare(values[j], ref[i], compareFlags) && j;
        }
        if (matched !== false) {
          ++matches[matched];
        } else {
          misses = true;
        }
      }
    } else {
      var keys = Object.keys(ref);
      for (i = 0, il = keys.length; i < il; ++i) {
        var key = keys[i];
        var pos = values.indexOf(key);
        if (pos !== -1) {
          if (valuePairs && !compare(valuePairs[key], ref[key], compareFlags)) {
            return false;
          }
          ++matches[pos];
        } else {
          misses = true;
        }
      }
    }
    var result = false;
    for (i = 0, il = matches.length; i < il; ++i) {
      result = result || !!matches[i];
      if ((options.once && matches[i] > 1) || (!options.part && !matches[i])) {
        return false;
      }
    }
    if (options.only && misses) {
      return false;
    }
    return result;
  };
  exports.flatten = function(array, target) {
    var result = target || [];
    for (var i = 0,
        il = array.length; i < il; ++i) {
      if (Array.isArray(array[i])) {
        exports.flatten(array[i], result);
      } else {
        result.push(array[i]);
      }
    }
    return result;
  };
  exports.reach = function(obj, chain, options) {
    if (chain === false || chain === null || typeof chain === 'undefined') {
      return obj;
    }
    options = options || {};
    if (typeof options === 'string') {
      options = {separator: options};
    }
    var path = chain.split(options.separator || '.');
    var ref = obj;
    for (var i = 0,
        il = path.length; i < il; ++i) {
      var key = path[i];
      if (key[0] === '-' && Array.isArray(ref)) {
        key = key.slice(1, key.length);
        key = ref.length - key;
      }
      if (!ref || !ref.hasOwnProperty(key) || (typeof ref !== 'object' && options.functions === false)) {
        exports.assert(!options.strict || i + 1 === il, 'Missing segment', key, 'in reach path ', chain);
        exports.assert(typeof ref === 'object' || options.functions === true || typeof ref !== 'function', 'Invalid segment', key, 'in reach path ', chain);
        ref = options.default;
        break;
      }
      ref = ref[key];
    }
    return ref;
  };
  exports.reachTemplate = function(obj, template, options) {
    return template.replace(/{([^}]+)}/g, function($0, chain) {
      var value = exports.reach(obj, chain, options);
      return (value === undefined || value === null ? '' : value);
    });
  };
  exports.formatStack = function(stack) {
    var trace = [];
    for (var i = 0,
        il = stack.length; i < il; ++i) {
      var item = stack[i];
      trace.push([item.getFileName(), item.getLineNumber(), item.getColumnNumber(), item.getFunctionName(), item.isConstructor()]);
    }
    return trace;
  };
  exports.formatTrace = function(trace) {
    var display = [];
    for (var i = 0,
        il = trace.length; i < il; ++i) {
      var row = trace[i];
      display.push((row[4] ? 'new ' : '') + row[3] + ' (' + row[0] + ':' + row[1] + ':' + row[2] + ')');
    }
    return display;
  };
  exports.callStack = function(slice) {
    var v8 = Error.prepareStackTrace;
    Error.prepareStackTrace = function(err, stack) {
      return stack;
    };
    var capture = {};
    Error.captureStackTrace(capture, arguments.callee);
    var stack = capture.stack;
    Error.prepareStackTrace = v8;
    var trace = exports.formatStack(stack);
    if (slice) {
      return trace.slice(slice);
    }
    return trace;
  };
  exports.displayStack = function(slice) {
    var trace = exports.callStack(slice === undefined ? 1 : slice + 1);
    return exports.formatTrace(trace);
  };
  exports.abortThrow = false;
  exports.abort = function(message, hideStack) {
    if ("production" === 'test' || exports.abortThrow === true) {
      throw new Error(message || 'Unknown error');
    }
    var stack = '';
    if (!hideStack) {
      stack = exports.displayStack(1).join('\n\t');
    }
    console.log('ABORT: ' + message + '\n\t' + stack);
    process.exit(1);
  };
  exports.assert = function(condition) {
    if (condition) {
      return;
    }
    if (arguments.length === 2 && arguments[1] instanceof Error) {
      throw arguments[1];
    }
    var msgs = [];
    for (var i = 1,
        il = arguments.length; i < il; ++i) {
      if (arguments[i] !== '') {
        msgs.push(arguments[i]);
      }
    }
    msgs = msgs.map(function(msg) {
      return typeof msg === 'string' ? msg : msg instanceof Error ? msg.message : exports.stringify(msg);
    });
    throw new Error(msgs.join(' ') || 'Unknown error');
  };
  exports.Timer = function() {
    this.ts = 0;
    this.reset();
  };
  exports.Timer.prototype.reset = function() {
    this.ts = Date.now();
  };
  exports.Timer.prototype.elapsed = function() {
    return Date.now() - this.ts;
  };
  exports.Bench = function() {
    this.ts = 0;
    this.reset();
  };
  exports.Bench.prototype.reset = function() {
    this.ts = exports.Bench.now();
  };
  exports.Bench.prototype.elapsed = function() {
    return exports.Bench.now() - this.ts;
  };
  exports.Bench.now = function() {
    var ts = process.hrtime();
    return (ts[0] * 1e3) + (ts[1] / 1e6);
  };
  exports.escapeRegex = function(string) {
    return string.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g, '\\$&');
  };
  exports.base64urlEncode = function(value, encoding) {
    var buf = (Buffer.isBuffer(value) ? value : new Buffer(value, encoding || 'binary'));
    return buf.toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '');
  };
  exports.base64urlDecode = function(value, encoding) {
    if (value && !/^[\w\-]*$/.test(value)) {
      return new Error('Invalid character');
    }
    try {
      var buf = new Buffer(value, 'base64');
      return (encoding === 'buffer' ? buf : buf.toString(encoding || 'binary'));
    } catch (err) {
      return err;
    }
  };
  exports.escapeHeaderAttribute = function(attribute) {
    exports.assert(/^[ \w\!#\$%&'\(\)\*\+,\-\.\/\:;<\=>\?@\[\]\^`\{\|\}~\"\\]*$/.test(attribute), 'Bad attribute value (' + attribute + ')');
    return attribute.replace(/\\/g, '\\\\').replace(/\"/g, '\\"');
  };
  exports.escapeHtml = function(string) {
    return Escape.escapeHtml(string);
  };
  exports.escapeJavaScript = function(string) {
    return Escape.escapeJavaScript(string);
  };
  exports.nextTick = function(callback) {
    return function() {
      var args = arguments;
      process.nextTick(function() {
        callback.apply(null, args);
      });
    };
  };
  exports.once = function(method) {
    if (method._hoekOnce) {
      return method;
    }
    var once = false;
    var wrapped = function() {
      if (!once) {
        once = true;
        method.apply(null, arguments);
      }
    };
    wrapped._hoekOnce = true;
    return wrapped;
  };
  exports.isAbsolutePath = function(path, platform) {
    if (!path) {
      return false;
    }
    if (Path.isAbsolute) {
      return Path.isAbsolute(path);
    }
    platform = platform || process.platform;
    if (platform !== 'win32') {
      return path[0] === '/';
    }
    return !!/^(?:[a-zA-Z]:[\\\/])|(?:[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/])/.test(path);
  };
  exports.isInteger = function(value) {
    return (typeof value === 'number' && parseFloat(value) === parseInt(value, 10) && !isNaN(value));
  };
  exports.ignore = function() {};
  exports.inherits = Util.inherits;
  exports.format = Util.format;
  exports.transform = function(source, transform, options) {
    exports.assert(source === null || source === undefined || typeof source === 'object' || Array.isArray(source), 'Invalid source object: must be null, undefined, an object, or an array');
    if (Array.isArray(source)) {
      var results = [];
      for (var i = 0,
          il = source.length; i < il; ++i) {
        results.push(exports.transform(source[i], transform, options));
      }
      return results;
    }
    var result = {};
    var keys = Object.keys(transform);
    for (var k = 0,
        kl = keys.length; k < kl; ++k) {
      var key = keys[k];
      var path = key.split('.');
      var sourcePath = transform[key];
      exports.assert(typeof sourcePath === 'string', 'All mappings must be "." delineated strings');
      var segment;
      var res = result;
      while (path.length > 1) {
        segment = path.shift();
        if (!res[segment]) {
          res[segment] = {};
        }
        res = res[segment];
      }
      segment = path.shift();
      res[segment] = exports.reach(source, sourcePath, options);
    }
    return result;
  };
  exports.uniqueFilename = function(path, extension) {
    if (extension) {
      extension = extension[0] !== '.' ? '.' + extension : extension;
    } else {
      extension = '';
    }
    path = Path.resolve(path);
    var name = [Date.now(), process.pid, Crypto.randomBytes(8).toString('hex')].join('-') + extension;
    return Path.join(path, name);
  };
  exports.stringify = function() {
    try {
      return JSON.stringify.apply(null, arguments);
    } catch (err) {
      return '[Cannot display object: ' + err.message + ']';
    }
  };
  exports.shallow = function(source) {
    var target = {};
    var keys = Object.keys(source);
    for (var i = 0,
        il = keys.length; i < il; ++i) {
      var key = keys[i];
      target[key] = source[key];
    }
    return target;
  };
  return module.exports;
});

$__System.registerDynamic("npm:boom@2.10.1/lib/index.js", ["@node/http", "npm:hoek@2.16.3/lib/index.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Http = $__require('@node/http');
  var Hoek = $__require('npm:hoek@2.16.3/lib/index.js');
  var internals = {};
  exports.wrap = function(error, statusCode, message) {
    Hoek.assert(error instanceof Error, 'Cannot wrap non-Error object');
    return (error.isBoom ? error : internals.initialize(error, statusCode || 500, message));
  };
  exports.create = function(statusCode, message, data) {
    return internals.create(statusCode, message, data, exports.create);
  };
  internals.create = function(statusCode, message, data, ctor) {
    var error = new Error(message ? message : undefined);
    Error.captureStackTrace(error, ctor);
    error.data = data || null;
    internals.initialize(error, statusCode);
    return error;
  };
  internals.initialize = function(error, statusCode, message) {
    var numberCode = parseInt(statusCode, 10);
    Hoek.assert(!isNaN(numberCode) && numberCode >= 400, 'First argument must be a number (400+):', statusCode);
    error.isBoom = true;
    error.isServer = numberCode >= 500;
    if (!error.hasOwnProperty('data')) {
      error.data = null;
    }
    error.output = {
      statusCode: numberCode,
      payload: {},
      headers: {}
    };
    error.reformat = internals.reformat;
    error.reformat();
    if (!message && !error.message) {
      message = error.output.payload.error;
    }
    if (message) {
      error.message = (message + (error.message ? ': ' + error.message : ''));
    }
    return error;
  };
  internals.reformat = function() {
    this.output.payload.statusCode = this.output.statusCode;
    this.output.payload.error = Http.STATUS_CODES[this.output.statusCode] || 'Unknown';
    if (this.output.statusCode === 500) {
      this.output.payload.message = 'An internal server error occurred';
    } else if (this.message) {
      this.output.payload.message = this.message;
    }
  };
  exports.badRequest = function(message, data) {
    return internals.create(400, message, data, exports.badRequest);
  };
  exports.unauthorized = function(message, scheme, attributes) {
    var err = internals.create(401, message, undefined, exports.unauthorized);
    if (!scheme) {
      return err;
    }
    var wwwAuthenticate = '';
    var i = 0;
    var il = 0;
    if (typeof scheme === 'string') {
      wwwAuthenticate = scheme;
      if (attributes || message) {
        err.output.payload.attributes = {};
      }
      if (attributes) {
        var names = Object.keys(attributes);
        for (i = 0, il = names.length; i < il; ++i) {
          var name = names[i];
          if (i) {
            wwwAuthenticate += ',';
          }
          var value = attributes[name];
          if (value === null || value === undefined) {
            value = '';
          }
          wwwAuthenticate += ' ' + name + '="' + Hoek.escapeHeaderAttribute(value.toString()) + '"';
          err.output.payload.attributes[name] = value;
        }
      }
      if (message) {
        if (attributes) {
          wwwAuthenticate += ',';
        }
        wwwAuthenticate += ' error="' + Hoek.escapeHeaderAttribute(message) + '"';
        err.output.payload.attributes.error = message;
      } else {
        err.isMissing = true;
      }
    } else {
      var wwwArray = scheme;
      for (i = 0, il = wwwArray.length; i < il; ++i) {
        if (i) {
          wwwAuthenticate += ', ';
        }
        wwwAuthenticate += wwwArray[i];
      }
    }
    err.output.headers['WWW-Authenticate'] = wwwAuthenticate;
    return err;
  };
  exports.forbidden = function(message, data) {
    return internals.create(403, message, data, exports.forbidden);
  };
  exports.notFound = function(message, data) {
    return internals.create(404, message, data, exports.notFound);
  };
  exports.methodNotAllowed = function(message, data) {
    return internals.create(405, message, data, exports.methodNotAllowed);
  };
  exports.notAcceptable = function(message, data) {
    return internals.create(406, message, data, exports.notAcceptable);
  };
  exports.proxyAuthRequired = function(message, data) {
    return internals.create(407, message, data, exports.proxyAuthRequired);
  };
  exports.clientTimeout = function(message, data) {
    return internals.create(408, message, data, exports.clientTimeout);
  };
  exports.conflict = function(message, data) {
    return internals.create(409, message, data, exports.conflict);
  };
  exports.resourceGone = function(message, data) {
    return internals.create(410, message, data, exports.resourceGone);
  };
  exports.lengthRequired = function(message, data) {
    return internals.create(411, message, data, exports.lengthRequired);
  };
  exports.preconditionFailed = function(message, data) {
    return internals.create(412, message, data, exports.preconditionFailed);
  };
  exports.entityTooLarge = function(message, data) {
    return internals.create(413, message, data, exports.entityTooLarge);
  };
  exports.uriTooLong = function(message, data) {
    return internals.create(414, message, data, exports.uriTooLong);
  };
  exports.unsupportedMediaType = function(message, data) {
    return internals.create(415, message, data, exports.unsupportedMediaType);
  };
  exports.rangeNotSatisfiable = function(message, data) {
    return internals.create(416, message, data, exports.rangeNotSatisfiable);
  };
  exports.expectationFailed = function(message, data) {
    return internals.create(417, message, data, exports.expectationFailed);
  };
  exports.badData = function(message, data) {
    return internals.create(422, message, data, exports.badData);
  };
  exports.preconditionRequired = function(message, data) {
    return internals.create(428, message, data, exports.preconditionRequired);
  };
  exports.tooManyRequests = function(message, data) {
    return internals.create(429, message, data, exports.tooManyRequests);
  };
  exports.internal = function(message, data, statusCode) {
    return internals.serverError(message, data, statusCode, exports.internal);
  };
  internals.serverError = function(message, data, statusCode, ctor) {
    var error;
    if (data instanceof Error) {
      error = exports.wrap(data, statusCode, message);
    } else {
      error = internals.create(statusCode || 500, message, undefined, ctor);
      error.data = data;
    }
    return error;
  };
  exports.notImplemented = function(message, data) {
    return internals.serverError(message, data, 501, exports.notImplemented);
  };
  exports.badGateway = function(message, data) {
    return internals.serverError(message, data, 502, exports.badGateway);
  };
  exports.serverTimeout = function(message, data) {
    return internals.serverError(message, data, 503, exports.serverTimeout);
  };
  exports.gatewayTimeout = function(message, data) {
    return internals.serverError(message, data, 504, exports.gatewayTimeout);
  };
  exports.badImplementation = function(message, data) {
    var err = internals.serverError(message, data, 500, exports.badImplementation);
    err.isDeveloperError = true;
    return err;
  };
  return module.exports;
});

$__System.registerDynamic("npm:hawk@3.1.3/package.json", [], false, function() {
  return {
    "name": "hawk",
    "description": "HTTP Hawk Authentication Scheme",
    "version": "3.1.3",
    "author": "Eran Hammer <eran@hammer.io> (http://hueniverse.com)",
    "contributors": [],
    "repository": "git://github.com/hueniverse/hawk",
    "main": "lib/index.js",
    "keywords": [
      "http",
      "authentication",
      "scheme",
      "hawk"
    ],
    "engines": {
      "node": ">=0.10.32"
    },
    "browser": "./lib/browser.js",
    "dependencies": {
      "hoek": "2.x.x",
      "boom": "2.x.x",
      "cryptiles": "2.x.x",
      "sntp": "1.x.x"
    },
    "devDependencies": {
      "code": "1.x.x",
      "lab": "5.x.x"
    },
    "scripts": {
      "test": "lab -a code -t 100 -L",
      "test-cov-html": "lab -a code -r html -o coverage.html"
    },
    "license": "BSD-3-Clause"
  };
});

$__System.registerDynamic("npm:hawk@3.1.3/lib/utils.js", ["npm:sntp@1.0.9/index.js", "npm:boom@2.10.1/lib/index.js", "npm:hawk@3.1.3/package.json", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Sntp = $__require('npm:sntp@1.0.9/index.js');
  var Boom = $__require('npm:boom@2.10.1/lib/index.js');
  var internals = {};
  exports.version = function() {
    return $__require('npm:hawk@3.1.3/package.json').version;
  };
  exports.limits = {maxMatchLength: 4096};
  internals.hostHeaderRegex = /^(?:(?:\r\n)?\s)*((?:[^:]+)|(?:\[[^\]]+\]))(?::(\d+))?(?:(?:\r\n)?\s)*$/;
  exports.parseHost = function(req, hostHeaderName) {
    hostHeaderName = (hostHeaderName ? hostHeaderName.toLowerCase() : 'host');
    var hostHeader = req.headers[hostHeaderName];
    if (!hostHeader) {
      return null;
    }
    if (hostHeader.length > exports.limits.maxMatchLength) {
      return null;
    }
    var hostParts = hostHeader.match(internals.hostHeaderRegex);
    if (!hostParts) {
      return null;
    }
    return {
      name: hostParts[1],
      port: (hostParts[2] ? hostParts[2] : (req.connection && req.connection.encrypted ? 443 : 80))
    };
  };
  exports.parseContentType = function(header) {
    if (!header) {
      return '';
    }
    return header.split(';')[0].trim().toLowerCase();
  };
  exports.parseRequest = function(req, options) {
    if (!req.headers) {
      return req;
    }
    var host;
    if (!options.host || !options.port) {
      host = exports.parseHost(req, options.hostHeaderName);
      if (!host) {
        return new Error('Invalid Host header');
      }
    }
    var request = {
      method: req.method,
      url: req.url,
      host: options.host || host.name,
      port: options.port || host.port,
      authorization: req.headers.authorization,
      contentType: req.headers['content-type'] || ''
    };
    return request;
  };
  exports.now = function(localtimeOffsetMsec) {
    return Sntp.now() + (localtimeOffsetMsec || 0);
  };
  exports.nowSecs = function(localtimeOffsetMsec) {
    return Math.floor(exports.now(localtimeOffsetMsec) / 1000);
  };
  internals.authHeaderRegex = /^(\w+)(?:\s+(.*))?$/;
  internals.attributeRegex = /^[ \w\!#\$%&'\(\)\*\+,\-\.\/\:;<\=>\?@\[\]\^`\{\|\}~]+$/;
  exports.parseAuthorizationHeader = function(header, keys) {
    keys = keys || ['id', 'ts', 'nonce', 'hash', 'ext', 'mac', 'app', 'dlg'];
    if (!header) {
      return Boom.unauthorized(null, 'Hawk');
    }
    if (header.length > exports.limits.maxMatchLength) {
      return Boom.badRequest('Header length too long');
    }
    var headerParts = header.match(internals.authHeaderRegex);
    if (!headerParts) {
      return Boom.badRequest('Invalid header syntax');
    }
    var scheme = headerParts[1];
    if (scheme.toLowerCase() !== 'hawk') {
      return Boom.unauthorized(null, 'Hawk');
    }
    var attributesString = headerParts[2];
    if (!attributesString) {
      return Boom.badRequest('Invalid header syntax');
    }
    var attributes = {};
    var errorMessage = '';
    var verify = attributesString.replace(/(\w+)="([^"\\]*)"\s*(?:,\s*|$)/g, function($0, $1, $2) {
      if (keys.indexOf($1) === -1) {
        errorMessage = 'Unknown attribute: ' + $1;
        return;
      }
      if ($2.match(internals.attributeRegex) === null) {
        errorMessage = 'Bad attribute value: ' + $1;
        return;
      }
      if (attributes.hasOwnProperty($1)) {
        errorMessage = 'Duplicate attribute: ' + $1;
        return;
      }
      attributes[$1] = $2;
      return '';
    });
    if (verify !== '') {
      return Boom.badRequest(errorMessage || 'Bad header format');
    }
    return attributes;
  };
  exports.unauthorized = function(message, attributes) {
    return Boom.unauthorized(message, 'Hawk', attributes);
  };
  return module.exports;
});

$__System.registerDynamic("npm:hawk@3.1.3/lib/index.js", ["npm:boom@2.10.1/lib/index.js", "npm:sntp@1.0.9/index.js", "npm:hawk@3.1.3/lib/server.js", "npm:hawk@3.1.3/lib/client.js", "npm:hawk@3.1.3/lib/crypto.js", "npm:hawk@3.1.3/lib/utils.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  exports.error = exports.Error = $__require('npm:boom@2.10.1/lib/index.js');
  exports.sntp = $__require('npm:sntp@1.0.9/index.js');
  exports.server = $__require('npm:hawk@3.1.3/lib/server.js');
  exports.client = $__require('npm:hawk@3.1.3/lib/client.js');
  exports.crypto = $__require('npm:hawk@3.1.3/lib/crypto.js');
  exports.utils = $__require('npm:hawk@3.1.3/lib/utils.js');
  exports.uri = {
    authenticate: exports.server.authenticateBewit,
    getBewit: exports.client.getBewit
  };
  return module.exports;
});

$__System.registerDynamic("npm:aws-sign2@0.6.0/index.js", ["@node/crypto", "@node/url"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var crypto = $__require('@node/crypto'),
      parse = $__require('@node/url').parse;
  ;
  var keys = ['acl', 'location', 'logging', 'notification', 'partNumber', 'policy', 'requestPayment', 'torrent', 'uploadId', 'uploads', 'versionId', 'versioning', 'versions', 'website'];
  function authorization(options) {
    return 'AWS ' + options.key + ':' + sign(options);
  }
  module.exports = authorization;
  module.exports.authorization = authorization;
  function hmacSha1(options) {
    return crypto.createHmac('sha1', options.secret).update(options.message).digest('base64');
  }
  module.exports.hmacSha1 = hmacSha1;
  function sign(options) {
    options.message = stringToSign(options);
    return hmacSha1(options);
  }
  module.exports.sign = sign;
  function signQuery(options) {
    options.message = queryStringToSign(options);
    return hmacSha1(options);
  }
  module.exports.signQuery = signQuery;
  function stringToSign(options) {
    var headers = options.amazonHeaders || '';
    if (headers)
      headers += '\n';
    var r = [options.verb, options.md5, options.contentType, options.date ? options.date.toUTCString() : '', headers + options.resource];
    return r.join('\n');
  }
  module.exports.queryStringToSign = stringToSign;
  function queryStringToSign(options) {
    return 'GET\n\n\n' + options.date + '\n' + options.resource;
  }
  module.exports.queryStringToSign = queryStringToSign;
  function canonicalizeHeaders(headers) {
    var buf = [],
        fields = Object.keys(headers);
    ;
    for (var i = 0,
        len = fields.length; i < len; ++i) {
      var field = fields[i],
          val = headers[field],
          field = field.toLowerCase();
      ;
      if (0 !== field.indexOf('x-amz'))
        continue;
      buf.push(field + ':' + val);
    }
    return buf.sort().join('\n');
  }
  module.exports.canonicalizeHeaders = canonicalizeHeaders;
  function canonicalizeResource(resource) {
    var url = parse(resource, true),
        path = url.pathname,
        buf = [];
    ;
    Object.keys(url.query).forEach(function(key) {
      if (!~keys.indexOf(key))
        return;
      var val = '' == url.query[key] ? '' : '=' + encodeURIComponent(url.query[key]);
      buf.push(key + val);
    });
    return path + (buf.length ? '?' + buf.sort().join('&') : '');
  }
  module.exports.canonicalizeResource = canonicalizeResource;
  return module.exports;
});

$__System.registerDynamic("npm:http-signature@1.1.1/lib/parser.js", ["npm:assert-plus@0.2.0/assert.js", "@node/util", "npm:http-signature@1.1.1/lib/utils.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var assert = $__require('npm:assert-plus@0.2.0/assert.js');
  var util = $__require('@node/util');
  var utils = $__require('npm:http-signature@1.1.1/lib/utils.js');
  var HASH_ALGOS = utils.HASH_ALGOS;
  var PK_ALGOS = utils.PK_ALGOS;
  var HttpSignatureError = utils.HttpSignatureError;
  var InvalidAlgorithmError = utils.InvalidAlgorithmError;
  var validateAlgorithm = utils.validateAlgorithm;
  var State = {
    New: 0,
    Params: 1
  };
  var ParamsState = {
    Name: 0,
    Quote: 1,
    Value: 2,
    Comma: 3
  };
  function ExpiredRequestError(message) {
    HttpSignatureError.call(this, message, ExpiredRequestError);
  }
  util.inherits(ExpiredRequestError, HttpSignatureError);
  function InvalidHeaderError(message) {
    HttpSignatureError.call(this, message, InvalidHeaderError);
  }
  util.inherits(InvalidHeaderError, HttpSignatureError);
  function InvalidParamsError(message) {
    HttpSignatureError.call(this, message, InvalidParamsError);
  }
  util.inherits(InvalidParamsError, HttpSignatureError);
  function MissingHeaderError(message) {
    HttpSignatureError.call(this, message, MissingHeaderError);
  }
  util.inherits(MissingHeaderError, HttpSignatureError);
  function StrictParsingError(message) {
    HttpSignatureError.call(this, message, StrictParsingError);
  }
  util.inherits(StrictParsingError, HttpSignatureError);
  module.exports = {parseRequest: function parseRequest(request, options) {
      assert.object(request, 'request');
      assert.object(request.headers, 'request.headers');
      if (options === undefined) {
        options = {};
      }
      if (options.headers === undefined) {
        options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
      }
      assert.object(options, 'options');
      assert.arrayOfString(options.headers, 'options.headers');
      assert.optionalNumber(options.clockSkew, 'options.clockSkew');
      if (!request.headers.authorization)
        throw new MissingHeaderError('no authorization header present in ' + 'the request');
      options.clockSkew = options.clockSkew || 300;
      var i = 0;
      var state = State.New;
      var substate = ParamsState.Name;
      var tmpName = '';
      var tmpValue = '';
      var parsed = {
        scheme: '',
        params: {},
        signingString: '',
        get algorithm() {
          return this.params.algorithm.toUpperCase();
        },
        get keyId() {
          return this.params.keyId;
        }
      };
      var authz = request.headers.authorization;
      for (i = 0; i < authz.length; i++) {
        var c = authz.charAt(i);
        switch (Number(state)) {
          case State.New:
            if (c !== ' ')
              parsed.scheme += c;
            else
              state = State.Params;
            break;
          case State.Params:
            switch (Number(substate)) {
              case ParamsState.Name:
                var code = c.charCodeAt(0);
                if ((code >= 0x41 && code <= 0x5a) || (code >= 0x61 && code <= 0x7a)) {
                  tmpName += c;
                } else if (c === '=') {
                  if (tmpName.length === 0)
                    throw new InvalidHeaderError('bad param format');
                  substate = ParamsState.Quote;
                } else {
                  throw new InvalidHeaderError('bad param format');
                }
                break;
              case ParamsState.Quote:
                if (c === '"') {
                  tmpValue = '';
                  substate = ParamsState.Value;
                } else {
                  throw new InvalidHeaderError('bad param format');
                }
                break;
              case ParamsState.Value:
                if (c === '"') {
                  parsed.params[tmpName] = tmpValue;
                  substate = ParamsState.Comma;
                } else {
                  tmpValue += c;
                }
                break;
              case ParamsState.Comma:
                if (c === ',') {
                  tmpName = '';
                  substate = ParamsState.Name;
                } else {
                  throw new InvalidHeaderError('bad param format');
                }
                break;
              default:
                throw new Error('Invalid substate');
            }
            break;
          default:
            throw new Error('Invalid substate');
        }
      }
      if (!parsed.params.headers || parsed.params.headers === '') {
        if (request.headers['x-date']) {
          parsed.params.headers = ['x-date'];
        } else {
          parsed.params.headers = ['date'];
        }
      } else {
        parsed.params.headers = parsed.params.headers.split(' ');
      }
      if (!parsed.scheme || parsed.scheme !== 'Signature')
        throw new InvalidHeaderError('scheme was not "Signature"');
      if (!parsed.params.keyId)
        throw new InvalidHeaderError('keyId was not specified');
      if (!parsed.params.algorithm)
        throw new InvalidHeaderError('algorithm was not specified');
      if (!parsed.params.signature)
        throw new InvalidHeaderError('signature was not specified');
      parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
      try {
        validateAlgorithm(parsed.params.algorithm);
      } catch (e) {
        if (e instanceof InvalidAlgorithmError)
          throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' + 'supported'));
        else
          throw (e);
      }
      for (i = 0; i < parsed.params.headers.length; i++) {
        var h = parsed.params.headers[i].toLowerCase();
        parsed.params.headers[i] = h;
        if (h === 'request-line') {
          if (!options.strict) {
            parsed.signingString += request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
          } else {
            throw (new StrictParsingError('request-line is not a valid header ' + 'with strict parsing enabled.'));
          }
        } else if (h === '(request-target)') {
          parsed.signingString += '(request-target): ' + request.method.toLowerCase() + ' ' + request.url;
        } else {
          var value = request.headers[h];
          if (value === undefined)
            throw new MissingHeaderError(h + ' was not in the request');
          parsed.signingString += h + ': ' + value;
        }
        if ((i + 1) < parsed.params.headers.length)
          parsed.signingString += '\n';
      }
      var date;
      if (request.headers.date || request.headers['x-date']) {
        if (request.headers['x-date']) {
          date = new Date(request.headers['x-date']);
        } else {
          date = new Date(request.headers.date);
        }
        var now = new Date();
        var skew = Math.abs(now.getTime() - date.getTime());
        if (skew > options.clockSkew * 1000) {
          throw new ExpiredRequestError('clock skew of ' + (skew / 1000) + 's was greater than ' + options.clockSkew + 's');
        }
      }
      options.headers.forEach(function(hdr) {
        if (parsed.params.headers.indexOf(hdr) < 0)
          throw new MissingHeaderError(hdr + ' was not a signed header');
      });
      if (options.algorithms) {
        if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
          throw new InvalidParamsError(parsed.params.algorithm + ' is not a supported algorithm');
      }
      return parsed;
    }};
  return module.exports;
});

$__System.registerDynamic("npm:extsprintf@1.0.2/lib/extsprintf.js", ["@node/assert", "@node/util"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var mod_assert = $__require('@node/assert');
  var mod_util = $__require('@node/util');
  exports.sprintf = jsSprintf;
  function jsSprintf(fmt) {
    var regex = ['([^%]*)', '%', '([\'\\-+ #0]*?)', '([1-9]\\d*)?', '(\\.([1-9]\\d*))?', '[lhjztL]*?', '([diouxXfFeEgGaAcCsSp%jr])'].join('');
    var re = new RegExp(regex);
    var args = Array.prototype.slice.call(arguments, 1);
    var flags,
        width,
        precision,
        conversion;
    var left,
        pad,
        sign,
        arg,
        match;
    var ret = '';
    var argn = 1;
    mod_assert.equal('string', typeof(fmt));
    while ((match = re.exec(fmt)) !== null) {
      ret += match[1];
      fmt = fmt.substring(match[0].length);
      flags = match[2] || '';
      width = match[3] || 0;
      precision = match[4] || '';
      conversion = match[6];
      left = false;
      sign = false;
      pad = ' ';
      if (conversion == '%') {
        ret += '%';
        continue;
      }
      if (args.length === 0)
        throw (new Error('too few args to sprintf'));
      arg = args.shift();
      argn++;
      if (flags.match(/[\' #]/))
        throw (new Error('unsupported flags: ' + flags));
      if (precision.length > 0)
        throw (new Error('non-zero precision not supported'));
      if (flags.match(/-/))
        left = true;
      if (flags.match(/0/))
        pad = '0';
      if (flags.match(/\+/))
        sign = true;
      switch (conversion) {
        case 's':
          if (arg === undefined || arg === null)
            throw (new Error('argument ' + argn + ': attempted to print undefined or null ' + 'as a string'));
          ret += doPad(pad, width, left, arg.toString());
          break;
        case 'd':
          arg = Math.floor(arg);
        case 'f':
          sign = sign && arg > 0 ? '+' : '';
          ret += sign + doPad(pad, width, left, arg.toString());
          break;
        case 'j':
          if (width === 0)
            width = 10;
          ret += mod_util.inspect(arg, false, width);
          break;
        case 'r':
          ret += dumpException(arg);
          break;
        default:
          throw (new Error('unsupported conversion: ' + conversion));
      }
    }
    ret += fmt;
    return (ret);
  }
  function doPad(chr, width, left, str) {
    var ret = str;
    while (ret.length < width) {
      if (left)
        ret += chr;
      else
        ret = chr + ret;
    }
    return (ret);
  }
  function dumpException(ex) {
    var ret;
    if (!(ex instanceof Error))
      throw (new Error(jsSprintf('invalid type for %%r: %j', ex)));
    ret = 'EXCEPTION: ' + ex.constructor.name + ': ' + ex.stack;
    if (ex.cause && typeof(ex.cause) === 'function') {
      var cex = ex.cause();
      if (cex) {
        ret += '\nCaused by: ' + dumpException(cex);
      }
    }
    return (ret);
  }
  return module.exports;
});

$__System.registerDynamic("npm:verror@1.3.6/lib/verror.js", ["@node/assert", "@node/util", "npm:extsprintf@1.0.2/lib/extsprintf.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var mod_assert = $__require('@node/assert');
  var mod_util = $__require('@node/util');
  var mod_extsprintf = $__require('npm:extsprintf@1.0.2/lib/extsprintf.js');
  exports.VError = VError;
  exports.WError = WError;
  exports.MultiError = MultiError;
  function VError(options) {
    var args,
        causedBy,
        ctor,
        tailmsg;
    if (options instanceof Error || typeof(options) === 'object') {
      args = Array.prototype.slice.call(arguments, 1);
    } else {
      args = Array.prototype.slice.call(arguments, 0);
      options = undefined;
    }
    tailmsg = args.length > 0 ? mod_extsprintf.sprintf.apply(null, args) : '';
    this.jse_shortmsg = tailmsg;
    this.jse_summary = tailmsg;
    if (options) {
      causedBy = options.cause;
      if (!causedBy || !(options.cause instanceof Error))
        causedBy = options;
      if (causedBy && (causedBy instanceof Error)) {
        this.jse_cause = causedBy;
        this.jse_summary += ': ' + causedBy.message;
      }
    }
    this.message = this.jse_summary;
    Error.call(this, this.jse_summary);
    if (Error.captureStackTrace) {
      ctor = options ? options.constructorOpt : undefined;
      ctor = ctor || arguments.callee;
      Error.captureStackTrace(this, ctor);
    }
  }
  mod_util.inherits(VError, Error);
  VError.prototype.name = 'VError';
  VError.prototype.toString = function ve_toString() {
    var str = (this.hasOwnProperty('name') && this.name || this.constructor.name || this.constructor.prototype.name);
    if (this.message)
      str += ': ' + this.message;
    return (str);
  };
  VError.prototype.cause = function ve_cause() {
    return (this.jse_cause);
  };
  function MultiError(errors) {
    mod_assert.ok(errors.length > 0);
    this.ase_errors = errors;
    VError.call(this, errors[0], 'first of %d error%s', errors.length, errors.length == 1 ? '' : 's');
  }
  mod_util.inherits(MultiError, VError);
  function WError(options) {
    Error.call(this);
    var args,
        cause,
        ctor;
    if (typeof(options) === 'object') {
      args = Array.prototype.slice.call(arguments, 1);
    } else {
      args = Array.prototype.slice.call(arguments, 0);
      options = undefined;
    }
    if (args.length > 0) {
      this.message = mod_extsprintf.sprintf.apply(null, args);
    } else {
      this.message = '';
    }
    if (options) {
      if (options instanceof Error) {
        cause = options;
      } else {
        cause = options.cause;
        ctor = options.constructorOpt;
      }
    }
    Error.captureStackTrace(this, ctor || this.constructor);
    if (cause)
      this.cause(cause);
  }
  mod_util.inherits(WError, Error);
  WError.prototype.name = 'WError';
  WError.prototype.toString = function we_toString() {
    var str = (this.hasOwnProperty('name') && this.name || this.constructor.name || this.constructor.prototype.name);
    if (this.message)
      str += ': ' + this.message;
    if (this.we_cause && this.we_cause.message)
      str += '; caused by ' + this.we_cause.toString();
    return (str);
  };
  WError.prototype.cause = function we_cause(c) {
    if (c instanceof Error)
      this.we_cause = c;
    return (this.we_cause);
  };
  return module.exports;
});

$__System.registerDynamic("npm:json-schema@0.2.2/lib/validate.js", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  ({define: typeof define != "undefined" ? define : function(deps, factory) {
      module.exports = factory();
    }}).define([], function() {
    var exports = validate;
    exports.Integer = {type: "integer"};
    var primitiveConstructors = {
      String: String,
      Boolean: Boolean,
      Number: Number,
      Object: Object,
      Array: Array,
      Date: Date
    };
    exports.validate = validate;
    function validate(instance, schema) {
      return validate(instance, schema, {changing: false});
    }
    ;
    exports.checkPropertyChange = function(value, schema, property) {
      return validate(value, schema, {changing: property || "property"});
    };
    var validate = exports._validate = function(instance, schema, options) {
      if (!options)
        options = {};
      var _changing = options.changing;
      function getType(schema) {
        return schema.type || (primitiveConstructors[schema.name] == schema && schema.name.toLowerCase());
      }
      var errors = [];
      function checkProp(value, schema, path, i) {
        var l;
        path += path ? typeof i == 'number' ? '[' + i + ']' : typeof i == 'undefined' ? '' : '.' + i : i;
        function addError(message) {
          errors.push({
            property: path,
            message: message
          });
        }
        if ((typeof schema != 'object' || schema instanceof Array) && (path || typeof schema != 'function') && !(schema && getType(schema))) {
          if (typeof schema == 'function') {
            if (!(value instanceof schema)) {
              addError("is not an instance of the class/constructor " + schema.name);
            }
          } else if (schema) {
            addError("Invalid schema/property definition " + schema);
          }
          return null;
        }
        if (_changing && schema.readonly) {
          addError("is a readonly field, it can not be changed");
        }
        if (schema['extends']) {
          checkProp(value, schema['extends'], path, i);
        }
        function checkType(type, value) {
          if (type) {
            if (typeof type == 'string' && type != 'any' && (type == 'null' ? value !== null : typeof value != type) && !(value instanceof Array && type == 'array') && !(value instanceof Date && type == 'date') && !(type == 'integer' && value % 1 === 0)) {
              return [{
                property: path,
                message: (typeof value) + " value found, but a " + type + " is required"
              }];
            }
            if (type instanceof Array) {
              var unionErrors = [];
              for (var j = 0; j < type.length; j++) {
                if (!(unionErrors = checkType(type[j], value)).length) {
                  break;
                }
              }
              if (unionErrors.length) {
                return unionErrors;
              }
            } else if (typeof type == 'object') {
              var priorErrors = errors;
              errors = [];
              checkProp(value, type, path);
              var theseErrors = errors;
              errors = priorErrors;
              return theseErrors;
            }
          }
          return [];
        }
        if (value === undefined) {
          if (schema.required) {
            addError("is missing and it is required");
          }
        } else {
          errors = errors.concat(checkType(getType(schema), value));
          if (schema.disallow && !checkType(schema.disallow, value).length) {
            addError(" disallowed value was matched");
          }
          if (value !== null) {
            if (value instanceof Array) {
              if (schema.items) {
                var itemsIsArray = schema.items instanceof Array;
                var propDef = schema.items;
                for (i = 0, l = value.length; i < l; i += 1) {
                  if (itemsIsArray)
                    propDef = schema.items[i];
                  if (options.coerce)
                    value[i] = options.coerce(value[i], propDef);
                  errors.concat(checkProp(value[i], propDef, path, i));
                }
              }
              if (schema.minItems && value.length < schema.minItems) {
                addError("There must be a minimum of " + schema.minItems + " in the array");
              }
              if (schema.maxItems && value.length > schema.maxItems) {
                addError("There must be a maximum of " + schema.maxItems + " in the array");
              }
            } else if (schema.properties || schema.additionalProperties) {
              errors.concat(checkObj(value, schema.properties, path, schema.additionalProperties));
            }
            if (schema.pattern && typeof value == 'string' && !value.match(schema.pattern)) {
              addError("does not match the regex pattern " + schema.pattern);
            }
            if (schema.maxLength && typeof value == 'string' && value.length > schema.maxLength) {
              addError("may only be " + schema.maxLength + " characters long");
            }
            if (schema.minLength && typeof value == 'string' && value.length < schema.minLength) {
              addError("must be at least " + schema.minLength + " characters long");
            }
            if (typeof schema.minimum !== undefined && typeof value == typeof schema.minimum && schema.minimum > value) {
              addError("must have a minimum value of " + schema.minimum);
            }
            if (typeof schema.maximum !== undefined && typeof value == typeof schema.maximum && schema.maximum < value) {
              addError("must have a maximum value of " + schema.maximum);
            }
            if (schema['enum']) {
              var enumer = schema['enum'];
              l = enumer.length;
              var found;
              for (var j = 0; j < l; j++) {
                if (enumer[j] === value) {
                  found = 1;
                  break;
                }
              }
              if (!found) {
                addError("does not have a value in the enumeration " + enumer.join(", "));
              }
            }
            if (typeof schema.maxDecimal == 'number' && (value.toString().match(new RegExp("\\.[0-9]{" + (schema.maxDecimal + 1) + ",}")))) {
              addError("may only have " + schema.maxDecimal + " digits of decimal places");
            }
          }
        }
        return null;
      }
      function checkObj(instance, objTypeDef, path, additionalProp) {
        if (typeof objTypeDef == 'object') {
          if (typeof instance != 'object' || instance instanceof Array) {
            errors.push({
              property: path,
              message: "an object is required"
            });
          }
          for (var i in objTypeDef) {
            if (objTypeDef.hasOwnProperty(i)) {
              var value = instance[i];
              if (value === undefined && options.existingOnly)
                continue;
              var propDef = objTypeDef[i];
              if (value === undefined && propDef["default"]) {
                value = instance[i] = propDef["default"];
              }
              if (options.coerce && i in instance) {
                value = instance[i] = options.coerce(value, propDef);
              }
              checkProp(value, propDef, path, i);
            }
          }
        }
        for (i in instance) {
          if (instance.hasOwnProperty(i) && !(i.charAt(0) == '_' && i.charAt(1) == '_') && objTypeDef && !objTypeDef[i] && additionalProp === false) {
            if (options.filter) {
              delete instance[i];
              continue;
            } else {
              errors.push({
                property: path,
                message: (typeof value) + "The property " + i + " is not defined in the schema and the schema does not allow additional properties"
              });
            }
          }
          var requires = objTypeDef && objTypeDef[i] && objTypeDef[i].requires;
          if (requires && !(requires in instance)) {
            errors.push({
              property: path,
              message: "the presence of the property " + i + " requires that " + requires + " also be present"
            });
          }
          value = instance[i];
          if (additionalProp && (!(objTypeDef && typeof objTypeDef == 'object') || !(i in objTypeDef))) {
            if (options.coerce) {
              value = instance[i] = options.coerce(value, additionalProp);
            }
            checkProp(value, additionalProp, path, i);
          }
          if (!_changing && value && value.$schema) {
            errors = errors.concat(checkProp(value, value.$schema, path, i));
          }
        }
        return errors;
      }
      if (schema) {
        checkProp(instance, schema, '', _changing || '');
      }
      if (!_changing && instance && instance.$schema) {
        checkProp(instance, instance.$schema, '', '');
      }
      return {
        valid: !errors.length,
        errors: errors
      };
    };
    exports.mustBeValid = function(result) {
      if (!result.valid) {
        throw new TypeError(result.errors.map(function(error) {
          return "for property " + error.property + ': ' + error.message;
        }).join(", \n"));
      }
    };
    return exports;
  });
  return module.exports;
});

$__System.registerDynamic("npm:jsprim@1.2.2/lib/jsprim.js", ["@node/assert", "@node/util", "npm:extsprintf@1.0.2/lib/extsprintf.js", "npm:verror@1.3.6/lib/verror.js", "npm:json-schema@0.2.2/lib/validate.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var mod_assert = $__require('@node/assert');
  var mod_util = $__require('@node/util');
  var mod_extsprintf = $__require('npm:extsprintf@1.0.2/lib/extsprintf.js');
  var mod_verror = $__require('npm:verror@1.3.6/lib/verror.js');
  var mod_jsonschema = $__require('npm:json-schema@0.2.2/lib/validate.js');
  exports.deepCopy = deepCopy;
  exports.deepEqual = deepEqual;
  exports.isEmpty = isEmpty;
  exports.forEachKey = forEachKey;
  exports.pluck = pluck;
  exports.flattenObject = flattenObject;
  exports.flattenIter = flattenIter;
  exports.validateJsonObject = validateJsonObjectJS;
  exports.validateJsonObjectJS = validateJsonObjectJS;
  exports.randElt = randElt;
  exports.extraProperties = extraProperties;
  exports.mergeObjects = mergeObjects;
  exports.startsWith = startsWith;
  exports.endsWith = endsWith;
  exports.iso8601 = iso8601;
  exports.rfc1123 = rfc1123;
  exports.parseDateTime = parseDateTime;
  exports.hrtimediff = hrtimeDiff;
  exports.hrtimeDiff = hrtimeDiff;
  exports.hrtimeAccum = hrtimeAccum;
  exports.hrtimeAdd = hrtimeAdd;
  exports.hrtimeNanosec = hrtimeNanosec;
  exports.hrtimeMicrosec = hrtimeMicrosec;
  exports.hrtimeMillisec = hrtimeMillisec;
  function deepCopy(obj) {
    var ret,
        key;
    var marker = '__deepCopy';
    if (obj && obj[marker])
      throw (new Error('attempted deep copy of cyclic object'));
    if (obj && obj.constructor == Object) {
      ret = {};
      obj[marker] = true;
      for (key in obj) {
        if (key == marker)
          continue;
        ret[key] = deepCopy(obj[key]);
      }
      delete(obj[marker]);
      return (ret);
    }
    if (obj && obj.constructor == Array) {
      ret = [];
      obj[marker] = true;
      for (key = 0; key < obj.length; key++)
        ret.push(deepCopy(obj[key]));
      delete(obj[marker]);
      return (ret);
    }
    return (obj);
  }
  function deepEqual(obj1, obj2) {
    if (typeof(obj1) != typeof(obj2))
      return (false);
    if (obj1 === null || obj2 === null || typeof(obj1) != 'object')
      return (obj1 === obj2);
    if (obj1.constructor != obj2.constructor)
      return (false);
    var k;
    for (k in obj1) {
      if (!obj2.hasOwnProperty(k))
        return (false);
      if (!deepEqual(obj1[k], obj2[k]))
        return (false);
    }
    for (k in obj2) {
      if (!obj1.hasOwnProperty(k))
        return (false);
    }
    return (true);
  }
  function isEmpty(obj) {
    var key;
    for (key in obj)
      return (false);
    return (true);
  }
  function forEachKey(obj, callback) {
    for (var key in obj)
      callback(key, obj[key]);
  }
  function pluck(obj, key) {
    mod_assert.equal(typeof(key), 'string');
    return (pluckv(obj, key));
  }
  function pluckv(obj, key) {
    if (obj === null || typeof(obj) !== 'object')
      return (undefined);
    if (obj.hasOwnProperty(key))
      return (obj[key]);
    var i = key.indexOf('.');
    if (i == -1)
      return (undefined);
    var key1 = key.substr(0, i);
    if (!obj.hasOwnProperty(key1))
      return (undefined);
    return (pluckv(obj[key1], key.substr(i + 1)));
  }
  function flattenIter(data, depth, callback) {
    doFlattenIter(data, depth, [], callback);
  }
  function doFlattenIter(data, depth, accum, callback) {
    var each;
    var key;
    if (depth === 0) {
      each = accum.slice(0);
      each.push(data);
      callback(each);
      return;
    }
    mod_assert.ok(data !== null);
    mod_assert.equal(typeof(data), 'object');
    mod_assert.equal(typeof(depth), 'number');
    mod_assert.ok(depth >= 0);
    for (key in data) {
      each = accum.slice(0);
      each.push(key);
      doFlattenIter(data[key], depth - 1, each, callback);
    }
  }
  function flattenObject(data, depth) {
    if (depth === 0)
      return ([data]);
    mod_assert.ok(data !== null);
    mod_assert.equal(typeof(data), 'object');
    mod_assert.equal(typeof(depth), 'number');
    mod_assert.ok(depth >= 0);
    var rv = [];
    var key;
    for (key in data) {
      flattenObject(data[key], depth - 1).forEach(function(p) {
        rv.push([key].concat(p));
      });
    }
    return (rv);
  }
  function startsWith(str, prefix) {
    return (str.substr(0, prefix.length) == prefix);
  }
  function endsWith(str, suffix) {
    return (str.substr(str.length - suffix.length, suffix.length) == suffix);
  }
  function iso8601(d) {
    if (typeof(d) == 'number')
      d = new Date(d);
    mod_assert.ok(d.constructor === Date);
    return (mod_extsprintf.sprintf('%4d-%02d-%02dT%02d:%02d:%02d.%03dZ', d.getUTCFullYear(), d.getUTCMonth() + 1, d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds()));
  }
  var RFC1123_MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  var RFC1123_DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
  function rfc1123(date) {
    return (mod_extsprintf.sprintf('%s, %02d %s %04d %02d:%02d:%02d GMT', RFC1123_DAYS[date.getUTCDay()], date.getUTCDate(), RFC1123_MONTHS[date.getUTCMonth()], date.getUTCFullYear(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds()));
  }
  function parseDateTime(str) {
    var numeric = +str;
    if (!isNaN(numeric)) {
      return (new Date(numeric));
    } else {
      return (new Date(str));
    }
  }
  function validateJsonObjectJS(schema, input) {
    var report = mod_jsonschema.validate(input, schema);
    if (report.errors.length === 0)
      return (null);
    var error = report.errors[0];
    var propname = error['property'];
    var reason = error['message'].toLowerCase();
    var i,
        j;
    if ((i = reason.indexOf('the property ')) != -1 && (j = reason.indexOf(' is not defined in the schema and the ' + 'schema does not allow additional properties')) != -1) {
      i += 'the property '.length;
      if (propname === '')
        propname = reason.substr(i, j - i);
      else
        propname = propname + '.' + reason.substr(i, j - i);
      reason = 'unsupported property';
    }
    var rv = new mod_verror.VError('property "%s": %s', propname, reason);
    rv.jsv_details = error;
    return (rv);
  }
  function randElt(arr) {
    mod_assert.ok(Array.isArray(arr) && arr.length > 0, 'randElt argument must be a non-empty array');
    return (arr[Math.floor(Math.random() * arr.length)]);
  }
  function assertHrtime(a) {
    mod_assert.ok(a[0] >= 0 && a[1] >= 0, 'negative numbers not allowed in hrtimes');
    mod_assert.ok(a[1] < 1e9, 'nanoseconds column overflow');
  }
  function hrtimeDiff(a, b) {
    assertHrtime(a);
    assertHrtime(b);
    mod_assert.ok(a[0] > b[0] || (a[0] == b[0] && a[1] >= b[1]), 'negative differences not allowed');
    var rv = [a[0] - b[0], 0];
    if (a[1] >= b[1]) {
      rv[1] = a[1] - b[1];
    } else {
      rv[0]--;
      rv[1] = 1e9 - (b[1] - a[1]);
    }
    return (rv);
  }
  function hrtimeNanosec(a) {
    assertHrtime(a);
    return (Math.floor(a[0] * 1e9 + a[1]));
  }
  function hrtimeMicrosec(a) {
    assertHrtime(a);
    return (Math.floor(a[0] * 1e6 + a[1] / 1e3));
  }
  function hrtimeMillisec(a) {
    assertHrtime(a);
    return (Math.floor(a[0] * 1e3 + a[1] / 1e6));
  }
  function hrtimeAccum(a, b) {
    assertHrtime(a);
    assertHrtime(b);
    a[1] += b[1];
    if (a[1] >= 1e9) {
      a[0]++;
      a[1] -= 1e9;
    }
    a[0] += b[0];
    return (a);
  }
  function hrtimeAdd(a, b) {
    assertHrtime(a);
    var rv = [a[0], a[1]];
    return (hrtimeAccum(rv, b));
  }
  function extraProperties(obj, allowed) {
    mod_assert.ok(typeof(obj) === 'object' && obj !== null, 'obj argument must be a non-null object');
    mod_assert.ok(Array.isArray(allowed), 'allowed argument must be an array of strings');
    for (var i = 0; i < allowed.length; i++) {
      mod_assert.ok(typeof(allowed[i]) === 'string', 'allowed argument must be an array of strings');
    }
    return (Object.keys(obj).filter(function(key) {
      return (allowed.indexOf(key) === -1);
    }));
  }
  function mergeObjects(provided, overrides, defaults) {
    var rv,
        k;
    rv = {};
    if (defaults) {
      for (k in defaults)
        rv[k] = defaults[k];
    }
    if (provided) {
      for (k in provided)
        rv[k] = provided[k];
    }
    if (overrides) {
      for (k in overrides)
        rv[k] = overrides[k];
    }
    return (rv);
  }
  return module.exports;
});

$__System.registerDynamic("npm:http-signature@1.1.1/lib/signer.js", ["npm:assert-plus@0.2.0/assert.js", "@node/crypto", "@node/http", "@node/util", "npm:sshpk@1.8.1/lib/index.js", "npm:jsprim@1.2.2/lib/jsprim.js", "npm:http-signature@1.1.1/lib/utils.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var assert = $__require('npm:assert-plus@0.2.0/assert.js');
  var crypto = $__require('@node/crypto');
  var http = $__require('@node/http');
  var util = $__require('@node/util');
  var sshpk = $__require('npm:sshpk@1.8.1/lib/index.js');
  var jsprim = $__require('npm:jsprim@1.2.2/lib/jsprim.js');
  var utils = $__require('npm:http-signature@1.1.1/lib/utils.js');
  var sprintf = $__require('@node/util').format;
  var HASH_ALGOS = utils.HASH_ALGOS;
  var PK_ALGOS = utils.PK_ALGOS;
  var InvalidAlgorithmError = utils.InvalidAlgorithmError;
  var HttpSignatureError = utils.HttpSignatureError;
  var validateAlgorithm = utils.validateAlgorithm;
  var AUTHZ_FMT = 'Signature keyId="%s",algorithm="%s",headers="%s",signature="%s"';
  function MissingHeaderError(message) {
    HttpSignatureError.call(this, message, MissingHeaderError);
  }
  util.inherits(MissingHeaderError, HttpSignatureError);
  function StrictParsingError(message) {
    HttpSignatureError.call(this, message, StrictParsingError);
  }
  util.inherits(StrictParsingError, HttpSignatureError);
  function RequestSigner(options) {
    assert.object(options, 'options');
    var alg = [];
    if (options.algorithm !== undefined) {
      assert.string(options.algorithm, 'options.algorithm');
      alg = validateAlgorithm(options.algorithm);
    }
    this.rs_alg = alg;
    if (options.sign !== undefined) {
      assert.func(options.sign, 'options.sign');
      this.rs_signFunc = options.sign;
    } else if (alg[0] === 'hmac' && options.key !== undefined) {
      assert.string(options.keyId, 'options.keyId');
      this.rs_keyId = options.keyId;
      if (typeof(options.key) !== 'string' && !Buffer.isBuffer(options.key))
        throw (new TypeError('options.key for HMAC must be a string or Buffer'));
      this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);
      this.rs_signer.sign = function() {
        var digest = this.digest('base64');
        return ({
          hashAlgorithm: alg[1],
          toString: function() {
            return (digest);
          }
        });
      };
    } else if (options.key !== undefined) {
      var key = options.key;
      if (typeof(key) === 'string' || Buffer.isBuffer(key))
        key = sshpk.parsePrivateKey(key);
      assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]), 'options.key must be a sshpk.PrivateKey');
      this.rs_key = key;
      assert.string(options.keyId, 'options.keyId');
      this.rs_keyId = options.keyId;
      if (!PK_ALGOS[key.type]) {
        throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' + 'keys are not supported'));
      }
      if (alg[0] !== undefined && key.type !== alg[0]) {
        throw (new InvalidAlgorithmError('options.key must be a ' + alg[0].toUpperCase() + ' key, was given a ' + key.type.toUpperCase() + ' key instead'));
      }
      this.rs_signer = key.createSign(alg[1]);
    } else {
      throw (new TypeError('options.sign (func) or options.key is required'));
    }
    this.rs_headers = [];
    this.rs_lines = [];
  }
  RequestSigner.prototype.writeHeader = function(header, value) {
    assert.string(header, 'header');
    header = header.toLowerCase();
    assert.string(value, 'value');
    this.rs_headers.push(header);
    if (this.rs_signFunc) {
      this.rs_lines.push(header + ': ' + value);
    } else {
      var line = header + ': ' + value;
      if (this.rs_headers.length > 0)
        line = '\n' + line;
      this.rs_signer.update(line);
    }
    return (value);
  };
  RequestSigner.prototype.writeDateHeader = function() {
    return (this.writeHeader('date', jsprim.rfc1123(new Date())));
  };
  RequestSigner.prototype.writeTarget = function(method, path) {
    assert.string(method, 'method');
    assert.string(path, 'path');
    method = method.toLowerCase();
    this.writeHeader('(request-target)', method + ' ' + path);
  };
  RequestSigner.prototype.sign = function(cb) {
    assert.func(cb, 'callback');
    if (this.rs_headers.length < 1)
      throw (new Error('At least one header must be signed'));
    var alg,
        authz;
    if (this.rs_signFunc) {
      var data = this.rs_lines.join('\n');
      var self = this;
      this.rs_signFunc(data, function(err, sig) {
        if (err) {
          cb(err);
          return;
        }
        try {
          assert.object(sig, 'signature');
          assert.string(sig.keyId, 'signature.keyId');
          assert.string(sig.algorithm, 'signature.algorithm');
          assert.string(sig.signature, 'signature.signature');
          alg = validateAlgorithm(sig.algorithm);
          authz = sprintf(AUTHZ_FMT, sig.keyId, sig.algorithm, self.rs_headers.join(' '), sig.signature);
        } catch (e) {
          cb(e);
          return;
        }
        cb(null, authz);
      });
    } else {
      try {
        var sigObj = this.rs_signer.sign();
      } catch (e) {
        cb(e);
        return;
      }
      alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;
      var signature = sigObj.toString();
      authz = sprintf(AUTHZ_FMT, this.rs_keyId, alg, this.rs_headers.join(' '), signature);
      cb(null, authz);
    }
  };
  module.exports = {
    isSigner: function(obj) {
      if (typeof(obj) === 'object' && obj instanceof RequestSigner)
        return (true);
      return (false);
    },
    createSigner: function createSigner(options) {
      return (new RequestSigner(options));
    },
    signRequest: function signRequest(request, options) {
      assert.object(request, 'request');
      assert.object(options, 'options');
      assert.optionalString(options.algorithm, 'options.algorithm');
      assert.string(options.keyId, 'options.keyId');
      assert.optionalArrayOfString(options.headers, 'options.headers');
      assert.optionalString(options.httpVersion, 'options.httpVersion');
      if (!request.getHeader('Date'))
        request.setHeader('Date', jsprim.rfc1123(new Date()));
      if (!options.headers)
        options.headers = ['date'];
      if (!options.httpVersion)
        options.httpVersion = '1.1';
      var alg = [];
      if (options.algorithm) {
        options.algorithm = options.algorithm.toLowerCase();
        alg = validateAlgorithm(options.algorithm);
      }
      var i;
      var stringToSign = '';
      for (i = 0; i < options.headers.length; i++) {
        if (typeof(options.headers[i]) !== 'string')
          throw new TypeError('options.headers must be an array of Strings');
        var h = options.headers[i].toLowerCase();
        if (h === 'request-line') {
          if (!options.strict) {
            stringToSign += request.method + ' ' + request.path + ' HTTP/' + options.httpVersion;
          } else {
            throw (new StrictParsingError('request-line is not a valid header ' + 'with strict parsing enabled.'));
          }
        } else if (h === '(request-target)') {
          stringToSign += '(request-target): ' + request.method.toLowerCase() + ' ' + request.path;
        } else {
          var value = request.getHeader(h);
          if (value === undefined || value === '') {
            throw new MissingHeaderError(h + ' was not in the request');
          }
          stringToSign += h + ': ' + value;
        }
        if ((i + 1) < options.headers.length)
          stringToSign += '\n';
      }
      if (request.hasOwnProperty('_stringToSign')) {
        request._stringToSign = stringToSign;
      }
      var signature;
      if (alg[0] === 'hmac') {
        if (typeof(options.key) !== 'string' && !Buffer.isBuffer(options.key))
          throw (new TypeError('options.key must be a string or Buffer'));
        var hmac = crypto.createHmac(alg[1].toUpperCase(), options.key);
        hmac.update(stringToSign);
        signature = hmac.digest('base64');
      } else {
        var key = options.key;
        if (typeof(key) === 'string' || Buffer.isBuffer(key))
          key = sshpk.parsePrivateKey(options.key);
        assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]), 'options.key must be a sshpk.PrivateKey');
        if (!PK_ALGOS[key.type]) {
          throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' + 'keys are not supported'));
        }
        if (alg[0] !== undefined && key.type !== alg[0]) {
          throw (new InvalidAlgorithmError('options.key must be a ' + alg[0].toUpperCase() + ' key, was given a ' + key.type.toUpperCase() + ' key instead'));
        }
        var signer = key.createSign(alg[1]);
        signer.update(stringToSign);
        var sigObj = signer.sign();
        if (!HASH_ALGOS[sigObj.hashAlgorithm]) {
          throw (new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() + ' is not a supported hash algorithm'));
        }
        options.algorithm = key.type + '-' + sigObj.hashAlgorithm;
        signature = sigObj.toString();
        assert.notStrictEqual(signature, '', 'empty signature produced');
      }
      request.setHeader('Authorization', sprintf(AUTHZ_FMT, options.keyId, options.algorithm, options.headers.join(' '), signature));
      return true;
    }
  };
  return module.exports;
});

$__System.registerDynamic("npm:http-signature@1.1.1/lib/verify.js", ["npm:assert-plus@0.2.0/assert.js", "@node/crypto", "npm:sshpk@1.8.1/lib/index.js", "npm:http-signature@1.1.1/lib/utils.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var assert = $__require('npm:assert-plus@0.2.0/assert.js');
  var crypto = $__require('@node/crypto');
  var sshpk = $__require('npm:sshpk@1.8.1/lib/index.js');
  var utils = $__require('npm:http-signature@1.1.1/lib/utils.js');
  var HASH_ALGOS = utils.HASH_ALGOS;
  var PK_ALGOS = utils.PK_ALGOS;
  var InvalidAlgorithmError = utils.InvalidAlgorithmError;
  var HttpSignatureError = utils.HttpSignatureError;
  var validateAlgorithm = utils.validateAlgorithm;
  module.exports = {
    verifySignature: function verifySignature(parsedSignature, pubkey) {
      assert.object(parsedSignature, 'parsedSignature');
      if (typeof(pubkey) === 'string' || Buffer.isBuffer(pubkey))
        pubkey = sshpk.parseKey(pubkey);
      assert.ok(sshpk.Key.isKey(pubkey, [1, 1]), 'pubkey must be a sshpk.Key');
      var alg = validateAlgorithm(parsedSignature.algorithm);
      if (alg[0] === 'hmac' || alg[0] !== pubkey.type)
        return (false);
      var v = pubkey.createVerify(alg[1]);
      v.update(parsedSignature.signingString);
      return (v.verify(parsedSignature.params.signature, 'base64'));
    },
    verifyHMAC: function verifyHMAC(parsedSignature, secret) {
      assert.object(parsedSignature, 'parsedHMAC');
      assert.string(secret, 'secret');
      var alg = validateAlgorithm(parsedSignature.algorithm);
      if (alg[0] !== 'hmac')
        return (false);
      var hashAlg = alg[1].toUpperCase();
      var hmac = crypto.createHmac(hashAlg, secret);
      hmac.update(parsedSignature.signingString);
      var h1 = crypto.createHmac(hashAlg, secret);
      h1.update(hmac.digest());
      h1 = h1.digest();
      var h2 = crypto.createHmac(hashAlg, secret);
      h2.update(new Buffer(parsedSignature.params.signature, 'base64'));
      h2 = h2.digest();
      if (typeof(h1) === 'string')
        return (h1 === h2);
      if (Buffer.isBuffer(h1) && !h1.equals)
        return (h1.toString('binary') === h2.toString('binary'));
      return (h1.equals(h2));
    }
  };
  return module.exports;
});

$__System.registerDynamic("npm:assert-plus@0.2.0/assert.js", ["@node/assert", "@node/stream", "@node/util", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"),
      Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var assert = $__require('@node/assert');
  var Stream = $__require('@node/stream').Stream;
  var util = $__require('@node/util');
  var UUID_REGEXP = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;
  function _capitalize(str) {
    return (str.charAt(0).toUpperCase() + str.slice(1));
  }
  function _toss(name, expected, oper, arg, actual) {
    throw new assert.AssertionError({
      message: util.format('%s (%s) is required', name, expected),
      actual: (actual === undefined) ? typeof(arg) : actual(arg),
      expected: expected,
      operator: oper || '===',
      stackStartFunction: _toss.caller
    });
  }
  function _getClass(arg) {
    return (Object.prototype.toString.call(arg).slice(8, -1));
  }
  function noop() {}
  var types = {
    bool: {check: function(arg) {
        return typeof(arg) === 'boolean';
      }},
    func: {check: function(arg) {
        return typeof(arg) === 'function';
      }},
    string: {check: function(arg) {
        return typeof(arg) === 'string';
      }},
    object: {check: function(arg) {
        return typeof(arg) === 'object' && arg !== null;
      }},
    number: {check: function(arg) {
        return typeof(arg) === 'number' && !isNaN(arg) && isFinite(arg);
      }},
    buffer: {
      check: function(arg) {
        return Buffer.isBuffer(arg);
      },
      operator: 'Buffer.isBuffer'
    },
    array: {
      check: function(arg) {
        return Array.isArray(arg);
      },
      operator: 'Array.isArray'
    },
    stream: {
      check: function(arg) {
        return arg instanceof Stream;
      },
      operator: 'instanceof',
      actual: _getClass
    },
    date: {
      check: function(arg) {
        return arg instanceof Date;
      },
      operator: 'instanceof',
      actual: _getClass
    },
    regexp: {
      check: function(arg) {
        return arg instanceof RegExp;
      },
      operator: 'instanceof',
      actual: _getClass
    },
    uuid: {
      check: function(arg) {
        return typeof(arg) === 'string' && UUID_REGEXP.test(arg);
      },
      operator: 'isUUID'
    }
  };
  function _setExports(ndebug) {
    var keys = Object.keys(types);
    var out;
    if (process.env.NODE_NDEBUG) {
      out = noop;
    } else {
      out = function(arg, msg) {
        if (!arg) {
          _toss(msg, 'true', arg);
        }
      };
    }
    keys.forEach(function(k) {
      if (ndebug) {
        out[k] = noop;
        return;
      }
      var type = types[k];
      out[k] = function(arg, msg) {
        if (!type.check(arg)) {
          _toss(msg, k, type.operator, arg, type.actual);
        }
      };
    });
    keys.forEach(function(k) {
      var name = 'optional' + _capitalize(k);
      if (ndebug) {
        out[name] = noop;
        return;
      }
      var type = types[k];
      out[name] = function(arg, msg) {
        if (arg === undefined || arg === null) {
          return;
        }
        if (!type.check(arg)) {
          _toss(msg, k, type.operator, arg, type.actual);
        }
      };
    });
    keys.forEach(function(k) {
      var name = 'arrayOf' + _capitalize(k);
      if (ndebug) {
        out[name] = noop;
        return;
      }
      var type = types[k];
      var expected = '[' + k + ']';
      out[name] = function(arg, msg) {
        if (!Array.isArray(arg)) {
          _toss(msg, expected, type.operator, arg, type.actual);
        }
        var i;
        for (i = 0; i < arg.length; i++) {
          if (!type.check(arg[i])) {
            _toss(msg, expected, type.operator, arg, type.actual);
          }
        }
      };
    });
    keys.forEach(function(k) {
      var name = 'optionalArrayOf' + _capitalize(k);
      if (ndebug) {
        out[name] = noop;
        return;
      }
      var type = types[k];
      var expected = '[' + k + ']';
      out[name] = function(arg, msg) {
        if (arg === undefined || arg === null) {
          return;
        }
        if (!Array.isArray(arg)) {
          _toss(msg, expected, type.operator, arg, type.actual);
        }
        var i;
        for (i = 0; i < arg.length; i++) {
          if (!type.check(arg[i])) {
            _toss(msg, expected, type.operator, arg, type.actual);
          }
        }
      };
    });
    Object.keys(assert).forEach(function(k) {
      if (k === 'AssertionError') {
        out[k] = assert[k];
        return;
      }
      if (ndebug) {
        out[k] = noop;
        return;
      }
      out[k] = assert[k];
    });
    out._setExports = _setExports;
    return out;
  }
  module.exports = _setExports(process.env.NODE_NDEBUG);
  return module.exports;
});

$__System.registerDynamic("npm:sshpk@1.8.1/lib/fingerprint.js", ["npm:assert-plus@1.0.0/assert.js", "npm:sshpk@1.8.1/lib/algs.js", "@node/crypto", "npm:sshpk@1.8.1/lib/errors.js", "npm:sshpk@1.8.1/lib/key.js", "npm:sshpk@1.8.1/lib/utils.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = Fingerprint;
  var assert = $__require('npm:assert-plus@1.0.0/assert.js');
  var algs = $__require('npm:sshpk@1.8.1/lib/algs.js');
  var crypto = $__require('@node/crypto');
  var errs = $__require('npm:sshpk@1.8.1/lib/errors.js');
  var Key = $__require('npm:sshpk@1.8.1/lib/key.js');
  var utils = $__require('npm:sshpk@1.8.1/lib/utils.js');
  var FingerprintFormatError = errs.FingerprintFormatError;
  var InvalidAlgorithmError = errs.InvalidAlgorithmError;
  function Fingerprint(opts) {
    assert.object(opts, 'options');
    assert.buffer(opts.hash, 'options.hash');
    assert.string(opts.algorithm, 'options.algorithm');
    this.algorithm = opts.algorithm.toLowerCase();
    if (algs.hashAlgs[this.algorithm] !== true)
      throw (new InvalidAlgorithmError(this.algorithm));
    this.hash = opts.hash;
  }
  Fingerprint.prototype.toString = function(format) {
    if (format === undefined) {
      if (this.algorithm === 'md5')
        format = 'hex';
      else
        format = 'base64';
    }
    assert.string(format);
    switch (format) {
      case 'hex':
        return (addColons(this.hash.toString('hex')));
      case 'base64':
        return (sshBase64Format(this.algorithm, this.hash.toString('base64')));
      default:
        throw (new FingerprintFormatError(undefined, format));
    }
  };
  Fingerprint.prototype.matches = function(key) {
    assert.object(key, 'key');
    utils.assertCompatible(key, Key, [1, 0], 'key');
    var theirHash = key.hash(this.algorithm);
    var theirHash2 = crypto.createHash(this.algorithm).update(theirHash).digest('base64');
    if (this.hash2 === undefined)
      this.hash2 = crypto.createHash(this.algorithm).update(this.hash).digest('base64');
    return (this.hash2 === theirHash2);
  };
  Fingerprint.parse = function(fp, enAlgs) {
    assert.string(fp, 'fingerprint');
    var alg,
        hash;
    assert.optionalArrayOfString(enAlgs, 'algorithms');
    var parts = fp.split(':');
    if (parts.length == 2) {
      alg = parts[0].toLowerCase();
      var base64RE = /^[A-Za-z0-9+\/=]+$/;
      if (!base64RE.test(parts[1]))
        throw (new FingerprintFormatError(fp));
      try {
        hash = new Buffer(parts[1], 'base64');
      } catch (e) {
        throw (new FingerprintFormatError(fp));
      }
    } else if (parts.length > 2) {
      alg = 'md5';
      if (parts[0].toLowerCase() === 'md5')
        parts = parts.slice(1);
      parts = parts.join('');
      var md5RE = /^[a-fA-F0-9]+$/;
      if (!md5RE.test(parts))
        throw (new FingerprintFormatError(fp));
      try {
        hash = new Buffer(parts, 'hex');
      } catch (e) {
        throw (new FingerprintFormatError(fp));
      }
    }
    if (alg === undefined)
      throw (new FingerprintFormatError(fp));
    if (algs.hashAlgs[alg] === undefined)
      throw (new InvalidAlgorithmError(alg));
    if (enAlgs !== undefined) {
      enAlgs = enAlgs.map(function(a) {
        return a.toLowerCase();
      });
      if (enAlgs.indexOf(alg) === -1)
        throw (new InvalidAlgorithmError(alg));
    }
    return (new Fingerprint({
      algorithm: alg,
      hash: hash
    }));
  };
  function addColons(s) {
    return (s.replace(/(.{2})(?=.)/g, '$1:'));
  }
  function base64Strip(s) {
    return (s.replace(/=*$/, ''));
  }
  function sshBase64Format(alg, h) {
    return (alg.toUpperCase() + ':' + base64Strip(h));
  }
  Fingerprint.isFingerprint = function(obj, ver) {
    return (utils.isCompatible(obj, Fingerprint, ver));
  };
  Fingerprint.prototype._sshpkApiVersion = [1, 1];
  Fingerprint._oldVersionDetect = function(obj) {
    assert.func(obj.toString);
    assert.func(obj.matches);
    return ([1, 0]);
  };
  return module.exports;
});

$__System.registerDynamic("npm:ecc-jsbn@0.0.1/lib/sec.js", ["github:rynomad/jsbn@master/index.js", "npm:ecc-jsbn@0.0.1/lib/ec.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var BigInteger = $__require('github:rynomad/jsbn@master/index.js');
  var ECCurveFp = $__require('npm:ecc-jsbn@0.0.1/lib/ec.js').ECCurveFp;
  function X9ECParameters(curve, g, n, h) {
    this.curve = curve;
    this.g = g;
    this.n = n;
    this.h = h;
  }
  function x9getCurve() {
    return this.curve;
  }
  function x9getG() {
    return this.g;
  }
  function x9getN() {
    return this.n;
  }
  function x9getH() {
    return this.h;
  }
  X9ECParameters.prototype.getCurve = x9getCurve;
  X9ECParameters.prototype.getG = x9getG;
  X9ECParameters.prototype.getN = x9getN;
  X9ECParameters.prototype.getH = x9getH;
  function fromHex(s) {
    return new BigInteger(s, 16);
  }
  function secp128r1() {
    var p = fromHex("FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF");
    var a = fromHex("FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC");
    var b = fromHex("E87579C11079F43DD824993C2CEE5ED3");
    var n = fromHex("FFFFFFFE0000000075A30D1B9038A115");
    var h = BigInteger.ONE;
    var curve = new ECCurveFp(p, a, b);
    var G = curve.decodePointHex("04" + "161FF7528B899B2D0C28607CA52C5B86" + "CF5AC8395BAFEB13C02DA292DDED7A83");
    return new X9ECParameters(curve, G, n, h);
  }
  function secp160k1() {
    var p = fromHex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73");
    var a = BigInteger.ZERO;
    var b = fromHex("7");
    var n = fromHex("0100000000000000000001B8FA16DFAB9ACA16B6B3");
    var h = BigInteger.ONE;
    var curve = new ECCurveFp(p, a, b);
    var G = curve.decodePointHex("04" + "3B4C382CE37AA192A4019E763036F4F5DD4D7EBB" + "938CF935318FDCED6BC28286531733C3F03C4FEE");
    return new X9ECParameters(curve, G, n, h);
  }
  function secp160r1() {
    var p = fromHex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF");
    var a = fromHex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC");
    var b = fromHex("1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45");
    var n = fromHex("0100000000000000000001F4C8F927AED3CA752257");
    var h = BigInteger.ONE;
    var curve = new ECCurveFp(p, a, b);
    var G = curve.decodePointHex("04" + "4A96B5688EF573284664698968C38BB913CBFC82" + "23A628553168947D59DCC912042351377AC5FB32");
    return new X9ECParameters(curve, G, n, h);
  }
  function secp192k1() {
    var p = fromHex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37");
    var a = BigInteger.ZERO;
    var b = fromHex("3");
    var n = fromHex("FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D");
    var h = BigInteger.ONE;
    var curve = new ECCurveFp(p, a, b);
    var G = curve.decodePointHex("04" + "DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D" + "9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D");
    return new X9ECParameters(curve, G, n, h);
  }
  function secp192r1() {
    var p = fromHex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF");
    var a = fromHex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC");
    var b = fromHex("64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1");
    var n = fromHex("FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831");
    var h = BigInteger.ONE;
    var curve = new ECCurveFp(p, a, b);
    var G = curve.decodePointHex("04" + "188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012" + "07192B95FFC8DA78631011ED6B24CDD573F977A11E794811");
    return new X9ECParameters(curve, G, n, h);
  }
  function secp224r1() {
    var p = fromHex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001");
    var a = fromHex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE");
    var b = fromHex("B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4");
    var n = fromHex("FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D");
    var h = BigInteger.ONE;
    var curve = new ECCurveFp(p, a, b);
    var G = curve.decodePointHex("04" + "B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21" + "BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34");
    return new X9ECParameters(curve, G, n, h);
  }
  function secp256r1() {
    var p = fromHex("FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF");
    var a = fromHex("FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC");
    var b = fromHex("5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B");
    var n = fromHex("FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551");
    var h = BigInteger.ONE;
    var curve = new ECCurveFp(p, a, b);
    var G = curve.decodePointHex("04" + "6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296" + "4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5");
    return new X9ECParameters(curve, G, n, h);
  }
  function getSECCurveByName(name) {
    if (name == "secp128r1")
      return secp128r1();
    if (name == "secp160k1")
      return secp160k1();
    if (name == "secp160r1")
      return secp160r1();
    if (name == "secp192k1")
      return secp192k1();
    if (name == "secp192r1")
      return secp192r1();
    if (name == "secp224r1")
      return secp224r1();
    if (name == "secp256r1")
      return secp256r1();
    return null;
  }
  module.exports = {
    "secp128r1": secp128r1,
    "secp160k1": secp160k1,
    "secp160r1": secp160r1,
    "secp192k1": secp192k1,
    "secp192r1": secp192r1,
    "secp224r1": secp224r1,
    "secp256r1": secp256r1
  };
  return module.exports;
});

$__System.registerDynamic("npm:ecc-jsbn@0.0.1/index.js", ["@node/crypto", "github:rynomad/jsbn@master/index.js", "npm:ecc-jsbn@0.0.1/lib/ec.js", "npm:ecc-jsbn@0.0.1/lib/sec.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var crypto = $__require('@node/crypto');
  var BigInteger = $__require('github:rynomad/jsbn@master/index.js');
  var ECPointFp = $__require('npm:ecc-jsbn@0.0.1/lib/ec.js').ECPointFp;
  exports.ECCurves = $__require('npm:ecc-jsbn@0.0.1/lib/sec.js');
  function unstupid(hex, len) {
    return (hex.length >= len) ? hex : unstupid("0" + hex, len);
  }
  exports.ECKey = function(curve, key, isPublic) {
    var priv;
    var c = curve();
    var n = c.getN();
    var bytes = Math.floor(n.bitLength() / 8);
    if (key) {
      if (isPublic) {
        if (key.length != bytes * 2 + 1)
          return false;
        var curve = c.getCurve();
        var x = key.slice(1, bytes + 1);
        var y = key.slice(bytes + 1);
        this.P = new ECPointFp(curve, curve.fromBigInteger(new BigInteger(x.toString("hex"), 16)), curve.fromBigInteger(new BigInteger(y.toString("hex"), 16)));
      } else {
        if (key.length != bytes)
          return false;
        priv = new BigInteger(key.toString("hex"), 16);
      }
    } else {
      var n1 = n.subtract(BigInteger.ONE);
      var r = new BigInteger(crypto.randomBytes(n.bitLength()));
      priv = r.mod(n1).add(BigInteger.ONE);
      this.P = c.getG().multiply(priv);
    }
    if (this.P) {
      var pubhex = unstupid(this.P.getX().toBigInteger().toString(16), bytes * 2) + unstupid(this.P.getY().toBigInteger().toString(16), bytes * 2);
      this.PublicKey = new Buffer("04" + pubhex, "hex");
    }
    if (priv) {
      this.PrivateKey = new Buffer(unstupid(priv.toString(16), bytes * 2), "hex");
      this.deriveSharedSecret = function(key) {
        if (!key || !key.P)
          return false;
        var S = key.P.multiply(priv);
        return new Buffer(unstupid(S.getX().toBigInteger().toString(16), bytes * 2), "hex");
      };
    }
  };
  return module.exports;
});

$__System.registerDynamic("github:rynomad/jsbn@master/index.js", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  (function() {
    var dbits;
    var canary = 0xdeadbeefcafe;
    var j_lm = ((canary & 0xffffff) == 0xefcafe);
    function BigInteger(a, b, c) {
      if (a != null)
        if ("number" == typeof a)
          this.fromNumber(a, b, c);
        else if (b == null && "string" != typeof a)
          this.fromString(a, 256);
        else
          this.fromString(a, b);
    }
    function nbi() {
      return new BigInteger(null);
    }
    function am1(i, x, w, j, c, n) {
      while (--n >= 0) {
        var v = x * this[i++] + w[j] + c;
        c = Math.floor(v / 0x4000000);
        w[j++] = v & 0x3ffffff;
      }
      return c;
    }
    function am2(i, x, w, j, c, n) {
      var xl = x & 0x7fff,
          xh = x >> 15;
      while (--n >= 0) {
        var l = this[i] & 0x7fff;
        var h = this[i++] >> 15;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);
        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
        w[j++] = l & 0x3fffffff;
      }
      return c;
    }
    function am3(i, x, w, j, c, n) {
      var xl = x & 0x3fff,
          xh = x >> 14;
      while (--n >= 0) {
        var l = this[i] & 0x3fff;
        var h = this[i++] >> 14;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
        c = (l >> 28) + (m >> 14) + xh * h;
        w[j++] = l & 0xfffffff;
      }
      return c;
    }
    var inBrowser = typeof navigator !== "undefined";
    if (inBrowser && j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
      BigInteger.prototype.am = am2;
      dbits = 30;
    } else if (inBrowser && j_lm && (navigator.appName != "Netscape")) {
      BigInteger.prototype.am = am1;
      dbits = 26;
    } else {
      BigInteger.prototype.am = am3;
      dbits = 28;
    }
    BigInteger.prototype.DB = dbits;
    BigInteger.prototype.DM = ((1 << dbits) - 1);
    BigInteger.prototype.DV = (1 << dbits);
    var BI_FP = 52;
    BigInteger.prototype.FV = Math.pow(2, BI_FP);
    BigInteger.prototype.F1 = BI_FP - dbits;
    BigInteger.prototype.F2 = 2 * dbits - BI_FP;
    var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
    var BI_RC = new Array();
    var rr,
        vv;
    rr = "0".charCodeAt(0);
    for (vv = 0; vv <= 9; ++vv)
      BI_RC[rr++] = vv;
    rr = "a".charCodeAt(0);
    for (vv = 10; vv < 36; ++vv)
      BI_RC[rr++] = vv;
    rr = "A".charCodeAt(0);
    for (vv = 10; vv < 36; ++vv)
      BI_RC[rr++] = vv;
    function int2char(n) {
      return BI_RM.charAt(n);
    }
    function intAt(s, i) {
      var c = BI_RC[s.charCodeAt(i)];
      return (c == null) ? -1 : c;
    }
    function bnpCopyTo(r) {
      for (var i = this.t - 1; i >= 0; --i)
        r[i] = this[i];
      r.t = this.t;
      r.s = this.s;
    }
    function bnpFromInt(x) {
      this.t = 1;
      this.s = (x < 0) ? -1 : 0;
      if (x > 0)
        this[0] = x;
      else if (x < -1)
        this[0] = x + DV;
      else
        this.t = 0;
    }
    function nbv(i) {
      var r = nbi();
      r.fromInt(i);
      return r;
    }
    function bnpFromString(s, b) {
      var k;
      if (b == 16)
        k = 4;
      else if (b == 8)
        k = 3;
      else if (b == 256)
        k = 8;
      else if (b == 2)
        k = 1;
      else if (b == 32)
        k = 5;
      else if (b == 4)
        k = 2;
      else {
        this.fromRadix(s, b);
        return;
      }
      this.t = 0;
      this.s = 0;
      var i = s.length,
          mi = false,
          sh = 0;
      while (--i >= 0) {
        var x = (k == 8) ? s[i] & 0xff : intAt(s, i);
        if (x < 0) {
          if (s.charAt(i) == "-")
            mi = true;
          continue;
        }
        mi = false;
        if (sh == 0)
          this[this.t++] = x;
        else if (sh + k > this.DB) {
          this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;
          this[this.t++] = (x >> (this.DB - sh));
        } else
          this[this.t - 1] |= x << sh;
        sh += k;
        if (sh >= this.DB)
          sh -= this.DB;
      }
      if (k == 8 && (s[0] & 0x80) != 0) {
        this.s = -1;
        if (sh > 0)
          this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;
      }
      this.clamp();
      if (mi)
        BigInteger.ZERO.subTo(this, this);
    }
    function bnpClamp() {
      var c = this.s & this.DM;
      while (this.t > 0 && this[this.t - 1] == c)
        --this.t;
    }
    function bnToString(b) {
      if (this.s < 0)
        return "-" + this.negate().toString(b);
      var k;
      if (b == 16)
        k = 4;
      else if (b == 8)
        k = 3;
      else if (b == 2)
        k = 1;
      else if (b == 32)
        k = 5;
      else if (b == 4)
        k = 2;
      else
        return this.toRadix(b);
      var km = (1 << k) - 1,
          d,
          m = false,
          r = "",
          i = this.t;
      var p = this.DB - (i * this.DB) % k;
      if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) > 0) {
          m = true;
          r = int2char(d);
        }
        while (i >= 0) {
          if (p < k) {
            d = (this[i] & ((1 << p) - 1)) << (k - p);
            d |= this[--i] >> (p += this.DB - k);
          } else {
            d = (this[i] >> (p -= k)) & km;
            if (p <= 0) {
              p += this.DB;
              --i;
            }
          }
          if (d > 0)
            m = true;
          if (m)
            r += int2char(d);
        }
      }
      return m ? r : "0";
    }
    function bnNegate() {
      var r = nbi();
      BigInteger.ZERO.subTo(this, r);
      return r;
    }
    function bnAbs() {
      return (this.s < 0) ? this.negate() : this;
    }
    function bnCompareTo(a) {
      var r = this.s - a.s;
      if (r != 0)
        return r;
      var i = this.t;
      r = i - a.t;
      if (r != 0)
        return (this.s < 0) ? -r : r;
      while (--i >= 0)
        if ((r = this[i] - a[i]) != 0)
          return r;
      return 0;
    }
    function nbits(x) {
      var r = 1,
          t;
      if ((t = x >>> 16) != 0) {
        x = t;
        r += 16;
      }
      if ((t = x >> 8) != 0) {
        x = t;
        r += 8;
      }
      if ((t = x >> 4) != 0) {
        x = t;
        r += 4;
      }
      if ((t = x >> 2) != 0) {
        x = t;
        r += 2;
      }
      if ((t = x >> 1) != 0) {
        x = t;
        r += 1;
      }
      return r;
    }
    function bnBitLength() {
      if (this.t <= 0)
        return 0;
      return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));
    }
    function bnpDLShiftTo(n, r) {
      var i;
      for (i = this.t - 1; i >= 0; --i)
        r[i + n] = this[i];
      for (i = n - 1; i >= 0; --i)
        r[i] = 0;
      r.t = this.t + n;
      r.s = this.s;
    }
    function bnpDRShiftTo(n, r) {
      for (var i = n; i < this.t; ++i)
        r[i - n] = this[i];
      r.t = Math.max(this.t - n, 0);
      r.s = this.s;
    }
    function bnpLShiftTo(n, r) {
      var bs = n % this.DB;
      var cbs = this.DB - bs;
      var bm = (1 << cbs) - 1;
      var ds = Math.floor(n / this.DB),
          c = (this.s << bs) & this.DM,
          i;
      for (i = this.t - 1; i >= 0; --i) {
        r[i + ds + 1] = (this[i] >> cbs) | c;
        c = (this[i] & bm) << bs;
      }
      for (i = ds - 1; i >= 0; --i)
        r[i] = 0;
      r[ds] = c;
      r.t = this.t + ds + 1;
      r.s = this.s;
      r.clamp();
    }
    function bnpRShiftTo(n, r) {
      r.s = this.s;
      var ds = Math.floor(n / this.DB);
      if (ds >= this.t) {
        r.t = 0;
        return;
      }
      var bs = n % this.DB;
      var cbs = this.DB - bs;
      var bm = (1 << bs) - 1;
      r[0] = this[ds] >> bs;
      for (var i = ds + 1; i < this.t; ++i) {
        r[i - ds - 1] |= (this[i] & bm) << cbs;
        r[i - ds] = this[i] >> bs;
      }
      if (bs > 0)
        r[this.t - ds - 1] |= (this.s & bm) << cbs;
      r.t = this.t - ds;
      r.clamp();
    }
    function bnpSubTo(a, r) {
      var i = 0,
          c = 0,
          m = Math.min(a.t, this.t);
      while (i < m) {
        c += this[i] - a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }
      if (a.t < this.t) {
        c -= a.s;
        while (i < this.t) {
          c += this[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }
        c += this.s;
      } else {
        c += this.s;
        while (i < a.t) {
          c -= a[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }
        c -= a.s;
      }
      r.s = (c < 0) ? -1 : 0;
      if (c < -1)
        r[i++] = this.DV + c;
      else if (c > 0)
        r[i++] = c;
      r.t = i;
      r.clamp();
    }
    function bnpMultiplyTo(a, r) {
      var x = this.abs(),
          y = a.abs();
      var i = x.t;
      r.t = i + y.t;
      while (--i >= 0)
        r[i] = 0;
      for (i = 0; i < y.t; ++i)
        r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
      r.s = 0;
      r.clamp();
      if (this.s != a.s)
        BigInteger.ZERO.subTo(r, r);
    }
    function bnpSquareTo(r) {
      var x = this.abs();
      var i = r.t = 2 * x.t;
      while (--i >= 0)
        r[i] = 0;
      for (i = 0; i < x.t - 1; ++i) {
        var c = x.am(i, x[i], r, 2 * i, 0, 1);
        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
          r[i + x.t] -= x.DV;
          r[i + x.t + 1] = 1;
        }
      }
      if (r.t > 0)
        r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
      r.s = 0;
      r.clamp();
    }
    function bnpDivRemTo(m, q, r) {
      var pm = m.abs();
      if (pm.t <= 0)
        return;
      var pt = this.abs();
      if (pt.t < pm.t) {
        if (q != null)
          q.fromInt(0);
        if (r != null)
          this.copyTo(r);
        return;
      }
      if (r == null)
        r = nbi();
      var y = nbi(),
          ts = this.s,
          ms = m.s;
      var nsh = this.DB - nbits(pm[pm.t - 1]);
      if (nsh > 0) {
        pm.lShiftTo(nsh, y);
        pt.lShiftTo(nsh, r);
      } else {
        pm.copyTo(y);
        pt.copyTo(r);
      }
      var ys = y.t;
      var y0 = y[ys - 1];
      if (y0 == 0)
        return;
      var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);
      var d1 = this.FV / yt,
          d2 = (1 << this.F1) / yt,
          e = 1 << this.F2;
      var i = r.t,
          j = i - ys,
          t = (q == null) ? nbi() : q;
      y.dlShiftTo(j, t);
      if (r.compareTo(t) >= 0) {
        r[r.t++] = 1;
        r.subTo(t, r);
      }
      BigInteger.ONE.dlShiftTo(ys, t);
      t.subTo(y, y);
      while (y.t < ys)
        y[y.t++] = 0;
      while (--j >= 0) {
        var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
          y.dlShiftTo(j, t);
          r.subTo(t, r);
          while (r[i] < --qd)
            r.subTo(t, r);
        }
      }
      if (q != null) {
        r.drShiftTo(ys, q);
        if (ts != ms)
          BigInteger.ZERO.subTo(q, q);
      }
      r.t = ys;
      r.clamp();
      if (nsh > 0)
        r.rShiftTo(nsh, r);
      if (ts < 0)
        BigInteger.ZERO.subTo(r, r);
    }
    function bnMod(a) {
      var r = nbi();
      this.abs().divRemTo(a, null, r);
      if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
        a.subTo(r, r);
      return r;
    }
    function Classic(m) {
      this.m = m;
    }
    function cConvert(x) {
      if (x.s < 0 || x.compareTo(this.m) >= 0)
        return x.mod(this.m);
      else
        return x;
    }
    function cRevert(x) {
      return x;
    }
    function cReduce(x) {
      x.divRemTo(this.m, null, x);
    }
    function cMulTo(x, y, r) {
      x.multiplyTo(y, r);
      this.reduce(r);
    }
    function cSqrTo(x, r) {
      x.squareTo(r);
      this.reduce(r);
    }
    Classic.prototype.convert = cConvert;
    Classic.prototype.revert = cRevert;
    Classic.prototype.reduce = cReduce;
    Classic.prototype.mulTo = cMulTo;
    Classic.prototype.sqrTo = cSqrTo;
    function bnpInvDigit() {
      if (this.t < 1)
        return 0;
      var x = this[0];
      if ((x & 1) == 0)
        return 0;
      var y = x & 3;
      y = (y * (2 - (x & 0xf) * y)) & 0xf;
      y = (y * (2 - (x & 0xff) * y)) & 0xff;
      y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff;
      y = (y * (2 - x * y % this.DV)) % this.DV;
      return (y > 0) ? this.DV - y : -y;
    }
    function Montgomery(m) {
      this.m = m;
      this.mp = m.invDigit();
      this.mpl = this.mp & 0x7fff;
      this.mph = this.mp >> 15;
      this.um = (1 << (m.DB - 15)) - 1;
      this.mt2 = 2 * m.t;
    }
    function montConvert(x) {
      var r = nbi();
      x.abs().dlShiftTo(this.m.t, r);
      r.divRemTo(this.m, null, r);
      if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
        this.m.subTo(r, r);
      return r;
    }
    function montRevert(x) {
      var r = nbi();
      x.copyTo(r);
      this.reduce(r);
      return r;
    }
    function montReduce(x) {
      while (x.t <= this.mt2)
        x[x.t++] = 0;
      for (var i = 0; i < this.m.t; ++i) {
        var j = x[i] & 0x7fff;
        var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;
        j = i + this.m.t;
        x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
        while (x[j] >= x.DV) {
          x[j] -= x.DV;
          x[++j]++;
        }
      }
      x.clamp();
      x.drShiftTo(this.m.t, x);
      if (x.compareTo(this.m) >= 0)
        x.subTo(this.m, x);
    }
    function montSqrTo(x, r) {
      x.squareTo(r);
      this.reduce(r);
    }
    function montMulTo(x, y, r) {
      x.multiplyTo(y, r);
      this.reduce(r);
    }
    Montgomery.prototype.convert = montConvert;
    Montgomery.prototype.revert = montRevert;
    Montgomery.prototype.reduce = montReduce;
    Montgomery.prototype.mulTo = montMulTo;
    Montgomery.prototype.sqrTo = montSqrTo;
    function bnpIsEven() {
      return ((this.t > 0) ? (this[0] & 1) : this.s) == 0;
    }
    function bnpExp(e, z) {
      if (e > 0xffffffff || e < 1)
        return BigInteger.ONE;
      var r = nbi(),
          r2 = nbi(),
          g = z.convert(this),
          i = nbits(e) - 1;
      g.copyTo(r);
      while (--i >= 0) {
        z.sqrTo(r, r2);
        if ((e & (1 << i)) > 0)
          z.mulTo(r2, g, r);
        else {
          var t = r;
          r = r2;
          r2 = t;
        }
      }
      return z.revert(r);
    }
    function bnModPowInt(e, m) {
      var z;
      if (e < 256 || m.isEven())
        z = new Classic(m);
      else
        z = new Montgomery(m);
      return this.exp(e, z);
    }
    BigInteger.prototype.copyTo = bnpCopyTo;
    BigInteger.prototype.fromInt = bnpFromInt;
    BigInteger.prototype.fromString = bnpFromString;
    BigInteger.prototype.clamp = bnpClamp;
    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
    BigInteger.prototype.drShiftTo = bnpDRShiftTo;
    BigInteger.prototype.lShiftTo = bnpLShiftTo;
    BigInteger.prototype.rShiftTo = bnpRShiftTo;
    BigInteger.prototype.subTo = bnpSubTo;
    BigInteger.prototype.multiplyTo = bnpMultiplyTo;
    BigInteger.prototype.squareTo = bnpSquareTo;
    BigInteger.prototype.divRemTo = bnpDivRemTo;
    BigInteger.prototype.invDigit = bnpInvDigit;
    BigInteger.prototype.isEven = bnpIsEven;
    BigInteger.prototype.exp = bnpExp;
    BigInteger.prototype.toString = bnToString;
    BigInteger.prototype.negate = bnNegate;
    BigInteger.prototype.abs = bnAbs;
    BigInteger.prototype.compareTo = bnCompareTo;
    BigInteger.prototype.bitLength = bnBitLength;
    BigInteger.prototype.mod = bnMod;
    BigInteger.prototype.modPowInt = bnModPowInt;
    BigInteger.ZERO = nbv(0);
    BigInteger.ONE = nbv(1);
    function bnClone() {
      var r = nbi();
      this.copyTo(r);
      return r;
    }
    function bnIntValue() {
      if (this.s < 0) {
        if (this.t == 1)
          return this[0] - this.DV;
        else if (this.t == 0)
          return -1;
      } else if (this.t == 1)
        return this[0];
      else if (this.t == 0)
        return 0;
      return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];
    }
    function bnByteValue() {
      return (this.t == 0) ? this.s : (this[0] << 24) >> 24;
    }
    function bnShortValue() {
      return (this.t == 0) ? this.s : (this[0] << 16) >> 16;
    }
    function bnpChunkSize(r) {
      return Math.floor(Math.LN2 * this.DB / Math.log(r));
    }
    function bnSigNum() {
      if (this.s < 0)
        return -1;
      else if (this.t <= 0 || (this.t == 1 && this[0] <= 0))
        return 0;
      else
        return 1;
    }
    function bnpToRadix(b) {
      if (b == null)
        b = 10;
      if (this.signum() == 0 || b < 2 || b > 36)
        return "0";
      var cs = this.chunkSize(b);
      var a = Math.pow(b, cs);
      var d = nbv(a),
          y = nbi(),
          z = nbi(),
          r = "";
      this.divRemTo(d, y, z);
      while (y.signum() > 0) {
        r = (a + z.intValue()).toString(b).substr(1) + r;
        y.divRemTo(d, y, z);
      }
      return z.intValue().toString(b) + r;
    }
    function bnpFromRadix(s, b) {
      this.fromInt(0);
      if (b == null)
        b = 10;
      var cs = this.chunkSize(b);
      var d = Math.pow(b, cs),
          mi = false,
          j = 0,
          w = 0;
      for (var i = 0; i < s.length; ++i) {
        var x = intAt(s, i);
        if (x < 0) {
          if (s.charAt(i) == "-" && this.signum() == 0)
            mi = true;
          continue;
        }
        w = b * w + x;
        if (++j >= cs) {
          this.dMultiply(d);
          this.dAddOffset(w, 0);
          j = 0;
          w = 0;
        }
      }
      if (j > 0) {
        this.dMultiply(Math.pow(b, j));
        this.dAddOffset(w, 0);
      }
      if (mi)
        BigInteger.ZERO.subTo(this, this);
    }
    function bnpFromNumber(a, b, c) {
      if ("number" == typeof b) {
        if (a < 2)
          this.fromInt(1);
        else {
          this.fromNumber(a, c);
          if (!this.testBit(a - 1))
            this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);
          if (this.isEven())
            this.dAddOffset(1, 0);
          while (!this.isProbablePrime(b)) {
            this.dAddOffset(2, 0);
            if (this.bitLength() > a)
              this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);
          }
        }
      } else {
        var x = new Array(),
            t = a & 7;
        x.length = (a >> 3) + 1;
        b.nextBytes(x);
        if (t > 0)
          x[0] &= ((1 << t) - 1);
        else
          x[0] = 0;
        this.fromString(x, 256);
      }
    }
    function bnToByteArray() {
      var i = this.t,
          r = new Array();
      r[0] = this.s;
      var p = this.DB - (i * this.DB) % 8,
          d,
          k = 0;
      if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p)
          r[k++] = d | (this.s << (this.DB - p));
        while (i >= 0) {
          if (p < 8) {
            d = (this[i] & ((1 << p) - 1)) << (8 - p);
            d |= this[--i] >> (p += this.DB - 8);
          } else {
            d = (this[i] >> (p -= 8)) & 0xff;
            if (p <= 0) {
              p += this.DB;
              --i;
            }
          }
          if ((d & 0x80) != 0)
            d |= -256;
          if (k == 0 && (this.s & 0x80) != (d & 0x80))
            ++k;
          if (k > 0 || d != this.s)
            r[k++] = d;
        }
      }
      return r;
    }
    function bnEquals(a) {
      return (this.compareTo(a) == 0);
    }
    function bnMin(a) {
      return (this.compareTo(a) < 0) ? this : a;
    }
    function bnMax(a) {
      return (this.compareTo(a) > 0) ? this : a;
    }
    function bnpBitwiseTo(a, op, r) {
      var i,
          f,
          m = Math.min(a.t, this.t);
      for (i = 0; i < m; ++i)
        r[i] = op(this[i], a[i]);
      if (a.t < this.t) {
        f = a.s & this.DM;
        for (i = m; i < this.t; ++i)
          r[i] = op(this[i], f);
        r.t = this.t;
      } else {
        f = this.s & this.DM;
        for (i = m; i < a.t; ++i)
          r[i] = op(f, a[i]);
        r.t = a.t;
      }
      r.s = op(this.s, a.s);
      r.clamp();
    }
    function op_and(x, y) {
      return x & y;
    }
    function bnAnd(a) {
      var r = nbi();
      this.bitwiseTo(a, op_and, r);
      return r;
    }
    function op_or(x, y) {
      return x | y;
    }
    function bnOr(a) {
      var r = nbi();
      this.bitwiseTo(a, op_or, r);
      return r;
    }
    function op_xor(x, y) {
      return x ^ y;
    }
    function bnXor(a) {
      var r = nbi();
      this.bitwiseTo(a, op_xor, r);
      return r;
    }
    function op_andnot(x, y) {
      return x & ~y;
    }
    function bnAndNot(a) {
      var r = nbi();
      this.bitwiseTo(a, op_andnot, r);
      return r;
    }
    function bnNot() {
      var r = nbi();
      for (var i = 0; i < this.t; ++i)
        r[i] = this.DM & ~this[i];
      r.t = this.t;
      r.s = ~this.s;
      return r;
    }
    function bnShiftLeft(n) {
      var r = nbi();
      if (n < 0)
        this.rShiftTo(-n, r);
      else
        this.lShiftTo(n, r);
      return r;
    }
    function bnShiftRight(n) {
      var r = nbi();
      if (n < 0)
        this.lShiftTo(-n, r);
      else
        this.rShiftTo(n, r);
      return r;
    }
    function lbit(x) {
      if (x == 0)
        return -1;
      var r = 0;
      if ((x & 0xffff) == 0) {
        x >>= 16;
        r += 16;
      }
      if ((x & 0xff) == 0) {
        x >>= 8;
        r += 8;
      }
      if ((x & 0xf) == 0) {
        x >>= 4;
        r += 4;
      }
      if ((x & 3) == 0) {
        x >>= 2;
        r += 2;
      }
      if ((x & 1) == 0)
        ++r;
      return r;
    }
    function bnGetLowestSetBit() {
      for (var i = 0; i < this.t; ++i)
        if (this[i] != 0)
          return i * this.DB + lbit(this[i]);
      if (this.s < 0)
        return this.t * this.DB;
      return -1;
    }
    function cbit(x) {
      var r = 0;
      while (x != 0) {
        x &= x - 1;
        ++r;
      }
      return r;
    }
    function bnBitCount() {
      var r = 0,
          x = this.s & this.DM;
      for (var i = 0; i < this.t; ++i)
        r += cbit(this[i] ^ x);
      return r;
    }
    function bnTestBit(n) {
      var j = Math.floor(n / this.DB);
      if (j >= this.t)
        return (this.s != 0);
      return ((this[j] & (1 << (n % this.DB))) != 0);
    }
    function bnpChangeBit(n, op) {
      var r = BigInteger.ONE.shiftLeft(n);
      this.bitwiseTo(r, op, r);
      return r;
    }
    function bnSetBit(n) {
      return this.changeBit(n, op_or);
    }
    function bnClearBit(n) {
      return this.changeBit(n, op_andnot);
    }
    function bnFlipBit(n) {
      return this.changeBit(n, op_xor);
    }
    function bnpAddTo(a, r) {
      var i = 0,
          c = 0,
          m = Math.min(a.t, this.t);
      while (i < m) {
        c += this[i] + a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }
      if (a.t < this.t) {
        c += a.s;
        while (i < this.t) {
          c += this[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }
        c += this.s;
      } else {
        c += this.s;
        while (i < a.t) {
          c += a[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }
        c += a.s;
      }
      r.s = (c < 0) ? -1 : 0;
      if (c > 0)
        r[i++] = c;
      else if (c < -1)
        r[i++] = this.DV + c;
      r.t = i;
      r.clamp();
    }
    function bnAdd(a) {
      var r = nbi();
      this.addTo(a, r);
      return r;
    }
    function bnSubtract(a) {
      var r = nbi();
      this.subTo(a, r);
      return r;
    }
    function bnMultiply(a) {
      var r = nbi();
      this.multiplyTo(a, r);
      return r;
    }
    function bnSquare() {
      var r = nbi();
      this.squareTo(r);
      return r;
    }
    function bnDivide(a) {
      var r = nbi();
      this.divRemTo(a, r, null);
      return r;
    }
    function bnRemainder(a) {
      var r = nbi();
      this.divRemTo(a, null, r);
      return r;
    }
    function bnDivideAndRemainder(a) {
      var q = nbi(),
          r = nbi();
      this.divRemTo(a, q, r);
      return new Array(q, r);
    }
    function bnpDMultiply(n) {
      this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
      ++this.t;
      this.clamp();
    }
    function bnpDAddOffset(n, w) {
      if (n == 0)
        return;
      while (this.t <= w)
        this[this.t++] = 0;
      this[w] += n;
      while (this[w] >= this.DV) {
        this[w] -= this.DV;
        if (++w >= this.t)
          this[this.t++] = 0;
        ++this[w];
      }
    }
    function NullExp() {}
    function nNop(x) {
      return x;
    }
    function nMulTo(x, y, r) {
      x.multiplyTo(y, r);
    }
    function nSqrTo(x, r) {
      x.squareTo(r);
    }
    NullExp.prototype.convert = nNop;
    NullExp.prototype.revert = nNop;
    NullExp.prototype.mulTo = nMulTo;
    NullExp.prototype.sqrTo = nSqrTo;
    function bnPow(e) {
      return this.exp(e, new NullExp());
    }
    function bnpMultiplyLowerTo(a, n, r) {
      var i = Math.min(this.t + a.t, n);
      r.s = 0;
      r.t = i;
      while (i > 0)
        r[--i] = 0;
      var j;
      for (j = r.t - this.t; i < j; ++i)
        r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);
      for (j = Math.min(a.t, n); i < j; ++i)
        this.am(0, a[i], r, i, 0, n - i);
      r.clamp();
    }
    function bnpMultiplyUpperTo(a, n, r) {
      --n;
      var i = r.t = this.t + a.t - n;
      r.s = 0;
      while (--i >= 0)
        r[i] = 0;
      for (i = Math.max(n - this.t, 0); i < a.t; ++i)
        r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);
      r.clamp();
      r.drShiftTo(1, r);
    }
    function Barrett(m) {
      this.r2 = nbi();
      this.q3 = nbi();
      BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
      this.mu = this.r2.divide(m);
      this.m = m;
    }
    function barrettConvert(x) {
      if (x.s < 0 || x.t > 2 * this.m.t)
        return x.mod(this.m);
      else if (x.compareTo(this.m) < 0)
        return x;
      else {
        var r = nbi();
        x.copyTo(r);
        this.reduce(r);
        return r;
      }
    }
    function barrettRevert(x) {
      return x;
    }
    function barrettReduce(x) {
      x.drShiftTo(this.m.t - 1, this.r2);
      if (x.t > this.m.t + 1) {
        x.t = this.m.t + 1;
        x.clamp();
      }
      this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
      this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
      while (x.compareTo(this.r2) < 0)
        x.dAddOffset(1, this.m.t + 1);
      x.subTo(this.r2, x);
      while (x.compareTo(this.m) >= 0)
        x.subTo(this.m, x);
    }
    function barrettSqrTo(x, r) {
      x.squareTo(r);
      this.reduce(r);
    }
    function barrettMulTo(x, y, r) {
      x.multiplyTo(y, r);
      this.reduce(r);
    }
    Barrett.prototype.convert = barrettConvert;
    Barrett.prototype.revert = barrettRevert;
    Barrett.prototype.reduce = barrettReduce;
    Barrett.prototype.mulTo = barrettMulTo;
    Barrett.prototype.sqrTo = barrettSqrTo;
    function bnModPow(e, m) {
      var i = e.bitLength(),
          k,
          r = nbv(1),
          z;
      if (i <= 0)
        return r;
      else if (i < 18)
        k = 1;
      else if (i < 48)
        k = 3;
      else if (i < 144)
        k = 4;
      else if (i < 768)
        k = 5;
      else
        k = 6;
      if (i < 8)
        z = new Classic(m);
      else if (m.isEven())
        z = new Barrett(m);
      else
        z = new Montgomery(m);
      var g = new Array(),
          n = 3,
          k1 = k - 1,
          km = (1 << k) - 1;
      g[1] = z.convert(this);
      if (k > 1) {
        var g2 = nbi();
        z.sqrTo(g[1], g2);
        while (n <= km) {
          g[n] = nbi();
          z.mulTo(g2, g[n - 2], g[n]);
          n += 2;
        }
      }
      var j = e.t - 1,
          w,
          is1 = true,
          r2 = nbi(),
          t;
      i = nbits(e[j]) - 1;
      while (j >= 0) {
        if (i >= k1)
          w = (e[j] >> (i - k1)) & km;
        else {
          w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);
          if (j > 0)
            w |= e[j - 1] >> (this.DB + i - k1);
        }
        n = k;
        while ((w & 1) == 0) {
          w >>= 1;
          --n;
        }
        if ((i -= n) < 0) {
          i += this.DB;
          --j;
        }
        if (is1) {
          g[w].copyTo(r);
          is1 = false;
        } else {
          while (n > 1) {
            z.sqrTo(r, r2);
            z.sqrTo(r2, r);
            n -= 2;
          }
          if (n > 0)
            z.sqrTo(r, r2);
          else {
            t = r;
            r = r2;
            r2 = t;
          }
          z.mulTo(r2, g[w], r);
        }
        while (j >= 0 && (e[j] & (1 << i)) == 0) {
          z.sqrTo(r, r2);
          t = r;
          r = r2;
          r2 = t;
          if (--i < 0) {
            i = this.DB - 1;
            --j;
          }
        }
      }
      return z.revert(r);
    }
    function bnGCD(a) {
      var x = (this.s < 0) ? this.negate() : this.clone();
      var y = (a.s < 0) ? a.negate() : a.clone();
      if (x.compareTo(y) < 0) {
        var t = x;
        x = y;
        y = t;
      }
      var i = x.getLowestSetBit(),
          g = y.getLowestSetBit();
      if (g < 0)
        return x;
      if (i < g)
        g = i;
      if (g > 0) {
        x.rShiftTo(g, x);
        y.rShiftTo(g, y);
      }
      while (x.signum() > 0) {
        if ((i = x.getLowestSetBit()) > 0)
          x.rShiftTo(i, x);
        if ((i = y.getLowestSetBit()) > 0)
          y.rShiftTo(i, y);
        if (x.compareTo(y) >= 0) {
          x.subTo(y, x);
          x.rShiftTo(1, x);
        } else {
          y.subTo(x, y);
          y.rShiftTo(1, y);
        }
      }
      if (g > 0)
        y.lShiftTo(g, y);
      return y;
    }
    function bnpModInt(n) {
      if (n <= 0)
        return 0;
      var d = this.DV % n,
          r = (this.s < 0) ? n - 1 : 0;
      if (this.t > 0)
        if (d == 0)
          r = this[0] % n;
        else
          for (var i = this.t - 1; i >= 0; --i)
            r = (d * r + this[i]) % n;
      return r;
    }
    function bnModInverse(m) {
      var ac = m.isEven();
      if ((this.isEven() && ac) || m.signum() == 0)
        return BigInteger.ZERO;
      var u = m.clone(),
          v = this.clone();
      var a = nbv(1),
          b = nbv(0),
          c = nbv(0),
          d = nbv(1);
      while (u.signum() != 0) {
        while (u.isEven()) {
          u.rShiftTo(1, u);
          if (ac) {
            if (!a.isEven() || !b.isEven()) {
              a.addTo(this, a);
              b.subTo(m, b);
            }
            a.rShiftTo(1, a);
          } else if (!b.isEven())
            b.subTo(m, b);
          b.rShiftTo(1, b);
        }
        while (v.isEven()) {
          v.rShiftTo(1, v);
          if (ac) {
            if (!c.isEven() || !d.isEven()) {
              c.addTo(this, c);
              d.subTo(m, d);
            }
            c.rShiftTo(1, c);
          } else if (!d.isEven())
            d.subTo(m, d);
          d.rShiftTo(1, d);
        }
        if (u.compareTo(v) >= 0) {
          u.subTo(v, u);
          if (ac)
            a.subTo(c, a);
          b.subTo(d, b);
        } else {
          v.subTo(u, v);
          if (ac)
            c.subTo(a, c);
          d.subTo(b, d);
        }
      }
      if (v.compareTo(BigInteger.ONE) != 0)
        return BigInteger.ZERO;
      if (d.compareTo(m) >= 0)
        return d.subtract(m);
      if (d.signum() < 0)
        d.addTo(m, d);
      else
        return d;
      if (d.signum() < 0)
        return d.add(m);
      else
        return d;
    }
    var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];
    var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];
    function bnIsProbablePrime(t) {
      var i,
          x = this.abs();
      if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
        for (i = 0; i < lowprimes.length; ++i)
          if (x[0] == lowprimes[i])
            return true;
        return false;
      }
      if (x.isEven())
        return false;
      i = 1;
      while (i < lowprimes.length) {
        var m = lowprimes[i],
            j = i + 1;
        while (j < lowprimes.length && m < lplim)
          m *= lowprimes[j++];
        m = x.modInt(m);
        while (i < j)
          if (m % lowprimes[i++] == 0)
            return false;
      }
      return x.millerRabin(t);
    }
    function bnpMillerRabin(t) {
      var n1 = this.subtract(BigInteger.ONE);
      var k = n1.getLowestSetBit();
      if (k <= 0)
        return false;
      var r = n1.shiftRight(k);
      t = (t + 1) >> 1;
      if (t > lowprimes.length)
        t = lowprimes.length;
      var a = nbi();
      for (var i = 0; i < t; ++i) {
        a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);
        var y = a.modPow(r, this);
        if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
          var j = 1;
          while (j++ < k && y.compareTo(n1) != 0) {
            y = y.modPowInt(2, this);
            if (y.compareTo(BigInteger.ONE) == 0)
              return false;
          }
          if (y.compareTo(n1) != 0)
            return false;
        }
      }
      return true;
    }
    BigInteger.prototype.chunkSize = bnpChunkSize;
    BigInteger.prototype.toRadix = bnpToRadix;
    BigInteger.prototype.fromRadix = bnpFromRadix;
    BigInteger.prototype.fromNumber = bnpFromNumber;
    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
    BigInteger.prototype.changeBit = bnpChangeBit;
    BigInteger.prototype.addTo = bnpAddTo;
    BigInteger.prototype.dMultiply = bnpDMultiply;
    BigInteger.prototype.dAddOffset = bnpDAddOffset;
    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
    BigInteger.prototype.modInt = bnpModInt;
    BigInteger.prototype.millerRabin = bnpMillerRabin;
    BigInteger.prototype.clone = bnClone;
    BigInteger.prototype.intValue = bnIntValue;
    BigInteger.prototype.byteValue = bnByteValue;
    BigInteger.prototype.shortValue = bnShortValue;
    BigInteger.prototype.signum = bnSigNum;
    BigInteger.prototype.toByteArray = bnToByteArray;
    BigInteger.prototype.equals = bnEquals;
    BigInteger.prototype.min = bnMin;
    BigInteger.prototype.max = bnMax;
    BigInteger.prototype.and = bnAnd;
    BigInteger.prototype.or = bnOr;
    BigInteger.prototype.xor = bnXor;
    BigInteger.prototype.andNot = bnAndNot;
    BigInteger.prototype.not = bnNot;
    BigInteger.prototype.shiftLeft = bnShiftLeft;
    BigInteger.prototype.shiftRight = bnShiftRight;
    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
    BigInteger.prototype.bitCount = bnBitCount;
    BigInteger.prototype.testBit = bnTestBit;
    BigInteger.prototype.setBit = bnSetBit;
    BigInteger.prototype.clearBit = bnClearBit;
    BigInteger.prototype.flipBit = bnFlipBit;
    BigInteger.prototype.add = bnAdd;
    BigInteger.prototype.subtract = bnSubtract;
    BigInteger.prototype.multiply = bnMultiply;
    BigInteger.prototype.divide = bnDivide;
    BigInteger.prototype.remainder = bnRemainder;
    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
    BigInteger.prototype.modPow = bnModPow;
    BigInteger.prototype.modInverse = bnModInverse;
    BigInteger.prototype.pow = bnPow;
    BigInteger.prototype.gcd = bnGCD;
    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;
    BigInteger.prototype.square = bnSquare;
    BigInteger.prototype.Barrett = Barrett;
    if (typeof exports !== 'undefined') {
      exports = module.exports = BigInteger;
    } else {
      this.BigInteger = BigInteger;
    }
  }).call(this);
  return module.exports;
});

$__System.registerDynamic("npm:ecc-jsbn@0.0.1/lib/ec.js", ["github:rynomad/jsbn@master/index.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var BigInteger = $__require('github:rynomad/jsbn@master/index.js');
  var Barrett = BigInteger.prototype.Barrett;
  function ECFieldElementFp(q, x) {
    this.x = x;
    this.q = q;
  }
  function feFpEquals(other) {
    if (other == this)
      return true;
    return (this.q.equals(other.q) && this.x.equals(other.x));
  }
  function feFpToBigInteger() {
    return this.x;
  }
  function feFpNegate() {
    return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));
  }
  function feFpAdd(b) {
    return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));
  }
  function feFpSubtract(b) {
    return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));
  }
  function feFpMultiply(b) {
    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));
  }
  function feFpSquare() {
    return new ECFieldElementFp(this.q, this.x.square().mod(this.q));
  }
  function feFpDivide(b) {
    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));
  }
  ECFieldElementFp.prototype.equals = feFpEquals;
  ECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;
  ECFieldElementFp.prototype.negate = feFpNegate;
  ECFieldElementFp.prototype.add = feFpAdd;
  ECFieldElementFp.prototype.subtract = feFpSubtract;
  ECFieldElementFp.prototype.multiply = feFpMultiply;
  ECFieldElementFp.prototype.square = feFpSquare;
  ECFieldElementFp.prototype.divide = feFpDivide;
  function ECPointFp(curve, x, y, z) {
    this.curve = curve;
    this.x = x;
    this.y = y;
    if (z == null) {
      this.z = BigInteger.ONE;
    } else {
      this.z = z;
    }
    this.zinv = null;
  }
  function pointFpGetX() {
    if (this.zinv == null) {
      this.zinv = this.z.modInverse(this.curve.q);
    }
    var r = this.x.toBigInteger().multiply(this.zinv);
    this.curve.reduce(r);
    return this.curve.fromBigInteger(r);
  }
  function pointFpGetY() {
    if (this.zinv == null) {
      this.zinv = this.z.modInverse(this.curve.q);
    }
    var r = this.y.toBigInteger().multiply(this.zinv);
    this.curve.reduce(r);
    return this.curve.fromBigInteger(r);
  }
  function pointFpEquals(other) {
    if (other == this)
      return true;
    if (this.isInfinity())
      return other.isInfinity();
    if (other.isInfinity())
      return this.isInfinity();
    var u,
        v;
    u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q);
    if (!u.equals(BigInteger.ZERO))
      return false;
    v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q);
    return v.equals(BigInteger.ZERO);
  }
  function pointFpIsInfinity() {
    if ((this.x == null) && (this.y == null))
      return true;
    return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);
  }
  function pointFpNegate() {
    return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);
  }
  function pointFpAdd(b) {
    if (this.isInfinity())
      return b;
    if (b.isInfinity())
      return this;
    var u = b.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(b.z)).mod(this.curve.q);
    var v = b.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(b.z)).mod(this.curve.q);
    if (BigInteger.ZERO.equals(v)) {
      if (BigInteger.ZERO.equals(u)) {
        return this.twice();
      }
      return this.curve.getInfinity();
    }
    var THREE = new BigInteger("3");
    var x1 = this.x.toBigInteger();
    var y1 = this.y.toBigInteger();
    var x2 = b.x.toBigInteger();
    var y2 = b.y.toBigInteger();
    var v2 = v.square();
    var v3 = v2.multiply(v);
    var x1v2 = x1.multiply(v2);
    var zu2 = u.square().multiply(this.z);
    var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.q);
    var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.q);
    var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.q);
    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);
  }
  function pointFpTwice() {
    if (this.isInfinity())
      return this;
    if (this.y.toBigInteger().signum() == 0)
      return this.curve.getInfinity();
    var THREE = new BigInteger("3");
    var x1 = this.x.toBigInteger();
    var y1 = this.y.toBigInteger();
    var y1z1 = y1.multiply(this.z);
    var y1sqz1 = y1z1.multiply(y1).mod(this.curve.q);
    var a = this.curve.a.toBigInteger();
    var w = x1.square().multiply(THREE);
    if (!BigInteger.ZERO.equals(a)) {
      w = w.add(this.z.square().multiply(a));
    }
    w = w.mod(this.curve.q);
    var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.q);
    var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.square().multiply(w)).mod(this.curve.q);
    var z3 = y1z1.square().multiply(y1z1).shiftLeft(3).mod(this.curve.q);
    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);
  }
  function pointFpMultiply(k) {
    if (this.isInfinity())
      return this;
    if (k.signum() == 0)
      return this.curve.getInfinity();
    var e = k;
    var h = e.multiply(new BigInteger("3"));
    var neg = this.negate();
    var R = this;
    var i;
    for (i = h.bitLength() - 2; i > 0; --i) {
      R = R.twice();
      var hBit = h.testBit(i);
      var eBit = e.testBit(i);
      if (hBit != eBit) {
        R = R.add(hBit ? this : neg);
      }
    }
    return R;
  }
  function pointFpMultiplyTwo(j, x, k) {
    var i;
    if (j.bitLength() > k.bitLength())
      i = j.bitLength() - 1;
    else
      i = k.bitLength() - 1;
    var R = this.curve.getInfinity();
    var both = this.add(x);
    while (i >= 0) {
      R = R.twice();
      if (j.testBit(i)) {
        if (k.testBit(i)) {
          R = R.add(both);
        } else {
          R = R.add(this);
        }
      } else {
        if (k.testBit(i)) {
          R = R.add(x);
        }
      }
      --i;
    }
    return R;
  }
  ECPointFp.prototype.getX = pointFpGetX;
  ECPointFp.prototype.getY = pointFpGetY;
  ECPointFp.prototype.equals = pointFpEquals;
  ECPointFp.prototype.isInfinity = pointFpIsInfinity;
  ECPointFp.prototype.negate = pointFpNegate;
  ECPointFp.prototype.add = pointFpAdd;
  ECPointFp.prototype.twice = pointFpTwice;
  ECPointFp.prototype.multiply = pointFpMultiply;
  ECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;
  function ECCurveFp(q, a, b) {
    this.q = q;
    this.a = this.fromBigInteger(a);
    this.b = this.fromBigInteger(b);
    this.infinity = new ECPointFp(this, null, null);
    this.reducer = new Barrett(this.q);
  }
  function curveFpGetQ() {
    return this.q;
  }
  function curveFpGetA() {
    return this.a;
  }
  function curveFpGetB() {
    return this.b;
  }
  function curveFpEquals(other) {
    if (other == this)
      return true;
    return (this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b));
  }
  function curveFpGetInfinity() {
    return this.infinity;
  }
  function curveFpFromBigInteger(x) {
    return new ECFieldElementFp(this.q, x);
  }
  function curveReduce(x) {
    this.reducer.reduce(x);
  }
  function curveFpDecodePointHex(s) {
    switch (parseInt(s.substr(0, 2), 16)) {
      case 0:
        return this.infinity;
      case 2:
      case 3:
        return null;
      case 4:
      case 6:
      case 7:
        var len = (s.length - 2) / 2;
        var xHex = s.substr(2, len);
        var yHex = s.substr(len + 2, len);
        return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)));
      default:
        return null;
    }
  }
  function curveFpEncodePointHex(p) {
    if (p.isInfinity())
      return "00";
    var xHex = p.getX().toBigInteger().toString(16);
    var yHex = p.getY().toBigInteger().toString(16);
    var oLen = this.getQ().toString(16).length;
    if ((oLen % 2) != 0)
      oLen++;
    while (xHex.length < oLen) {
      xHex = "0" + xHex;
    }
    while (yHex.length < oLen) {
      yHex = "0" + yHex;
    }
    return "04" + xHex + yHex;
  }
  ECCurveFp.prototype.getQ = curveFpGetQ;
  ECCurveFp.prototype.getA = curveFpGetA;
  ECCurveFp.prototype.getB = curveFpGetB;
  ECCurveFp.prototype.equals = curveFpEquals;
  ECCurveFp.prototype.getInfinity = curveFpGetInfinity;
  ECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;
  ECCurveFp.prototype.reduce = curveReduce;
  ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;
  ECCurveFp.prototype.encodePointHex = curveFpEncodePointHex;
  var exports = {
    ECCurveFp: ECCurveFp,
    ECPointFp: ECPointFp,
    ECFieldElementFp: ECFieldElementFp
  };
  module.exports = exports;
  return module.exports;
});

$__System.registerDynamic("npm:sshpk@1.8.1/lib/dhe.js", ["npm:assert-plus@1.0.0/assert.js", "@node/crypto", "npm:sshpk@1.8.1/lib/algs.js", "npm:sshpk@1.8.1/lib/utils.js", "npm:sshpk@1.8.1/lib/key.js", "npm:sshpk@1.8.1/lib/private-key.js", "npm:ecc-jsbn@0.0.1/index.js", "npm:ecc-jsbn@0.0.1/lib/ec.js", "npm:jsbn@0.1.0/index.js", "npm:jodid25519@1.0.2/index.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = DiffieHellman;
  var assert = $__require('npm:assert-plus@1.0.0/assert.js');
  var crypto = $__require('@node/crypto');
  var algs = $__require('npm:sshpk@1.8.1/lib/algs.js');
  var utils = $__require('npm:sshpk@1.8.1/lib/utils.js');
  var ed;
  var Key = $__require('npm:sshpk@1.8.1/lib/key.js');
  var PrivateKey = $__require('npm:sshpk@1.8.1/lib/private-key.js');
  var CRYPTO_HAVE_ECDH = (crypto.createECDH !== undefined);
  var ecdh,
      ec,
      jsbn;
  function DiffieHellman(key) {
    utils.assertCompatible(key, Key, [1, 4], 'key');
    this._isPriv = PrivateKey.isPrivateKey(key, [1, 3]);
    this._algo = key.type;
    this._curve = key.curve;
    this._key = key;
    if (key.type === 'dsa') {
      if (!CRYPTO_HAVE_ECDH) {
        throw (new Error('Due to bugs in the node 0.10 ' + 'crypto API, node 0.12.x or later is required ' + 'to use DH'));
      }
      this._dh = crypto.createDiffieHellman(key.part.p.data, undefined, key.part.g.data, undefined);
      this._p = key.part.p;
      this._g = key.part.g;
      if (this._isPriv)
        this._dh.setPrivateKey(key.part.x.data);
      this._dh.setPublicKey(key.part.y.data);
    } else if (key.type === 'ecdsa') {
      if (!CRYPTO_HAVE_ECDH) {
        if (ecdh === undefined)
          ecdh = $__require('npm:ecc-jsbn@0.0.1/index.js');
        if (ec === undefined)
          ec = $__require('npm:ecc-jsbn@0.0.1/lib/ec.js');
        if (jsbn === undefined)
          jsbn = $__require('npm:jsbn@0.1.0/index.js').BigInteger;
        this._ecParams = new X9ECParameters(this._curve);
        if (this._isPriv) {
          this._priv = new ECPrivate(this._ecParams, key.part.d.data);
        }
        return;
      }
      var curve = {
        'nistp256': 'prime256v1',
        'nistp384': 'secp384r1',
        'nistp521': 'secp521r1'
      }[key.curve];
      this._dh = crypto.createECDH(curve);
      if (typeof(this._dh) !== 'object' || typeof(this._dh.setPrivateKey) !== 'function') {
        CRYPTO_HAVE_ECDH = false;
        DiffieHellman.call(this, key);
        return;
      }
      if (this._isPriv)
        this._dh.setPrivateKey(key.part.d.data);
      this._dh.setPublicKey(key.part.Q.data);
    } else if (key.type === 'curve25519') {
      if (ed === undefined)
        ed = $__require('npm:jodid25519@1.0.2/index.js');
      if (this._isPriv) {
        this._priv = key.part.r.data;
        if (this._priv[0] === 0x00)
          this._priv = this._priv.slice(1);
        this._priv = this._priv.slice(0, 32);
      }
    } else {
      throw (new Error('DH not supported for ' + key.type + ' keys'));
    }
  }
  DiffieHellman.prototype.getPublicKey = function() {
    if (this._isPriv)
      return (this._key.toPublic());
    return (this._key);
  };
  DiffieHellman.prototype.getPrivateKey = function() {
    if (this._isPriv)
      return (this._key);
    else
      return (undefined);
  };
  DiffieHellman.prototype.getKey = DiffieHellman.prototype.getPrivateKey;
  DiffieHellman.prototype._keyCheck = function(pk, isPub) {
    assert.object(pk, 'key');
    if (!isPub)
      utils.assertCompatible(pk, PrivateKey, [1, 3], 'key');
    utils.assertCompatible(pk, Key, [1, 4], 'key');
    if (pk.type !== this._algo) {
      throw (new Error('A ' + pk.type + ' key cannot be used in ' + this._algo + ' Diffie-Hellman'));
    }
    if (pk.curve !== this._curve) {
      throw (new Error('A key from the ' + pk.curve + ' curve ' + 'cannot be used with a ' + this._curve + ' Diffie-Hellman'));
    }
    if (pk.type === 'dsa') {
      assert.deepEqual(pk.part.p, this._p, 'DSA key prime does not match');
      assert.deepEqual(pk.part.g, this._g, 'DSA key generator does not match');
    }
  };
  DiffieHellman.prototype.setKey = function(pk) {
    this._keyCheck(pk);
    if (pk.type === 'dsa') {
      this._dh.setPrivateKey(pk.part.x.data);
      this._dh.setPublicKey(pk.part.y.data);
    } else if (pk.type === 'ecdsa') {
      if (CRYPTO_HAVE_ECDH) {
        this._dh.setPrivateKey(pk.part.d.data);
        this._dh.setPublicKey(pk.part.Q.data);
      } else {
        this._priv = new ECPrivate(this._ecParams, pk.part.d.data);
      }
    } else if (pk.type === 'curve25519') {
      this._priv = pk.part.r.data;
      if (this._priv[0] === 0x00)
        this._priv = this._priv.slice(1);
      this._priv = this._priv.slice(0, 32);
    }
    this._key = pk;
    this._isPriv = true;
  };
  DiffieHellman.prototype.setPrivateKey = DiffieHellman.prototype.setKey;
  DiffieHellman.prototype.computeSecret = function(otherpk) {
    this._keyCheck(otherpk, true);
    if (!this._isPriv)
      throw (new Error('DH exchange has not been initialized with ' + 'a private key yet'));
    var pub;
    if (this._algo === 'dsa') {
      return (this._dh.computeSecret(otherpk.part.y.data));
    } else if (this._algo === 'ecdsa') {
      if (CRYPTO_HAVE_ECDH) {
        return (this._dh.computeSecret(otherpk.part.Q.data));
      } else {
        pub = new ECPublic(this._ecParams, otherpk.part.Q.data);
        return (this._priv.deriveSharedSecret(pub));
      }
    } else if (this._algo === 'curve25519') {
      pub = otherpk.part.R.data;
      if (pub[0] === 0x00)
        pub = pub.slice(1);
      var secret = ed.dh.computeKey(this._priv.toString('binary'), pub.toString('binary'));
      return (new Buffer(secret, 'binary'));
    }
    throw (new Error('Invalid algorithm: ' + this._algo));
  };
  DiffieHellman.prototype.generateKey = function() {
    var parts = [];
    var priv,
        pub;
    if (this._algo === 'dsa') {
      this._dh.generateKeys();
      parts.push({
        name: 'p',
        data: this._p.data
      });
      parts.push({
        name: 'q',
        data: this._key.part.q.data
      });
      parts.push({
        name: 'g',
        data: this._g.data
      });
      parts.push({
        name: 'y',
        data: this._dh.getPublicKey()
      });
      parts.push({
        name: 'x',
        data: this._dh.getPrivateKey()
      });
      this._key = new PrivateKey({
        type: 'dsa',
        parts: parts
      });
      this._isPriv = true;
      return (this._key);
    } else if (this._algo === 'ecdsa') {
      if (CRYPTO_HAVE_ECDH) {
        this._dh.generateKeys();
        parts.push({
          name: 'curve',
          data: new Buffer(this._curve)
        });
        parts.push({
          name: 'Q',
          data: this._dh.getPublicKey()
        });
        parts.push({
          name: 'd',
          data: this._dh.getPrivateKey()
        });
        this._key = new PrivateKey({
          type: 'ecdsa',
          curve: this._curve,
          parts: parts
        });
        this._isPriv = true;
        return (this._key);
      } else {
        var n = this._ecParams.getN();
        var r = new jsbn(crypto.randomBytes(n.bitLength()));
        var n1 = n.subtract(jsbn.ONE);
        priv = r.mod(n1).add(jsbn.ONE);
        pub = this._ecParams.getG().multiply(priv);
        priv = new Buffer(priv.toByteArray());
        pub = new Buffer(this._ecParams.getCurve().encodePointHex(pub), 'hex');
        this._priv = new ECPrivate(this._ecParams, priv);
        parts.push({
          name: 'curve',
          data: new Buffer(this._curve)
        });
        parts.push({
          name: 'Q',
          data: pub
        });
        parts.push({
          name: 'd',
          data: priv
        });
        this._key = new PrivateKey({
          type: 'ecdsa',
          curve: this._curve,
          parts: parts
        });
        this._isPriv = true;
        return (this._key);
      }
    } else if (this._algo === 'curve25519') {
      priv = ed.dh.generateKey();
      pub = ed.dh.publicKey(priv);
      this._priv = priv = new Buffer(priv, 'binary');
      pub = new Buffer(pub, 'binary');
      parts.push({
        name: 'R',
        data: pub
      });
      parts.push({
        name: 'r',
        data: Buffer.concat([priv, pub])
      });
      this._key = new PrivateKey({
        type: 'curve25519',
        parts: parts
      });
      this._isPriv = true;
      return (this._key);
    }
    throw (new Error('Invalid algorithm: ' + this._algo));
  };
  DiffieHellman.prototype.generateKeys = DiffieHellman.prototype.generateKey;
  function X9ECParameters(name) {
    var params = algs.curves[name];
    assert.object(params);
    var p = new jsbn(params.p);
    var a = new jsbn(params.a);
    var b = new jsbn(params.b);
    var n = new jsbn(params.n);
    var h = jsbn.ONE;
    var curve = new ec.ECCurveFp(p, a, b);
    var G = curve.decodePointHex(params.G.toString('hex'));
    this.curve = curve;
    this.g = G;
    this.n = n;
    this.h = h;
  }
  X9ECParameters.prototype.getCurve = function() {
    return (this.curve);
  };
  X9ECParameters.prototype.getG = function() {
    return (this.g);
  };
  X9ECParameters.prototype.getN = function() {
    return (this.n);
  };
  X9ECParameters.prototype.getH = function() {
    return (this.h);
  };
  function ECPublic(params, buffer) {
    this._params = params;
    if (buffer[0] === 0x00)
      buffer = buffer.slice(1);
    this._pub = params.getCurve().decodePointHex(buffer.toString('hex'));
  }
  function ECPrivate(params, buffer) {
    this._params = params;
    this._priv = new jsbn(utils.mpNormalize(buffer));
  }
  ECPrivate.prototype.deriveSharedSecret = function(pubKey) {
    assert.ok(pubKey instanceof ECPublic);
    var S = pubKey._pub.multiply(this._priv);
    return (new Buffer(S.getX().toBigInteger().toByteArray()));
  };
  return module.exports;
});

$__System.registerDynamic("npm:sshpk@1.8.1/lib/signature.js", ["npm:assert-plus@1.0.0/assert.js", "npm:sshpk@1.8.1/lib/algs.js", "@node/crypto", "npm:sshpk@1.8.1/lib/errors.js", "npm:sshpk@1.8.1/lib/utils.js", "npm:asn1@0.2.3/lib/index.js", "npm:sshpk@1.8.1/lib/ssh-buffer.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = Signature;
  var assert = $__require('npm:assert-plus@1.0.0/assert.js');
  var algs = $__require('npm:sshpk@1.8.1/lib/algs.js');
  var crypto = $__require('@node/crypto');
  var errs = $__require('npm:sshpk@1.8.1/lib/errors.js');
  var utils = $__require('npm:sshpk@1.8.1/lib/utils.js');
  var asn1 = $__require('npm:asn1@0.2.3/lib/index.js');
  var SSHBuffer = $__require('npm:sshpk@1.8.1/lib/ssh-buffer.js');
  var InvalidAlgorithmError = errs.InvalidAlgorithmError;
  var SignatureParseError = errs.SignatureParseError;
  function Signature(opts) {
    assert.object(opts, 'options');
    assert.arrayOfObject(opts.parts, 'options.parts');
    assert.string(opts.type, 'options.type');
    var partLookup = {};
    for (var i = 0; i < opts.parts.length; ++i) {
      var part = opts.parts[i];
      partLookup[part.name] = part;
    }
    this.type = opts.type;
    this.hashAlgorithm = opts.hashAlgo;
    this.parts = opts.parts;
    this.part = partLookup;
  }
  Signature.prototype.toBuffer = function(format) {
    if (format === undefined)
      format = 'asn1';
    assert.string(format, 'format');
    var buf;
    switch (this.type) {
      case 'rsa':
      case 'ed25519':
        if (format === 'ssh') {
          buf = new SSHBuffer({});
          buf.writeString('ssh-' + this.type);
          buf.writePart(this.part.sig);
          return (buf.toBuffer());
        } else {
          return (this.part.sig.data);
        }
      case 'dsa':
      case 'ecdsa':
        var r,
            s;
        if (format === 'asn1') {
          var der = new asn1.BerWriter();
          der.startSequence();
          r = utils.mpNormalize(this.part.r.data);
          s = utils.mpNormalize(this.part.s.data);
          der.writeBuffer(r, asn1.Ber.Integer);
          der.writeBuffer(s, asn1.Ber.Integer);
          der.endSequence();
          return (der.buffer);
        } else if (format === 'ssh' && this.type === 'dsa') {
          buf = new SSHBuffer({});
          buf.writeString('ssh-dss');
          r = this.part.r.data;
          if (r[0] === 0x00)
            r = r.slice(1);
          s = this.part.s.data;
          buf.writeBuffer(Buffer.concat([r, s]));
          return (buf.toBuffer());
        } else if (format === 'ssh' && this.type === 'ecdsa') {
          var inner = new SSHBuffer({});
          r = this.part.r;
          if (r[0] === 0x00)
            r = r.slice(1);
          inner.writePart(r);
          inner.writePart(this.part.s);
          buf = new SSHBuffer({});
          var curve;
          var sz = this.part.r.data.length * 8;
          if (sz === 256)
            curve = 'nistp256';
          else if (sz === 384)
            curve = 'nistp384';
          else if (sz === 528)
            curve = 'nistp521';
          buf.writeString('ecdsa-sha2-' + curve);
          buf.writeBuffer(inner.toBuffer());
          return (buf.toBuffer());
        }
        throw (new Error('Invalid signature format'));
      default:
        throw (new Error('Invalid signature data'));
    }
  };
  Signature.prototype.toString = function(format) {
    assert.optionalString(format, 'format');
    return (this.toBuffer(format).toString('base64'));
  };
  Signature.parse = function(data, type, format) {
    if (typeof(data) === 'string')
      data = new Buffer(data, 'base64');
    assert.buffer(data, 'data');
    assert.string(format, 'format');
    assert.string(type, 'type');
    var opts = {};
    opts.type = type.toLowerCase();
    opts.parts = [];
    try {
      assert.ok(data.length > 0, 'signature must not be empty');
      switch (opts.type) {
        case 'rsa':
          return (parseOneNum(data, type, format, opts, 'ssh-rsa'));
        case 'ed25519':
          return (parseOneNum(data, type, format, opts, 'ssh-ed25519'));
        case 'dsa':
        case 'ecdsa':
          if (format === 'asn1')
            return (parseDSAasn1(data, type, format, opts));
          else if (opts.type === 'dsa')
            return (parseDSA(data, type, format, opts));
          else
            return (parseECDSA(data, type, format, opts));
        default:
          throw (new InvalidAlgorithmError(type));
      }
    } catch (e) {
      if (e instanceof InvalidAlgorithmError)
        throw (e);
      throw (new SignatureParseError(type, format, e));
    }
  };
  function parseOneNum(data, type, format, opts, headType) {
    if (format === 'ssh') {
      try {
        var buf = new SSHBuffer({buffer: data});
        var head = buf.readString();
      } catch (e) {}
      if (head === headType) {
        var sig = buf.readPart();
        assert.ok(buf.atEnd(), 'extra trailing bytes');
        sig.name = 'sig';
        opts.parts.push(sig);
        return (new Signature(opts));
      }
    }
    opts.parts.push({
      name: 'sig',
      data: data
    });
    return (new Signature(opts));
  }
  function parseDSAasn1(data, type, format, opts) {
    var der = new asn1.BerReader(data);
    der.readSequence();
    var r = der.readString(asn1.Ber.Integer, true);
    var s = der.readString(asn1.Ber.Integer, true);
    opts.parts.push({
      name: 'r',
      data: utils.mpNormalize(r)
    });
    opts.parts.push({
      name: 's',
      data: utils.mpNormalize(s)
    });
    return (new Signature(opts));
  }
  function parseDSA(data, type, format, opts) {
    if (data.length != 40) {
      var buf = new SSHBuffer({buffer: data});
      var d = buf.readBuffer();
      if (d.toString('ascii') === 'ssh-dss')
        d = buf.readBuffer();
      assert.ok(buf.atEnd(), 'extra trailing bytes');
      assert.strictEqual(d.length, 40, 'invalid inner length');
      data = d;
    }
    opts.parts.push({
      name: 'r',
      data: data.slice(0, 20)
    });
    opts.parts.push({
      name: 's',
      data: data.slice(20, 40)
    });
    return (new Signature(opts));
  }
  function parseECDSA(data, type, format, opts) {
    var buf = new SSHBuffer({buffer: data});
    var r,
        s;
    var inner = buf.readBuffer();
    if (inner.toString('ascii').match(/^ecdsa-/)) {
      inner = buf.readBuffer();
      assert.ok(buf.atEnd(), 'extra trailing bytes on outer');
      buf = new SSHBuffer({buffer: inner});
      r = buf.readPart();
    } else {
      r = {data: inner};
    }
    s = buf.readPart();
    assert.ok(buf.atEnd(), 'extra trailing bytes');
    r.name = 'r';
    s.name = 's';
    opts.parts.push(r);
    opts.parts.push(s);
    return (new Signature(opts));
  }
  Signature.isSignature = function(obj, ver) {
    return (utils.isCompatible(obj, Signature, ver));
  };
  Signature.prototype._sshpkApiVersion = [2, 1];
  Signature._oldVersionDetect = function(obj) {
    assert.func(obj.toBuffer);
    if (obj.hasOwnProperty('hashAlgorithm'))
      return ([2, 0]);
    return ([1, 0]);
  };
  return module.exports;
});

$__System.registerDynamic("npm:tweetnacl@0.14.3/nacl-fast.js", ["@node/crypto"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  (function(nacl) {
    'use strict';
    var gf = function(init) {
      var i,
          r = new Float64Array(16);
      if (init)
        for (i = 0; i < init.length; i++)
          r[i] = init[i];
      return r;
    };
    var randombytes = function() {
      throw new Error('no PRNG');
    };
    var _0 = new Uint8Array(16);
    var _9 = new Uint8Array(32);
    _9[0] = 9;
    var gf0 = gf(),
        gf1 = gf([1]),
        _121665 = gf([0xdb41, 1]),
        D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
        D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
        X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
        Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
        I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);
    function ts64(x, i, h, l) {
      x[i] = (h >> 24) & 0xff;
      x[i + 1] = (h >> 16) & 0xff;
      x[i + 2] = (h >> 8) & 0xff;
      x[i + 3] = h & 0xff;
      x[i + 4] = (l >> 24) & 0xff;
      x[i + 5] = (l >> 16) & 0xff;
      x[i + 6] = (l >> 8) & 0xff;
      x[i + 7] = l & 0xff;
    }
    function vn(x, xi, y, yi, n) {
      var i,
          d = 0;
      for (i = 0; i < n; i++)
        d |= x[xi + i] ^ y[yi + i];
      return (1 & ((d - 1) >>> 8)) - 1;
    }
    function crypto_verify_16(x, xi, y, yi) {
      return vn(x, xi, y, yi, 16);
    }
    function crypto_verify_32(x, xi, y, yi) {
      return vn(x, xi, y, yi, 32);
    }
    function core_salsa20(o, p, k, c) {
      var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24,
          j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24,
          j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24,
          j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,
          j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,
          j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24,
          j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24,
          j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24,
          j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,
          j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,
          j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,
          j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,
          j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,
          j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,
          j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,
          j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;
      var x0 = j0,
          x1 = j1,
          x2 = j2,
          x3 = j3,
          x4 = j4,
          x5 = j5,
          x6 = j6,
          x7 = j7,
          x8 = j8,
          x9 = j9,
          x10 = j10,
          x11 = j11,
          x12 = j12,
          x13 = j13,
          x14 = j14,
          x15 = j15,
          u;
      for (var i = 0; i < 20; i += 2) {
        u = x0 + x12 | 0;
        x4 ^= u << 7 | u >>> (32 - 7);
        u = x4 + x0 | 0;
        x8 ^= u << 9 | u >>> (32 - 9);
        u = x8 + x4 | 0;
        x12 ^= u << 13 | u >>> (32 - 13);
        u = x12 + x8 | 0;
        x0 ^= u << 18 | u >>> (32 - 18);
        u = x5 + x1 | 0;
        x9 ^= u << 7 | u >>> (32 - 7);
        u = x9 + x5 | 0;
        x13 ^= u << 9 | u >>> (32 - 9);
        u = x13 + x9 | 0;
        x1 ^= u << 13 | u >>> (32 - 13);
        u = x1 + x13 | 0;
        x5 ^= u << 18 | u >>> (32 - 18);
        u = x10 + x6 | 0;
        x14 ^= u << 7 | u >>> (32 - 7);
        u = x14 + x10 | 0;
        x2 ^= u << 9 | u >>> (32 - 9);
        u = x2 + x14 | 0;
        x6 ^= u << 13 | u >>> (32 - 13);
        u = x6 + x2 | 0;
        x10 ^= u << 18 | u >>> (32 - 18);
        u = x15 + x11 | 0;
        x3 ^= u << 7 | u >>> (32 - 7);
        u = x3 + x15 | 0;
        x7 ^= u << 9 | u >>> (32 - 9);
        u = x7 + x3 | 0;
        x11 ^= u << 13 | u >>> (32 - 13);
        u = x11 + x7 | 0;
        x15 ^= u << 18 | u >>> (32 - 18);
        u = x0 + x3 | 0;
        x1 ^= u << 7 | u >>> (32 - 7);
        u = x1 + x0 | 0;
        x2 ^= u << 9 | u >>> (32 - 9);
        u = x2 + x1 | 0;
        x3 ^= u << 13 | u >>> (32 - 13);
        u = x3 + x2 | 0;
        x0 ^= u << 18 | u >>> (32 - 18);
        u = x5 + x4 | 0;
        x6 ^= u << 7 | u >>> (32 - 7);
        u = x6 + x5 | 0;
        x7 ^= u << 9 | u >>> (32 - 9);
        u = x7 + x6 | 0;
        x4 ^= u << 13 | u >>> (32 - 13);
        u = x4 + x7 | 0;
        x5 ^= u << 18 | u >>> (32 - 18);
        u = x10 + x9 | 0;
        x11 ^= u << 7 | u >>> (32 - 7);
        u = x11 + x10 | 0;
        x8 ^= u << 9 | u >>> (32 - 9);
        u = x8 + x11 | 0;
        x9 ^= u << 13 | u >>> (32 - 13);
        u = x9 + x8 | 0;
        x10 ^= u << 18 | u >>> (32 - 18);
        u = x15 + x14 | 0;
        x12 ^= u << 7 | u >>> (32 - 7);
        u = x12 + x15 | 0;
        x13 ^= u << 9 | u >>> (32 - 9);
        u = x13 + x12 | 0;
        x14 ^= u << 13 | u >>> (32 - 13);
        u = x14 + x13 | 0;
        x15 ^= u << 18 | u >>> (32 - 18);
      }
      x0 = x0 + j0 | 0;
      x1 = x1 + j1 | 0;
      x2 = x2 + j2 | 0;
      x3 = x3 + j3 | 0;
      x4 = x4 + j4 | 0;
      x5 = x5 + j5 | 0;
      x6 = x6 + j6 | 0;
      x7 = x7 + j7 | 0;
      x8 = x8 + j8 | 0;
      x9 = x9 + j9 | 0;
      x10 = x10 + j10 | 0;
      x11 = x11 + j11 | 0;
      x12 = x12 + j12 | 0;
      x13 = x13 + j13 | 0;
      x14 = x14 + j14 | 0;
      x15 = x15 + j15 | 0;
      o[0] = x0 >>> 0 & 0xff;
      o[1] = x0 >>> 8 & 0xff;
      o[2] = x0 >>> 16 & 0xff;
      o[3] = x0 >>> 24 & 0xff;
      o[4] = x1 >>> 0 & 0xff;
      o[5] = x1 >>> 8 & 0xff;
      o[6] = x1 >>> 16 & 0xff;
      o[7] = x1 >>> 24 & 0xff;
      o[8] = x2 >>> 0 & 0xff;
      o[9] = x2 >>> 8 & 0xff;
      o[10] = x2 >>> 16 & 0xff;
      o[11] = x2 >>> 24 & 0xff;
      o[12] = x3 >>> 0 & 0xff;
      o[13] = x3 >>> 8 & 0xff;
      o[14] = x3 >>> 16 & 0xff;
      o[15] = x3 >>> 24 & 0xff;
      o[16] = x4 >>> 0 & 0xff;
      o[17] = x4 >>> 8 & 0xff;
      o[18] = x4 >>> 16 & 0xff;
      o[19] = x4 >>> 24 & 0xff;
      o[20] = x5 >>> 0 & 0xff;
      o[21] = x5 >>> 8 & 0xff;
      o[22] = x5 >>> 16 & 0xff;
      o[23] = x5 >>> 24 & 0xff;
      o[24] = x6 >>> 0 & 0xff;
      o[25] = x6 >>> 8 & 0xff;
      o[26] = x6 >>> 16 & 0xff;
      o[27] = x6 >>> 24 & 0xff;
      o[28] = x7 >>> 0 & 0xff;
      o[29] = x7 >>> 8 & 0xff;
      o[30] = x7 >>> 16 & 0xff;
      o[31] = x7 >>> 24 & 0xff;
      o[32] = x8 >>> 0 & 0xff;
      o[33] = x8 >>> 8 & 0xff;
      o[34] = x8 >>> 16 & 0xff;
      o[35] = x8 >>> 24 & 0xff;
      o[36] = x9 >>> 0 & 0xff;
      o[37] = x9 >>> 8 & 0xff;
      o[38] = x9 >>> 16 & 0xff;
      o[39] = x9 >>> 24 & 0xff;
      o[40] = x10 >>> 0 & 0xff;
      o[41] = x10 >>> 8 & 0xff;
      o[42] = x10 >>> 16 & 0xff;
      o[43] = x10 >>> 24 & 0xff;
      o[44] = x11 >>> 0 & 0xff;
      o[45] = x11 >>> 8 & 0xff;
      o[46] = x11 >>> 16 & 0xff;
      o[47] = x11 >>> 24 & 0xff;
      o[48] = x12 >>> 0 & 0xff;
      o[49] = x12 >>> 8 & 0xff;
      o[50] = x12 >>> 16 & 0xff;
      o[51] = x12 >>> 24 & 0xff;
      o[52] = x13 >>> 0 & 0xff;
      o[53] = x13 >>> 8 & 0xff;
      o[54] = x13 >>> 16 & 0xff;
      o[55] = x13 >>> 24 & 0xff;
      o[56] = x14 >>> 0 & 0xff;
      o[57] = x14 >>> 8 & 0xff;
      o[58] = x14 >>> 16 & 0xff;
      o[59] = x14 >>> 24 & 0xff;
      o[60] = x15 >>> 0 & 0xff;
      o[61] = x15 >>> 8 & 0xff;
      o[62] = x15 >>> 16 & 0xff;
      o[63] = x15 >>> 24 & 0xff;
    }
    function core_hsalsa20(o, p, k, c) {
      var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24,
          j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24,
          j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24,
          j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,
          j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,
          j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24,
          j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24,
          j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24,
          j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,
          j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,
          j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,
          j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,
          j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,
          j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,
          j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,
          j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;
      var x0 = j0,
          x1 = j1,
          x2 = j2,
          x3 = j3,
          x4 = j4,
          x5 = j5,
          x6 = j6,
          x7 = j7,
          x8 = j8,
          x9 = j9,
          x10 = j10,
          x11 = j11,
          x12 = j12,
          x13 = j13,
          x14 = j14,
          x15 = j15,
          u;
      for (var i = 0; i < 20; i += 2) {
        u = x0 + x12 | 0;
        x4 ^= u << 7 | u >>> (32 - 7);
        u = x4 + x0 | 0;
        x8 ^= u << 9 | u >>> (32 - 9);
        u = x8 + x4 | 0;
        x12 ^= u << 13 | u >>> (32 - 13);
        u = x12 + x8 | 0;
        x0 ^= u << 18 | u >>> (32 - 18);
        u = x5 + x1 | 0;
        x9 ^= u << 7 | u >>> (32 - 7);
        u = x9 + x5 | 0;
        x13 ^= u << 9 | u >>> (32 - 9);
        u = x13 + x9 | 0;
        x1 ^= u << 13 | u >>> (32 - 13);
        u = x1 + x13 | 0;
        x5 ^= u << 18 | u >>> (32 - 18);
        u = x10 + x6 | 0;
        x14 ^= u << 7 | u >>> (32 - 7);
        u = x14 + x10 | 0;
        x2 ^= u << 9 | u >>> (32 - 9);
        u = x2 + x14 | 0;
        x6 ^= u << 13 | u >>> (32 - 13);
        u = x6 + x2 | 0;
        x10 ^= u << 18 | u >>> (32 - 18);
        u = x15 + x11 | 0;
        x3 ^= u << 7 | u >>> (32 - 7);
        u = x3 + x15 | 0;
        x7 ^= u << 9 | u >>> (32 - 9);
        u = x7 + x3 | 0;
        x11 ^= u << 13 | u >>> (32 - 13);
        u = x11 + x7 | 0;
        x15 ^= u << 18 | u >>> (32 - 18);
        u = x0 + x3 | 0;
        x1 ^= u << 7 | u >>> (32 - 7);
        u = x1 + x0 | 0;
        x2 ^= u << 9 | u >>> (32 - 9);
        u = x2 + x1 | 0;
        x3 ^= u << 13 | u >>> (32 - 13);
        u = x3 + x2 | 0;
        x0 ^= u << 18 | u >>> (32 - 18);
        u = x5 + x4 | 0;
        x6 ^= u << 7 | u >>> (32 - 7);
        u = x6 + x5 | 0;
        x7 ^= u << 9 | u >>> (32 - 9);
        u = x7 + x6 | 0;
        x4 ^= u << 13 | u >>> (32 - 13);
        u = x4 + x7 | 0;
        x5 ^= u << 18 | u >>> (32 - 18);
        u = x10 + x9 | 0;
        x11 ^= u << 7 | u >>> (32 - 7);
        u = x11 + x10 | 0;
        x8 ^= u << 9 | u >>> (32 - 9);
        u = x8 + x11 | 0;
        x9 ^= u << 13 | u >>> (32 - 13);
        u = x9 + x8 | 0;
        x10 ^= u << 18 | u >>> (32 - 18);
        u = x15 + x14 | 0;
        x12 ^= u << 7 | u >>> (32 - 7);
        u = x12 + x15 | 0;
        x13 ^= u << 9 | u >>> (32 - 9);
        u = x13 + x12 | 0;
        x14 ^= u << 13 | u >>> (32 - 13);
        u = x14 + x13 | 0;
        x15 ^= u << 18 | u >>> (32 - 18);
      }
      o[0] = x0 >>> 0 & 0xff;
      o[1] = x0 >>> 8 & 0xff;
      o[2] = x0 >>> 16 & 0xff;
      o[3] = x0 >>> 24 & 0xff;
      o[4] = x5 >>> 0 & 0xff;
      o[5] = x5 >>> 8 & 0xff;
      o[6] = x5 >>> 16 & 0xff;
      o[7] = x5 >>> 24 & 0xff;
      o[8] = x10 >>> 0 & 0xff;
      o[9] = x10 >>> 8 & 0xff;
      o[10] = x10 >>> 16 & 0xff;
      o[11] = x10 >>> 24 & 0xff;
      o[12] = x15 >>> 0 & 0xff;
      o[13] = x15 >>> 8 & 0xff;
      o[14] = x15 >>> 16 & 0xff;
      o[15] = x15 >>> 24 & 0xff;
      o[16] = x6 >>> 0 & 0xff;
      o[17] = x6 >>> 8 & 0xff;
      o[18] = x6 >>> 16 & 0xff;
      o[19] = x6 >>> 24 & 0xff;
      o[20] = x7 >>> 0 & 0xff;
      o[21] = x7 >>> 8 & 0xff;
      o[22] = x7 >>> 16 & 0xff;
      o[23] = x7 >>> 24 & 0xff;
      o[24] = x8 >>> 0 & 0xff;
      o[25] = x8 >>> 8 & 0xff;
      o[26] = x8 >>> 16 & 0xff;
      o[27] = x8 >>> 24 & 0xff;
      o[28] = x9 >>> 0 & 0xff;
      o[29] = x9 >>> 8 & 0xff;
      o[30] = x9 >>> 16 & 0xff;
      o[31] = x9 >>> 24 & 0xff;
    }
    function crypto_core_salsa20(out, inp, k, c) {
      core_salsa20(out, inp, k, c);
    }
    function crypto_core_hsalsa20(out, inp, k, c) {
      core_hsalsa20(out, inp, k, c);
    }
    var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
    function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
      var z = new Uint8Array(16),
          x = new Uint8Array(64);
      var u,
          i;
      for (i = 0; i < 16; i++)
        z[i] = 0;
      for (i = 0; i < 8; i++)
        z[i] = n[i];
      while (b >= 64) {
        crypto_core_salsa20(x, z, k, sigma);
        for (i = 0; i < 64; i++)
          c[cpos + i] = m[mpos + i] ^ x[i];
        u = 1;
        for (i = 8; i < 16; i++) {
          u = u + (z[i] & 0xff) | 0;
          z[i] = u & 0xff;
          u >>>= 8;
        }
        b -= 64;
        cpos += 64;
        mpos += 64;
      }
      if (b > 0) {
        crypto_core_salsa20(x, z, k, sigma);
        for (i = 0; i < b; i++)
          c[cpos + i] = m[mpos + i] ^ x[i];
      }
      return 0;
    }
    function crypto_stream_salsa20(c, cpos, b, n, k) {
      var z = new Uint8Array(16),
          x = new Uint8Array(64);
      var u,
          i;
      for (i = 0; i < 16; i++)
        z[i] = 0;
      for (i = 0; i < 8; i++)
        z[i] = n[i];
      while (b >= 64) {
        crypto_core_salsa20(x, z, k, sigma);
        for (i = 0; i < 64; i++)
          c[cpos + i] = x[i];
        u = 1;
        for (i = 8; i < 16; i++) {
          u = u + (z[i] & 0xff) | 0;
          z[i] = u & 0xff;
          u >>>= 8;
        }
        b -= 64;
        cpos += 64;
      }
      if (b > 0) {
        crypto_core_salsa20(x, z, k, sigma);
        for (i = 0; i < b; i++)
          c[cpos + i] = x[i];
      }
      return 0;
    }
    function crypto_stream(c, cpos, d, n, k) {
      var s = new Uint8Array(32);
      crypto_core_hsalsa20(s, n, k, sigma);
      var sn = new Uint8Array(8);
      for (var i = 0; i < 8; i++)
        sn[i] = n[i + 16];
      return crypto_stream_salsa20(c, cpos, d, sn, s);
    }
    function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
      var s = new Uint8Array(32);
      crypto_core_hsalsa20(s, n, k, sigma);
      var sn = new Uint8Array(8);
      for (var i = 0; i < 8; i++)
        sn[i] = n[i + 16];
      return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s);
    }
    var poly1305 = function(key) {
      this.buffer = new Uint8Array(16);
      this.r = new Uint16Array(10);
      this.h = new Uint16Array(10);
      this.pad = new Uint16Array(8);
      this.leftover = 0;
      this.fin = 0;
      var t0,
          t1,
          t2,
          t3,
          t4,
          t5,
          t6,
          t7;
      t0 = key[0] & 0xff | (key[1] & 0xff) << 8;
      this.r[0] = (t0) & 0x1fff;
      t1 = key[2] & 0xff | (key[3] & 0xff) << 8;
      this.r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
      t2 = key[4] & 0xff | (key[5] & 0xff) << 8;
      this.r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;
      t3 = key[6] & 0xff | (key[7] & 0xff) << 8;
      this.r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
      t4 = key[8] & 0xff | (key[9] & 0xff) << 8;
      this.r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;
      this.r[5] = ((t4 >>> 1)) & 0x1ffe;
      t5 = key[10] & 0xff | (key[11] & 0xff) << 8;
      this.r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
      t6 = key[12] & 0xff | (key[13] & 0xff) << 8;
      this.r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;
      t7 = key[14] & 0xff | (key[15] & 0xff) << 8;
      this.r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
      this.r[9] = ((t7 >>> 5)) & 0x007f;
      this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
      this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
      this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
      this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
      this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
      this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
      this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
      this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
    };
    poly1305.prototype.blocks = function(m, mpos, bytes) {
      var hibit = this.fin ? 0 : (1 << 11);
      var t0,
          t1,
          t2,
          t3,
          t4,
          t5,
          t6,
          t7,
          c;
      var d0,
          d1,
          d2,
          d3,
          d4,
          d5,
          d6,
          d7,
          d8,
          d9;
      var h0 = this.h[0],
          h1 = this.h[1],
          h2 = this.h[2],
          h3 = this.h[3],
          h4 = this.h[4],
          h5 = this.h[5],
          h6 = this.h[6],
          h7 = this.h[7],
          h8 = this.h[8],
          h9 = this.h[9];
      var r0 = this.r[0],
          r1 = this.r[1],
          r2 = this.r[2],
          r3 = this.r[3],
          r4 = this.r[4],
          r5 = this.r[5],
          r6 = this.r[6],
          r7 = this.r[7],
          r8 = this.r[8],
          r9 = this.r[9];
      while (bytes >= 16) {
        t0 = m[mpos + 0] & 0xff | (m[mpos + 1] & 0xff) << 8;
        h0 += (t0) & 0x1fff;
        t1 = m[mpos + 2] & 0xff | (m[mpos + 3] & 0xff) << 8;
        h1 += ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
        t2 = m[mpos + 4] & 0xff | (m[mpos + 5] & 0xff) << 8;
        h2 += ((t1 >>> 10) | (t2 << 6)) & 0x1fff;
        t3 = m[mpos + 6] & 0xff | (m[mpos + 7] & 0xff) << 8;
        h3 += ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
        t4 = m[mpos + 8] & 0xff | (m[mpos + 9] & 0xff) << 8;
        h4 += ((t3 >>> 4) | (t4 << 12)) & 0x1fff;
        h5 += ((t4 >>> 1)) & 0x1fff;
        t5 = m[mpos + 10] & 0xff | (m[mpos + 11] & 0xff) << 8;
        h6 += ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
        t6 = m[mpos + 12] & 0xff | (m[mpos + 13] & 0xff) << 8;
        h7 += ((t5 >>> 11) | (t6 << 5)) & 0x1fff;
        t7 = m[mpos + 14] & 0xff | (m[mpos + 15] & 0xff) << 8;
        h8 += ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
        h9 += ((t7 >>> 5)) | hibit;
        c = 0;
        d0 = c;
        d0 += h0 * r0;
        d0 += h1 * (5 * r9);
        d0 += h2 * (5 * r8);
        d0 += h3 * (5 * r7);
        d0 += h4 * (5 * r6);
        c = (d0 >>> 13);
        d0 &= 0x1fff;
        d0 += h5 * (5 * r5);
        d0 += h6 * (5 * r4);
        d0 += h7 * (5 * r3);
        d0 += h8 * (5 * r2);
        d0 += h9 * (5 * r1);
        c += (d0 >>> 13);
        d0 &= 0x1fff;
        d1 = c;
        d1 += h0 * r1;
        d1 += h1 * r0;
        d1 += h2 * (5 * r9);
        d1 += h3 * (5 * r8);
        d1 += h4 * (5 * r7);
        c = (d1 >>> 13);
        d1 &= 0x1fff;
        d1 += h5 * (5 * r6);
        d1 += h6 * (5 * r5);
        d1 += h7 * (5 * r4);
        d1 += h8 * (5 * r3);
        d1 += h9 * (5 * r2);
        c += (d1 >>> 13);
        d1 &= 0x1fff;
        d2 = c;
        d2 += h0 * r2;
        d2 += h1 * r1;
        d2 += h2 * r0;
        d2 += h3 * (5 * r9);
        d2 += h4 * (5 * r8);
        c = (d2 >>> 13);
        d2 &= 0x1fff;
        d2 += h5 * (5 * r7);
        d2 += h6 * (5 * r6);
        d2 += h7 * (5 * r5);
        d2 += h8 * (5 * r4);
        d2 += h9 * (5 * r3);
        c += (d2 >>> 13);
        d2 &= 0x1fff;
        d3 = c;
        d3 += h0 * r3;
        d3 += h1 * r2;
        d3 += h2 * r1;
        d3 += h3 * r0;
        d3 += h4 * (5 * r9);
        c = (d3 >>> 13);
        d3 &= 0x1fff;
        d3 += h5 * (5 * r8);
        d3 += h6 * (5 * r7);
        d3 += h7 * (5 * r6);
        d3 += h8 * (5 * r5);
        d3 += h9 * (5 * r4);
        c += (d3 >>> 13);
        d3 &= 0x1fff;
        d4 = c;
        d4 += h0 * r4;
        d4 += h1 * r3;
        d4 += h2 * r2;
        d4 += h3 * r1;
        d4 += h4 * r0;
        c = (d4 >>> 13);
        d4 &= 0x1fff;
        d4 += h5 * (5 * r9);
        d4 += h6 * (5 * r8);
        d4 += h7 * (5 * r7);
        d4 += h8 * (5 * r6);
        d4 += h9 * (5 * r5);
        c += (d4 >>> 13);
        d4 &= 0x1fff;
        d5 = c;
        d5 += h0 * r5;
        d5 += h1 * r4;
        d5 += h2 * r3;
        d5 += h3 * r2;
        d5 += h4 * r1;
        c = (d5 >>> 13);
        d5 &= 0x1fff;
        d5 += h5 * r0;
        d5 += h6 * (5 * r9);
        d5 += h7 * (5 * r8);
        d5 += h8 * (5 * r7);
        d5 += h9 * (5 * r6);
        c += (d5 >>> 13);
        d5 &= 0x1fff;
        d6 = c;
        d6 += h0 * r6;
        d6 += h1 * r5;
        d6 += h2 * r4;
        d6 += h3 * r3;
        d6 += h4 * r2;
        c = (d6 >>> 13);
        d6 &= 0x1fff;
        d6 += h5 * r1;
        d6 += h6 * r0;
        d6 += h7 * (5 * r9);
        d6 += h8 * (5 * r8);
        d6 += h9 * (5 * r7);
        c += (d6 >>> 13);
        d6 &= 0x1fff;
        d7 = c;
        d7 += h0 * r7;
        d7 += h1 * r6;
        d7 += h2 * r5;
        d7 += h3 * r4;
        d7 += h4 * r3;
        c = (d7 >>> 13);
        d7 &= 0x1fff;
        d7 += h5 * r2;
        d7 += h6 * r1;
        d7 += h7 * r0;
        d7 += h8 * (5 * r9);
        d7 += h9 * (5 * r8);
        c += (d7 >>> 13);
        d7 &= 0x1fff;
        d8 = c;
        d8 += h0 * r8;
        d8 += h1 * r7;
        d8 += h2 * r6;
        d8 += h3 * r5;
        d8 += h4 * r4;
        c = (d8 >>> 13);
        d8 &= 0x1fff;
        d8 += h5 * r3;
        d8 += h6 * r2;
        d8 += h7 * r1;
        d8 += h8 * r0;
        d8 += h9 * (5 * r9);
        c += (d8 >>> 13);
        d8 &= 0x1fff;
        d9 = c;
        d9 += h0 * r9;
        d9 += h1 * r8;
        d9 += h2 * r7;
        d9 += h3 * r6;
        d9 += h4 * r5;
        c = (d9 >>> 13);
        d9 &= 0x1fff;
        d9 += h5 * r4;
        d9 += h6 * r3;
        d9 += h7 * r2;
        d9 += h8 * r1;
        d9 += h9 * r0;
        c += (d9 >>> 13);
        d9 &= 0x1fff;
        c = (((c << 2) + c)) | 0;
        c = (c + d0) | 0;
        d0 = c & 0x1fff;
        c = (c >>> 13);
        d1 += c;
        h0 = d0;
        h1 = d1;
        h2 = d2;
        h3 = d3;
        h4 = d4;
        h5 = d5;
        h6 = d6;
        h7 = d7;
        h8 = d8;
        h9 = d9;
        mpos += 16;
        bytes -= 16;
      }
      this.h[0] = h0;
      this.h[1] = h1;
      this.h[2] = h2;
      this.h[3] = h3;
      this.h[4] = h4;
      this.h[5] = h5;
      this.h[6] = h6;
      this.h[7] = h7;
      this.h[8] = h8;
      this.h[9] = h9;
    };
    poly1305.prototype.finish = function(mac, macpos) {
      var g = new Uint16Array(10);
      var c,
          mask,
          f,
          i;
      if (this.leftover) {
        i = this.leftover;
        this.buffer[i++] = 1;
        for (; i < 16; i++)
          this.buffer[i] = 0;
        this.fin = 1;
        this.blocks(this.buffer, 0, 16);
      }
      c = this.h[1] >>> 13;
      this.h[1] &= 0x1fff;
      for (i = 2; i < 10; i++) {
        this.h[i] += c;
        c = this.h[i] >>> 13;
        this.h[i] &= 0x1fff;
      }
      this.h[0] += (c * 5);
      c = this.h[0] >>> 13;
      this.h[0] &= 0x1fff;
      this.h[1] += c;
      c = this.h[1] >>> 13;
      this.h[1] &= 0x1fff;
      this.h[2] += c;
      g[0] = this.h[0] + 5;
      c = g[0] >>> 13;
      g[0] &= 0x1fff;
      for (i = 1; i < 10; i++) {
        g[i] = this.h[i] + c;
        c = g[i] >>> 13;
        g[i] &= 0x1fff;
      }
      g[9] -= (1 << 13);
      mask = (c ^ 1) - 1;
      for (i = 0; i < 10; i++)
        g[i] &= mask;
      mask = ~mask;
      for (i = 0; i < 10; i++)
        this.h[i] = (this.h[i] & mask) | g[i];
      this.h[0] = ((this.h[0]) | (this.h[1] << 13)) & 0xffff;
      this.h[1] = ((this.h[1] >>> 3) | (this.h[2] << 10)) & 0xffff;
      this.h[2] = ((this.h[2] >>> 6) | (this.h[3] << 7)) & 0xffff;
      this.h[3] = ((this.h[3] >>> 9) | (this.h[4] << 4)) & 0xffff;
      this.h[4] = ((this.h[4] >>> 12) | (this.h[5] << 1) | (this.h[6] << 14)) & 0xffff;
      this.h[5] = ((this.h[6] >>> 2) | (this.h[7] << 11)) & 0xffff;
      this.h[6] = ((this.h[7] >>> 5) | (this.h[8] << 8)) & 0xffff;
      this.h[7] = ((this.h[8] >>> 8) | (this.h[9] << 5)) & 0xffff;
      f = this.h[0] + this.pad[0];
      this.h[0] = f & 0xffff;
      for (i = 1; i < 8; i++) {
        f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
        this.h[i] = f & 0xffff;
      }
      mac[macpos + 0] = (this.h[0] >>> 0) & 0xff;
      mac[macpos + 1] = (this.h[0] >>> 8) & 0xff;
      mac[macpos + 2] = (this.h[1] >>> 0) & 0xff;
      mac[macpos + 3] = (this.h[1] >>> 8) & 0xff;
      mac[macpos + 4] = (this.h[2] >>> 0) & 0xff;
      mac[macpos + 5] = (this.h[2] >>> 8) & 0xff;
      mac[macpos + 6] = (this.h[3] >>> 0) & 0xff;
      mac[macpos + 7] = (this.h[3] >>> 8) & 0xff;
      mac[macpos + 8] = (this.h[4] >>> 0) & 0xff;
      mac[macpos + 9] = (this.h[4] >>> 8) & 0xff;
      mac[macpos + 10] = (this.h[5] >>> 0) & 0xff;
      mac[macpos + 11] = (this.h[5] >>> 8) & 0xff;
      mac[macpos + 12] = (this.h[6] >>> 0) & 0xff;
      mac[macpos + 13] = (this.h[6] >>> 8) & 0xff;
      mac[macpos + 14] = (this.h[7] >>> 0) & 0xff;
      mac[macpos + 15] = (this.h[7] >>> 8) & 0xff;
    };
    poly1305.prototype.update = function(m, mpos, bytes) {
      var i,
          want;
      if (this.leftover) {
        want = (16 - this.leftover);
        if (want > bytes)
          want = bytes;
        for (i = 0; i < want; i++)
          this.buffer[this.leftover + i] = m[mpos + i];
        bytes -= want;
        mpos += want;
        this.leftover += want;
        if (this.leftover < 16)
          return;
        this.blocks(this.buffer, 0, 16);
        this.leftover = 0;
      }
      if (bytes >= 16) {
        want = bytes - (bytes % 16);
        this.blocks(m, mpos, want);
        mpos += want;
        bytes -= want;
      }
      if (bytes) {
        for (i = 0; i < bytes; i++)
          this.buffer[this.leftover + i] = m[mpos + i];
        this.leftover += bytes;
      }
    };
    function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
      var s = new poly1305(k);
      s.update(m, mpos, n);
      s.finish(out, outpos);
      return 0;
    }
    function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
      var x = new Uint8Array(16);
      crypto_onetimeauth(x, 0, m, mpos, n, k);
      return crypto_verify_16(h, hpos, x, 0);
    }
    function crypto_secretbox(c, m, d, n, k) {
      var i;
      if (d < 32)
        return -1;
      crypto_stream_xor(c, 0, m, 0, d, n, k);
      crypto_onetimeauth(c, 16, c, 32, d - 32, c);
      for (i = 0; i < 16; i++)
        c[i] = 0;
      return 0;
    }
    function crypto_secretbox_open(m, c, d, n, k) {
      var i;
      var x = new Uint8Array(32);
      if (d < 32)
        return -1;
      crypto_stream(x, 0, 32, n, k);
      if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0)
        return -1;
      crypto_stream_xor(m, 0, c, 0, d, n, k);
      for (i = 0; i < 32; i++)
        m[i] = 0;
      return 0;
    }
    function set25519(r, a) {
      var i;
      for (i = 0; i < 16; i++)
        r[i] = a[i] | 0;
    }
    function car25519(o) {
      var i,
          v,
          c = 1;
      for (i = 0; i < 16; i++) {
        v = o[i] + c + 65535;
        c = Math.floor(v / 65536);
        o[i] = v - c * 65536;
      }
      o[0] += c - 1 + 37 * (c - 1);
    }
    function sel25519(p, q, b) {
      var t,
          c = ~(b - 1);
      for (var i = 0; i < 16; i++) {
        t = c & (p[i] ^ q[i]);
        p[i] ^= t;
        q[i] ^= t;
      }
    }
    function pack25519(o, n) {
      var i,
          j,
          b;
      var m = gf(),
          t = gf();
      for (i = 0; i < 16; i++)
        t[i] = n[i];
      car25519(t);
      car25519(t);
      car25519(t);
      for (j = 0; j < 2; j++) {
        m[0] = t[0] - 0xffed;
        for (i = 1; i < 15; i++) {
          m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);
          m[i - 1] &= 0xffff;
        }
        m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);
        b = (m[15] >> 16) & 1;
        m[14] &= 0xffff;
        sel25519(t, m, 1 - b);
      }
      for (i = 0; i < 16; i++) {
        o[2 * i] = t[i] & 0xff;
        o[2 * i + 1] = t[i] >> 8;
      }
    }
    function neq25519(a, b) {
      var c = new Uint8Array(32),
          d = new Uint8Array(32);
      pack25519(c, a);
      pack25519(d, b);
      return crypto_verify_32(c, 0, d, 0);
    }
    function par25519(a) {
      var d = new Uint8Array(32);
      pack25519(d, a);
      return d[0] & 1;
    }
    function unpack25519(o, n) {
      var i;
      for (i = 0; i < 16; i++)
        o[i] = n[2 * i] + (n[2 * i + 1] << 8);
      o[15] &= 0x7fff;
    }
    function A(o, a, b) {
      for (var i = 0; i < 16; i++)
        o[i] = a[i] + b[i];
    }
    function Z(o, a, b) {
      for (var i = 0; i < 16; i++)
        o[i] = a[i] - b[i];
    }
    function M(o, a, b) {
      var v,
          c,
          t0 = 0,
          t1 = 0,
          t2 = 0,
          t3 = 0,
          t4 = 0,
          t5 = 0,
          t6 = 0,
          t7 = 0,
          t8 = 0,
          t9 = 0,
          t10 = 0,
          t11 = 0,
          t12 = 0,
          t13 = 0,
          t14 = 0,
          t15 = 0,
          t16 = 0,
          t17 = 0,
          t18 = 0,
          t19 = 0,
          t20 = 0,
          t21 = 0,
          t22 = 0,
          t23 = 0,
          t24 = 0,
          t25 = 0,
          t26 = 0,
          t27 = 0,
          t28 = 0,
          t29 = 0,
          t30 = 0,
          b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3],
          b4 = b[4],
          b5 = b[5],
          b6 = b[6],
          b7 = b[7],
          b8 = b[8],
          b9 = b[9],
          b10 = b[10],
          b11 = b[11],
          b12 = b[12],
          b13 = b[13],
          b14 = b[14],
          b15 = b[15];
      v = a[0];
      t0 += v * b0;
      t1 += v * b1;
      t2 += v * b2;
      t3 += v * b3;
      t4 += v * b4;
      t5 += v * b5;
      t6 += v * b6;
      t7 += v * b7;
      t8 += v * b8;
      t9 += v * b9;
      t10 += v * b10;
      t11 += v * b11;
      t12 += v * b12;
      t13 += v * b13;
      t14 += v * b14;
      t15 += v * b15;
      v = a[1];
      t1 += v * b0;
      t2 += v * b1;
      t3 += v * b2;
      t4 += v * b3;
      t5 += v * b4;
      t6 += v * b5;
      t7 += v * b6;
      t8 += v * b7;
      t9 += v * b8;
      t10 += v * b9;
      t11 += v * b10;
      t12 += v * b11;
      t13 += v * b12;
      t14 += v * b13;
      t15 += v * b14;
      t16 += v * b15;
      v = a[2];
      t2 += v * b0;
      t3 += v * b1;
      t4 += v * b2;
      t5 += v * b3;
      t6 += v * b4;
      t7 += v * b5;
      t8 += v * b6;
      t9 += v * b7;
      t10 += v * b8;
      t11 += v * b9;
      t12 += v * b10;
      t13 += v * b11;
      t14 += v * b12;
      t15 += v * b13;
      t16 += v * b14;
      t17 += v * b15;
      v = a[3];
      t3 += v * b0;
      t4 += v * b1;
      t5 += v * b2;
      t6 += v * b3;
      t7 += v * b4;
      t8 += v * b5;
      t9 += v * b6;
      t10 += v * b7;
      t11 += v * b8;
      t12 += v * b9;
      t13 += v * b10;
      t14 += v * b11;
      t15 += v * b12;
      t16 += v * b13;
      t17 += v * b14;
      t18 += v * b15;
      v = a[4];
      t4 += v * b0;
      t5 += v * b1;
      t6 += v * b2;
      t7 += v * b3;
      t8 += v * b4;
      t9 += v * b5;
      t10 += v * b6;
      t11 += v * b7;
      t12 += v * b8;
      t13 += v * b9;
      t14 += v * b10;
      t15 += v * b11;
      t16 += v * b12;
      t17 += v * b13;
      t18 += v * b14;
      t19 += v * b15;
      v = a[5];
      t5 += v * b0;
      t6 += v * b1;
      t7 += v * b2;
      t8 += v * b3;
      t9 += v * b4;
      t10 += v * b5;
      t11 += v * b6;
      t12 += v * b7;
      t13 += v * b8;
      t14 += v * b9;
      t15 += v * b10;
      t16 += v * b11;
      t17 += v * b12;
      t18 += v * b13;
      t19 += v * b14;
      t20 += v * b15;
      v = a[6];
      t6 += v * b0;
      t7 += v * b1;
      t8 += v * b2;
      t9 += v * b3;
      t10 += v * b4;
      t11 += v * b5;
      t12 += v * b6;
      t13 += v * b7;
      t14 += v * b8;
      t15 += v * b9;
      t16 += v * b10;
      t17 += v * b11;
      t18 += v * b12;
      t19 += v * b13;
      t20 += v * b14;
      t21 += v * b15;
      v = a[7];
      t7 += v * b0;
      t8 += v * b1;
      t9 += v * b2;
      t10 += v * b3;
      t11 += v * b4;
      t12 += v * b5;
      t13 += v * b6;
      t14 += v * b7;
      t15 += v * b8;
      t16 += v * b9;
      t17 += v * b10;
      t18 += v * b11;
      t19 += v * b12;
      t20 += v * b13;
      t21 += v * b14;
      t22 += v * b15;
      v = a[8];
      t8 += v * b0;
      t9 += v * b1;
      t10 += v * b2;
      t11 += v * b3;
      t12 += v * b4;
      t13 += v * b5;
      t14 += v * b6;
      t15 += v * b7;
      t16 += v * b8;
      t17 += v * b9;
      t18 += v * b10;
      t19 += v * b11;
      t20 += v * b12;
      t21 += v * b13;
      t22 += v * b14;
      t23 += v * b15;
      v = a[9];
      t9 += v * b0;
      t10 += v * b1;
      t11 += v * b2;
      t12 += v * b3;
      t13 += v * b4;
      t14 += v * b5;
      t15 += v * b6;
      t16 += v * b7;
      t17 += v * b8;
      t18 += v * b9;
      t19 += v * b10;
      t20 += v * b11;
      t21 += v * b12;
      t22 += v * b13;
      t23 += v * b14;
      t24 += v * b15;
      v = a[10];
      t10 += v * b0;
      t11 += v * b1;
      t12 += v * b2;
      t13 += v * b3;
      t14 += v * b4;
      t15 += v * b5;
      t16 += v * b6;
      t17 += v * b7;
      t18 += v * b8;
      t19 += v * b9;
      t20 += v * b10;
      t21 += v * b11;
      t22 += v * b12;
      t23 += v * b13;
      t24 += v * b14;
      t25 += v * b15;
      v = a[11];
      t11 += v * b0;
      t12 += v * b1;
      t13 += v * b2;
      t14 += v * b3;
      t15 += v * b4;
      t16 += v * b5;
      t17 += v * b6;
      t18 += v * b7;
      t19 += v * b8;
      t20 += v * b9;
      t21 += v * b10;
      t22 += v * b11;
      t23 += v * b12;
      t24 += v * b13;
      t25 += v * b14;
      t26 += v * b15;
      v = a[12];
      t12 += v * b0;
      t13 += v * b1;
      t14 += v * b2;
      t15 += v * b3;
      t16 += v * b4;
      t17 += v * b5;
      t18 += v * b6;
      t19 += v * b7;
      t20 += v * b8;
      t21 += v * b9;
      t22 += v * b10;
      t23 += v * b11;
      t24 += v * b12;
      t25 += v * b13;
      t26 += v * b14;
      t27 += v * b15;
      v = a[13];
      t13 += v * b0;
      t14 += v * b1;
      t15 += v * b2;
      t16 += v * b3;
      t17 += v * b4;
      t18 += v * b5;
      t19 += v * b6;
      t20 += v * b7;
      t21 += v * b8;
      t22 += v * b9;
      t23 += v * b10;
      t24 += v * b11;
      t25 += v * b12;
      t26 += v * b13;
      t27 += v * b14;
      t28 += v * b15;
      v = a[14];
      t14 += v * b0;
      t15 += v * b1;
      t16 += v * b2;
      t17 += v * b3;
      t18 += v * b4;
      t19 += v * b5;
      t20 += v * b6;
      t21 += v * b7;
      t22 += v * b8;
      t23 += v * b9;
      t24 += v * b10;
      t25 += v * b11;
      t26 += v * b12;
      t27 += v * b13;
      t28 += v * b14;
      t29 += v * b15;
      v = a[15];
      t15 += v * b0;
      t16 += v * b1;
      t17 += v * b2;
      t18 += v * b3;
      t19 += v * b4;
      t20 += v * b5;
      t21 += v * b6;
      t22 += v * b7;
      t23 += v * b8;
      t24 += v * b9;
      t25 += v * b10;
      t26 += v * b11;
      t27 += v * b12;
      t28 += v * b13;
      t29 += v * b14;
      t30 += v * b15;
      t0 += 38 * t16;
      t1 += 38 * t17;
      t2 += 38 * t18;
      t3 += 38 * t19;
      t4 += 38 * t20;
      t5 += 38 * t21;
      t6 += 38 * t22;
      t7 += 38 * t23;
      t8 += 38 * t24;
      t9 += 38 * t25;
      t10 += 38 * t26;
      t11 += 38 * t27;
      t12 += 38 * t28;
      t13 += 38 * t29;
      t14 += 38 * t30;
      c = 1;
      v = t0 + c + 65535;
      c = Math.floor(v / 65536);
      t0 = v - c * 65536;
      v = t1 + c + 65535;
      c = Math.floor(v / 65536);
      t1 = v - c * 65536;
      v = t2 + c + 65535;
      c = Math.floor(v / 65536);
      t2 = v - c * 65536;
      v = t3 + c + 65535;
      c = Math.floor(v / 65536);
      t3 = v - c * 65536;
      v = t4 + c + 65535;
      c = Math.floor(v / 65536);
      t4 = v - c * 65536;
      v = t5 + c + 65535;
      c = Math.floor(v / 65536);
      t5 = v - c * 65536;
      v = t6 + c + 65535;
      c = Math.floor(v / 65536);
      t6 = v - c * 65536;
      v = t7 + c + 65535;
      c = Math.floor(v / 65536);
      t7 = v - c * 65536;
      v = t8 + c + 65535;
      c = Math.floor(v / 65536);
      t8 = v - c * 65536;
      v = t9 + c + 65535;
      c = Math.floor(v / 65536);
      t9 = v - c * 65536;
      v = t10 + c + 65535;
      c = Math.floor(v / 65536);
      t10 = v - c * 65536;
      v = t11 + c + 65535;
      c = Math.floor(v / 65536);
      t11 = v - c * 65536;
      v = t12 + c + 65535;
      c = Math.floor(v / 65536);
      t12 = v - c * 65536;
      v = t13 + c + 65535;
      c = Math.floor(v / 65536);
      t13 = v - c * 65536;
      v = t14 + c + 65535;
      c = Math.floor(v / 65536);
      t14 = v - c * 65536;
      v = t15 + c + 65535;
      c = Math.floor(v / 65536);
      t15 = v - c * 65536;
      t0 += c - 1 + 37 * (c - 1);
      c = 1;
      v = t0 + c + 65535;
      c = Math.floor(v / 65536);
      t0 = v - c * 65536;
      v = t1 + c + 65535;
      c = Math.floor(v / 65536);
      t1 = v - c * 65536;
      v = t2 + c + 65535;
      c = Math.floor(v / 65536);
      t2 = v - c * 65536;
      v = t3 + c + 65535;
      c = Math.floor(v / 65536);
      t3 = v - c * 65536;
      v = t4 + c + 65535;
      c = Math.floor(v / 65536);
      t4 = v - c * 65536;
      v = t5 + c + 65535;
      c = Math.floor(v / 65536);
      t5 = v - c * 65536;
      v = t6 + c + 65535;
      c = Math.floor(v / 65536);
      t6 = v - c * 65536;
      v = t7 + c + 65535;
      c = Math.floor(v / 65536);
      t7 = v - c * 65536;
      v = t8 + c + 65535;
      c = Math.floor(v / 65536);
      t8 = v - c * 65536;
      v = t9 + c + 65535;
      c = Math.floor(v / 65536);
      t9 = v - c * 65536;
      v = t10 + c + 65535;
      c = Math.floor(v / 65536);
      t10 = v - c * 65536;
      v = t11 + c + 65535;
      c = Math.floor(v / 65536);
      t11 = v - c * 65536;
      v = t12 + c + 65535;
      c = Math.floor(v / 65536);
      t12 = v - c * 65536;
      v = t13 + c + 65535;
      c = Math.floor(v / 65536);
      t13 = v - c * 65536;
      v = t14 + c + 65535;
      c = Math.floor(v / 65536);
      t14 = v - c * 65536;
      v = t15 + c + 65535;
      c = Math.floor(v / 65536);
      t15 = v - c * 65536;
      t0 += c - 1 + 37 * (c - 1);
      o[0] = t0;
      o[1] = t1;
      o[2] = t2;
      o[3] = t3;
      o[4] = t4;
      o[5] = t5;
      o[6] = t6;
      o[7] = t7;
      o[8] = t8;
      o[9] = t9;
      o[10] = t10;
      o[11] = t11;
      o[12] = t12;
      o[13] = t13;
      o[14] = t14;
      o[15] = t15;
    }
    function S(o, a) {
      M(o, a, a);
    }
    function inv25519(o, i) {
      var c = gf();
      var a;
      for (a = 0; a < 16; a++)
        c[a] = i[a];
      for (a = 253; a >= 0; a--) {
        S(c, c);
        if (a !== 2 && a !== 4)
          M(c, c, i);
      }
      for (a = 0; a < 16; a++)
        o[a] = c[a];
    }
    function pow2523(o, i) {
      var c = gf();
      var a;
      for (a = 0; a < 16; a++)
        c[a] = i[a];
      for (a = 250; a >= 0; a--) {
        S(c, c);
        if (a !== 1)
          M(c, c, i);
      }
      for (a = 0; a < 16; a++)
        o[a] = c[a];
    }
    function crypto_scalarmult(q, n, p) {
      var z = new Uint8Array(32);
      var x = new Float64Array(80),
          r,
          i;
      var a = gf(),
          b = gf(),
          c = gf(),
          d = gf(),
          e = gf(),
          f = gf();
      for (i = 0; i < 31; i++)
        z[i] = n[i];
      z[31] = (n[31] & 127) | 64;
      z[0] &= 248;
      unpack25519(x, p);
      for (i = 0; i < 16; i++) {
        b[i] = x[i];
        d[i] = a[i] = c[i] = 0;
      }
      a[0] = d[0] = 1;
      for (i = 254; i >= 0; --i) {
        r = (z[i >>> 3] >>> (i & 7)) & 1;
        sel25519(a, b, r);
        sel25519(c, d, r);
        A(e, a, c);
        Z(a, a, c);
        A(c, b, d);
        Z(b, b, d);
        S(d, e);
        S(f, a);
        M(a, c, a);
        M(c, b, e);
        A(e, a, c);
        Z(a, a, c);
        S(b, a);
        Z(c, d, f);
        M(a, c, _121665);
        A(a, a, d);
        M(c, c, a);
        M(a, d, f);
        M(d, b, x);
        S(b, e);
        sel25519(a, b, r);
        sel25519(c, d, r);
      }
      for (i = 0; i < 16; i++) {
        x[i + 16] = a[i];
        x[i + 32] = c[i];
        x[i + 48] = b[i];
        x[i + 64] = d[i];
      }
      var x32 = x.subarray(32);
      var x16 = x.subarray(16);
      inv25519(x32, x32);
      M(x16, x16, x32);
      pack25519(q, x16);
      return 0;
    }
    function crypto_scalarmult_base(q, n) {
      return crypto_scalarmult(q, n, _9);
    }
    function crypto_box_keypair(y, x) {
      randombytes(x, 32);
      return crypto_scalarmult_base(y, x);
    }
    function crypto_box_beforenm(k, y, x) {
      var s = new Uint8Array(32);
      crypto_scalarmult(s, x, y);
      return crypto_core_hsalsa20(k, _0, s, sigma);
    }
    var crypto_box_afternm = crypto_secretbox;
    var crypto_box_open_afternm = crypto_secretbox_open;
    function crypto_box(c, m, d, n, y, x) {
      var k = new Uint8Array(32);
      crypto_box_beforenm(k, y, x);
      return crypto_box_afternm(c, m, d, n, k);
    }
    function crypto_box_open(m, c, d, n, y, x) {
      var k = new Uint8Array(32);
      crypto_box_beforenm(k, y, x);
      return crypto_box_open_afternm(m, c, d, n, k);
    }
    var K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];
    function crypto_hashblocks_hl(hh, hl, m, n) {
      var wh = new Int32Array(16),
          wl = new Int32Array(16),
          bh0,
          bh1,
          bh2,
          bh3,
          bh4,
          bh5,
          bh6,
          bh7,
          bl0,
          bl1,
          bl2,
          bl3,
          bl4,
          bl5,
          bl6,
          bl7,
          th,
          tl,
          i,
          j,
          h,
          l,
          a,
          b,
          c,
          d;
      var ah0 = hh[0],
          ah1 = hh[1],
          ah2 = hh[2],
          ah3 = hh[3],
          ah4 = hh[4],
          ah5 = hh[5],
          ah6 = hh[6],
          ah7 = hh[7],
          al0 = hl[0],
          al1 = hl[1],
          al2 = hl[2],
          al3 = hl[3],
          al4 = hl[4],
          al5 = hl[5],
          al6 = hl[6],
          al7 = hl[7];
      var pos = 0;
      while (n >= 128) {
        for (i = 0; i < 16; i++) {
          j = 8 * i + pos;
          wh[i] = (m[j + 0] << 24) | (m[j + 1] << 16) | (m[j + 2] << 8) | m[j + 3];
          wl[i] = (m[j + 4] << 24) | (m[j + 5] << 16) | (m[j + 6] << 8) | m[j + 7];
        }
        for (i = 0; i < 80; i++) {
          bh0 = ah0;
          bh1 = ah1;
          bh2 = ah2;
          bh3 = ah3;
          bh4 = ah4;
          bh5 = ah5;
          bh6 = ah6;
          bh7 = ah7;
          bl0 = al0;
          bl1 = al1;
          bl2 = al2;
          bl3 = al3;
          bl4 = al4;
          bl5 = al5;
          bl6 = al6;
          bl7 = al7;
          h = ah7;
          l = al7;
          a = l & 0xffff;
          b = l >>> 16;
          c = h & 0xffff;
          d = h >>> 16;
          h = ((ah4 >>> 14) | (al4 << (32 - 14))) ^ ((ah4 >>> 18) | (al4 << (32 - 18))) ^ ((al4 >>> (41 - 32)) | (ah4 << (32 - (41 - 32))));
          l = ((al4 >>> 14) | (ah4 << (32 - 14))) ^ ((al4 >>> 18) | (ah4 << (32 - 18))) ^ ((ah4 >>> (41 - 32)) | (al4 << (32 - (41 - 32))));
          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;
          h = (ah4 & ah5) ^ (~ah4 & ah6);
          l = (al4 & al5) ^ (~al4 & al6);
          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;
          h = K[i * 2];
          l = K[i * 2 + 1];
          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;
          h = wh[i % 16];
          l = wl[i % 16];
          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          th = c & 0xffff | d << 16;
          tl = a & 0xffff | b << 16;
          h = th;
          l = tl;
          a = l & 0xffff;
          b = l >>> 16;
          c = h & 0xffff;
          d = h >>> 16;
          h = ((ah0 >>> 28) | (al0 << (32 - 28))) ^ ((al0 >>> (34 - 32)) | (ah0 << (32 - (34 - 32)))) ^ ((al0 >>> (39 - 32)) | (ah0 << (32 - (39 - 32))));
          l = ((al0 >>> 28) | (ah0 << (32 - 28))) ^ ((ah0 >>> (34 - 32)) | (al0 << (32 - (34 - 32)))) ^ ((ah0 >>> (39 - 32)) | (al0 << (32 - (39 - 32))));
          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;
          h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
          l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);
          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          bh7 = (c & 0xffff) | (d << 16);
          bl7 = (a & 0xffff) | (b << 16);
          h = bh3;
          l = bl3;
          a = l & 0xffff;
          b = l >>> 16;
          c = h & 0xffff;
          d = h >>> 16;
          h = th;
          l = tl;
          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;
          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;
          bh3 = (c & 0xffff) | (d << 16);
          bl3 = (a & 0xffff) | (b << 16);
          ah1 = bh0;
          ah2 = bh1;
          ah3 = bh2;
          ah4 = bh3;
          ah5 = bh4;
          ah6 = bh5;
          ah7 = bh6;
          ah0 = bh7;
          al1 = bl0;
          al2 = bl1;
          al3 = bl2;
          al4 = bl3;
          al5 = bl4;
          al6 = bl5;
          al7 = bl6;
          al0 = bl7;
          if (i % 16 === 15) {
            for (j = 0; j < 16; j++) {
              h = wh[j];
              l = wl[j];
              a = l & 0xffff;
              b = l >>> 16;
              c = h & 0xffff;
              d = h >>> 16;
              h = wh[(j + 9) % 16];
              l = wl[(j + 9) % 16];
              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;
              th = wh[(j + 1) % 16];
              tl = wl[(j + 1) % 16];
              h = ((th >>> 1) | (tl << (32 - 1))) ^ ((th >>> 8) | (tl << (32 - 8))) ^ (th >>> 7);
              l = ((tl >>> 1) | (th << (32 - 1))) ^ ((tl >>> 8) | (th << (32 - 8))) ^ ((tl >>> 7) | (th << (32 - 7)));
              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;
              th = wh[(j + 14) % 16];
              tl = wl[(j + 14) % 16];
              h = ((th >>> 19) | (tl << (32 - 19))) ^ ((tl >>> (61 - 32)) | (th << (32 - (61 - 32)))) ^ (th >>> 6);
              l = ((tl >>> 19) | (th << (32 - 19))) ^ ((th >>> (61 - 32)) | (tl << (32 - (61 - 32)))) ^ ((tl >>> 6) | (th << (32 - 6)));
              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;
              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;
              wh[j] = (c & 0xffff) | (d << 16);
              wl[j] = (a & 0xffff) | (b << 16);
            }
          }
        }
        h = ah0;
        l = al0;
        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;
        h = hh[0];
        l = hl[0];
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[0] = ah0 = (c & 0xffff) | (d << 16);
        hl[0] = al0 = (a & 0xffff) | (b << 16);
        h = ah1;
        l = al1;
        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;
        h = hh[1];
        l = hl[1];
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[1] = ah1 = (c & 0xffff) | (d << 16);
        hl[1] = al1 = (a & 0xffff) | (b << 16);
        h = ah2;
        l = al2;
        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;
        h = hh[2];
        l = hl[2];
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[2] = ah2 = (c & 0xffff) | (d << 16);
        hl[2] = al2 = (a & 0xffff) | (b << 16);
        h = ah3;
        l = al3;
        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;
        h = hh[3];
        l = hl[3];
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[3] = ah3 = (c & 0xffff) | (d << 16);
        hl[3] = al3 = (a & 0xffff) | (b << 16);
        h = ah4;
        l = al4;
        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;
        h = hh[4];
        l = hl[4];
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[4] = ah4 = (c & 0xffff) | (d << 16);
        hl[4] = al4 = (a & 0xffff) | (b << 16);
        h = ah5;
        l = al5;
        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;
        h = hh[5];
        l = hl[5];
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[5] = ah5 = (c & 0xffff) | (d << 16);
        hl[5] = al5 = (a & 0xffff) | (b << 16);
        h = ah6;
        l = al6;
        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;
        h = hh[6];
        l = hl[6];
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[6] = ah6 = (c & 0xffff) | (d << 16);
        hl[6] = al6 = (a & 0xffff) | (b << 16);
        h = ah7;
        l = al7;
        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;
        h = hh[7];
        l = hl[7];
        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;
        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;
        hh[7] = ah7 = (c & 0xffff) | (d << 16);
        hl[7] = al7 = (a & 0xffff) | (b << 16);
        pos += 128;
        n -= 128;
      }
      return n;
    }
    function crypto_hash(out, m, n) {
      var hh = new Int32Array(8),
          hl = new Int32Array(8),
          x = new Uint8Array(256),
          i,
          b = n;
      hh[0] = 0x6a09e667;
      hh[1] = 0xbb67ae85;
      hh[2] = 0x3c6ef372;
      hh[3] = 0xa54ff53a;
      hh[4] = 0x510e527f;
      hh[5] = 0x9b05688c;
      hh[6] = 0x1f83d9ab;
      hh[7] = 0x5be0cd19;
      hl[0] = 0xf3bcc908;
      hl[1] = 0x84caa73b;
      hl[2] = 0xfe94f82b;
      hl[3] = 0x5f1d36f1;
      hl[4] = 0xade682d1;
      hl[5] = 0x2b3e6c1f;
      hl[6] = 0xfb41bd6b;
      hl[7] = 0x137e2179;
      crypto_hashblocks_hl(hh, hl, m, n);
      n %= 128;
      for (i = 0; i < n; i++)
        x[i] = m[b - n + i];
      x[n] = 128;
      n = 256 - 128 * (n < 112 ? 1 : 0);
      x[n - 9] = 0;
      ts64(x, n - 8, (b / 0x20000000) | 0, b << 3);
      crypto_hashblocks_hl(hh, hl, x, n);
      for (i = 0; i < 8; i++)
        ts64(out, 8 * i, hh[i], hl[i]);
      return 0;
    }
    function add(p, q) {
      var a = gf(),
          b = gf(),
          c = gf(),
          d = gf(),
          e = gf(),
          f = gf(),
          g = gf(),
          h = gf(),
          t = gf();
      Z(a, p[1], p[0]);
      Z(t, q[1], q[0]);
      M(a, a, t);
      A(b, p[0], p[1]);
      A(t, q[0], q[1]);
      M(b, b, t);
      M(c, p[3], q[3]);
      M(c, c, D2);
      M(d, p[2], q[2]);
      A(d, d, d);
      Z(e, b, a);
      Z(f, d, c);
      A(g, d, c);
      A(h, b, a);
      M(p[0], e, f);
      M(p[1], h, g);
      M(p[2], g, f);
      M(p[3], e, h);
    }
    function cswap(p, q, b) {
      var i;
      for (i = 0; i < 4; i++) {
        sel25519(p[i], q[i], b);
      }
    }
    function pack(r, p) {
      var tx = gf(),
          ty = gf(),
          zi = gf();
      inv25519(zi, p[2]);
      M(tx, p[0], zi);
      M(ty, p[1], zi);
      pack25519(r, ty);
      r[31] ^= par25519(tx) << 7;
    }
    function scalarmult(p, q, s) {
      var b,
          i;
      set25519(p[0], gf0);
      set25519(p[1], gf1);
      set25519(p[2], gf1);
      set25519(p[3], gf0);
      for (i = 255; i >= 0; --i) {
        b = (s[(i / 8) | 0] >> (i & 7)) & 1;
        cswap(p, q, b);
        add(q, p);
        add(p, p);
        cswap(p, q, b);
      }
    }
    function scalarbase(p, s) {
      var q = [gf(), gf(), gf(), gf()];
      set25519(q[0], X);
      set25519(q[1], Y);
      set25519(q[2], gf1);
      M(q[3], X, Y);
      scalarmult(p, q, s);
    }
    function crypto_sign_keypair(pk, sk, seeded) {
      var d = new Uint8Array(64);
      var p = [gf(), gf(), gf(), gf()];
      var i;
      if (!seeded)
        randombytes(sk, 32);
      crypto_hash(d, sk, 32);
      d[0] &= 248;
      d[31] &= 127;
      d[31] |= 64;
      scalarbase(p, d);
      pack(pk, p);
      for (i = 0; i < 32; i++)
        sk[i + 32] = pk[i];
      return 0;
    }
    var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);
    function modL(r, x) {
      var carry,
          i,
          j,
          k;
      for (i = 63; i >= 32; --i) {
        carry = 0;
        for (j = i - 32, k = i - 12; j < k; ++j) {
          x[j] += carry - 16 * x[i] * L[j - (i - 32)];
          carry = (x[j] + 128) >> 8;
          x[j] -= carry * 256;
        }
        x[j] += carry;
        x[i] = 0;
      }
      carry = 0;
      for (j = 0; j < 32; j++) {
        x[j] += carry - (x[31] >> 4) * L[j];
        carry = x[j] >> 8;
        x[j] &= 255;
      }
      for (j = 0; j < 32; j++)
        x[j] -= carry * L[j];
      for (i = 0; i < 32; i++) {
        x[i + 1] += x[i] >> 8;
        r[i] = x[i] & 255;
      }
    }
    function reduce(r) {
      var x = new Float64Array(64),
          i;
      for (i = 0; i < 64; i++)
        x[i] = r[i];
      for (i = 0; i < 64; i++)
        r[i] = 0;
      modL(r, x);
    }
    function crypto_sign(sm, m, n, sk) {
      var d = new Uint8Array(64),
          h = new Uint8Array(64),
          r = new Uint8Array(64);
      var i,
          j,
          x = new Float64Array(64);
      var p = [gf(), gf(), gf(), gf()];
      crypto_hash(d, sk, 32);
      d[0] &= 248;
      d[31] &= 127;
      d[31] |= 64;
      var smlen = n + 64;
      for (i = 0; i < n; i++)
        sm[64 + i] = m[i];
      for (i = 0; i < 32; i++)
        sm[32 + i] = d[32 + i];
      crypto_hash(r, sm.subarray(32), n + 32);
      reduce(r);
      scalarbase(p, r);
      pack(sm, p);
      for (i = 32; i < 64; i++)
        sm[i] = sk[i];
      crypto_hash(h, sm, n + 64);
      reduce(h);
      for (i = 0; i < 64; i++)
        x[i] = 0;
      for (i = 0; i < 32; i++)
        x[i] = r[i];
      for (i = 0; i < 32; i++) {
        for (j = 0; j < 32; j++) {
          x[i + j] += h[i] * d[j];
        }
      }
      modL(sm.subarray(32), x);
      return smlen;
    }
    function unpackneg(r, p) {
      var t = gf(),
          chk = gf(),
          num = gf(),
          den = gf(),
          den2 = gf(),
          den4 = gf(),
          den6 = gf();
      set25519(r[2], gf1);
      unpack25519(r[1], p);
      S(num, r[1]);
      M(den, num, D);
      Z(num, num, r[2]);
      A(den, r[2], den);
      S(den2, den);
      S(den4, den2);
      M(den6, den4, den2);
      M(t, den6, num);
      M(t, t, den);
      pow2523(t, t);
      M(t, t, num);
      M(t, t, den);
      M(t, t, den);
      M(r[0], t, den);
      S(chk, r[0]);
      M(chk, chk, den);
      if (neq25519(chk, num))
        M(r[0], r[0], I);
      S(chk, r[0]);
      M(chk, chk, den);
      if (neq25519(chk, num))
        return -1;
      if (par25519(r[0]) === (p[31] >> 7))
        Z(r[0], gf0, r[0]);
      M(r[3], r[0], r[1]);
      return 0;
    }
    function crypto_sign_open(m, sm, n, pk) {
      var i,
          mlen;
      var t = new Uint8Array(32),
          h = new Uint8Array(64);
      var p = [gf(), gf(), gf(), gf()],
          q = [gf(), gf(), gf(), gf()];
      mlen = -1;
      if (n < 64)
        return -1;
      if (unpackneg(q, pk))
        return -1;
      for (i = 0; i < n; i++)
        m[i] = sm[i];
      for (i = 0; i < 32; i++)
        m[i + 32] = pk[i];
      crypto_hash(h, m, n);
      reduce(h);
      scalarmult(p, q, h);
      scalarbase(q, sm.subarray(32));
      add(p, q);
      pack(t, p);
      n -= 64;
      if (crypto_verify_32(sm, 0, t, 0)) {
        for (i = 0; i < n; i++)
          m[i] = 0;
        return -1;
      }
      for (i = 0; i < n; i++)
        m[i] = sm[i + 64];
      mlen = n;
      return mlen;
    }
    var crypto_secretbox_KEYBYTES = 32,
        crypto_secretbox_NONCEBYTES = 24,
        crypto_secretbox_ZEROBYTES = 32,
        crypto_secretbox_BOXZEROBYTES = 16,
        crypto_scalarmult_BYTES = 32,
        crypto_scalarmult_SCALARBYTES = 32,
        crypto_box_PUBLICKEYBYTES = 32,
        crypto_box_SECRETKEYBYTES = 32,
        crypto_box_BEFORENMBYTES = 32,
        crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
        crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
        crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
        crypto_sign_BYTES = 64,
        crypto_sign_PUBLICKEYBYTES = 32,
        crypto_sign_SECRETKEYBYTES = 64,
        crypto_sign_SEEDBYTES = 32,
        crypto_hash_BYTES = 64;
    nacl.lowlevel = {
      crypto_core_hsalsa20: crypto_core_hsalsa20,
      crypto_stream_xor: crypto_stream_xor,
      crypto_stream: crypto_stream,
      crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
      crypto_stream_salsa20: crypto_stream_salsa20,
      crypto_onetimeauth: crypto_onetimeauth,
      crypto_onetimeauth_verify: crypto_onetimeauth_verify,
      crypto_verify_16: crypto_verify_16,
      crypto_verify_32: crypto_verify_32,
      crypto_secretbox: crypto_secretbox,
      crypto_secretbox_open: crypto_secretbox_open,
      crypto_scalarmult: crypto_scalarmult,
      crypto_scalarmult_base: crypto_scalarmult_base,
      crypto_box_beforenm: crypto_box_beforenm,
      crypto_box_afternm: crypto_box_afternm,
      crypto_box: crypto_box,
      crypto_box_open: crypto_box_open,
      crypto_box_keypair: crypto_box_keypair,
      crypto_hash: crypto_hash,
      crypto_sign: crypto_sign,
      crypto_sign_keypair: crypto_sign_keypair,
      crypto_sign_open: crypto_sign_open,
      crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
      crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
      crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
      crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
      crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
      crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
      crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
      crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
      crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
      crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
      crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
      crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
      crypto_sign_BYTES: crypto_sign_BYTES,
      crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
      crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
      crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
      crypto_hash_BYTES: crypto_hash_BYTES
    };
    function checkLengths(k, n) {
      if (k.length !== crypto_secretbox_KEYBYTES)
        throw new Error('bad key size');
      if (n.length !== crypto_secretbox_NONCEBYTES)
        throw new Error('bad nonce size');
    }
    function checkBoxLengths(pk, sk) {
      if (pk.length !== crypto_box_PUBLICKEYBYTES)
        throw new Error('bad public key size');
      if (sk.length !== crypto_box_SECRETKEYBYTES)
        throw new Error('bad secret key size');
    }
    function checkArrayTypes() {
      var t,
          i;
      for (i = 0; i < arguments.length; i++) {
        if ((t = Object.prototype.toString.call(arguments[i])) !== '[object Uint8Array]')
          throw new TypeError('unexpected type ' + t + ', use Uint8Array');
      }
    }
    function cleanup(arr) {
      for (var i = 0; i < arr.length; i++)
        arr[i] = 0;
    }
    if (!nacl.util) {
      nacl.util = {};
      nacl.util.decodeUTF8 = nacl.util.encodeUTF8 = nacl.util.encodeBase64 = nacl.util.decodeBase64 = function() {
        throw new Error('nacl.util moved into separate package: https://github.com/dchest/tweetnacl-util-js');
      };
    }
    nacl.randomBytes = function(n) {
      var b = new Uint8Array(n);
      randombytes(b, n);
      return b;
    };
    nacl.secretbox = function(msg, nonce, key) {
      checkArrayTypes(msg, nonce, key);
      checkLengths(key, nonce);
      var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
      var c = new Uint8Array(m.length);
      for (var i = 0; i < msg.length; i++)
        m[i + crypto_secretbox_ZEROBYTES] = msg[i];
      crypto_secretbox(c, m, m.length, nonce, key);
      return c.subarray(crypto_secretbox_BOXZEROBYTES);
    };
    nacl.secretbox.open = function(box, nonce, key) {
      checkArrayTypes(box, nonce, key);
      checkLengths(key, nonce);
      var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
      var m = new Uint8Array(c.length);
      for (var i = 0; i < box.length; i++)
        c[i + crypto_secretbox_BOXZEROBYTES] = box[i];
      if (c.length < 32)
        return false;
      if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0)
        return false;
      return m.subarray(crypto_secretbox_ZEROBYTES);
    };
    nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
    nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
    nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;
    nacl.scalarMult = function(n, p) {
      checkArrayTypes(n, p);
      if (n.length !== crypto_scalarmult_SCALARBYTES)
        throw new Error('bad n size');
      if (p.length !== crypto_scalarmult_BYTES)
        throw new Error('bad p size');
      var q = new Uint8Array(crypto_scalarmult_BYTES);
      crypto_scalarmult(q, n, p);
      return q;
    };
    nacl.scalarMult.base = function(n) {
      checkArrayTypes(n);
      if (n.length !== crypto_scalarmult_SCALARBYTES)
        throw new Error('bad n size');
      var q = new Uint8Array(crypto_scalarmult_BYTES);
      crypto_scalarmult_base(q, n);
      return q;
    };
    nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
    nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;
    nacl.box = function(msg, nonce, publicKey, secretKey) {
      var k = nacl.box.before(publicKey, secretKey);
      return nacl.secretbox(msg, nonce, k);
    };
    nacl.box.before = function(publicKey, secretKey) {
      checkArrayTypes(publicKey, secretKey);
      checkBoxLengths(publicKey, secretKey);
      var k = new Uint8Array(crypto_box_BEFORENMBYTES);
      crypto_box_beforenm(k, publicKey, secretKey);
      return k;
    };
    nacl.box.after = nacl.secretbox;
    nacl.box.open = function(msg, nonce, publicKey, secretKey) {
      var k = nacl.box.before(publicKey, secretKey);
      return nacl.secretbox.open(msg, nonce, k);
    };
    nacl.box.open.after = nacl.secretbox.open;
    nacl.box.keyPair = function() {
      var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
      crypto_box_keypair(pk, sk);
      return {
        publicKey: pk,
        secretKey: sk
      };
    };
    nacl.box.keyPair.fromSecretKey = function(secretKey) {
      checkArrayTypes(secretKey);
      if (secretKey.length !== crypto_box_SECRETKEYBYTES)
        throw new Error('bad secret key size');
      var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
      crypto_scalarmult_base(pk, secretKey);
      return {
        publicKey: pk,
        secretKey: new Uint8Array(secretKey)
      };
    };
    nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
    nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
    nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
    nacl.box.nonceLength = crypto_box_NONCEBYTES;
    nacl.box.overheadLength = nacl.secretbox.overheadLength;
    nacl.sign = function(msg, secretKey) {
      checkArrayTypes(msg, secretKey);
      if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
        throw new Error('bad secret key size');
      var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
      crypto_sign(signedMsg, msg, msg.length, secretKey);
      return signedMsg;
    };
    nacl.sign.open = function(signedMsg, publicKey) {
      if (arguments.length !== 2)
        throw new Error('nacl.sign.open accepts 2 arguments; did you mean to use nacl.sign.detached.verify?');
      checkArrayTypes(signedMsg, publicKey);
      if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
        throw new Error('bad public key size');
      var tmp = new Uint8Array(signedMsg.length);
      var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
      if (mlen < 0)
        return null;
      var m = new Uint8Array(mlen);
      for (var i = 0; i < m.length; i++)
        m[i] = tmp[i];
      return m;
    };
    nacl.sign.detached = function(msg, secretKey) {
      var signedMsg = nacl.sign(msg, secretKey);
      var sig = new Uint8Array(crypto_sign_BYTES);
      for (var i = 0; i < sig.length; i++)
        sig[i] = signedMsg[i];
      return sig;
    };
    nacl.sign.detached.verify = function(msg, sig, publicKey) {
      checkArrayTypes(msg, sig, publicKey);
      if (sig.length !== crypto_sign_BYTES)
        throw new Error('bad signature size');
      if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
        throw new Error('bad public key size');
      var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
      var m = new Uint8Array(crypto_sign_BYTES + msg.length);
      var i;
      for (i = 0; i < crypto_sign_BYTES; i++)
        sm[i] = sig[i];
      for (i = 0; i < msg.length; i++)
        sm[i + crypto_sign_BYTES] = msg[i];
      return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
    };
    nacl.sign.keyPair = function() {
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
      crypto_sign_keypair(pk, sk);
      return {
        publicKey: pk,
        secretKey: sk
      };
    };
    nacl.sign.keyPair.fromSecretKey = function(secretKey) {
      checkArrayTypes(secretKey);
      if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
        throw new Error('bad secret key size');
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      for (var i = 0; i < pk.length; i++)
        pk[i] = secretKey[32 + i];
      return {
        publicKey: pk,
        secretKey: new Uint8Array(secretKey)
      };
    };
    nacl.sign.keyPair.fromSeed = function(seed) {
      checkArrayTypes(seed);
      if (seed.length !== crypto_sign_SEEDBYTES)
        throw new Error('bad seed size');
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
      for (var i = 0; i < 32; i++)
        sk[i] = seed[i];
      crypto_sign_keypair(pk, sk, true);
      return {
        publicKey: pk,
        secretKey: sk
      };
    };
    nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
    nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
    nacl.sign.seedLength = crypto_sign_SEEDBYTES;
    nacl.sign.signatureLength = crypto_sign_BYTES;
    nacl.hash = function(msg) {
      checkArrayTypes(msg);
      var h = new Uint8Array(crypto_hash_BYTES);
      crypto_hash(h, msg, msg.length);
      return h;
    };
    nacl.hash.hashLength = crypto_hash_BYTES;
    nacl.verify = function(x, y) {
      checkArrayTypes(x, y);
      if (x.length === 0 || y.length === 0)
        return false;
      if (x.length !== y.length)
        return false;
      return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
    };
    nacl.setPRNG = function(fn) {
      randombytes = fn;
    };
    (function() {
      var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
      if (crypto && crypto.getRandomValues) {
        var QUOTA = 65536;
        nacl.setPRNG(function(x, n) {
          var i,
              v = new Uint8Array(n);
          for (i = 0; i < n; i += QUOTA) {
            crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
          }
          for (i = 0; i < n; i++)
            x[i] = v[i];
          cleanup(v);
        });
      } else if (typeof $__require !== 'undefined') {
        crypto = $__require('@node/crypto');
        if (crypto && crypto.randomBytes) {
          nacl.setPRNG(function(x, n) {
            var i,
                v = crypto.randomBytes(n);
            for (i = 0; i < n; i++)
              x[i] = v[i];
            cleanup(v);
          });
        }
      }
    })();
  })(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));
  return module.exports;
});

$__System.registerDynamic("npm:sshpk@1.8.1/lib/ed-compat.js", ["@node/stream", "@node/util", "npm:assert-plus@1.0.0/assert.js", "npm:sshpk@1.8.1/lib/signature.js", "npm:tweetnacl@0.14.3/nacl-fast.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    Verifier: Verifier,
    Signer: Signer
  };
  var nacl;
  var stream = $__require('@node/stream');
  var util = $__require('@node/util');
  var assert = $__require('npm:assert-plus@1.0.0/assert.js');
  var Signature = $__require('npm:sshpk@1.8.1/lib/signature.js');
  function Verifier(key, hashAlgo) {
    if (nacl === undefined)
      nacl = $__require('npm:tweetnacl@0.14.3/nacl-fast.js');
    if (hashAlgo.toLowerCase() !== 'sha512')
      throw (new Error('ED25519 only supports the use of ' + 'SHA-512 hashes'));
    this.key = key;
    this.chunks = [];
    stream.Writable.call(this, {});
  }
  util.inherits(Verifier, stream.Writable);
  Verifier.prototype._write = function(chunk, enc, cb) {
    this.chunks.push(chunk);
    cb();
  };
  Verifier.prototype.update = function(chunk) {
    if (typeof(chunk) === 'string')
      chunk = new Buffer(chunk, 'binary');
    this.chunks.push(chunk);
  };
  Verifier.prototype.verify = function(signature, fmt) {
    var sig;
    if (Signature.isSignature(signature, [2, 0])) {
      if (signature.type !== 'ed25519')
        return (false);
      sig = signature.toBuffer('raw');
    } else if (typeof(signature) === 'string') {
      sig = new Buffer(signature, 'base64');
    } else if (Signature.isSignature(signature, [1, 0])) {
      throw (new Error('signature was created by too old ' + 'a version of sshpk and cannot be verified'));
    }
    assert.buffer(sig);
    return (nacl.sign.detached.verify(new Uint8Array(Buffer.concat(this.chunks)), new Uint8Array(sig), new Uint8Array(this.key.part.R.data)));
  };
  function Signer(key, hashAlgo) {
    if (nacl === undefined)
      nacl = $__require('npm:tweetnacl@0.14.3/nacl-fast.js');
    if (hashAlgo.toLowerCase() !== 'sha512')
      throw (new Error('ED25519 only supports the use of ' + 'SHA-512 hashes'));
    this.key = key;
    this.chunks = [];
    stream.Writable.call(this, {});
  }
  util.inherits(Signer, stream.Writable);
  Signer.prototype._write = function(chunk, enc, cb) {
    this.chunks.push(chunk);
    cb();
  };
  Signer.prototype.update = function(chunk) {
    if (typeof(chunk) === 'string')
      chunk = new Buffer(chunk, 'binary');
    this.chunks.push(chunk);
  };
  Signer.prototype.sign = function() {
    var sig = nacl.sign.detached(new Uint8Array(Buffer.concat(this.chunks)), new Uint8Array(this.key.part.r.data));
    var sigBuf = new Buffer(sig);
    var sigObj = Signature.parse(sigBuf, 'ed25519', 'raw');
    sigObj.hashAlgorithm = 'sha512';
    return (sigObj);
  };
  return module.exports;
});

$__System.registerDynamic("npm:sshpk@1.8.1/lib/formats/auto.js", ["npm:assert-plus@1.0.0/assert.js", "npm:sshpk@1.8.1/lib/utils.js", "npm:sshpk@1.8.1/lib/key.js", "npm:sshpk@1.8.1/lib/private-key.js", "npm:sshpk@1.8.1/lib/formats/pem.js", "npm:sshpk@1.8.1/lib/formats/ssh.js", "npm:sshpk@1.8.1/lib/formats/rfc4253.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    read: read,
    write: write
  };
  var assert = $__require('npm:assert-plus@1.0.0/assert.js');
  var utils = $__require('npm:sshpk@1.8.1/lib/utils.js');
  var Key = $__require('npm:sshpk@1.8.1/lib/key.js');
  var PrivateKey = $__require('npm:sshpk@1.8.1/lib/private-key.js');
  var pem = $__require('npm:sshpk@1.8.1/lib/formats/pem.js');
  var ssh = $__require('npm:sshpk@1.8.1/lib/formats/ssh.js');
  var rfc4253 = $__require('npm:sshpk@1.8.1/lib/formats/rfc4253.js');
  function read(buf, options) {
    if (typeof(buf) === 'string') {
      if (buf.trim().match(/^[-]+[ ]*BEGIN/))
        return (pem.read(buf, options));
      if (buf.match(/^\s*ssh-[a-z]/))
        return (ssh.read(buf, options));
      if (buf.match(/^\s*ecdsa-/))
        return (ssh.read(buf, options));
      buf = new Buffer(buf, 'binary');
    } else {
      assert.buffer(buf);
      if (findPEMHeader(buf))
        return (pem.read(buf, options));
      if (findSSHHeader(buf))
        return (ssh.read(buf, options));
    }
    if (buf.readUInt32BE(0) < buf.length)
      return (rfc4253.read(buf, options));
    throw (new Error('Failed to auto-detect format of key'));
  }
  function findSSHHeader(buf) {
    var offset = 0;
    while (offset < buf.length && (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))
      ++offset;
    if (offset + 4 <= buf.length && buf.slice(offset, offset + 4).toString('ascii') === 'ssh-')
      return (true);
    if (offset + 6 <= buf.length && buf.slice(offset, offset + 6).toString('ascii') === 'ecdsa-')
      return (true);
    return (false);
  }
  function findPEMHeader(buf) {
    var offset = 0;
    while (offset < buf.length && (buf[offset] === 32 || buf[offset] === 10))
      ++offset;
    if (buf[offset] !== 45)
      return (false);
    while (offset < buf.length && (buf[offset] === 45))
      ++offset;
    while (offset < buf.length && (buf[offset] === 32))
      ++offset;
    if (offset + 5 > buf.length || buf.slice(offset, offset + 5).toString('ascii') !== 'BEGIN')
      return (false);
    return (true);
  }
  function write(key, options) {
    throw (new Error('"auto" format cannot be used for writing'));
  }
  return module.exports;
});

$__System.registerDynamic("npm:asn1@0.2.3/lib/ber/reader.js", ["@node/assert", "npm:asn1@0.2.3/lib/ber/types.js", "npm:asn1@0.2.3/lib/ber/errors.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var assert = $__require('@node/assert');
  var ASN1 = $__require('npm:asn1@0.2.3/lib/ber/types.js');
  var errors = $__require('npm:asn1@0.2.3/lib/ber/errors.js');
  var newInvalidAsn1Error = errors.newInvalidAsn1Error;
  function Reader(data) {
    if (!data || !Buffer.isBuffer(data))
      throw new TypeError('data must be a node Buffer');
    this._buf = data;
    this._size = data.length;
    this._len = 0;
    this._offset = 0;
  }
  Object.defineProperty(Reader.prototype, 'length', {
    enumerable: true,
    get: function() {
      return (this._len);
    }
  });
  Object.defineProperty(Reader.prototype, 'offset', {
    enumerable: true,
    get: function() {
      return (this._offset);
    }
  });
  Object.defineProperty(Reader.prototype, 'remain', {get: function() {
      return (this._size - this._offset);
    }});
  Object.defineProperty(Reader.prototype, 'buffer', {get: function() {
      return (this._buf.slice(this._offset));
    }});
  Reader.prototype.readByte = function(peek) {
    if (this._size - this._offset < 1)
      return null;
    var b = this._buf[this._offset] & 0xff;
    if (!peek)
      this._offset += 1;
    return b;
  };
  Reader.prototype.peek = function() {
    return this.readByte(true);
  };
  Reader.prototype.readLength = function(offset) {
    if (offset === undefined)
      offset = this._offset;
    if (offset >= this._size)
      return null;
    var lenB = this._buf[offset++] & 0xff;
    if (lenB === null)
      return null;
    if ((lenB & 0x80) == 0x80) {
      lenB &= 0x7f;
      if (lenB == 0)
        throw newInvalidAsn1Error('Indefinite length not supported');
      if (lenB > 4)
        throw newInvalidAsn1Error('encoding too long');
      if (this._size - offset < lenB)
        return null;
      this._len = 0;
      for (var i = 0; i < lenB; i++)
        this._len = (this._len << 8) + (this._buf[offset++] & 0xff);
    } else {
      this._len = lenB;
    }
    return offset;
  };
  Reader.prototype.readSequence = function(tag) {
    var seq = this.peek();
    if (seq === null)
      return null;
    if (tag !== undefined && tag !== seq)
      throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) + ': got 0x' + seq.toString(16));
    var o = this.readLength(this._offset + 1);
    if (o === null)
      return null;
    this._offset = o;
    return seq;
  };
  Reader.prototype.readInt = function() {
    return this._readTag(ASN1.Integer);
  };
  Reader.prototype.readBoolean = function() {
    return (this._readTag(ASN1.Boolean) === 0 ? false : true);
  };
  Reader.prototype.readEnumeration = function() {
    return this._readTag(ASN1.Enumeration);
  };
  Reader.prototype.readString = function(tag, retbuf) {
    if (!tag)
      tag = ASN1.OctetString;
    var b = this.peek();
    if (b === null)
      return null;
    if (b !== tag)
      throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) + ': got 0x' + b.toString(16));
    var o = this.readLength(this._offset + 1);
    if (o === null)
      return null;
    if (this.length > this._size - o)
      return null;
    this._offset = o;
    if (this.length === 0)
      return retbuf ? new Buffer(0) : '';
    var str = this._buf.slice(this._offset, this._offset + this.length);
    this._offset += this.length;
    return retbuf ? str : str.toString('utf8');
  };
  Reader.prototype.readOID = function(tag) {
    if (!tag)
      tag = ASN1.OID;
    var b = this.readString(tag, true);
    if (b === null)
      return null;
    var values = [];
    var value = 0;
    for (var i = 0; i < b.length; i++) {
      var byte = b[i] & 0xff;
      value <<= 7;
      value += byte & 0x7f;
      if ((byte & 0x80) == 0) {
        values.push(value);
        value = 0;
      }
    }
    value = values.shift();
    values.unshift(value % 40);
    values.unshift((value / 40) >> 0);
    return values.join('.');
  };
  Reader.prototype._readTag = function(tag) {
    assert.ok(tag !== undefined);
    var b = this.peek();
    if (b === null)
      return null;
    if (b !== tag)
      throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) + ': got 0x' + b.toString(16));
    var o = this.readLength(this._offset + 1);
    if (o === null)
      return null;
    if (this.length > 4)
      throw newInvalidAsn1Error('Integer too long: ' + this.length);
    if (this.length > this._size - o)
      return null;
    this._offset = o;
    var fb = this._buf[this._offset];
    var value = 0;
    for (var i = 0; i < this.length; i++) {
      value <<= 8;
      value |= (this._buf[this._offset++] & 0xff);
    }
    if ((fb & 0x80) == 0x80 && i !== 4)
      value -= (1 << (i * 8));
    return value >> 0;
  };
  module.exports = Reader;
  return module.exports;
});

$__System.registerDynamic("npm:asn1@0.2.3/lib/ber/types.js", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    EOC: 0,
    Boolean: 1,
    Integer: 2,
    BitString: 3,
    OctetString: 4,
    Null: 5,
    OID: 6,
    ObjectDescriptor: 7,
    External: 8,
    Real: 9,
    Enumeration: 10,
    PDV: 11,
    Utf8String: 12,
    RelativeOID: 13,
    Sequence: 16,
    Set: 17,
    NumericString: 18,
    PrintableString: 19,
    T61String: 20,
    VideotexString: 21,
    IA5String: 22,
    UTCTime: 23,
    GeneralizedTime: 24,
    GraphicString: 25,
    VisibleString: 26,
    GeneralString: 28,
    UniversalString: 29,
    CharacterString: 30,
    BMPString: 31,
    Constructor: 32,
    Context: 128
  };
  return module.exports;
});

$__System.registerDynamic("npm:asn1@0.2.3/lib/ber/errors.js", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {newInvalidAsn1Error: function(msg) {
      var e = new Error();
      e.name = 'InvalidAsn1Error';
      e.message = msg || '';
      return e;
    }};
  return module.exports;
});

$__System.registerDynamic("npm:asn1@0.2.3/lib/ber/writer.js", ["@node/assert", "npm:asn1@0.2.3/lib/ber/types.js", "npm:asn1@0.2.3/lib/ber/errors.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var assert = $__require('@node/assert');
  var ASN1 = $__require('npm:asn1@0.2.3/lib/ber/types.js');
  var errors = $__require('npm:asn1@0.2.3/lib/ber/errors.js');
  var newInvalidAsn1Error = errors.newInvalidAsn1Error;
  var DEFAULT_OPTS = {
    size: 1024,
    growthFactor: 8
  };
  function merge(from, to) {
    assert.ok(from);
    assert.equal(typeof(from), 'object');
    assert.ok(to);
    assert.equal(typeof(to), 'object');
    var keys = Object.getOwnPropertyNames(from);
    keys.forEach(function(key) {
      if (to[key])
        return;
      var value = Object.getOwnPropertyDescriptor(from, key);
      Object.defineProperty(to, key, value);
    });
    return to;
  }
  function Writer(options) {
    options = merge(DEFAULT_OPTS, options || {});
    this._buf = new Buffer(options.size || 1024);
    this._size = this._buf.length;
    this._offset = 0;
    this._options = options;
    this._seq = [];
  }
  Object.defineProperty(Writer.prototype, 'buffer', {get: function() {
      if (this._seq.length)
        throw new InvalidAsn1Error(this._seq.length + ' unended sequence(s)');
      return (this._buf.slice(0, this._offset));
    }});
  Writer.prototype.writeByte = function(b) {
    if (typeof(b) !== 'number')
      throw new TypeError('argument must be a Number');
    this._ensure(1);
    this._buf[this._offset++] = b;
  };
  Writer.prototype.writeInt = function(i, tag) {
    if (typeof(i) !== 'number')
      throw new TypeError('argument must be a Number');
    if (typeof(tag) !== 'number')
      tag = ASN1.Integer;
    var sz = 4;
    while ((((i & 0xff800000) === 0) || ((i & 0xff800000) === 0xff800000 >> 0)) && (sz > 1)) {
      sz--;
      i <<= 8;
    }
    if (sz > 4)
      throw new InvalidAsn1Error('BER ints cannot be > 0xffffffff');
    this._ensure(2 + sz);
    this._buf[this._offset++] = tag;
    this._buf[this._offset++] = sz;
    while (sz-- > 0) {
      this._buf[this._offset++] = ((i & 0xff000000) >>> 24);
      i <<= 8;
    }
  };
  Writer.prototype.writeNull = function() {
    this.writeByte(ASN1.Null);
    this.writeByte(0x00);
  };
  Writer.prototype.writeEnumeration = function(i, tag) {
    if (typeof(i) !== 'number')
      throw new TypeError('argument must be a Number');
    if (typeof(tag) !== 'number')
      tag = ASN1.Enumeration;
    return this.writeInt(i, tag);
  };
  Writer.prototype.writeBoolean = function(b, tag) {
    if (typeof(b) !== 'boolean')
      throw new TypeError('argument must be a Boolean');
    if (typeof(tag) !== 'number')
      tag = ASN1.Boolean;
    this._ensure(3);
    this._buf[this._offset++] = tag;
    this._buf[this._offset++] = 0x01;
    this._buf[this._offset++] = b ? 0xff : 0x00;
  };
  Writer.prototype.writeString = function(s, tag) {
    if (typeof(s) !== 'string')
      throw new TypeError('argument must be a string (was: ' + typeof(s) + ')');
    if (typeof(tag) !== 'number')
      tag = ASN1.OctetString;
    var len = Buffer.byteLength(s);
    this.writeByte(tag);
    this.writeLength(len);
    if (len) {
      this._ensure(len);
      this._buf.write(s, this._offset);
      this._offset += len;
    }
  };
  Writer.prototype.writeBuffer = function(buf, tag) {
    if (typeof(tag) !== 'number')
      throw new TypeError('tag must be a number');
    if (!Buffer.isBuffer(buf))
      throw new TypeError('argument must be a buffer');
    this.writeByte(tag);
    this.writeLength(buf.length);
    this._ensure(buf.length);
    buf.copy(this._buf, this._offset, 0, buf.length);
    this._offset += buf.length;
  };
  Writer.prototype.writeStringArray = function(strings) {
    if ((!strings instanceof Array))
      throw new TypeError('argument must be an Array[String]');
    var self = this;
    strings.forEach(function(s) {
      self.writeString(s);
    });
  };
  Writer.prototype.writeOID = function(s, tag) {
    if (typeof(s) !== 'string')
      throw new TypeError('argument must be a string');
    if (typeof(tag) !== 'number')
      tag = ASN1.OID;
    if (!/^([0-9]+\.){3,}[0-9]+$/.test(s))
      throw new Error('argument is not a valid OID string');
    function encodeOctet(bytes, octet) {
      if (octet < 128) {
        bytes.push(octet);
      } else if (octet < 16384) {
        bytes.push((octet >>> 7) | 0x80);
        bytes.push(octet & 0x7F);
      } else if (octet < 2097152) {
        bytes.push((octet >>> 14) | 0x80);
        bytes.push(((octet >>> 7) | 0x80) & 0xFF);
        bytes.push(octet & 0x7F);
      } else if (octet < 268435456) {
        bytes.push((octet >>> 21) | 0x80);
        bytes.push(((octet >>> 14) | 0x80) & 0xFF);
        bytes.push(((octet >>> 7) | 0x80) & 0xFF);
        bytes.push(octet & 0x7F);
      } else {
        bytes.push(((octet >>> 28) | 0x80) & 0xFF);
        bytes.push(((octet >>> 21) | 0x80) & 0xFF);
        bytes.push(((octet >>> 14) | 0x80) & 0xFF);
        bytes.push(((octet >>> 7) | 0x80) & 0xFF);
        bytes.push(octet & 0x7F);
      }
    }
    var tmp = s.split('.');
    var bytes = [];
    bytes.push(parseInt(tmp[0], 10) * 40 + parseInt(tmp[1], 10));
    tmp.slice(2).forEach(function(b) {
      encodeOctet(bytes, parseInt(b, 10));
    });
    var self = this;
    this._ensure(2 + bytes.length);
    this.writeByte(tag);
    this.writeLength(bytes.length);
    bytes.forEach(function(b) {
      self.writeByte(b);
    });
  };
  Writer.prototype.writeLength = function(len) {
    if (typeof(len) !== 'number')
      throw new TypeError('argument must be a Number');
    this._ensure(4);
    if (len <= 0x7f) {
      this._buf[this._offset++] = len;
    } else if (len <= 0xff) {
      this._buf[this._offset++] = 0x81;
      this._buf[this._offset++] = len;
    } else if (len <= 0xffff) {
      this._buf[this._offset++] = 0x82;
      this._buf[this._offset++] = len >> 8;
      this._buf[this._offset++] = len;
    } else if (len <= 0xffffff) {
      this._buf[this._offset++] = 0x83;
      this._buf[this._offset++] = len >> 16;
      this._buf[this._offset++] = len >> 8;
      this._buf[this._offset++] = len;
    } else {
      throw new InvalidAsn1ERror('Length too long (> 4 bytes)');
    }
  };
  Writer.prototype.startSequence = function(tag) {
    if (typeof(tag) !== 'number')
      tag = ASN1.Sequence | ASN1.Constructor;
    this.writeByte(tag);
    this._seq.push(this._offset);
    this._ensure(3);
    this._offset += 3;
  };
  Writer.prototype.endSequence = function() {
    var seq = this._seq.pop();
    var start = seq + 3;
    var len = this._offset - start;
    if (len <= 0x7f) {
      this._shift(start, len, -2);
      this._buf[seq] = len;
    } else if (len <= 0xff) {
      this._shift(start, len, -1);
      this._buf[seq] = 0x81;
      this._buf[seq + 1] = len;
    } else if (len <= 0xffff) {
      this._buf[seq] = 0x82;
      this._buf[seq + 1] = len >> 8;
      this._buf[seq + 2] = len;
    } else if (len <= 0xffffff) {
      this._shift(start, len, 1);
      this._buf[seq] = 0x83;
      this._buf[seq + 1] = len >> 16;
      this._buf[seq + 2] = len >> 8;
      this._buf[seq + 3] = len;
    } else {
      throw new InvalidAsn1Error('Sequence too long');
    }
  };
  Writer.prototype._shift = function(start, len, shift) {
    assert.ok(start !== undefined);
    assert.ok(len !== undefined);
    assert.ok(shift);
    this._buf.copy(this._buf, start + shift, start, start + len);
    this._offset += shift;
  };
  Writer.prototype._ensure = function(len) {
    assert.ok(len);
    if (this._size - this._offset < len) {
      var sz = this._size * this._options.growthFactor;
      if (sz - this._offset < len)
        sz += len;
      var buf = new Buffer(sz);
      this._buf.copy(buf, 0, 0, this._offset);
      this._buf = buf;
      this._size = sz;
    }
  };
  module.exports = Writer;
  return module.exports;
});

$__System.registerDynamic("npm:asn1@0.2.3/lib/ber/index.js", ["npm:asn1@0.2.3/lib/ber/errors.js", "npm:asn1@0.2.3/lib/ber/types.js", "npm:asn1@0.2.3/lib/ber/reader.js", "npm:asn1@0.2.3/lib/ber/writer.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var errors = $__require('npm:asn1@0.2.3/lib/ber/errors.js');
  var types = $__require('npm:asn1@0.2.3/lib/ber/types.js');
  var Reader = $__require('npm:asn1@0.2.3/lib/ber/reader.js');
  var Writer = $__require('npm:asn1@0.2.3/lib/ber/writer.js');
  module.exports = {
    Reader: Reader,
    Writer: Writer
  };
  for (var t in types) {
    if (types.hasOwnProperty(t))
      module.exports[t] = types[t];
  }
  for (var e in errors) {
    if (errors.hasOwnProperty(e))
      module.exports[e] = errors[e];
  }
  return module.exports;
});

$__System.registerDynamic("npm:asn1@0.2.3/lib/index.js", ["npm:asn1@0.2.3/lib/ber/index.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Ber = $__require('npm:asn1@0.2.3/lib/ber/index.js');
  module.exports = {
    Ber: Ber,
    BerReader: Ber.Reader,
    BerWriter: Ber.Writer
  };
  return module.exports;
});

$__System.registerDynamic("npm:sshpk@1.8.1/lib/algs.js", ["github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var algInfo = {
    'dsa': {
      parts: ['p', 'q', 'g', 'y'],
      sizePart: 'p'
    },
    'rsa': {
      parts: ['e', 'n'],
      sizePart: 'n'
    },
    'ecdsa': {
      parts: ['curve', 'Q'],
      sizePart: 'Q'
    },
    'ed25519': {
      parts: ['R'],
      normalize: false,
      sizePart: 'R'
    }
  };
  algInfo['curve25519'] = algInfo['ed25519'];
  var algPrivInfo = {
    'dsa': {parts: ['p', 'q', 'g', 'y', 'x']},
    'rsa': {parts: ['n', 'e', 'd', 'iqmp', 'p', 'q']},
    'ecdsa': {parts: ['curve', 'Q', 'd']},
    'ed25519': {
      parts: ['R', 'r'],
      normalize: false
    }
  };
  algPrivInfo['curve25519'] = algPrivInfo['ed25519'];
  var hashAlgs = {
    'md5': true,
    'sha1': true,
    'sha256': true,
    'sha384': true,
    'sha512': true
  };
  var curves = {
    'nistp256': {
      size: 256,
      pkcs8oid: '1.2.840.10045.3.1.7',
      p: new Buffer(('00' + 'ffffffff 00000001 00000000 00000000' + '00000000 ffffffff ffffffff ffffffff').replace(/ /g, ''), 'hex'),
      a: new Buffer(('00' + 'FFFFFFFF 00000001 00000000 00000000' + '00000000 FFFFFFFF FFFFFFFF FFFFFFFC').replace(/ /g, ''), 'hex'),
      b: new Buffer(('5ac635d8 aa3a93e7 b3ebbd55 769886bc' + '651d06b0 cc53b0f6 3bce3c3e 27d2604b').replace(/ /g, ''), 'hex'),
      s: new Buffer(('00' + 'c49d3608 86e70493 6a6678e1 139d26b7' + '819f7e90').replace(/ /g, ''), 'hex'),
      n: new Buffer(('00' + 'ffffffff 00000000 ffffffff ffffffff' + 'bce6faad a7179e84 f3b9cac2 fc632551').replace(/ /g, ''), 'hex'),
      G: new Buffer(('04' + '6b17d1f2 e12c4247 f8bce6e5 63a440f2' + '77037d81 2deb33a0 f4a13945 d898c296' + '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16' + '2bce3357 6b315ece cbb64068 37bf51f5').replace(/ /g, ''), 'hex')
    },
    'nistp384': {
      size: 384,
      pkcs8oid: '1.3.132.0.34',
      p: new Buffer(('00' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff fffffffe' + 'ffffffff 00000000 00000000 ffffffff').replace(/ /g, ''), 'hex'),
      a: new Buffer(('00' + 'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' + 'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE' + 'FFFFFFFF 00000000 00000000 FFFFFFFC').replace(/ /g, ''), 'hex'),
      b: new Buffer(('b3312fa7 e23ee7e4 988e056b e3f82d19' + '181d9c6e fe814112 0314088f 5013875a' + 'c656398d 8a2ed19d 2a85c8ed d3ec2aef').replace(/ /g, ''), 'hex'),
      s: new Buffer(('00' + 'a335926a a319a27a 1d00896a 6773a482' + '7acdac73').replace(/ /g, ''), 'hex'),
      n: new Buffer(('00' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff c7634d81 f4372ddf' + '581a0db2 48b0a77a ecec196a ccc52973').replace(/ /g, ''), 'hex'),
      G: new Buffer(('04' + 'aa87ca22 be8b0537 8eb1c71e f320ad74' + '6e1d3b62 8ba79b98 59f741e0 82542a38' + '5502f25d bf55296c 3a545e38 72760ab7' + '3617de4a 96262c6f 5d9e98bf 9292dc29' + 'f8f41dbd 289a147c e9da3113 b5f0b8c0' + '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f').replace(/ /g, ''), 'hex')
    },
    'nistp521': {
      size: 521,
      pkcs8oid: '1.3.132.0.35',
      p: new Buffer(('01ffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffff').replace(/ /g, ''), 'hex'),
      a: new Buffer(('01FF' + 'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' + 'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' + 'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' + 'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFC').replace(/ /g, ''), 'hex'),
      b: new Buffer(('51' + '953eb961 8e1c9a1f 929a21a0 b68540ee' + 'a2da725b 99b315f3 b8b48991 8ef109e1' + '56193951 ec7e937b 1652c0bd 3bb1bf07' + '3573df88 3d2c34f1 ef451fd4 6b503f00').replace(/ /g, ''), 'hex'),
      s: new Buffer(('00' + 'd09e8800 291cb853 96cc6717 393284aa' + 'a0da64ba').replace(/ /g, ''), 'hex'),
      n: new Buffer(('01ff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff fffffffa' + '51868783 bf2f966b 7fcc0148 f709a5d0' + '3bb5c9b8 899c47ae bb6fb71e 91386409').replace(/ /g, ''), 'hex'),
      G: new Buffer(('04' + '00c6 858e06b7 0404e9cd 9e3ecb66 2395b442' + '9c648139 053fb521 f828af60 6b4d3dba' + 'a14b5e77 efe75928 fe1dc127 a2ffa8de' + '3348b3c1 856a429b f97e7e31 c2e5bd66' + '0118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9' + '98f54449 579b4468 17afbd17 273e662c' + '97ee7299 5ef42640 c550b901 3fad0761' + '353c7086 a272c240 88be9476 9fd16650').replace(/ /g, ''), 'hex')
    }
  };
  module.exports = {
    info: algInfo,
    privInfo: algPrivInfo,
    hashAlgs: hashAlgs,
    curves: curves
  };
  return module.exports;
});

$__System.registerDynamic("npm:sshpk@1.8.1/lib/formats/pkcs1.js", ["npm:assert-plus@1.0.0/assert.js", "npm:asn1@0.2.3/lib/index.js", "npm:sshpk@1.8.1/lib/algs.js", "npm:sshpk@1.8.1/lib/utils.js", "npm:sshpk@1.8.1/lib/key.js", "npm:sshpk@1.8.1/lib/private-key.js", "npm:sshpk@1.8.1/lib/formats/pem.js", "npm:sshpk@1.8.1/lib/formats/pkcs8.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    read: read,
    readPkcs1: readPkcs1,
    write: write,
    writePkcs1: writePkcs1
  };
  var assert = $__require('npm:assert-plus@1.0.0/assert.js');
  var asn1 = $__require('npm:asn1@0.2.3/lib/index.js');
  var algs = $__require('npm:sshpk@1.8.1/lib/algs.js');
  var utils = $__require('npm:sshpk@1.8.1/lib/utils.js');
  var Key = $__require('npm:sshpk@1.8.1/lib/key.js');
  var PrivateKey = $__require('npm:sshpk@1.8.1/lib/private-key.js');
  var pem = $__require('npm:sshpk@1.8.1/lib/formats/pem.js');
  var pkcs8 = $__require('npm:sshpk@1.8.1/lib/formats/pkcs8.js');
  var readECDSACurve = pkcs8.readECDSACurve;
  function read(buf, options) {
    return (pem.read(buf, options, 'pkcs1'));
  }
  function write(key, options) {
    return (pem.write(key, options, 'pkcs1'));
  }
  function readMPInt(der, nm) {
    assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + ' is not an Integer');
    return (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));
  }
  function readPkcs1(alg, type, der) {
    switch (alg) {
      case 'RSA':
        if (type === 'public')
          return (readPkcs1RSAPublic(der));
        else if (type === 'private')
          return (readPkcs1RSAPrivate(der));
        throw (new Error('Unknown key type: ' + type));
      case 'DSA':
        if (type === 'public')
          return (readPkcs1DSAPublic(der));
        else if (type === 'private')
          return (readPkcs1DSAPrivate(der));
        throw (new Error('Unknown key type: ' + type));
      case 'EC':
      case 'ECDSA':
        if (type === 'private')
          return (readPkcs1ECDSAPrivate(der));
        else if (type === 'public')
          return (readPkcs1ECDSAPublic(der));
        throw (new Error('Unknown key type: ' + type));
      default:
        throw (new Error('Unknown key algo: ' + alg));
    }
  }
  function readPkcs1RSAPublic(der) {
    var n = readMPInt(der, 'modulus');
    var e = readMPInt(der, 'exponent');
    var key = {
      type: 'rsa',
      parts: [{
        name: 'e',
        data: e
      }, {
        name: 'n',
        data: n
      }]
    };
    return (new Key(key));
  }
  function readPkcs1RSAPrivate(der) {
    var version = readMPInt(der, 'version');
    assert.strictEqual(version[0], 0);
    var n = readMPInt(der, 'modulus');
    var e = readMPInt(der, 'public exponent');
    var d = readMPInt(der, 'private exponent');
    var p = readMPInt(der, 'prime1');
    var q = readMPInt(der, 'prime2');
    var dmodp = readMPInt(der, 'exponent1');
    var dmodq = readMPInt(der, 'exponent2');
    var iqmp = readMPInt(der, 'iqmp');
    var key = {
      type: 'rsa',
      parts: [{
        name: 'n',
        data: n
      }, {
        name: 'e',
        data: e
      }, {
        name: 'd',
        data: d
      }, {
        name: 'iqmp',
        data: iqmp
      }, {
        name: 'p',
        data: p
      }, {
        name: 'q',
        data: q
      }, {
        name: 'dmodp',
        data: dmodp
      }, {
        name: 'dmodq',
        data: dmodq
      }]
    };
    return (new PrivateKey(key));
  }
  function readPkcs1DSAPrivate(der) {
    var version = readMPInt(der, 'version');
    assert.strictEqual(version.readUInt8(0), 0);
    var p = readMPInt(der, 'p');
    var q = readMPInt(der, 'q');
    var g = readMPInt(der, 'g');
    var y = readMPInt(der, 'y');
    var x = readMPInt(der, 'x');
    var key = {
      type: 'dsa',
      parts: [{
        name: 'p',
        data: p
      }, {
        name: 'q',
        data: q
      }, {
        name: 'g',
        data: g
      }, {
        name: 'y',
        data: y
      }, {
        name: 'x',
        data: x
      }]
    };
    return (new PrivateKey(key));
  }
  function readPkcs1DSAPublic(der) {
    var y = readMPInt(der, 'y');
    var p = readMPInt(der, 'p');
    var q = readMPInt(der, 'q');
    var g = readMPInt(der, 'g');
    var key = {
      type: 'dsa',
      parts: [{
        name: 'y',
        data: y
      }, {
        name: 'p',
        data: p
      }, {
        name: 'q',
        data: q
      }, {
        name: 'g',
        data: g
      }]
    };
    return (new Key(key));
  }
  function readPkcs1ECDSAPublic(der) {
    der.readSequence();
    var oid = der.readOID();
    assert.strictEqual(oid, '1.2.840.10045.2.1', 'must be ecPublicKey');
    var curveOid = der.readOID();
    var curve;
    var curves = Object.keys(algs.curves);
    for (var j = 0; j < curves.length; ++j) {
      var c = curves[j];
      var cd = algs.curves[c];
      if (cd.pkcs8oid === curveOid) {
        curve = c;
        break;
      }
    }
    assert.string(curve, 'a known ECDSA named curve');
    var Q = der.readString(asn1.Ber.BitString, true);
    Q = utils.ecNormalize(Q);
    var key = {
      type: 'ecdsa',
      parts: [{
        name: 'curve',
        data: new Buffer(curve)
      }, {
        name: 'Q',
        data: Q
      }]
    };
    return (new Key(key));
  }
  function readPkcs1ECDSAPrivate(der) {
    var version = readMPInt(der, 'version');
    assert.strictEqual(version.readUInt8(0), 1);
    var d = der.readString(asn1.Ber.OctetString, true);
    der.readSequence(0xa0);
    var curve = readECDSACurve(der);
    assert.string(curve, 'a known elliptic curve');
    der.readSequence(0xa1);
    var Q = der.readString(asn1.Ber.BitString, true);
    Q = utils.ecNormalize(Q);
    var key = {
      type: 'ecdsa',
      parts: [{
        name: 'curve',
        data: new Buffer(curve)
      }, {
        name: 'Q',
        data: Q
      }, {
        name: 'd',
        data: d
      }]
    };
    return (new PrivateKey(key));
  }
  function writePkcs1(der, key) {
    der.startSequence();
    switch (key.type) {
      case 'rsa':
        if (PrivateKey.isPrivateKey(key))
          writePkcs1RSAPrivate(der, key);
        else
          writePkcs1RSAPublic(der, key);
        break;
      case 'dsa':
        if (PrivateKey.isPrivateKey(key))
          writePkcs1DSAPrivate(der, key);
        else
          writePkcs1DSAPublic(der, key);
        break;
      case 'ecdsa':
        if (PrivateKey.isPrivateKey(key))
          writePkcs1ECDSAPrivate(der, key);
        else
          writePkcs1ECDSAPublic(der, key);
        break;
      default:
        throw (new Error('Unknown key algo: ' + key.type));
    }
    der.endSequence();
  }
  function writePkcs1RSAPublic(der, key) {
    der.writeBuffer(key.part.n.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.e.data, asn1.Ber.Integer);
  }
  function writePkcs1RSAPrivate(der, key) {
    var ver = new Buffer(1);
    ver[0] = 0;
    der.writeBuffer(ver, asn1.Ber.Integer);
    der.writeBuffer(key.part.n.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.e.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.d.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);
    if (!key.part.dmodp || !key.part.dmodq)
      utils.addRSAMissing(key);
    der.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);
  }
  function writePkcs1DSAPrivate(der, key) {
    var ver = new Buffer(1);
    ver[0] = 0;
    der.writeBuffer(ver, asn1.Ber.Integer);
    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.g.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.y.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.x.data, asn1.Ber.Integer);
  }
  function writePkcs1DSAPublic(der, key) {
    der.writeBuffer(key.part.y.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.g.data, asn1.Ber.Integer);
  }
  function writePkcs1ECDSAPublic(der, key) {
    der.startSequence();
    der.writeOID('1.2.840.10045.2.1');
    var curve = key.part.curve.data.toString();
    var curveOid = algs.curves[curve].pkcs8oid;
    assert.string(curveOid, 'a known ECDSA named curve');
    der.writeOID(curveOid);
    der.endSequence();
    var Q = utils.ecNormalize(key.part.Q.data, true);
    der.writeBuffer(Q, asn1.Ber.BitString);
  }
  function writePkcs1ECDSAPrivate(der, key) {
    var ver = new Buffer(1);
    ver[0] = 1;
    der.writeBuffer(ver, asn1.Ber.Integer);
    der.writeBuffer(key.part.d.data, asn1.Ber.OctetString);
    der.startSequence(0xa0);
    var curve = key.part.curve.data.toString();
    var curveOid = algs.curves[curve].pkcs8oid;
    assert.string(curveOid, 'a known ECDSA named curve');
    der.writeOID(curveOid);
    der.endSequence();
    der.startSequence(0xa1);
    var Q = utils.ecNormalize(key.part.Q.data, true);
    der.writeBuffer(Q, asn1.Ber.BitString);
    der.endSequence();
  }
  return module.exports;
});

$__System.registerDynamic("npm:sshpk@1.8.1/lib/formats/pem.js", ["npm:assert-plus@1.0.0/assert.js", "npm:asn1@0.2.3/lib/index.js", "@node/crypto", "npm:sshpk@1.8.1/lib/algs.js", "npm:sshpk@1.8.1/lib/utils.js", "npm:sshpk@1.8.1/lib/key.js", "npm:sshpk@1.8.1/lib/private-key.js", "npm:sshpk@1.8.1/lib/formats/pkcs1.js", "npm:sshpk@1.8.1/lib/formats/pkcs8.js", "npm:sshpk@1.8.1/lib/formats/ssh-private.js", "npm:sshpk@1.8.1/lib/formats/rfc4253.js", "npm:sshpk@1.8.1/lib/errors.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    read: read,
    write: write
  };
  var assert = $__require('npm:assert-plus@1.0.0/assert.js');
  var asn1 = $__require('npm:asn1@0.2.3/lib/index.js');
  var crypto = $__require('@node/crypto');
  var algs = $__require('npm:sshpk@1.8.1/lib/algs.js');
  var utils = $__require('npm:sshpk@1.8.1/lib/utils.js');
  var Key = $__require('npm:sshpk@1.8.1/lib/key.js');
  var PrivateKey = $__require('npm:sshpk@1.8.1/lib/private-key.js');
  var pkcs1 = $__require('npm:sshpk@1.8.1/lib/formats/pkcs1.js');
  var pkcs8 = $__require('npm:sshpk@1.8.1/lib/formats/pkcs8.js');
  var sshpriv = $__require('npm:sshpk@1.8.1/lib/formats/ssh-private.js');
  var rfc4253 = $__require('npm:sshpk@1.8.1/lib/formats/rfc4253.js');
  var errors = $__require('npm:sshpk@1.8.1/lib/errors.js');
  function read(buf, options, forceType) {
    var input = buf;
    if (typeof(buf) !== 'string') {
      assert.buffer(buf, 'buf');
      buf = buf.toString('ascii');
    }
    var lines = buf.trim().split('\n');
    var m = lines[0].match(/[-]+[ ]*BEGIN ([A-Z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);
    assert.ok(m, 'invalid PEM header');
    var m2 = lines[lines.length - 1].match(/[-]+[ ]*END ([A-Z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);
    assert.ok(m2, 'invalid PEM footer');
    assert.equal(m[2], m2[2]);
    var type = m[2].toLowerCase();
    var alg;
    if (m[1]) {
      assert.equal(m[1], m2[1], 'PEM header and footer mismatch');
      alg = m[1].trim();
    }
    var headers = {};
    while (true) {
      lines = lines.slice(1);
      m = lines[0].match(/^([A-Za-z0-9-]+): (.+)$/);
      if (!m)
        break;
      headers[m[1].toLowerCase()] = m[2];
    }
    var cipher,
        key,
        iv;
    if (headers['proc-type']) {
      var parts = headers['proc-type'].split(',');
      if (parts[0] === '4' && parts[1] === 'ENCRYPTED') {
        if (typeof(options.passphrase) === 'string') {
          options.passphrase = new Buffer(options.passphrase, 'utf-8');
        }
        if (!Buffer.isBuffer(options.passphrase)) {
          throw (new errors.KeyEncryptedError(options.filename, 'PEM'));
        } else {
          parts = headers['dek-info'].split(',');
          assert.ok(parts.length === 2);
          cipher = parts[0].toLowerCase();
          iv = new Buffer(parts[1], 'hex');
          key = utils.opensslKeyDeriv(cipher, iv, options.passphrase, 1).key;
        }
      }
    }
    lines = lines.slice(0, -1).join('');
    buf = new Buffer(lines, 'base64');
    if (cipher && key && iv) {
      var cipherStream = crypto.createDecipheriv(cipher, key, iv);
      var chunk,
          chunks = [];
      cipherStream.once('error', function(e) {
        if (e.toString().indexOf('bad decrypt') !== -1) {
          throw (new Error('Incorrect passphrase ' + 'supplied, could not decrypt key'));
        }
        throw (e);
      });
      cipherStream.write(buf);
      cipherStream.end();
      while ((chunk = cipherStream.read()) !== null)
        chunks.push(chunk);
      buf = Buffer.concat(chunks);
    }
    if (alg && alg.toLowerCase() === 'openssh')
      return (sshpriv.readSSHPrivate(type, buf));
    if (alg && alg.toLowerCase() === 'ssh2')
      return (rfc4253.readType(type, buf));
    var der = new asn1.BerReader(buf);
    der.originalInput = input;
    der.readSequence();
    if (alg) {
      if (forceType)
        assert.strictEqual(forceType, 'pkcs1');
      return (pkcs1.readPkcs1(alg, type, der));
    } else {
      if (forceType)
        assert.strictEqual(forceType, 'pkcs8');
      return (pkcs8.readPkcs8(alg, type, der));
    }
  }
  function write(key, options, type) {
    assert.object(key);
    var alg = {
      'ecdsa': 'EC',
      'rsa': 'RSA',
      'dsa': 'DSA'
    }[key.type];
    var header;
    var der = new asn1.BerWriter();
    if (PrivateKey.isPrivateKey(key)) {
      if (type && type === 'pkcs8') {
        header = 'PRIVATE KEY';
        pkcs8.writePkcs8(der, key);
      } else {
        if (type)
          assert.strictEqual(type, 'pkcs1');
        header = alg + ' PRIVATE KEY';
        pkcs1.writePkcs1(der, key);
      }
    } else if (Key.isKey(key)) {
      if (type && type === 'pkcs1') {
        header = alg + ' PUBLIC KEY';
        pkcs1.writePkcs1(der, key);
      } else {
        if (type)
          assert.strictEqual(type, 'pkcs8');
        header = 'PUBLIC KEY';
        pkcs8.writePkcs8(der, key);
      }
    } else {
      throw (new Error('key is not a Key or PrivateKey'));
    }
    var tmp = der.buffer.toString('base64');
    var len = tmp.length + (tmp.length / 64) + 18 + 16 + header.length * 2 + 10;
    var buf = new Buffer(len);
    var o = 0;
    o += buf.write('-----BEGIN ' + header + '-----\n', o);
    for (var i = 0; i < tmp.length; ) {
      var limit = i + 64;
      if (limit > tmp.length)
        limit = tmp.length;
      o += buf.write(tmp.slice(i, limit), o);
      buf[o++] = 10;
      i = limit;
    }
    o += buf.write('-----END ' + header + '-----\n', o);
    return (buf.slice(0, o));
  }
  return module.exports;
});

$__System.registerDynamic("npm:sshpk@1.8.1/lib/formats/pkcs8.js", ["npm:assert-plus@1.0.0/assert.js", "npm:asn1@0.2.3/lib/index.js", "npm:sshpk@1.8.1/lib/algs.js", "npm:sshpk@1.8.1/lib/utils.js", "npm:sshpk@1.8.1/lib/key.js", "npm:sshpk@1.8.1/lib/private-key.js", "npm:sshpk@1.8.1/lib/formats/pem.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    read: read,
    readPkcs8: readPkcs8,
    write: write,
    writePkcs8: writePkcs8,
    readECDSACurve: readECDSACurve,
    writeECDSACurve: writeECDSACurve
  };
  var assert = $__require('npm:assert-plus@1.0.0/assert.js');
  var asn1 = $__require('npm:asn1@0.2.3/lib/index.js');
  var algs = $__require('npm:sshpk@1.8.1/lib/algs.js');
  var utils = $__require('npm:sshpk@1.8.1/lib/utils.js');
  var Key = $__require('npm:sshpk@1.8.1/lib/key.js');
  var PrivateKey = $__require('npm:sshpk@1.8.1/lib/private-key.js');
  var pem = $__require('npm:sshpk@1.8.1/lib/formats/pem.js');
  function read(buf, options) {
    return (pem.read(buf, options, 'pkcs8'));
  }
  function write(key, options) {
    return (pem.write(key, options, 'pkcs8'));
  }
  function readMPInt(der, nm) {
    assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + ' is not an Integer');
    return (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));
  }
  function readPkcs8(alg, type, der) {
    if (der.peek() === asn1.Ber.Integer) {
      assert.strictEqual(type, 'private', 'unexpected Integer at start of public key');
      der.readString(asn1.Ber.Integer, true);
    }
    der.readSequence();
    var oid = der.readOID();
    switch (oid) {
      case '1.2.840.113549.1.1.1':
        if (type === 'public')
          return (readPkcs8RSAPublic(der));
        else
          return (readPkcs8RSAPrivate(der));
      case '1.2.840.10040.4.1':
        if (type === 'public')
          return (readPkcs8DSAPublic(der));
        else
          return (readPkcs8DSAPrivate(der));
      case '1.2.840.10045.2.1':
        if (type === 'public')
          return (readPkcs8ECDSAPublic(der));
        else
          return (readPkcs8ECDSAPrivate(der));
      default:
        throw (new Error('Unknown key type OID ' + oid));
    }
  }
  function readPkcs8RSAPublic(der) {
    der.readByte();
    der.readByte();
    der.readSequence(asn1.Ber.BitString);
    der.readByte();
    der.readSequence();
    var n = readMPInt(der, 'modulus');
    var e = readMPInt(der, 'exponent');
    var key = {
      type: 'rsa',
      source: der.originalInput,
      parts: [{
        name: 'e',
        data: e
      }, {
        name: 'n',
        data: n
      }]
    };
    return (new Key(key));
  }
  function readPkcs8RSAPrivate(der) {
    der.readByte();
    der.readByte();
    der.readSequence(asn1.Ber.OctetString);
    der.readSequence();
    var ver = readMPInt(der, 'version');
    assert.equal(ver[0], 0x0, 'unknown RSA private key version');
    var n = readMPInt(der, 'modulus');
    var e = readMPInt(der, 'public exponent');
    var d = readMPInt(der, 'private exponent');
    var p = readMPInt(der, 'prime1');
    var q = readMPInt(der, 'prime2');
    var dmodp = readMPInt(der, 'exponent1');
    var dmodq = readMPInt(der, 'exponent2');
    var iqmp = readMPInt(der, 'iqmp');
    var key = {
      type: 'rsa',
      parts: [{
        name: 'n',
        data: n
      }, {
        name: 'e',
        data: e
      }, {
        name: 'd',
        data: d
      }, {
        name: 'iqmp',
        data: iqmp
      }, {
        name: 'p',
        data: p
      }, {
        name: 'q',
        data: q
      }, {
        name: 'dmodp',
        data: dmodp
      }, {
        name: 'dmodq',
        data: dmodq
      }]
    };
    return (new PrivateKey(key));
  }
  function readPkcs8DSAPublic(der) {
    der.readSequence();
    var p = readMPInt(der, 'p');
    var q = readMPInt(der, 'q');
    var g = readMPInt(der, 'g');
    der.readSequence(asn1.Ber.BitString);
    der.readByte();
    var y = readMPInt(der, 'y');
    var key = {
      type: 'dsa',
      parts: [{
        name: 'p',
        data: p
      }, {
        name: 'q',
        data: q
      }, {
        name: 'g',
        data: g
      }, {
        name: 'y',
        data: y
      }]
    };
    return (new Key(key));
  }
  function readPkcs8DSAPrivate(der) {
    der.readSequence();
    var p = readMPInt(der, 'p');
    var q = readMPInt(der, 'q');
    var g = readMPInt(der, 'g');
    der.readSequence(asn1.Ber.OctetString);
    var x = readMPInt(der, 'x');
    var y = utils.calculateDSAPublic(g, p, x);
    var key = {
      type: 'dsa',
      parts: [{
        name: 'p',
        data: p
      }, {
        name: 'q',
        data: q
      }, {
        name: 'g',
        data: g
      }, {
        name: 'y',
        data: y
      }, {
        name: 'x',
        data: x
      }]
    };
    return (new PrivateKey(key));
  }
  function readECDSACurve(der) {
    var curveName,
        curveNames;
    var j,
        c,
        cd;
    if (der.peek() === asn1.Ber.OID) {
      var oid = der.readOID();
      curveNames = Object.keys(algs.curves);
      for (j = 0; j < curveNames.length; ++j) {
        c = curveNames[j];
        cd = algs.curves[c];
        if (cd.pkcs8oid === oid) {
          curveName = c;
          break;
        }
      }
    } else {
      der.readSequence();
      var version = der.readString(asn1.Ber.Integer, true);
      assert.strictEqual(version[0], 1, 'ECDSA key not version 1');
      var curve = {};
      der.readSequence();
      var fieldTypeOid = der.readOID();
      assert.strictEqual(fieldTypeOid, '1.2.840.10045.1.1', 'ECDSA key is not from a prime-field');
      var p = curve.p = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));
      curve.size = p.length * 8 - utils.countZeros(p);
      der.readSequence();
      curve.a = utils.mpNormalize(der.readString(asn1.Ber.OctetString, true));
      curve.b = utils.mpNormalize(der.readString(asn1.Ber.OctetString, true));
      if (der.peek() === asn1.Ber.BitString)
        curve.s = der.readString(asn1.Ber.BitString, true);
      curve.G = der.readString(asn1.Ber.OctetString, true);
      assert.strictEqual(curve.G[0], 0x4, 'uncompressed G is required');
      curve.n = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));
      curve.h = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));
      assert.strictEqual(curve.h[0], 0x1, 'a cofactor=1 curve is ' + 'required');
      curveNames = Object.keys(algs.curves);
      var ks = Object.keys(curve);
      for (j = 0; j < curveNames.length; ++j) {
        c = curveNames[j];
        cd = algs.curves[c];
        var equal = true;
        for (var i = 0; i < ks.length; ++i) {
          var k = ks[i];
          if (cd[k] === undefined)
            continue;
          if (typeof(cd[k]) === 'object' && cd[k].equals !== undefined) {
            if (!cd[k].equals(curve[k])) {
              equal = false;
              break;
            }
          } else if (Buffer.isBuffer(cd[k])) {
            if (cd[k].toString('binary') !== curve[k].toString('binary')) {
              equal = false;
              break;
            }
          } else {
            if (cd[k] !== curve[k]) {
              equal = false;
              break;
            }
          }
        }
        if (equal) {
          curveName = c;
          break;
        }
      }
    }
    return (curveName);
  }
  function readPkcs8ECDSAPrivate(der) {
    var curveName = readECDSACurve(der);
    assert.string(curveName, 'a known elliptic curve');
    der.readSequence(asn1.Ber.OctetString);
    der.readSequence();
    var version = readMPInt(der, 'version');
    assert.equal(version[0], 1, 'unknown version of ECDSA key');
    var d = der.readString(asn1.Ber.OctetString, true);
    der.readSequence(0xa1);
    var Q = der.readString(asn1.Ber.BitString, true);
    Q = utils.ecNormalize(Q);
    var key = {
      type: 'ecdsa',
      parts: [{
        name: 'curve',
        data: new Buffer(curveName)
      }, {
        name: 'Q',
        data: Q
      }, {
        name: 'd',
        data: d
      }]
    };
    return (new PrivateKey(key));
  }
  function readPkcs8ECDSAPublic(der) {
    var curveName = readECDSACurve(der);
    assert.string(curveName, 'a known elliptic curve');
    var Q = der.readString(asn1.Ber.BitString, true);
    Q = utils.ecNormalize(Q);
    var key = {
      type: 'ecdsa',
      parts: [{
        name: 'curve',
        data: new Buffer(curveName)
      }, {
        name: 'Q',
        data: Q
      }]
    };
    return (new Key(key));
  }
  function writePkcs8(der, key) {
    der.startSequence();
    if (PrivateKey.isPrivateKey(key)) {
      var sillyInt = new Buffer(1);
      sillyInt[0] = 0x0;
      der.writeBuffer(sillyInt, asn1.Ber.Integer);
    }
    der.startSequence();
    switch (key.type) {
      case 'rsa':
        der.writeOID('1.2.840.113549.1.1.1');
        if (PrivateKey.isPrivateKey(key))
          writePkcs8RSAPrivate(key, der);
        else
          writePkcs8RSAPublic(key, der);
        break;
      case 'dsa':
        der.writeOID('1.2.840.10040.4.1');
        if (PrivateKey.isPrivateKey(key))
          writePkcs8DSAPrivate(key, der);
        else
          writePkcs8DSAPublic(key, der);
        break;
      case 'ecdsa':
        der.writeOID('1.2.840.10045.2.1');
        if (PrivateKey.isPrivateKey(key))
          writePkcs8ECDSAPrivate(key, der);
        else
          writePkcs8ECDSAPublic(key, der);
        break;
      default:
        throw (new Error('Unsupported key type: ' + key.type));
    }
    der.endSequence();
  }
  function writePkcs8RSAPrivate(key, der) {
    der.writeNull();
    der.endSequence();
    der.startSequence(asn1.Ber.OctetString);
    der.startSequence();
    var version = new Buffer(1);
    version[0] = 0;
    der.writeBuffer(version, asn1.Ber.Integer);
    der.writeBuffer(key.part.n.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.e.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.d.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);
    if (!key.part.dmodp || !key.part.dmodq)
      utils.addRSAMissing(key);
    der.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);
    der.endSequence();
    der.endSequence();
  }
  function writePkcs8RSAPublic(key, der) {
    der.writeNull();
    der.endSequence();
    der.startSequence(asn1.Ber.BitString);
    der.writeByte(0x00);
    der.startSequence();
    der.writeBuffer(key.part.n.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.e.data, asn1.Ber.Integer);
    der.endSequence();
    der.endSequence();
  }
  function writePkcs8DSAPrivate(key, der) {
    der.startSequence();
    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.g.data, asn1.Ber.Integer);
    der.endSequence();
    der.endSequence();
    der.startSequence(asn1.Ber.OctetString);
    der.writeBuffer(key.part.x.data, asn1.Ber.Integer);
    der.endSequence();
  }
  function writePkcs8DSAPublic(key, der) {
    der.startSequence();
    der.writeBuffer(key.part.p.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.q.data, asn1.Ber.Integer);
    der.writeBuffer(key.part.g.data, asn1.Ber.Integer);
    der.endSequence();
    der.endSequence();
    der.startSequence(asn1.Ber.BitString);
    der.writeByte(0x00);
    der.writeBuffer(key.part.y.data, asn1.Ber.Integer);
    der.endSequence();
  }
  function writeECDSACurve(key, der) {
    var curve = algs.curves[key.curve];
    if (curve.pkcs8oid) {
      der.writeOID(curve.pkcs8oid);
    } else {
      der.startSequence();
      var version = new Buffer(1);
      version.writeUInt8(1, 0);
      der.writeBuffer(version, asn1.Ber.Integer);
      der.startSequence();
      der.writeOID('1.2.840.10045.1.1');
      der.writeBuffer(curve.p, asn1.Ber.Integer);
      der.endSequence();
      der.startSequence();
      var a = curve.p;
      if (a[0] === 0x0)
        a = a.slice(1);
      der.writeBuffer(a, asn1.Ber.OctetString);
      der.writeBuffer(curve.b, asn1.Ber.OctetString);
      der.writeBuffer(curve.s, asn1.Ber.BitString);
      der.endSequence();
      der.writeBuffer(curve.G, asn1.Ber.OctetString);
      der.writeBuffer(curve.n, asn1.Ber.Integer);
      var h = curve.h;
      if (!h) {
        h = new Buffer(1);
        h[0] = 1;
      }
      der.writeBuffer(h, asn1.Ber.Integer);
      der.endSequence();
    }
  }
  function writePkcs8ECDSAPublic(key, der) {
    writeECDSACurve(key, der);
    der.endSequence();
    var Q = utils.ecNormalize(key.part.Q.data, true);
    der.writeBuffer(Q, asn1.Ber.BitString);
  }
  function writePkcs8ECDSAPrivate(key, der) {
    writeECDSACurve(key, der);
    der.endSequence();
    der.startSequence(asn1.Ber.OctetString);
    der.startSequence();
    var version = new Buffer(1);
    version[0] = 1;
    der.writeBuffer(version, asn1.Ber.Integer);
    der.writeBuffer(key.part.d.data, asn1.Ber.OctetString);
    der.startSequence(0xa1);
    var Q = utils.ecNormalize(key.part.Q.data, true);
    der.writeBuffer(Q, asn1.Ber.BitString);
    der.endSequence();
    der.endSequence();
    der.endSequence();
  }
  return module.exports;
});

$__System.registerDynamic("npm:sshpk@1.8.1/lib/utils.js", ["npm:assert-plus@1.0.0/assert.js", "npm:sshpk@1.8.1/lib/private-key.js", "@node/crypto", "npm:jsbn@0.1.0/index.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    bufferSplit: bufferSplit,
    addRSAMissing: addRSAMissing,
    calculateDSAPublic: calculateDSAPublic,
    mpNormalize: mpNormalize,
    ecNormalize: ecNormalize,
    countZeros: countZeros,
    assertCompatible: assertCompatible,
    isCompatible: isCompatible,
    opensslKeyDeriv: opensslKeyDeriv
  };
  var assert = $__require('npm:assert-plus@1.0.0/assert.js');
  var PrivateKey = $__require('npm:sshpk@1.8.1/lib/private-key.js');
  var crypto = $__require('@node/crypto');
  var MAX_CLASS_DEPTH = 3;
  function isCompatible(obj, klass, needVer) {
    if (obj === null || typeof(obj) !== 'object')
      return (false);
    if (needVer === undefined)
      needVer = klass.prototype._sshpkApiVersion;
    if (obj instanceof klass && klass.prototype._sshpkApiVersion[0] == needVer[0])
      return (true);
    var proto = Object.getPrototypeOf(obj);
    var depth = 0;
    while (proto.constructor.name !== klass.name) {
      proto = Object.getPrototypeOf(proto);
      if (!proto || ++depth > MAX_CLASS_DEPTH)
        return (false);
    }
    if (proto.constructor.name !== klass.name)
      return (false);
    var ver = proto._sshpkApiVersion;
    if (ver === undefined)
      ver = klass._oldVersionDetect(obj);
    if (ver[0] != needVer[0] || ver[1] < needVer[1])
      return (false);
    return (true);
  }
  function assertCompatible(obj, klass, needVer, name) {
    if (name === undefined)
      name = 'object';
    assert.ok(obj, name + ' must not be null');
    assert.object(obj, name + ' must be an object');
    if (needVer === undefined)
      needVer = klass.prototype._sshpkApiVersion;
    if (obj instanceof klass && klass.prototype._sshpkApiVersion[0] == needVer[0])
      return;
    var proto = Object.getPrototypeOf(obj);
    var depth = 0;
    while (proto.constructor.name !== klass.name) {
      proto = Object.getPrototypeOf(proto);
      assert.ok(proto && ++depth <= MAX_CLASS_DEPTH, name + ' must be a ' + klass.name + ' instance');
    }
    assert.strictEqual(proto.constructor.name, klass.name, name + ' must be a ' + klass.name + ' instance');
    var ver = proto._sshpkApiVersion;
    if (ver === undefined)
      ver = klass._oldVersionDetect(obj);
    assert.ok(ver[0] == needVer[0] && ver[1] >= needVer[1], name + ' must be compatible with ' + klass.name + ' klass ' + 'version ' + needVer[0] + '.' + needVer[1]);
  }
  var CIPHER_LEN = {
    'des-ede3-cbc': {
      key: 7,
      iv: 8
    },
    'aes-128-cbc': {
      key: 16,
      iv: 16
    }
  };
  var PKCS5_SALT_LEN = 8;
  function opensslKeyDeriv(cipher, salt, passphrase, count) {
    assert.buffer(salt, 'salt');
    assert.buffer(passphrase, 'passphrase');
    assert.number(count, 'iteration count');
    var clen = CIPHER_LEN[cipher];
    assert.object(clen, 'supported cipher');
    salt = salt.slice(0, PKCS5_SALT_LEN);
    var D,
        D_prev,
        bufs;
    var material = new Buffer(0);
    while (material.length < clen.key + clen.iv) {
      bufs = [];
      if (D_prev)
        bufs.push(D_prev);
      bufs.push(passphrase);
      bufs.push(salt);
      D = Buffer.concat(bufs);
      for (var j = 0; j < count; ++j)
        D = crypto.createHash('md5').update(D).digest();
      material = Buffer.concat([material, D]);
      D_prev = D;
    }
    return ({
      key: material.slice(0, clen.key),
      iv: material.slice(clen.key, clen.key + clen.iv)
    });
  }
  function countZeros(buf) {
    var o = 0,
        obit = 8;
    while (o < buf.length) {
      var mask = (1 << obit);
      if ((buf[o] & mask) === mask)
        break;
      obit--;
      if (obit < 0) {
        o++;
        obit = 8;
      }
    }
    return (o * 8 + (8 - obit) - 1);
  }
  function bufferSplit(buf, chr) {
    assert.buffer(buf);
    assert.string(chr);
    var parts = [];
    var lastPart = 0;
    var matches = 0;
    for (var i = 0; i < buf.length; ++i) {
      if (buf[i] === chr.charCodeAt(matches))
        ++matches;
      else if (buf[i] === chr.charCodeAt(0))
        matches = 1;
      else
        matches = 0;
      if (matches >= chr.length) {
        var newPart = i + 1;
        parts.push(buf.slice(lastPart, newPart - matches));
        lastPart = newPart;
        matches = 0;
      }
    }
    if (lastPart <= buf.length)
      parts.push(buf.slice(lastPart, buf.length));
    return (parts);
  }
  function ecNormalize(buf, addZero) {
    assert.buffer(buf);
    if (buf[0] === 0x00 && buf[1] === 0x04) {
      if (addZero)
        return (buf);
      return (buf.slice(1));
    } else if (buf[0] === 0x04) {
      if (!addZero)
        return (buf);
    } else {
      while (buf[0] === 0x00)
        buf = buf.slice(1);
      if (buf[0] === 0x02 || buf[0] === 0x03)
        throw (new Error('Compressed elliptic curve points ' + 'are not supported'));
      if (buf[0] !== 0x04)
        throw (new Error('Not a valid elliptic curve point'));
      if (!addZero)
        return (buf);
    }
    var b = new Buffer(buf.length + 1);
    b[0] = 0x0;
    buf.copy(b, 1);
    return (b);
  }
  function mpNormalize(buf) {
    assert.buffer(buf);
    while (buf.length > 1 && buf[0] === 0x00 && (buf[1] & 0x80) === 0x00)
      buf = buf.slice(1);
    if ((buf[0] & 0x80) === 0x80) {
      var b = new Buffer(buf.length + 1);
      b[0] = 0x00;
      buf.copy(b, 1);
      buf = b;
    }
    return (buf);
  }
  function bigintToMpBuf(bigint) {
    var buf = new Buffer(bigint.toByteArray());
    buf = mpNormalize(buf);
    return (buf);
  }
  function calculateDSAPublic(g, p, x) {
    assert.buffer(g);
    assert.buffer(p);
    assert.buffer(x);
    try {
      var bigInt = $__require('npm:jsbn@0.1.0/index.js').BigInteger;
    } catch (e) {
      throw (new Error('To load a PKCS#8 format DSA private key, ' + 'the node jsbn library is required.'));
    }
    g = new bigInt(g);
    p = new bigInt(p);
    x = new bigInt(x);
    var y = g.modPow(x, p);
    var ybuf = bigintToMpBuf(y);
    return (ybuf);
  }
  function addRSAMissing(key) {
    assert.object(key);
    assertCompatible(key, PrivateKey, [1, 1]);
    try {
      var bigInt = $__require('npm:jsbn@0.1.0/index.js').BigInteger;
    } catch (e) {
      throw (new Error('To write a PEM private key from ' + 'this source, the node jsbn lib is required.'));
    }
    var d = new bigInt(key.part.d.data);
    var buf;
    if (!key.part.dmodp) {
      var p = new bigInt(key.part.p.data);
      var dmodp = d.mod(p.subtract(1));
      buf = bigintToMpBuf(dmodp);
      key.part.dmodp = {
        name: 'dmodp',
        data: buf
      };
      key.parts.push(key.part.dmodp);
    }
    if (!key.part.dmodq) {
      var q = new bigInt(key.part.q.data);
      var dmodq = d.mod(q.subtract(1));
      buf = bigintToMpBuf(dmodq);
      key.part.dmodq = {
        name: 'dmodq',
        data: buf
      };
      key.parts.push(key.part.dmodq);
    }
  }
  return module.exports;
});

$__System.registerDynamic("npm:sshpk@1.8.1/lib/formats/ssh.js", ["npm:assert-plus@1.0.0/assert.js", "npm:sshpk@1.8.1/lib/formats/rfc4253.js", "npm:sshpk@1.8.1/lib/utils.js", "npm:sshpk@1.8.1/lib/key.js", "npm:sshpk@1.8.1/lib/private-key.js", "npm:sshpk@1.8.1/lib/formats/ssh-private.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    read: read,
    write: write
  };
  var assert = $__require('npm:assert-plus@1.0.0/assert.js');
  var rfc4253 = $__require('npm:sshpk@1.8.1/lib/formats/rfc4253.js');
  var utils = $__require('npm:sshpk@1.8.1/lib/utils.js');
  var Key = $__require('npm:sshpk@1.8.1/lib/key.js');
  var PrivateKey = $__require('npm:sshpk@1.8.1/lib/private-key.js');
  var sshpriv = $__require('npm:sshpk@1.8.1/lib/formats/ssh-private.js');
  var SSHKEY_RE = /^([a-z0-9-]+)[ \t]+([a-zA-Z0-9+\/]+[=]*)([\n \t]+([^\n]+))?$/;
  var SSHKEY_RE2 = /^([a-z0-9-]+)[ \t]+([a-zA-Z0-9+\/ \t\n]+[=]*)(.*)$/;
  function read(buf, options) {
    if (typeof(buf) !== 'string') {
      assert.buffer(buf, 'buf');
      buf = buf.toString('ascii');
    }
    var trimmed = buf.trim().replace(/[\\\r]/g, '');
    var m = trimmed.match(SSHKEY_RE);
    if (!m)
      m = trimmed.match(SSHKEY_RE2);
    assert.ok(m, 'key must match regex');
    var type = rfc4253.algToKeyType(m[1]);
    var kbuf = new Buffer(m[2], 'base64');
    var key;
    var ret = {};
    if (m[4]) {
      try {
        key = rfc4253.read(kbuf);
      } catch (e) {
        m = trimmed.match(SSHKEY_RE2);
        assert.ok(m, 'key must match regex');
        kbuf = new Buffer(m[2], 'base64');
        key = rfc4253.readInternal(ret, 'public', kbuf);
      }
    } else {
      key = rfc4253.readInternal(ret, 'public', kbuf);
    }
    assert.strictEqual(type, key.type);
    if (m[4] && m[4].length > 0) {
      key.comment = m[4];
    } else if (ret.consumed) {
      var data = m[2] + m[3];
      var realOffset = Math.ceil(ret.consumed / 3) * 4;
      data = data.slice(0, realOffset - 2).replace(/[^a-zA-Z0-9+\/=]/g, '') + data.slice(realOffset - 2);
      var padding = ret.consumed % 3;
      if (padding > 0 && data.slice(realOffset - 1, realOffset) !== '=')
        realOffset--;
      while (data.slice(realOffset, realOffset + 1) === '=')
        realOffset++;
      var trailer = data.slice(realOffset);
      trailer = trailer.replace(/[\r\n]/g, ' ').replace(/^\s+/, '');
      if (trailer.match(/^[a-zA-Z0-9]/))
        key.comment = trailer;
    }
    return (key);
  }
  function write(key, options) {
    assert.object(key);
    if (!Key.isKey(key))
      throw (new Error('Must be a public key'));
    var parts = [];
    var alg = rfc4253.keyTypeToAlg(key);
    parts.push(alg);
    var buf = rfc4253.write(key);
    parts.push(buf.toString('base64'));
    if (key.comment)
      parts.push(key.comment);
    return (new Buffer(parts.join(' ')));
  }
  return module.exports;
});

$__System.registerDynamic("npm:sshpk@1.8.1/lib/key.js", ["npm:assert-plus@1.0.0/assert.js", "npm:sshpk@1.8.1/lib/algs.js", "@node/crypto", "npm:sshpk@1.8.1/lib/fingerprint.js", "npm:sshpk@1.8.1/lib/signature.js", "npm:sshpk@1.8.1/lib/dhe.js", "npm:sshpk@1.8.1/lib/errors.js", "npm:sshpk@1.8.1/lib/utils.js", "npm:sshpk@1.8.1/lib/private-key.js", "npm:sshpk@1.8.1/lib/ed-compat.js", "npm:sshpk@1.8.1/lib/formats/auto.js", "npm:sshpk@1.8.1/lib/formats/pem.js", "npm:sshpk@1.8.1/lib/formats/pkcs1.js", "npm:sshpk@1.8.1/lib/formats/pkcs8.js", "npm:sshpk@1.8.1/lib/formats/rfc4253.js", "npm:sshpk@1.8.1/lib/formats/ssh.js", "npm:sshpk@1.8.1/lib/formats/ssh-private.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = Key;
  var assert = $__require('npm:assert-plus@1.0.0/assert.js');
  var algs = $__require('npm:sshpk@1.8.1/lib/algs.js');
  var crypto = $__require('@node/crypto');
  var Fingerprint = $__require('npm:sshpk@1.8.1/lib/fingerprint.js');
  var Signature = $__require('npm:sshpk@1.8.1/lib/signature.js');
  var DiffieHellman = $__require('npm:sshpk@1.8.1/lib/dhe.js');
  var errs = $__require('npm:sshpk@1.8.1/lib/errors.js');
  var utils = $__require('npm:sshpk@1.8.1/lib/utils.js');
  var PrivateKey = $__require('npm:sshpk@1.8.1/lib/private-key.js');
  var edCompat;
  try {
    edCompat = $__require('npm:sshpk@1.8.1/lib/ed-compat.js');
  } catch (e) {}
  var InvalidAlgorithmError = errs.InvalidAlgorithmError;
  var KeyParseError = errs.KeyParseError;
  var formats = {};
  formats['auto'] = $__require('npm:sshpk@1.8.1/lib/formats/auto.js');
  formats['pem'] = $__require('npm:sshpk@1.8.1/lib/formats/pem.js');
  formats['pkcs1'] = $__require('npm:sshpk@1.8.1/lib/formats/pkcs1.js');
  formats['pkcs8'] = $__require('npm:sshpk@1.8.1/lib/formats/pkcs8.js');
  formats['rfc4253'] = $__require('npm:sshpk@1.8.1/lib/formats/rfc4253.js');
  formats['ssh'] = $__require('npm:sshpk@1.8.1/lib/formats/ssh.js');
  formats['ssh-private'] = $__require('npm:sshpk@1.8.1/lib/formats/ssh-private.js');
  formats['openssh'] = formats['ssh-private'];
  function Key(opts) {
    assert.object(opts, 'options');
    assert.arrayOfObject(opts.parts, 'options.parts');
    assert.string(opts.type, 'options.type');
    assert.optionalString(opts.comment, 'options.comment');
    var algInfo = algs.info[opts.type];
    if (typeof(algInfo) !== 'object')
      throw (new InvalidAlgorithmError(opts.type));
    var partLookup = {};
    for (var i = 0; i < opts.parts.length; ++i) {
      var part = opts.parts[i];
      partLookup[part.name] = part;
    }
    this.type = opts.type;
    this.parts = opts.parts;
    this.part = partLookup;
    this.comment = undefined;
    this.source = opts.source;
    this._rfc4253Cache = opts._rfc4253Cache;
    this._hashCache = {};
    var sz;
    this.curve = undefined;
    if (this.type === 'ecdsa') {
      var curve = this.part.curve.data.toString();
      this.curve = curve;
      sz = algs.curves[curve].size;
    } else if (this.type === 'ed25519') {
      sz = 256;
      this.curve = 'curve25519';
    } else {
      var szPart = this.part[algInfo.sizePart];
      sz = szPart.data.length;
      sz = sz * 8 - utils.countZeros(szPart.data);
    }
    this.size = sz;
  }
  Key.formats = formats;
  Key.prototype.toBuffer = function(format, options) {
    if (format === undefined)
      format = 'ssh';
    assert.string(format, 'format');
    assert.object(formats[format], 'formats[format]');
    assert.optionalObject(options, 'options');
    if (format === 'rfc4253') {
      if (this._rfc4253Cache === undefined)
        this._rfc4253Cache = formats['rfc4253'].write(this);
      return (this._rfc4253Cache);
    }
    return (formats[format].write(this, options));
  };
  Key.prototype.toString = function(format, options) {
    return (this.toBuffer(format, options).toString());
  };
  Key.prototype.hash = function(algo) {
    assert.string(algo, 'algorithm');
    algo = algo.toLowerCase();
    if (algs.hashAlgs[algo] === undefined)
      throw (new InvalidAlgorithmError(algo));
    if (this._hashCache[algo])
      return (this._hashCache[algo]);
    var hash = crypto.createHash(algo).update(this.toBuffer('rfc4253')).digest();
    this._hashCache[algo] = hash;
    return (hash);
  };
  Key.prototype.fingerprint = function(algo) {
    if (algo === undefined)
      algo = 'sha256';
    assert.string(algo, 'algorithm');
    var opts = {
      hash: this.hash(algo),
      algorithm: algo
    };
    return (new Fingerprint(opts));
  };
  Key.prototype.defaultHashAlgorithm = function() {
    var hashAlgo = 'sha1';
    if (this.type === 'rsa')
      hashAlgo = 'sha256';
    if (this.type === 'dsa' && this.size > 1024)
      hashAlgo = 'sha256';
    if (this.type === 'ed25519')
      hashAlgo = 'sha512';
    if (this.type === 'ecdsa') {
      if (this.size <= 256)
        hashAlgo = 'sha256';
      else if (this.size <= 384)
        hashAlgo = 'sha384';
      else
        hashAlgo = 'sha512';
    }
    return (hashAlgo);
  };
  Key.prototype.createVerify = function(hashAlgo) {
    if (hashAlgo === undefined)
      hashAlgo = this.defaultHashAlgorithm();
    assert.string(hashAlgo, 'hash algorithm');
    if (this.type === 'ed25519' && edCompat !== undefined)
      return (new edCompat.Verifier(this, hashAlgo));
    if (this.type === 'curve25519')
      throw (new Error('Curve25519 keys are not suitable for ' + 'signing or verification'));
    var v,
        nm,
        err;
    try {
      nm = this.type.toUpperCase() + '-';
      if (this.type === 'ecdsa')
        nm = 'ecdsa-with-';
      nm += hashAlgo.toUpperCase();
      v = crypto.createVerify(nm);
    } catch (e) {
      err = e;
    }
    if (v === undefined || (err instanceof Error && err.message.match(/Unknown message digest/))) {
      nm = 'RSA-';
      nm += hashAlgo.toUpperCase();
      v = crypto.createVerify(nm);
    }
    assert.ok(v, 'failed to create verifier');
    var oldVerify = v.verify.bind(v);
    var key = this.toBuffer('pkcs8');
    var self = this;
    v.verify = function(signature, fmt) {
      if (Signature.isSignature(signature, [2, 0])) {
        if (signature.type !== self.type)
          return (false);
        if (signature.hashAlgorithm && signature.hashAlgorithm !== hashAlgo)
          return (false);
        return (oldVerify(key, signature.toBuffer('asn1')));
      } else if (typeof(signature) === 'string' || Buffer.isBuffer(signature)) {
        return (oldVerify(key, signature, fmt));
      } else if (Signature.isSignature(signature, [1, 0])) {
        throw (new Error('signature was created by too old ' + 'a version of sshpk and cannot be verified'));
      } else {
        throw (new TypeError('signature must be a string, ' + 'Buffer, or Signature object'));
      }
    };
    return (v);
  };
  Key.prototype.createDiffieHellman = function() {
    if (this.type === 'rsa')
      throw (new Error('RSA keys do not support Diffie-Hellman'));
    return (new DiffieHellman(this));
  };
  Key.prototype.createDH = Key.prototype.createDiffieHellman;
  Key.parse = function(data, format, options) {
    if (typeof(data) !== 'string')
      assert.buffer(data, 'data');
    if (format === undefined)
      format = 'auto';
    assert.string(format, 'format');
    if (typeof(options) === 'string')
      options = {filename: options};
    assert.optionalObject(options, 'options');
    if (options === undefined)
      options = {};
    assert.optionalString(options.filename, 'options.filename');
    if (options.filename === undefined)
      options.filename = '(unnamed)';
    assert.object(formats[format], 'formats[format]');
    try {
      var k = formats[format].read(data, options);
      if (k instanceof PrivateKey)
        k = k.toPublic();
      if (!k.comment)
        k.comment = options.filename;
      return (k);
    } catch (e) {
      if (e.name === 'KeyEncryptedError')
        throw (e);
      throw (new KeyParseError(options.filename, format, e));
    }
  };
  Key.isKey = function(obj, ver) {
    return (utils.isCompatible(obj, Key, ver));
  };
  Key.prototype._sshpkApiVersion = [1, 5];
  Key._oldVersionDetect = function(obj) {
    assert.func(obj.toBuffer);
    assert.func(obj.fingerprint);
    if (obj.createDH)
      return ([1, 4]);
    if (obj.defaultHashAlgorithm)
      return ([1, 3]);
    if (obj.formats['auto'])
      return ([1, 2]);
    if (obj.formats['pkcs1'])
      return ([1, 1]);
    return ([1, 0]);
  };
  return module.exports;
});

$__System.registerDynamic("npm:sshpk@1.8.1/lib/formats/rfc4253.js", ["npm:assert-plus@1.0.0/assert.js", "npm:sshpk@1.8.1/lib/algs.js", "npm:sshpk@1.8.1/lib/utils.js", "npm:sshpk@1.8.1/lib/key.js", "npm:sshpk@1.8.1/lib/private-key.js", "npm:sshpk@1.8.1/lib/ssh-buffer.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    read: read.bind(undefined, false, undefined),
    readType: read.bind(undefined, false),
    write: write,
    readPartial: read.bind(undefined, true),
    readInternal: read,
    keyTypeToAlg: keyTypeToAlg,
    algToKeyType: algToKeyType
  };
  var assert = $__require('npm:assert-plus@1.0.0/assert.js');
  var algs = $__require('npm:sshpk@1.8.1/lib/algs.js');
  var utils = $__require('npm:sshpk@1.8.1/lib/utils.js');
  var Key = $__require('npm:sshpk@1.8.1/lib/key.js');
  var PrivateKey = $__require('npm:sshpk@1.8.1/lib/private-key.js');
  var SSHBuffer = $__require('npm:sshpk@1.8.1/lib/ssh-buffer.js');
  function algToKeyType(alg) {
    assert.string(alg);
    if (alg === 'ssh-dss')
      return ('dsa');
    else if (alg === 'ssh-rsa')
      return ('rsa');
    else if (alg === 'ssh-ed25519')
      return ('ed25519');
    else if (alg === 'ssh-curve25519')
      return ('curve25519');
    else if (alg.match(/^ecdsa-sha2-/))
      return ('ecdsa');
    else
      throw (new Error('Unknown algorithm ' + alg));
  }
  function keyTypeToAlg(key) {
    assert.object(key);
    if (key.type === 'dsa')
      return ('ssh-dss');
    else if (key.type === 'rsa')
      return ('ssh-rsa');
    else if (key.type === 'ed25519')
      return ('ssh-ed25519');
    else if (key.type === 'curve25519')
      return ('ssh-curve25519');
    else if (key.type === 'ecdsa')
      return ('ecdsa-sha2-' + key.part.curve.data.toString());
    else
      throw (new Error('Unknown key type ' + key.type));
  }
  function read(partial, type, buf, options) {
    if (typeof(buf) === 'string')
      buf = new Buffer(buf);
    assert.buffer(buf, 'buf');
    var key = {};
    var parts = key.parts = [];
    var sshbuf = new SSHBuffer({buffer: buf});
    var alg = sshbuf.readString();
    assert.ok(!sshbuf.atEnd(), 'key must have at least one part');
    key.type = algToKeyType(alg);
    var partCount = algs.info[key.type].parts.length;
    if (type && type === 'private')
      partCount = algs.privInfo[key.type].parts.length;
    while (!sshbuf.atEnd() && parts.length < partCount)
      parts.push(sshbuf.readPart());
    while (!partial && !sshbuf.atEnd())
      parts.push(sshbuf.readPart());
    assert.ok(parts.length >= 1, 'key must have at least one part');
    assert.ok(partial || sshbuf.atEnd(), 'leftover bytes at end of key');
    var Constructor = Key;
    var algInfo = algs.info[key.type];
    if (type === 'private' || algInfo.parts.length !== parts.length) {
      algInfo = algs.privInfo[key.type];
      Constructor = PrivateKey;
    }
    assert.strictEqual(algInfo.parts.length, parts.length);
    if (key.type === 'ecdsa') {
      var res = /^ecdsa-sha2-(.+)$/.exec(alg);
      assert.ok(res !== null);
      assert.strictEqual(res[1], parts[0].data.toString());
    }
    var normalized = true;
    for (var i = 0; i < algInfo.parts.length; ++i) {
      parts[i].name = algInfo.parts[i];
      if (parts[i].name !== 'curve' && algInfo.normalize !== false) {
        var p = parts[i];
        var nd = utils.mpNormalize(p.data);
        if (nd !== p.data) {
          p.data = nd;
          normalized = false;
        }
      }
    }
    if (normalized)
      key._rfc4253Cache = sshbuf.toBuffer();
    if (partial && typeof(partial) === 'object') {
      partial.remainder = sshbuf.remainder();
      partial.consumed = sshbuf._offset;
    }
    return (new Constructor(key));
  }
  function write(key, options) {
    assert.object(key);
    var alg = keyTypeToAlg(key);
    var i;
    var algInfo = algs.info[key.type];
    if (PrivateKey.isPrivateKey(key))
      algInfo = algs.privInfo[key.type];
    var parts = algInfo.parts;
    var buf = new SSHBuffer({});
    buf.writeString(alg);
    for (i = 0; i < parts.length; ++i) {
      var data = key.part[parts[i]].data;
      if (algInfo.normalize !== false)
        data = utils.mpNormalize(data);
      buf.writeBuffer(data);
    }
    return (buf.toBuffer());
  }
  return module.exports;
});

$__System.registerDynamic("npm:sshpk@1.8.1/lib/ssh-buffer.js", ["npm:assert-plus@1.0.0/assert.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = SSHBuffer;
  var assert = $__require('npm:assert-plus@1.0.0/assert.js');
  function SSHBuffer(opts) {
    assert.object(opts, 'options');
    if (opts.buffer !== undefined)
      assert.buffer(opts.buffer, 'options.buffer');
    this._size = opts.buffer ? opts.buffer.length : 1024;
    this._buffer = opts.buffer || (new Buffer(this._size));
    this._offset = 0;
  }
  SSHBuffer.prototype.toBuffer = function() {
    return (this._buffer.slice(0, this._offset));
  };
  SSHBuffer.prototype.atEnd = function() {
    return (this._offset >= this._buffer.length);
  };
  SSHBuffer.prototype.remainder = function() {
    return (this._buffer.slice(this._offset));
  };
  SSHBuffer.prototype.skip = function(n) {
    this._offset += n;
  };
  SSHBuffer.prototype.expand = function() {
    this._size *= 2;
    var buf = new Buffer(this._size);
    this._buffer.copy(buf, 0);
    this._buffer = buf;
  };
  SSHBuffer.prototype.readPart = function() {
    return ({data: this.readBuffer()});
  };
  SSHBuffer.prototype.readBuffer = function() {
    var len = this._buffer.readUInt32BE(this._offset);
    this._offset += 4;
    assert.ok(this._offset + len <= this._buffer.length, 'length out of bounds at +0x' + this._offset.toString(16) + ' (data truncated?)');
    var buf = this._buffer.slice(this._offset, this._offset + len);
    this._offset += len;
    return (buf);
  };
  SSHBuffer.prototype.readString = function() {
    return (this.readBuffer().toString());
  };
  SSHBuffer.prototype.readCString = function() {
    var offset = this._offset;
    while (offset < this._buffer.length && this._buffer[offset] !== 0x00)
      offset++;
    assert.ok(offset < this._buffer.length, 'c string does not terminate');
    var str = this._buffer.slice(this._offset, offset).toString();
    this._offset = offset + 1;
    return (str);
  };
  SSHBuffer.prototype.readInt = function() {
    var v = this._buffer.readUInt32BE(this._offset);
    this._offset += 4;
    return (v);
  };
  SSHBuffer.prototype.readChar = function() {
    var v = this._buffer[this._offset++];
    return (v);
  };
  SSHBuffer.prototype.writeBuffer = function(buf) {
    while (this._offset + 4 + buf.length > this._size)
      this.expand();
    this._buffer.writeUInt32BE(buf.length, this._offset);
    this._offset += 4;
    buf.copy(this._buffer, this._offset);
    this._offset += buf.length;
  };
  SSHBuffer.prototype.writeString = function(str) {
    this.writeBuffer(new Buffer(str, 'utf8'));
  };
  SSHBuffer.prototype.writeCString = function(str) {
    while (this._offset + 1 + str.length > this._size)
      this.expand();
    this._buffer.write(str, this._offset);
    this._offset += str.length;
    this._buffer[this._offset++] = 0;
  };
  SSHBuffer.prototype.writeInt = function(v) {
    while (this._offset + 4 > this._size)
      this.expand();
    this._buffer.writeUInt32BE(v, this._offset);
    this._offset += 4;
  };
  SSHBuffer.prototype.writeChar = function(v) {
    while (this._offset + 1 > this._size)
      this.expand();
    this._buffer[this._offset++] = v;
  };
  SSHBuffer.prototype.writePart = function(p) {
    this.writeBuffer(p.data);
  };
  SSHBuffer.prototype.write = function(buf) {
    while (this._offset + buf.length > this._size)
      this.expand();
    buf.copy(this._buffer, this._offset);
    this._offset += buf.length;
  };
  return module.exports;
});

$__System.registerDynamic("npm:sshpk@1.8.1/lib/formats/ssh-private.js", ["npm:assert-plus@1.0.0/assert.js", "npm:asn1@0.2.3/lib/index.js", "npm:sshpk@1.8.1/lib/algs.js", "npm:sshpk@1.8.1/lib/utils.js", "@node/crypto", "npm:sshpk@1.8.1/lib/key.js", "npm:sshpk@1.8.1/lib/private-key.js", "npm:sshpk@1.8.1/lib/formats/pem.js", "npm:sshpk@1.8.1/lib/formats/rfc4253.js", "npm:sshpk@1.8.1/lib/ssh-buffer.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    read: read,
    readSSHPrivate: readSSHPrivate,
    write: write
  };
  var assert = $__require('npm:assert-plus@1.0.0/assert.js');
  var asn1 = $__require('npm:asn1@0.2.3/lib/index.js');
  var algs = $__require('npm:sshpk@1.8.1/lib/algs.js');
  var utils = $__require('npm:sshpk@1.8.1/lib/utils.js');
  var crypto = $__require('@node/crypto');
  var Key = $__require('npm:sshpk@1.8.1/lib/key.js');
  var PrivateKey = $__require('npm:sshpk@1.8.1/lib/private-key.js');
  var pem = $__require('npm:sshpk@1.8.1/lib/formats/pem.js');
  var rfc4253 = $__require('npm:sshpk@1.8.1/lib/formats/rfc4253.js');
  var SSHBuffer = $__require('npm:sshpk@1.8.1/lib/ssh-buffer.js');
  function read(buf, options) {
    return (pem.read(buf, options));
  }
  var MAGIC = 'openssh-key-v1';
  function readSSHPrivate(type, buf) {
    buf = new SSHBuffer({buffer: buf});
    var magic = buf.readCString();
    assert.strictEqual(magic, MAGIC, 'bad magic string');
    var cipher = buf.readString();
    var kdf = buf.readString();
    if (cipher !== 'none' || kdf !== 'none') {
      throw (new Error('OpenSSH-format key is encrypted ' + '(password-protected). Please use the SSH agent ' + 'or decrypt the key.'));
    }
    buf.readString();
    var nkeys = buf.readInt();
    if (nkeys !== 1) {
      throw (new Error('OpenSSH-format key file contains ' + 'multiple keys: this is unsupported.'));
    }
    var pubKey = buf.readBuffer();
    if (type === 'public') {
      assert.ok(buf.atEnd(), 'excess bytes left after key');
      return (rfc4253.read(pubKey));
    }
    var privKeyBlob = buf.readBuffer();
    assert.ok(buf.atEnd(), 'excess bytes left after key');
    buf = new SSHBuffer({buffer: privKeyBlob});
    var checkInt1 = buf.readInt();
    var checkInt2 = buf.readInt();
    assert.strictEqual(checkInt1, checkInt2, 'checkints do not match');
    var ret = {};
    var key = rfc4253.readInternal(ret, 'private', buf.remainder());
    buf.skip(ret.consumed);
    var comment = buf.readString();
    key.comment = comment;
    return (key);
  }
  function write(key, options) {
    var pubKey;
    if (PrivateKey.isPrivateKey(key))
      pubKey = key.toPublic();
    else
      pubKey = key;
    var privBuf;
    if (PrivateKey.isPrivateKey(key)) {
      privBuf = new SSHBuffer({});
      var checkInt = crypto.randomBytes(4).readUInt32BE(0);
      privBuf.writeInt(checkInt);
      privBuf.writeInt(checkInt);
      privBuf.write(key.toBuffer('rfc4253'));
      privBuf.writeString(key.comment || '');
      var n = 1;
      while (privBuf._offset % 8 !== 0)
        privBuf.writeChar(n++);
    }
    var buf = new SSHBuffer({});
    buf.writeCString(MAGIC);
    buf.writeString('none');
    buf.writeString('none');
    buf.writeBuffer(new Buffer(0));
    buf.writeInt(1);
    buf.writeBuffer(pubKey.toBuffer('rfc4253'));
    if (privBuf)
      buf.writeBuffer(privBuf.toBuffer());
    buf = buf.toBuffer();
    var header;
    if (PrivateKey.isPrivateKey(key))
      header = 'OPENSSH PRIVATE KEY';
    else
      header = 'OPENSSH PUBLIC KEY';
    var tmp = buf.toString('base64');
    var len = tmp.length + (tmp.length / 70) + 18 + 16 + header.length * 2 + 10;
    buf = new Buffer(len);
    var o = 0;
    o += buf.write('-----BEGIN ' + header + '-----\n', o);
    for (var i = 0; i < tmp.length; ) {
      var limit = i + 70;
      if (limit > tmp.length)
        limit = tmp.length;
      o += buf.write(tmp.slice(i, limit), o);
      buf[o++] = 10;
      i = limit;
    }
    o += buf.write('-----END ' + header + '-----\n', o);
    return (buf.slice(0, o));
  }
  return module.exports;
});

$__System.registerDynamic("npm:jodid25519@1.0.2/lib/dh.js", ["npm:jodid25519@1.0.2/lib/core.js", "npm:jodid25519@1.0.2/lib/utils.js", "npm:jodid25519@1.0.2/lib/curve255.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  "use strict";
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var core = $__require('npm:jodid25519@1.0.2/lib/core.js');
  var utils = $__require('npm:jodid25519@1.0.2/lib/utils.js');
  var curve255 = $__require('npm:jodid25519@1.0.2/lib/curve255.js');
  var ns = {};
  function _toString(vector) {
    var u = new Uint16Array(vector);
    return (new Buffer(new Uint8Array(u.buffer)));
  }
  function _fromString(vector) {
    if (Buffer.isBuffer(vector)) {
      var u = new Uint8Array(vector);
      return (new Uint16Array(u.buffer));
    }
    var result = new Array(16);
    for (var i = 0,
        l = 0; i < vector.length; i += 2) {
      result[l] = (vector.charCodeAt(i + 1) << 8) | vector.charCodeAt(i);
      l++;
    }
    return result;
  }
  ns.computeKey = function(privateComponent, publicComponent) {
    if (publicComponent) {
      return _toString(curve255.curve25519(_fromString(privateComponent), _fromString(publicComponent)));
    } else {
      return _toString(curve255.curve25519(_fromString(privateComponent)));
    }
  };
  ns.publicKey = function(privateKey) {
    return _toString(curve255.curve25519(_fromString(privateKey)));
  };
  ns.generateKey = function() {
    return core.generateKey(true);
  };
  module.exports = ns;
  return module.exports;
});

$__System.registerDynamic("npm:jsbn@0.1.0/index.js", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  (function() {
    var dbits;
    var canary = 0xdeadbeefcafe;
    var j_lm = ((canary & 0xffffff) == 0xefcafe);
    function BigInteger(a, b, c) {
      if (a != null)
        if ("number" == typeof a)
          this.fromNumber(a, b, c);
        else if (b == null && "string" != typeof a)
          this.fromString(a, 256);
        else
          this.fromString(a, b);
    }
    function nbi() {
      return new BigInteger(null);
    }
    function am1(i, x, w, j, c, n) {
      while (--n >= 0) {
        var v = x * this[i++] + w[j] + c;
        c = Math.floor(v / 0x4000000);
        w[j++] = v & 0x3ffffff;
      }
      return c;
    }
    function am2(i, x, w, j, c, n) {
      var xl = x & 0x7fff,
          xh = x >> 15;
      while (--n >= 0) {
        var l = this[i] & 0x7fff;
        var h = this[i++] >> 15;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);
        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
        w[j++] = l & 0x3fffffff;
      }
      return c;
    }
    function am3(i, x, w, j, c, n) {
      var xl = x & 0x3fff,
          xh = x >> 14;
      while (--n >= 0) {
        var l = this[i] & 0x3fff;
        var h = this[i++] >> 14;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
        c = (l >> 28) + (m >> 14) + xh * h;
        w[j++] = l & 0xfffffff;
      }
      return c;
    }
    var inBrowser = typeof navigator !== "undefined";
    if (inBrowser && j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
      BigInteger.prototype.am = am2;
      dbits = 30;
    } else if (inBrowser && j_lm && (navigator.appName != "Netscape")) {
      BigInteger.prototype.am = am1;
      dbits = 26;
    } else {
      BigInteger.prototype.am = am3;
      dbits = 28;
    }
    BigInteger.prototype.DB = dbits;
    BigInteger.prototype.DM = ((1 << dbits) - 1);
    BigInteger.prototype.DV = (1 << dbits);
    var BI_FP = 52;
    BigInteger.prototype.FV = Math.pow(2, BI_FP);
    BigInteger.prototype.F1 = BI_FP - dbits;
    BigInteger.prototype.F2 = 2 * dbits - BI_FP;
    var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
    var BI_RC = new Array();
    var rr,
        vv;
    rr = "0".charCodeAt(0);
    for (vv = 0; vv <= 9; ++vv)
      BI_RC[rr++] = vv;
    rr = "a".charCodeAt(0);
    for (vv = 10; vv < 36; ++vv)
      BI_RC[rr++] = vv;
    rr = "A".charCodeAt(0);
    for (vv = 10; vv < 36; ++vv)
      BI_RC[rr++] = vv;
    function int2char(n) {
      return BI_RM.charAt(n);
    }
    function intAt(s, i) {
      var c = BI_RC[s.charCodeAt(i)];
      return (c == null) ? -1 : c;
    }
    function bnpCopyTo(r) {
      for (var i = this.t - 1; i >= 0; --i)
        r[i] = this[i];
      r.t = this.t;
      r.s = this.s;
    }
    function bnpFromInt(x) {
      this.t = 1;
      this.s = (x < 0) ? -1 : 0;
      if (x > 0)
        this[0] = x;
      else if (x < -1)
        this[0] = x + this.DV;
      else
        this.t = 0;
    }
    function nbv(i) {
      var r = nbi();
      r.fromInt(i);
      return r;
    }
    function bnpFromString(s, b) {
      var k;
      if (b == 16)
        k = 4;
      else if (b == 8)
        k = 3;
      else if (b == 256)
        k = 8;
      else if (b == 2)
        k = 1;
      else if (b == 32)
        k = 5;
      else if (b == 4)
        k = 2;
      else {
        this.fromRadix(s, b);
        return;
      }
      this.t = 0;
      this.s = 0;
      var i = s.length,
          mi = false,
          sh = 0;
      while (--i >= 0) {
        var x = (k == 8) ? s[i] & 0xff : intAt(s, i);
        if (x < 0) {
          if (s.charAt(i) == "-")
            mi = true;
          continue;
        }
        mi = false;
        if (sh == 0)
          this[this.t++] = x;
        else if (sh + k > this.DB) {
          this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;
          this[this.t++] = (x >> (this.DB - sh));
        } else
          this[this.t - 1] |= x << sh;
        sh += k;
        if (sh >= this.DB)
          sh -= this.DB;
      }
      if (k == 8 && (s[0] & 0x80) != 0) {
        this.s = -1;
        if (sh > 0)
          this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;
      }
      this.clamp();
      if (mi)
        BigInteger.ZERO.subTo(this, this);
    }
    function bnpClamp() {
      var c = this.s & this.DM;
      while (this.t > 0 && this[this.t - 1] == c)
        --this.t;
    }
    function bnToString(b) {
      if (this.s < 0)
        return "-" + this.negate().toString(b);
      var k;
      if (b == 16)
        k = 4;
      else if (b == 8)
        k = 3;
      else if (b == 2)
        k = 1;
      else if (b == 32)
        k = 5;
      else if (b == 4)
        k = 2;
      else
        return this.toRadix(b);
      var km = (1 << k) - 1,
          d,
          m = false,
          r = "",
          i = this.t;
      var p = this.DB - (i * this.DB) % k;
      if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) > 0) {
          m = true;
          r = int2char(d);
        }
        while (i >= 0) {
          if (p < k) {
            d = (this[i] & ((1 << p) - 1)) << (k - p);
            d |= this[--i] >> (p += this.DB - k);
          } else {
            d = (this[i] >> (p -= k)) & km;
            if (p <= 0) {
              p += this.DB;
              --i;
            }
          }
          if (d > 0)
            m = true;
          if (m)
            r += int2char(d);
        }
      }
      return m ? r : "0";
    }
    function bnNegate() {
      var r = nbi();
      BigInteger.ZERO.subTo(this, r);
      return r;
    }
    function bnAbs() {
      return (this.s < 0) ? this.negate() : this;
    }
    function bnCompareTo(a) {
      var r = this.s - a.s;
      if (r != 0)
        return r;
      var i = this.t;
      r = i - a.t;
      if (r != 0)
        return (this.s < 0) ? -r : r;
      while (--i >= 0)
        if ((r = this[i] - a[i]) != 0)
          return r;
      return 0;
    }
    function nbits(x) {
      var r = 1,
          t;
      if ((t = x >>> 16) != 0) {
        x = t;
        r += 16;
      }
      if ((t = x >> 8) != 0) {
        x = t;
        r += 8;
      }
      if ((t = x >> 4) != 0) {
        x = t;
        r += 4;
      }
      if ((t = x >> 2) != 0) {
        x = t;
        r += 2;
      }
      if ((t = x >> 1) != 0) {
        x = t;
        r += 1;
      }
      return r;
    }
    function bnBitLength() {
      if (this.t <= 0)
        return 0;
      return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));
    }
    function bnpDLShiftTo(n, r) {
      var i;
      for (i = this.t - 1; i >= 0; --i)
        r[i + n] = this[i];
      for (i = n - 1; i >= 0; --i)
        r[i] = 0;
      r.t = this.t + n;
      r.s = this.s;
    }
    function bnpDRShiftTo(n, r) {
      for (var i = n; i < this.t; ++i)
        r[i - n] = this[i];
      r.t = Math.max(this.t - n, 0);
      r.s = this.s;
    }
    function bnpLShiftTo(n, r) {
      var bs = n % this.DB;
      var cbs = this.DB - bs;
      var bm = (1 << cbs) - 1;
      var ds = Math.floor(n / this.DB),
          c = (this.s << bs) & this.DM,
          i;
      for (i = this.t - 1; i >= 0; --i) {
        r[i + ds + 1] = (this[i] >> cbs) | c;
        c = (this[i] & bm) << bs;
      }
      for (i = ds - 1; i >= 0; --i)
        r[i] = 0;
      r[ds] = c;
      r.t = this.t + ds + 1;
      r.s = this.s;
      r.clamp();
    }
    function bnpRShiftTo(n, r) {
      r.s = this.s;
      var ds = Math.floor(n / this.DB);
      if (ds >= this.t) {
        r.t = 0;
        return;
      }
      var bs = n % this.DB;
      var cbs = this.DB - bs;
      var bm = (1 << bs) - 1;
      r[0] = this[ds] >> bs;
      for (var i = ds + 1; i < this.t; ++i) {
        r[i - ds - 1] |= (this[i] & bm) << cbs;
        r[i - ds] = this[i] >> bs;
      }
      if (bs > 0)
        r[this.t - ds - 1] |= (this.s & bm) << cbs;
      r.t = this.t - ds;
      r.clamp();
    }
    function bnpSubTo(a, r) {
      var i = 0,
          c = 0,
          m = Math.min(a.t, this.t);
      while (i < m) {
        c += this[i] - a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }
      if (a.t < this.t) {
        c -= a.s;
        while (i < this.t) {
          c += this[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }
        c += this.s;
      } else {
        c += this.s;
        while (i < a.t) {
          c -= a[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }
        c -= a.s;
      }
      r.s = (c < 0) ? -1 : 0;
      if (c < -1)
        r[i++] = this.DV + c;
      else if (c > 0)
        r[i++] = c;
      r.t = i;
      r.clamp();
    }
    function bnpMultiplyTo(a, r) {
      var x = this.abs(),
          y = a.abs();
      var i = x.t;
      r.t = i + y.t;
      while (--i >= 0)
        r[i] = 0;
      for (i = 0; i < y.t; ++i)
        r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
      r.s = 0;
      r.clamp();
      if (this.s != a.s)
        BigInteger.ZERO.subTo(r, r);
    }
    function bnpSquareTo(r) {
      var x = this.abs();
      var i = r.t = 2 * x.t;
      while (--i >= 0)
        r[i] = 0;
      for (i = 0; i < x.t - 1; ++i) {
        var c = x.am(i, x[i], r, 2 * i, 0, 1);
        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
          r[i + x.t] -= x.DV;
          r[i + x.t + 1] = 1;
        }
      }
      if (r.t > 0)
        r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
      r.s = 0;
      r.clamp();
    }
    function bnpDivRemTo(m, q, r) {
      var pm = m.abs();
      if (pm.t <= 0)
        return;
      var pt = this.abs();
      if (pt.t < pm.t) {
        if (q != null)
          q.fromInt(0);
        if (r != null)
          this.copyTo(r);
        return;
      }
      if (r == null)
        r = nbi();
      var y = nbi(),
          ts = this.s,
          ms = m.s;
      var nsh = this.DB - nbits(pm[pm.t - 1]);
      if (nsh > 0) {
        pm.lShiftTo(nsh, y);
        pt.lShiftTo(nsh, r);
      } else {
        pm.copyTo(y);
        pt.copyTo(r);
      }
      var ys = y.t;
      var y0 = y[ys - 1];
      if (y0 == 0)
        return;
      var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);
      var d1 = this.FV / yt,
          d2 = (1 << this.F1) / yt,
          e = 1 << this.F2;
      var i = r.t,
          j = i - ys,
          t = (q == null) ? nbi() : q;
      y.dlShiftTo(j, t);
      if (r.compareTo(t) >= 0) {
        r[r.t++] = 1;
        r.subTo(t, r);
      }
      BigInteger.ONE.dlShiftTo(ys, t);
      t.subTo(y, y);
      while (y.t < ys)
        y[y.t++] = 0;
      while (--j >= 0) {
        var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
          y.dlShiftTo(j, t);
          r.subTo(t, r);
          while (r[i] < --qd)
            r.subTo(t, r);
        }
      }
      if (q != null) {
        r.drShiftTo(ys, q);
        if (ts != ms)
          BigInteger.ZERO.subTo(q, q);
      }
      r.t = ys;
      r.clamp();
      if (nsh > 0)
        r.rShiftTo(nsh, r);
      if (ts < 0)
        BigInteger.ZERO.subTo(r, r);
    }
    function bnMod(a) {
      var r = nbi();
      this.abs().divRemTo(a, null, r);
      if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
        a.subTo(r, r);
      return r;
    }
    function Classic(m) {
      this.m = m;
    }
    function cConvert(x) {
      if (x.s < 0 || x.compareTo(this.m) >= 0)
        return x.mod(this.m);
      else
        return x;
    }
    function cRevert(x) {
      return x;
    }
    function cReduce(x) {
      x.divRemTo(this.m, null, x);
    }
    function cMulTo(x, y, r) {
      x.multiplyTo(y, r);
      this.reduce(r);
    }
    function cSqrTo(x, r) {
      x.squareTo(r);
      this.reduce(r);
    }
    Classic.prototype.convert = cConvert;
    Classic.prototype.revert = cRevert;
    Classic.prototype.reduce = cReduce;
    Classic.prototype.mulTo = cMulTo;
    Classic.prototype.sqrTo = cSqrTo;
    function bnpInvDigit() {
      if (this.t < 1)
        return 0;
      var x = this[0];
      if ((x & 1) == 0)
        return 0;
      var y = x & 3;
      y = (y * (2 - (x & 0xf) * y)) & 0xf;
      y = (y * (2 - (x & 0xff) * y)) & 0xff;
      y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff;
      y = (y * (2 - x * y % this.DV)) % this.DV;
      return (y > 0) ? this.DV - y : -y;
    }
    function Montgomery(m) {
      this.m = m;
      this.mp = m.invDigit();
      this.mpl = this.mp & 0x7fff;
      this.mph = this.mp >> 15;
      this.um = (1 << (m.DB - 15)) - 1;
      this.mt2 = 2 * m.t;
    }
    function montConvert(x) {
      var r = nbi();
      x.abs().dlShiftTo(this.m.t, r);
      r.divRemTo(this.m, null, r);
      if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
        this.m.subTo(r, r);
      return r;
    }
    function montRevert(x) {
      var r = nbi();
      x.copyTo(r);
      this.reduce(r);
      return r;
    }
    function montReduce(x) {
      while (x.t <= this.mt2)
        x[x.t++] = 0;
      for (var i = 0; i < this.m.t; ++i) {
        var j = x[i] & 0x7fff;
        var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;
        j = i + this.m.t;
        x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
        while (x[j] >= x.DV) {
          x[j] -= x.DV;
          x[++j]++;
        }
      }
      x.clamp();
      x.drShiftTo(this.m.t, x);
      if (x.compareTo(this.m) >= 0)
        x.subTo(this.m, x);
    }
    function montSqrTo(x, r) {
      x.squareTo(r);
      this.reduce(r);
    }
    function montMulTo(x, y, r) {
      x.multiplyTo(y, r);
      this.reduce(r);
    }
    Montgomery.prototype.convert = montConvert;
    Montgomery.prototype.revert = montRevert;
    Montgomery.prototype.reduce = montReduce;
    Montgomery.prototype.mulTo = montMulTo;
    Montgomery.prototype.sqrTo = montSqrTo;
    function bnpIsEven() {
      return ((this.t > 0) ? (this[0] & 1) : this.s) == 0;
    }
    function bnpExp(e, z) {
      if (e > 0xffffffff || e < 1)
        return BigInteger.ONE;
      var r = nbi(),
          r2 = nbi(),
          g = z.convert(this),
          i = nbits(e) - 1;
      g.copyTo(r);
      while (--i >= 0) {
        z.sqrTo(r, r2);
        if ((e & (1 << i)) > 0)
          z.mulTo(r2, g, r);
        else {
          var t = r;
          r = r2;
          r2 = t;
        }
      }
      return z.revert(r);
    }
    function bnModPowInt(e, m) {
      var z;
      if (e < 256 || m.isEven())
        z = new Classic(m);
      else
        z = new Montgomery(m);
      return this.exp(e, z);
    }
    BigInteger.prototype.copyTo = bnpCopyTo;
    BigInteger.prototype.fromInt = bnpFromInt;
    BigInteger.prototype.fromString = bnpFromString;
    BigInteger.prototype.clamp = bnpClamp;
    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
    BigInteger.prototype.drShiftTo = bnpDRShiftTo;
    BigInteger.prototype.lShiftTo = bnpLShiftTo;
    BigInteger.prototype.rShiftTo = bnpRShiftTo;
    BigInteger.prototype.subTo = bnpSubTo;
    BigInteger.prototype.multiplyTo = bnpMultiplyTo;
    BigInteger.prototype.squareTo = bnpSquareTo;
    BigInteger.prototype.divRemTo = bnpDivRemTo;
    BigInteger.prototype.invDigit = bnpInvDigit;
    BigInteger.prototype.isEven = bnpIsEven;
    BigInteger.prototype.exp = bnpExp;
    BigInteger.prototype.toString = bnToString;
    BigInteger.prototype.negate = bnNegate;
    BigInteger.prototype.abs = bnAbs;
    BigInteger.prototype.compareTo = bnCompareTo;
    BigInteger.prototype.bitLength = bnBitLength;
    BigInteger.prototype.mod = bnMod;
    BigInteger.prototype.modPowInt = bnModPowInt;
    BigInteger.ZERO = nbv(0);
    BigInteger.ONE = nbv(1);
    function bnClone() {
      var r = nbi();
      this.copyTo(r);
      return r;
    }
    function bnIntValue() {
      if (this.s < 0) {
        if (this.t == 1)
          return this[0] - this.DV;
        else if (this.t == 0)
          return -1;
      } else if (this.t == 1)
        return this[0];
      else if (this.t == 0)
        return 0;
      return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];
    }
    function bnByteValue() {
      return (this.t == 0) ? this.s : (this[0] << 24) >> 24;
    }
    function bnShortValue() {
      return (this.t == 0) ? this.s : (this[0] << 16) >> 16;
    }
    function bnpChunkSize(r) {
      return Math.floor(Math.LN2 * this.DB / Math.log(r));
    }
    function bnSigNum() {
      if (this.s < 0)
        return -1;
      else if (this.t <= 0 || (this.t == 1 && this[0] <= 0))
        return 0;
      else
        return 1;
    }
    function bnpToRadix(b) {
      if (b == null)
        b = 10;
      if (this.signum() == 0 || b < 2 || b > 36)
        return "0";
      var cs = this.chunkSize(b);
      var a = Math.pow(b, cs);
      var d = nbv(a),
          y = nbi(),
          z = nbi(),
          r = "";
      this.divRemTo(d, y, z);
      while (y.signum() > 0) {
        r = (a + z.intValue()).toString(b).substr(1) + r;
        y.divRemTo(d, y, z);
      }
      return z.intValue().toString(b) + r;
    }
    function bnpFromRadix(s, b) {
      this.fromInt(0);
      if (b == null)
        b = 10;
      var cs = this.chunkSize(b);
      var d = Math.pow(b, cs),
          mi = false,
          j = 0,
          w = 0;
      for (var i = 0; i < s.length; ++i) {
        var x = intAt(s, i);
        if (x < 0) {
          if (s.charAt(i) == "-" && this.signum() == 0)
            mi = true;
          continue;
        }
        w = b * w + x;
        if (++j >= cs) {
          this.dMultiply(d);
          this.dAddOffset(w, 0);
          j = 0;
          w = 0;
        }
      }
      if (j > 0) {
        this.dMultiply(Math.pow(b, j));
        this.dAddOffset(w, 0);
      }
      if (mi)
        BigInteger.ZERO.subTo(this, this);
    }
    function bnpFromNumber(a, b, c) {
      if ("number" == typeof b) {
        if (a < 2)
          this.fromInt(1);
        else {
          this.fromNumber(a, c);
          if (!this.testBit(a - 1))
            this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);
          if (this.isEven())
            this.dAddOffset(1, 0);
          while (!this.isProbablePrime(b)) {
            this.dAddOffset(2, 0);
            if (this.bitLength() > a)
              this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);
          }
        }
      } else {
        var x = new Array(),
            t = a & 7;
        x.length = (a >> 3) + 1;
        b.nextBytes(x);
        if (t > 0)
          x[0] &= ((1 << t) - 1);
        else
          x[0] = 0;
        this.fromString(x, 256);
      }
    }
    function bnToByteArray() {
      var i = this.t,
          r = new Array();
      r[0] = this.s;
      var p = this.DB - (i * this.DB) % 8,
          d,
          k = 0;
      if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p)
          r[k++] = d | (this.s << (this.DB - p));
        while (i >= 0) {
          if (p < 8) {
            d = (this[i] & ((1 << p) - 1)) << (8 - p);
            d |= this[--i] >> (p += this.DB - 8);
          } else {
            d = (this[i] >> (p -= 8)) & 0xff;
            if (p <= 0) {
              p += this.DB;
              --i;
            }
          }
          if ((d & 0x80) != 0)
            d |= -256;
          if (k == 0 && (this.s & 0x80) != (d & 0x80))
            ++k;
          if (k > 0 || d != this.s)
            r[k++] = d;
        }
      }
      return r;
    }
    function bnEquals(a) {
      return (this.compareTo(a) == 0);
    }
    function bnMin(a) {
      return (this.compareTo(a) < 0) ? this : a;
    }
    function bnMax(a) {
      return (this.compareTo(a) > 0) ? this : a;
    }
    function bnpBitwiseTo(a, op, r) {
      var i,
          f,
          m = Math.min(a.t, this.t);
      for (i = 0; i < m; ++i)
        r[i] = op(this[i], a[i]);
      if (a.t < this.t) {
        f = a.s & this.DM;
        for (i = m; i < this.t; ++i)
          r[i] = op(this[i], f);
        r.t = this.t;
      } else {
        f = this.s & this.DM;
        for (i = m; i < a.t; ++i)
          r[i] = op(f, a[i]);
        r.t = a.t;
      }
      r.s = op(this.s, a.s);
      r.clamp();
    }
    function op_and(x, y) {
      return x & y;
    }
    function bnAnd(a) {
      var r = nbi();
      this.bitwiseTo(a, op_and, r);
      return r;
    }
    function op_or(x, y) {
      return x | y;
    }
    function bnOr(a) {
      var r = nbi();
      this.bitwiseTo(a, op_or, r);
      return r;
    }
    function op_xor(x, y) {
      return x ^ y;
    }
    function bnXor(a) {
      var r = nbi();
      this.bitwiseTo(a, op_xor, r);
      return r;
    }
    function op_andnot(x, y) {
      return x & ~y;
    }
    function bnAndNot(a) {
      var r = nbi();
      this.bitwiseTo(a, op_andnot, r);
      return r;
    }
    function bnNot() {
      var r = nbi();
      for (var i = 0; i < this.t; ++i)
        r[i] = this.DM & ~this[i];
      r.t = this.t;
      r.s = ~this.s;
      return r;
    }
    function bnShiftLeft(n) {
      var r = nbi();
      if (n < 0)
        this.rShiftTo(-n, r);
      else
        this.lShiftTo(n, r);
      return r;
    }
    function bnShiftRight(n) {
      var r = nbi();
      if (n < 0)
        this.lShiftTo(-n, r);
      else
        this.rShiftTo(n, r);
      return r;
    }
    function lbit(x) {
      if (x == 0)
        return -1;
      var r = 0;
      if ((x & 0xffff) == 0) {
        x >>= 16;
        r += 16;
      }
      if ((x & 0xff) == 0) {
        x >>= 8;
        r += 8;
      }
      if ((x & 0xf) == 0) {
        x >>= 4;
        r += 4;
      }
      if ((x & 3) == 0) {
        x >>= 2;
        r += 2;
      }
      if ((x & 1) == 0)
        ++r;
      return r;
    }
    function bnGetLowestSetBit() {
      for (var i = 0; i < this.t; ++i)
        if (this[i] != 0)
          return i * this.DB + lbit(this[i]);
      if (this.s < 0)
        return this.t * this.DB;
      return -1;
    }
    function cbit(x) {
      var r = 0;
      while (x != 0) {
        x &= x - 1;
        ++r;
      }
      return r;
    }
    function bnBitCount() {
      var r = 0,
          x = this.s & this.DM;
      for (var i = 0; i < this.t; ++i)
        r += cbit(this[i] ^ x);
      return r;
    }
    function bnTestBit(n) {
      var j = Math.floor(n / this.DB);
      if (j >= this.t)
        return (this.s != 0);
      return ((this[j] & (1 << (n % this.DB))) != 0);
    }
    function bnpChangeBit(n, op) {
      var r = BigInteger.ONE.shiftLeft(n);
      this.bitwiseTo(r, op, r);
      return r;
    }
    function bnSetBit(n) {
      return this.changeBit(n, op_or);
    }
    function bnClearBit(n) {
      return this.changeBit(n, op_andnot);
    }
    function bnFlipBit(n) {
      return this.changeBit(n, op_xor);
    }
    function bnpAddTo(a, r) {
      var i = 0,
          c = 0,
          m = Math.min(a.t, this.t);
      while (i < m) {
        c += this[i] + a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }
      if (a.t < this.t) {
        c += a.s;
        while (i < this.t) {
          c += this[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }
        c += this.s;
      } else {
        c += this.s;
        while (i < a.t) {
          c += a[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }
        c += a.s;
      }
      r.s = (c < 0) ? -1 : 0;
      if (c > 0)
        r[i++] = c;
      else if (c < -1)
        r[i++] = this.DV + c;
      r.t = i;
      r.clamp();
    }
    function bnAdd(a) {
      var r = nbi();
      this.addTo(a, r);
      return r;
    }
    function bnSubtract(a) {
      var r = nbi();
      this.subTo(a, r);
      return r;
    }
    function bnMultiply(a) {
      var r = nbi();
      this.multiplyTo(a, r);
      return r;
    }
    function bnSquare() {
      var r = nbi();
      this.squareTo(r);
      return r;
    }
    function bnDivide(a) {
      var r = nbi();
      this.divRemTo(a, r, null);
      return r;
    }
    function bnRemainder(a) {
      var r = nbi();
      this.divRemTo(a, null, r);
      return r;
    }
    function bnDivideAndRemainder(a) {
      var q = nbi(),
          r = nbi();
      this.divRemTo(a, q, r);
      return new Array(q, r);
    }
    function bnpDMultiply(n) {
      this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
      ++this.t;
      this.clamp();
    }
    function bnpDAddOffset(n, w) {
      if (n == 0)
        return;
      while (this.t <= w)
        this[this.t++] = 0;
      this[w] += n;
      while (this[w] >= this.DV) {
        this[w] -= this.DV;
        if (++w >= this.t)
          this[this.t++] = 0;
        ++this[w];
      }
    }
    function NullExp() {}
    function nNop(x) {
      return x;
    }
    function nMulTo(x, y, r) {
      x.multiplyTo(y, r);
    }
    function nSqrTo(x, r) {
      x.squareTo(r);
    }
    NullExp.prototype.convert = nNop;
    NullExp.prototype.revert = nNop;
    NullExp.prototype.mulTo = nMulTo;
    NullExp.prototype.sqrTo = nSqrTo;
    function bnPow(e) {
      return this.exp(e, new NullExp());
    }
    function bnpMultiplyLowerTo(a, n, r) {
      var i = Math.min(this.t + a.t, n);
      r.s = 0;
      r.t = i;
      while (i > 0)
        r[--i] = 0;
      var j;
      for (j = r.t - this.t; i < j; ++i)
        r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);
      for (j = Math.min(a.t, n); i < j; ++i)
        this.am(0, a[i], r, i, 0, n - i);
      r.clamp();
    }
    function bnpMultiplyUpperTo(a, n, r) {
      --n;
      var i = r.t = this.t + a.t - n;
      r.s = 0;
      while (--i >= 0)
        r[i] = 0;
      for (i = Math.max(n - this.t, 0); i < a.t; ++i)
        r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);
      r.clamp();
      r.drShiftTo(1, r);
    }
    function Barrett(m) {
      this.r2 = nbi();
      this.q3 = nbi();
      BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
      this.mu = this.r2.divide(m);
      this.m = m;
    }
    function barrettConvert(x) {
      if (x.s < 0 || x.t > 2 * this.m.t)
        return x.mod(this.m);
      else if (x.compareTo(this.m) < 0)
        return x;
      else {
        var r = nbi();
        x.copyTo(r);
        this.reduce(r);
        return r;
      }
    }
    function barrettRevert(x) {
      return x;
    }
    function barrettReduce(x) {
      x.drShiftTo(this.m.t - 1, this.r2);
      if (x.t > this.m.t + 1) {
        x.t = this.m.t + 1;
        x.clamp();
      }
      this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
      this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
      while (x.compareTo(this.r2) < 0)
        x.dAddOffset(1, this.m.t + 1);
      x.subTo(this.r2, x);
      while (x.compareTo(this.m) >= 0)
        x.subTo(this.m, x);
    }
    function barrettSqrTo(x, r) {
      x.squareTo(r);
      this.reduce(r);
    }
    function barrettMulTo(x, y, r) {
      x.multiplyTo(y, r);
      this.reduce(r);
    }
    Barrett.prototype.convert = barrettConvert;
    Barrett.prototype.revert = barrettRevert;
    Barrett.prototype.reduce = barrettReduce;
    Barrett.prototype.mulTo = barrettMulTo;
    Barrett.prototype.sqrTo = barrettSqrTo;
    function bnModPow(e, m) {
      var i = e.bitLength(),
          k,
          r = nbv(1),
          z;
      if (i <= 0)
        return r;
      else if (i < 18)
        k = 1;
      else if (i < 48)
        k = 3;
      else if (i < 144)
        k = 4;
      else if (i < 768)
        k = 5;
      else
        k = 6;
      if (i < 8)
        z = new Classic(m);
      else if (m.isEven())
        z = new Barrett(m);
      else
        z = new Montgomery(m);
      var g = new Array(),
          n = 3,
          k1 = k - 1,
          km = (1 << k) - 1;
      g[1] = z.convert(this);
      if (k > 1) {
        var g2 = nbi();
        z.sqrTo(g[1], g2);
        while (n <= km) {
          g[n] = nbi();
          z.mulTo(g2, g[n - 2], g[n]);
          n += 2;
        }
      }
      var j = e.t - 1,
          w,
          is1 = true,
          r2 = nbi(),
          t;
      i = nbits(e[j]) - 1;
      while (j >= 0) {
        if (i >= k1)
          w = (e[j] >> (i - k1)) & km;
        else {
          w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);
          if (j > 0)
            w |= e[j - 1] >> (this.DB + i - k1);
        }
        n = k;
        while ((w & 1) == 0) {
          w >>= 1;
          --n;
        }
        if ((i -= n) < 0) {
          i += this.DB;
          --j;
        }
        if (is1) {
          g[w].copyTo(r);
          is1 = false;
        } else {
          while (n > 1) {
            z.sqrTo(r, r2);
            z.sqrTo(r2, r);
            n -= 2;
          }
          if (n > 0)
            z.sqrTo(r, r2);
          else {
            t = r;
            r = r2;
            r2 = t;
          }
          z.mulTo(r2, g[w], r);
        }
        while (j >= 0 && (e[j] & (1 << i)) == 0) {
          z.sqrTo(r, r2);
          t = r;
          r = r2;
          r2 = t;
          if (--i < 0) {
            i = this.DB - 1;
            --j;
          }
        }
      }
      return z.revert(r);
    }
    function bnGCD(a) {
      var x = (this.s < 0) ? this.negate() : this.clone();
      var y = (a.s < 0) ? a.negate() : a.clone();
      if (x.compareTo(y) < 0) {
        var t = x;
        x = y;
        y = t;
      }
      var i = x.getLowestSetBit(),
          g = y.getLowestSetBit();
      if (g < 0)
        return x;
      if (i < g)
        g = i;
      if (g > 0) {
        x.rShiftTo(g, x);
        y.rShiftTo(g, y);
      }
      while (x.signum() > 0) {
        if ((i = x.getLowestSetBit()) > 0)
          x.rShiftTo(i, x);
        if ((i = y.getLowestSetBit()) > 0)
          y.rShiftTo(i, y);
        if (x.compareTo(y) >= 0) {
          x.subTo(y, x);
          x.rShiftTo(1, x);
        } else {
          y.subTo(x, y);
          y.rShiftTo(1, y);
        }
      }
      if (g > 0)
        y.lShiftTo(g, y);
      return y;
    }
    function bnpModInt(n) {
      if (n <= 0)
        return 0;
      var d = this.DV % n,
          r = (this.s < 0) ? n - 1 : 0;
      if (this.t > 0)
        if (d == 0)
          r = this[0] % n;
        else
          for (var i = this.t - 1; i >= 0; --i)
            r = (d * r + this[i]) % n;
      return r;
    }
    function bnModInverse(m) {
      var ac = m.isEven();
      if ((this.isEven() && ac) || m.signum() == 0)
        return BigInteger.ZERO;
      var u = m.clone(),
          v = this.clone();
      var a = nbv(1),
          b = nbv(0),
          c = nbv(0),
          d = nbv(1);
      while (u.signum() != 0) {
        while (u.isEven()) {
          u.rShiftTo(1, u);
          if (ac) {
            if (!a.isEven() || !b.isEven()) {
              a.addTo(this, a);
              b.subTo(m, b);
            }
            a.rShiftTo(1, a);
          } else if (!b.isEven())
            b.subTo(m, b);
          b.rShiftTo(1, b);
        }
        while (v.isEven()) {
          v.rShiftTo(1, v);
          if (ac) {
            if (!c.isEven() || !d.isEven()) {
              c.addTo(this, c);
              d.subTo(m, d);
            }
            c.rShiftTo(1, c);
          } else if (!d.isEven())
            d.subTo(m, d);
          d.rShiftTo(1, d);
        }
        if (u.compareTo(v) >= 0) {
          u.subTo(v, u);
          if (ac)
            a.subTo(c, a);
          b.subTo(d, b);
        } else {
          v.subTo(u, v);
          if (ac)
            c.subTo(a, c);
          d.subTo(b, d);
        }
      }
      if (v.compareTo(BigInteger.ONE) != 0)
        return BigInteger.ZERO;
      if (d.compareTo(m) >= 0)
        return d.subtract(m);
      if (d.signum() < 0)
        d.addTo(m, d);
      else
        return d;
      if (d.signum() < 0)
        return d.add(m);
      else
        return d;
    }
    var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];
    var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];
    function bnIsProbablePrime(t) {
      var i,
          x = this.abs();
      if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
        for (i = 0; i < lowprimes.length; ++i)
          if (x[0] == lowprimes[i])
            return true;
        return false;
      }
      if (x.isEven())
        return false;
      i = 1;
      while (i < lowprimes.length) {
        var m = lowprimes[i],
            j = i + 1;
        while (j < lowprimes.length && m < lplim)
          m *= lowprimes[j++];
        m = x.modInt(m);
        while (i < j)
          if (m % lowprimes[i++] == 0)
            return false;
      }
      return x.millerRabin(t);
    }
    function bnpMillerRabin(t) {
      var n1 = this.subtract(BigInteger.ONE);
      var k = n1.getLowestSetBit();
      if (k <= 0)
        return false;
      var r = n1.shiftRight(k);
      t = (t + 1) >> 1;
      if (t > lowprimes.length)
        t = lowprimes.length;
      var a = nbi();
      for (var i = 0; i < t; ++i) {
        a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);
        var y = a.modPow(r, this);
        if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
          var j = 1;
          while (j++ < k && y.compareTo(n1) != 0) {
            y = y.modPowInt(2, this);
            if (y.compareTo(BigInteger.ONE) == 0)
              return false;
          }
          if (y.compareTo(n1) != 0)
            return false;
        }
      }
      return true;
    }
    BigInteger.prototype.chunkSize = bnpChunkSize;
    BigInteger.prototype.toRadix = bnpToRadix;
    BigInteger.prototype.fromRadix = bnpFromRadix;
    BigInteger.prototype.fromNumber = bnpFromNumber;
    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
    BigInteger.prototype.changeBit = bnpChangeBit;
    BigInteger.prototype.addTo = bnpAddTo;
    BigInteger.prototype.dMultiply = bnpDMultiply;
    BigInteger.prototype.dAddOffset = bnpDAddOffset;
    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
    BigInteger.prototype.modInt = bnpModInt;
    BigInteger.prototype.millerRabin = bnpMillerRabin;
    BigInteger.prototype.clone = bnClone;
    BigInteger.prototype.intValue = bnIntValue;
    BigInteger.prototype.byteValue = bnByteValue;
    BigInteger.prototype.shortValue = bnShortValue;
    BigInteger.prototype.signum = bnSigNum;
    BigInteger.prototype.toByteArray = bnToByteArray;
    BigInteger.prototype.equals = bnEquals;
    BigInteger.prototype.min = bnMin;
    BigInteger.prototype.max = bnMax;
    BigInteger.prototype.and = bnAnd;
    BigInteger.prototype.or = bnOr;
    BigInteger.prototype.xor = bnXor;
    BigInteger.prototype.andNot = bnAndNot;
    BigInteger.prototype.not = bnNot;
    BigInteger.prototype.shiftLeft = bnShiftLeft;
    BigInteger.prototype.shiftRight = bnShiftRight;
    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
    BigInteger.prototype.bitCount = bnBitCount;
    BigInteger.prototype.testBit = bnTestBit;
    BigInteger.prototype.setBit = bnSetBit;
    BigInteger.prototype.clearBit = bnClearBit;
    BigInteger.prototype.flipBit = bnFlipBit;
    BigInteger.prototype.add = bnAdd;
    BigInteger.prototype.subtract = bnSubtract;
    BigInteger.prototype.multiply = bnMultiply;
    BigInteger.prototype.divide = bnDivide;
    BigInteger.prototype.remainder = bnRemainder;
    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
    BigInteger.prototype.modPow = bnModPow;
    BigInteger.prototype.modInverse = bnModInverse;
    BigInteger.prototype.pow = bnPow;
    BigInteger.prototype.gcd = bnGCD;
    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;
    BigInteger.prototype.square = bnSquare;
    BigInteger.prototype.Barrett = Barrett;
    var rng_state;
    var rng_pool;
    var rng_pptr;
    function rng_seed_int(x) {
      rng_pool[rng_pptr++] ^= x & 255;
      rng_pool[rng_pptr++] ^= (x >> 8) & 255;
      rng_pool[rng_pptr++] ^= (x >> 16) & 255;
      rng_pool[rng_pptr++] ^= (x >> 24) & 255;
      if (rng_pptr >= rng_psize)
        rng_pptr -= rng_psize;
    }
    function rng_seed_time() {
      rng_seed_int(new Date().getTime());
    }
    if (rng_pool == null) {
      rng_pool = new Array();
      rng_pptr = 0;
      var t;
      if (typeof window !== "undefined" && window.crypto) {
        if (window.crypto.getRandomValues) {
          var ua = new Uint8Array(32);
          window.crypto.getRandomValues(ua);
          for (t = 0; t < 32; ++t)
            rng_pool[rng_pptr++] = ua[t];
        } else if (navigator.appName == "Netscape" && navigator.appVersion < "5") {
          var z = window.crypto.random(32);
          for (t = 0; t < z.length; ++t)
            rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
        }
      }
      while (rng_pptr < rng_psize) {
        t = Math.floor(65536 * Math.random());
        rng_pool[rng_pptr++] = t >>> 8;
        rng_pool[rng_pptr++] = t & 255;
      }
      rng_pptr = 0;
      rng_seed_time();
    }
    function rng_get_byte() {
      if (rng_state == null) {
        rng_seed_time();
        rng_state = prng_newstate();
        rng_state.init(rng_pool);
        for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)
          rng_pool[rng_pptr] = 0;
        rng_pptr = 0;
      }
      return rng_state.next();
    }
    function rng_get_bytes(ba) {
      var i;
      for (i = 0; i < ba.length; ++i)
        ba[i] = rng_get_byte();
    }
    function SecureRandom() {}
    SecureRandom.prototype.nextBytes = rng_get_bytes;
    function Arcfour() {
      this.i = 0;
      this.j = 0;
      this.S = new Array();
    }
    function ARC4init(key) {
      var i,
          j,
          t;
      for (i = 0; i < 256; ++i)
        this.S[i] = i;
      j = 0;
      for (i = 0; i < 256; ++i) {
        j = (j + this.S[i] + key[i % key.length]) & 255;
        t = this.S[i];
        this.S[i] = this.S[j];
        this.S[j] = t;
      }
      this.i = 0;
      this.j = 0;
    }
    function ARC4next() {
      var t;
      this.i = (this.i + 1) & 255;
      this.j = (this.j + this.S[this.i]) & 255;
      t = this.S[this.i];
      this.S[this.i] = this.S[this.j];
      this.S[this.j] = t;
      return this.S[(t + this.S[this.i]) & 255];
    }
    Arcfour.prototype.init = ARC4init;
    Arcfour.prototype.next = ARC4next;
    function prng_newstate() {
      return new Arcfour();
    }
    var rng_psize = 256;
    if (typeof exports !== 'undefined') {
      exports = module.exports = {
        BigInteger: BigInteger,
        SecureRandom: SecureRandom
      };
    } else {
      this.BigInteger = BigInteger;
      this.SecureRandom = SecureRandom;
    }
  }).call(this);
  return module.exports;
});

$__System.registerDynamic("npm:jodid25519@1.0.2/lib/eddsa.js", ["npm:jodid25519@1.0.2/lib/core.js", "npm:jodid25519@1.0.2/lib/curve255.js", "npm:jodid25519@1.0.2/lib/utils.js", "npm:jsbn@0.1.0/index.js", "@node/crypto", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  "use strict";
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var core = $__require('npm:jodid25519@1.0.2/lib/core.js');
  var curve255 = $__require('npm:jodid25519@1.0.2/lib/curve255.js');
  var utils = $__require('npm:jodid25519@1.0.2/lib/utils.js');
  var BigInteger = $__require('npm:jsbn@0.1.0/index.js').BigInteger;
  var crypto = $__require('@node/crypto');
  var ns = {};
  function _bi255(value) {
    if (!(this instanceof _bi255)) {
      return new _bi255(value);
    }
    if (typeof value === 'undefined') {
      return _ZERO;
    }
    var c = value.constructor;
    if ((c === Array || c === Uint16Array || c === Uint32Array) && (value.length === 16)) {
      this.n = value;
    } else if ((c === Array) && (value.length === 32)) {
      this.n = _bytes2bi255(value).n;
    } else if (c === String) {
      this.n = utils.hexDecode(value);
    } else if (c === Number) {
      this.n = [value & 0xffff, value >> 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    } else if (value instanceof _bi255) {
      this.n = value.n.slice(0);
    } else {
      throw "Bad argument for bignum: " + value;
    }
  }
  _bi255.prototype = {
    'toString': function() {
      return utils.hexEncode(this.n);
    },
    'toSource': function() {
      return '_' + utils.hexEncode(this.n);
    },
    'plus': function(n1) {
      return _bi255(core.bigintadd(this.n, n1.n));
    },
    'minus': function(n1) {
      return _bi255(core.bigintsub(this.n, n1.n)).modq();
    },
    'times': function(n1) {
      return _bi255(core.mulmodp(this.n, n1.n));
    },
    'divide': function(n1) {
      return this.times(n1.inv());
    },
    'sqr': function() {
      return _bi255(core.sqrmodp(this.n));
    },
    'cmp': function(n1) {
      return core.bigintcmp(this.n, n1.n);
    },
    'equals': function(n1) {
      return this.cmp(n1) === 0;
    },
    'isOdd': function() {
      return (this.n[0] & 1) === 1;
    },
    'shiftLeft': function(cnt) {
      _shiftL(this.n, cnt);
      return this;
    },
    'shiftRight': function(cnt) {
      _shiftR(this.n, cnt);
      return this;
    },
    'inv': function() {
      return _bi255(core.invmodp(this.n));
    },
    'pow': function(e) {
      return _bi255(_pow(this.n, e.n));
    },
    'modq': function() {
      return _modq(this);
    },
    'bytes': function() {
      return _bi255_bytes(this);
    }
  };
  function _shiftL(n, cnt) {
    var lastcarry = 0;
    for (var i = 0; i < 16; i++) {
      var carry = n[i] >> (16 - cnt);
      n[i] = (n[i] << cnt) & 0xffff | lastcarry;
      lastcarry = carry;
    }
    return n;
  }
  function _shiftR(n, cnt) {
    var lastcarry = 0;
    for (var i = 15; i >= 0; i--) {
      var carry = n[i] << (16 - cnt) & 0xffff;
      n[i] = (n[i] >> cnt) | lastcarry;
      lastcarry = carry;
    }
    return n;
  }
  function _bi255_bytes(n) {
    n = _bi255(n);
    var a = new Array(32);
    for (var i = 31; i >= 0; i--) {
      a[i] = n.n[0] & 0xff;
      n.shiftRight(8);
    }
    return a;
  }
  function _bytes2bi255(a) {
    var n = _ZERO;
    for (var i = 0; i < 32; i++) {
      n.shiftLeft(8);
      n = n.plus(_bi255(a[i]));
    }
    return n;
  }
  function _pow(n, e) {
    var result = core.ONE();
    for (var i = 0; i < 256; i++) {
      if (core.getbit(e, i) === 1) {
        result = core.mulmodp(result, n);
      }
      n = core.sqrmodp(n);
    }
    return result;
  }
  var _ZERO = _bi255(0);
  var _ONE = _bi255(1);
  var _TWO = _bi255(2);
  var _Q = _bi255([0xffff - 18, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x7fff]);
  function _modq(n) {
    core.reduce(n.n);
    if (n.cmp(_Q) >= 0) {
      return _modq(n.minus(_Q));
    }
    if (n.cmp(_ZERO) === -1) {
      return _modq(n.plus(_Q));
    } else {
      return n;
    }
  }
  var _RECOVERY_EXPONENT = _bi255('0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe');
  var _D = _bi255('52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3');
  var _I = _bi255('2b8324804fc1df0b2b4d00993dfbd7a72f431806ad2fe478c4ee1b274a0ea0b0');
  var _L = _bi255('1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed');
  var _L_BI = _bi('1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed', 16);
  function _isoncurve(p) {
    var x = p[0];
    var y = p[1];
    var xsqr = x.sqr();
    var ysqr = y.sqr();
    var v = _D.times(xsqr).times(ysqr);
    return ysqr.minus(xsqr).minus(_ONE).minus(v).modq().equals(_ZERO);
  }
  function _xrecover(y) {
    var ysquared = y.sqr();
    var xx = ysquared.minus(_ONE).divide(_ONE.plus(_D.times(ysquared)));
    var x = xx.pow(_RECOVERY_EXPONENT);
    if (!(x.times(x).minus(xx).equals(_ZERO))) {
      x = x.times(_I);
    }
    if (x.isOdd()) {
      x = _Q.minus(x);
    }
    return x;
  }
  function _x_pt_add(pt1, pt2) {
    var x1 = pt1[0];
    var y1 = pt1[1];
    var z1 = pt1[2];
    var t1 = pt1[3];
    var x2 = pt2[0];
    var y2 = pt2[1];
    var z2 = pt2[2];
    var t2 = pt2[3];
    var A = y1.minus(x1).times(y2.plus(x2));
    var B = y1.plus(x1).times(y2.minus(x2));
    var C = z1.times(_TWO).times(t2);
    var D = t1.times(_TWO).times(z2);
    var E = D.plus(C);
    var F = B.minus(A);
    var G = B.plus(A);
    var H = D.minus(C);
    return [E.times(F), G.times(H), F.times(G), E.times(H)];
  }
  function _xpt_double(pt1) {
    var x1 = pt1[0];
    var y1 = pt1[1];
    var z1 = pt1[2];
    var A = x1.times(x1);
    var B = y1.times(y1);
    var C = _TWO.times(z1).times(z1);
    var D = _Q.minus(A);
    var J = x1.plus(y1);
    var E = J.times(J).minus(A).minus(B);
    var G = D.plus(B);
    var F = G.minus(C);
    var H = D.minus(B);
    return [E.times(F), G.times(H), F.times(G), E.times(H)];
  }
  function _xpt_mult(pt, n) {
    if (n.equals(_ZERO)) {
      return [_ZERO, _ONE, _ONE, _ZERO];
    }
    var odd = n.isOdd();
    n.shiftRight(1);
    var value = _xpt_double(_xpt_mult(pt, n));
    return odd ? _x_pt_add(value, pt) : value;
  }
  function _pt_xform(pt) {
    var x = pt[0];
    var y = pt[1];
    return [x, y, _ONE, x.times(y)];
  }
  function _pt_unxform(pt) {
    var x = pt[0];
    var y = pt[1];
    var z = pt[2];
    var invz = z.inv();
    return [x.times(invz), y.times(invz)];
  }
  function _scalarmult(pt, n) {
    return _pt_unxform(_xpt_mult(_pt_xform(pt), n));
  }
  function _bytesgetbit(bytes, n) {
    return (bytes[bytes.length - (n >>> 3) - 1] >> (n & 7)) & 1;
  }
  function _xpt_mult_bytes(pt, bytes) {
    var r = [_ZERO, _ONE, _ONE, _ZERO];
    for (var i = (bytes.length << 3) - 1; i >= 0; i--) {
      r = _xpt_double(r);
      if (_bytesgetbit(bytes, i) === 1) {
        r = _x_pt_add(r, pt);
      }
    }
    return r;
  }
  function _scalarmultBytes(pt, bytes) {
    return _pt_unxform(_xpt_mult_bytes(_pt_xform(pt), bytes));
  }
  var _by = _bi255(4).divide(_bi255(5));
  var _bx = _xrecover(_by);
  var _bp = [_bx, _by];
  function _encodeint(n) {
    return n.bytes(32).reverse();
  }
  function _decodeint(b) {
    return _bi255(b.slice(0).reverse());
  }
  function _encodepoint(p) {
    var v = _encodeint(p[1]);
    if (p[0].isOdd()) {
      v[31] |= 0x80;
    }
    return v;
  }
  function _decodepoint(v) {
    v = v.slice(0);
    var signbit = v[31] >> 7;
    v[31] &= 127;
    var y = _decodeint(v);
    var x = _xrecover(y);
    if ((x.n[0] & 1) !== signbit) {
      x = _Q.minus(x);
    }
    var p = [x, y];
    if (!_isoncurve(p)) {
      throw ('Point is not on curve');
    }
    return p;
  }
  function _bi(value, base) {
    if (base !== undefined) {
      if (base === 256) {
        return _bi(utils.string2bytes(value));
      }
      return new BigInteger(value, base);
    } else if (typeof value === 'string') {
      return new BigInteger(value, 10);
    } else if ((value instanceof Array) || (value instanceof Uint8Array) || Buffer.isBuffer(value)) {
      return new BigInteger(value);
    } else if (typeof value === 'number') {
      return new BigInteger(value.toString(), 10);
    } else {
      throw "Can't convert " + value + " to BigInteger";
    }
  }
  function _bi2bytes(n, cnt) {
    if (cnt === undefined) {
      cnt = (n.bitLength() + 7) >>> 3;
    }
    var bytes = new Array(cnt);
    for (var i = cnt - 1; i >= 0; i--) {
      bytes[i] = n[0] & 255;
      n = n.shiftRight(8);
    }
    return bytes;
  }
  BigInteger.prototype.bytes = function(n) {
    return _bi2bytes(this, n);
  };
  function _bytehash(s) {
    var sha = crypto.createHash('sha512').update(s).digest();
    return _bi2bytes(_bi(sha), 64).reverse();
  }
  function _stringhash(s) {
    var sha = crypto.createHash('sha512').update(s).digest();
    return _map(_chr, _bi2bytes(_bi(sha), 64)).join('');
  }
  function _inthash(s) {
    return _bi([0].concat(_bytehash(s)));
  }
  function _inthash_lo(s) {
    return _bi255(_bytehash(s).slice(32, 64));
  }
  function _inthash_mod_l(s) {
    return _inthash(s).mod(_L_BI);
  }
  function _get_a(sk) {
    var a = _inthash_lo(sk);
    a.n[0] &= 0xfff8;
    a.n[15] &= 0x3fff;
    a.n[15] |= 0x4000;
    return a;
  }
  function _publickey(sk) {
    return _encodepoint(_scalarmult(_bp, _get_a(sk)));
  }
  function _map(f, l) {
    var result = new Array(l.length);
    for (var i = 0; i < l.length; i++) {
      result[i] = f(l[i]);
    }
    return result;
  }
  function _chr(n) {
    return String.fromCharCode(n);
  }
  function _ord(c) {
    return c.charCodeAt(0);
  }
  function _pt_add(p1, p2) {
    return _pt_unxform(_x_pt_add(_pt_xform(p1), _pt_xform(p2)));
  }
  ns.isOnCurve = function(point) {
    try {
      _isoncurve(_decodepoint(utils.string2bytes(point)));
    } catch (e) {
      if (e === 'Point is not on curve') {
        return false;
      } else {
        throw e;
      }
    }
    return true;
  };
  ns.publicKey = function(keySeed) {
    return utils.bytes2string(_publickey(keySeed));
  };
  ns.sign = function(message, keySeed, publicKey) {
    if (publicKey === undefined) {
      publicKey = _publickey(keySeed);
    } else {
      publicKey = utils.string2bytes(publicKey);
    }
    var a = _bi(_get_a(keySeed).toString(), 16);
    var hs = _stringhash(keySeed);
    var r = _bytehash(hs.slice(32, 64) + message);
    var rp = _scalarmultBytes(_bp, r);
    var erp = _encodepoint(rp);
    r = _bi(r).mod(_bi(1, 10).shiftLeft(512));
    var s = _map(_chr, erp).join('') + _map(_chr, publicKey).join('') + message;
    s = _inthash_mod_l(s).multiply(a).add(r).mod(_L_BI);
    return utils.bytes2string(erp.concat(_encodeint(s)));
  };
  ns.verify = function(signature, message, publicKey) {
    signature = utils.string2bytes(signature.slice(0, 64));
    publicKey = utils.string2bytes(publicKey);
    var rpe = signature.slice(0, 32);
    var rp = _decodepoint(rpe);
    var a = _decodepoint(publicKey);
    var s = _decodeint(signature.slice(32, 64));
    var h = _inthash(utils.bytes2string(rpe.concat(publicKey)) + message);
    var v1 = _scalarmult(_bp, s);
    var value = _scalarmultBytes(a, _bi2bytes(h));
    var v2 = _pt_add(rp, value);
    return v1[0].equals(v2[0]) && v1[1].equals(v2[1]);
  };
  ns.generateKeySeed = function() {
    return core.generateKey(false);
  };
  module.exports = ns;
  return module.exports;
});

$__System.registerDynamic("npm:jodid25519@1.0.2/lib/curve255.js", ["npm:jodid25519@1.0.2/lib/core.js", "npm:jodid25519@1.0.2/lib/utils.js"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var core = $__require('npm:jodid25519@1.0.2/lib/core.js');
  var utils = $__require('npm:jodid25519@1.0.2/lib/utils.js');
  var ns = {};
  function curve25519_raw(f, c) {
    var a,
        x_1,
        q;
    x_1 = c;
    a = core.dbl(x_1, core.ONE());
    q = [x_1, core.ONE()];
    var n = 255;
    while (core.getbit(f, n) == 0) {
      n--;
      if (n < 0) {
        return core.ZERO();
      }
    }
    n--;
    var aq = [a, q];
    while (n >= 0) {
      var r,
          s;
      var b = core.getbit(f, n);
      r = core.sum(aq[0][0], aq[0][1], aq[1][0], aq[1][1], x_1);
      s = core.dbl(aq[1 - b][0], aq[1 - b][1]);
      aq[1 - b] = s;
      aq[b] = r;
      n--;
    }
    q = aq[1];
    q[1] = core.invmodp(q[1]);
    q[0] = core.mulmodp(q[0], q[1]);
    core.reduce(q[0]);
    return q[0];
  }
  function curve25519b32(a, b) {
    return _base32encode(curve25519(_base32decode(a), _base32decode(b)));
  }
  function curve25519(f, c) {
    if (!c) {
      c = core.BASE();
    }
    f[0] &= 0xFFF8;
    f[15] = (f[15] & 0x7FFF) | 0x4000;
    return curve25519_raw(f, c);
  }
  function _hexEncodeVector(k) {
    var hexKey = utils.hexEncode(k);
    hexKey = new Array(64 + 1 - hexKey.length).join('0') + hexKey;
    return hexKey.split(/(..)/).reverse().join('');
  }
  function _hexDecodeVector(v) {
    var hexKey = v.split(/(..)/).reverse().join('');
    return utils.hexDecode(hexKey);
  }
  ns.curve25519 = curve25519;
  ns.curve25519_raw = curve25519_raw;
  ns.hexEncodeVector = _hexEncodeVector;
  ns.hexDecodeVector = _hexDecodeVector;
  ns.hexencode = utils.hexEncode;
  ns.hexdecode = utils.hexDecode;
  ns.base32encode = utils.base32encode;
  ns.base32decode = utils.base32decode;
  module.exports = ns;
  return module.exports;
});

$__System.registerDynamic("npm:jodid25519@1.0.2/lib/core.js", ["@node/crypto"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var crypto = $__require('@node/crypto');
  var ns = {};
  function _setbit(n, c, v) {
    var i = c >> 4;
    var a = n[i];
    a = a + (1 << (c & 0xf)) * v;
    n[i] = a;
  }
  function _getbit(n, c) {
    return (n[c >> 4] >> (c & 0xf)) & 1;
  }
  function _ZERO() {
    return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  }
  function _ONE() {
    return [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  }
  function _BASE() {
    return [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  }
  function _bigintcmp(a, b) {
    var c,
        abs_r,
        mask;
    var r = 0;
    for (c = 15; c >= 0; c--) {
      var x = a[c];
      var y = b[c];
      r = r + (x - y) * (1 - r * r);
      mask = r >> 31;
      abs_r = (r + mask) ^ mask;
      r = ~~((r << 1) / (abs_r + 1));
    }
    return r;
  }
  function _bigintadd(a, b) {
    var r = [];
    var v;
    r[0] = (v = a[0] + b[0]) & 0xffff;
    r[1] = (v = (v >>> 16) + a[1] + b[1]) & 0xffff;
    r[2] = (v = (v >>> 16) + a[2] + b[2]) & 0xffff;
    r[3] = (v = (v >>> 16) + a[3] + b[3]) & 0xffff;
    r[4] = (v = (v >>> 16) + a[4] + b[4]) & 0xffff;
    r[5] = (v = (v >>> 16) + a[5] + b[5]) & 0xffff;
    r[6] = (v = (v >>> 16) + a[6] + b[6]) & 0xffff;
    r[7] = (v = (v >>> 16) + a[7] + b[7]) & 0xffff;
    r[8] = (v = (v >>> 16) + a[8] + b[8]) & 0xffff;
    r[9] = (v = (v >>> 16) + a[9] + b[9]) & 0xffff;
    r[10] = (v = (v >>> 16) + a[10] + b[10]) & 0xffff;
    r[11] = (v = (v >>> 16) + a[11] + b[11]) & 0xffff;
    r[12] = (v = (v >>> 16) + a[12] + b[12]) & 0xffff;
    r[13] = (v = (v >>> 16) + a[13] + b[13]) & 0xffff;
    r[14] = (v = (v >>> 16) + a[14] + b[14]) & 0xffff;
    r[15] = (v >>> 16) + a[15] + b[15];
    return r;
  }
  function _bigintsub(a, b) {
    var r = [];
    var v;
    r[0] = (v = 0x80000 + a[0] - b[0]) & 0xffff;
    r[1] = (v = (v >>> 16) + 0x7fff8 + a[1] - b[1]) & 0xffff;
    r[2] = (v = (v >>> 16) + 0x7fff8 + a[2] - b[2]) & 0xffff;
    r[3] = (v = (v >>> 16) + 0x7fff8 + a[3] - b[3]) & 0xffff;
    r[4] = (v = (v >>> 16) + 0x7fff8 + a[4] - b[4]) & 0xffff;
    r[5] = (v = (v >>> 16) + 0x7fff8 + a[5] - b[5]) & 0xffff;
    r[6] = (v = (v >>> 16) + 0x7fff8 + a[6] - b[6]) & 0xffff;
    r[7] = (v = (v >>> 16) + 0x7fff8 + a[7] - b[7]) & 0xffff;
    r[8] = (v = (v >>> 16) + 0x7fff8 + a[8] - b[8]) & 0xffff;
    r[9] = (v = (v >>> 16) + 0x7fff8 + a[9] - b[9]) & 0xffff;
    r[10] = (v = (v >>> 16) + 0x7fff8 + a[10] - b[10]) & 0xffff;
    r[11] = (v = (v >>> 16) + 0x7fff8 + a[11] - b[11]) & 0xffff;
    r[12] = (v = (v >>> 16) + 0x7fff8 + a[12] - b[12]) & 0xffff;
    r[13] = (v = (v >>> 16) + 0x7fff8 + a[13] - b[13]) & 0xffff;
    r[14] = (v = (v >>> 16) + 0x7fff8 + a[14] - b[14]) & 0xffff;
    r[15] = (v >>> 16) - 8 + a[15] - b[15];
    return r;
  }
  function _sqr8h(a7, a6, a5, a4, a3, a2, a1, a0) {
    var r = [];
    var v;
    r[0] = (v = a0 * a0) & 0xffff;
    r[1] = (v = (0 | (v / 0x10000)) + 2 * a0 * a1) & 0xffff;
    r[2] = (v = (0 | (v / 0x10000)) + 2 * a0 * a2 + a1 * a1) & 0xffff;
    r[3] = (v = (0 | (v / 0x10000)) + 2 * a0 * a3 + 2 * a1 * a2) & 0xffff;
    r[4] = (v = (0 | (v / 0x10000)) + 2 * a0 * a4 + 2 * a1 * a3 + a2 * a2) & 0xffff;
    r[5] = (v = (0 | (v / 0x10000)) + 2 * a0 * a5 + 2 * a1 * a4 + 2 * a2 * a3) & 0xffff;
    r[6] = (v = (0 | (v / 0x10000)) + 2 * a0 * a6 + 2 * a1 * a5 + 2 * a2 * a4 + a3 * a3) & 0xffff;
    r[7] = (v = (0 | (v / 0x10000)) + 2 * a0 * a7 + 2 * a1 * a6 + 2 * a2 * a5 + 2 * a3 * a4) & 0xffff;
    r[8] = (v = (0 | (v / 0x10000)) + 2 * a1 * a7 + 2 * a2 * a6 + 2 * a3 * a5 + a4 * a4) & 0xffff;
    r[9] = (v = (0 | (v / 0x10000)) + 2 * a2 * a7 + 2 * a3 * a6 + 2 * a4 * a5) & 0xffff;
    r[10] = (v = (0 | (v / 0x10000)) + 2 * a3 * a7 + 2 * a4 * a6 + a5 * a5) & 0xffff;
    r[11] = (v = (0 | (v / 0x10000)) + 2 * a4 * a7 + 2 * a5 * a6) & 0xffff;
    r[12] = (v = (0 | (v / 0x10000)) + 2 * a5 * a7 + a6 * a6) & 0xffff;
    r[13] = (v = (0 | (v / 0x10000)) + 2 * a6 * a7) & 0xffff;
    r[14] = (v = (0 | (v / 0x10000)) + a7 * a7) & 0xffff;
    r[15] = 0 | (v / 0x10000);
    return r;
  }
  function _sqrmodp(a) {
    var x = _sqr8h(a[15], a[14], a[13], a[12], a[11], a[10], a[9], a[8]);
    var z = _sqr8h(a[7], a[6], a[5], a[4], a[3], a[2], a[1], a[0]);
    var y = _sqr8h(a[15] + a[7], a[14] + a[6], a[13] + a[5], a[12] + a[4], a[11] + a[3], a[10] + a[2], a[9] + a[1], a[8] + a[0]);
    var r = [];
    var v;
    r[0] = (v = 0x800000 + z[0] + (y[8] - x[8] - z[8] + x[0] - 0x80) * 38) & 0xffff;
    r[1] = (v = 0x7fff80 + (v >>> 16) + z[1] + (y[9] - x[9] - z[9] + x[1]) * 38) & 0xffff;
    r[2] = (v = 0x7fff80 + (v >>> 16) + z[2] + (y[10] - x[10] - z[10] + x[2]) * 38) & 0xffff;
    r[3] = (v = 0x7fff80 + (v >>> 16) + z[3] + (y[11] - x[11] - z[11] + x[3]) * 38) & 0xffff;
    r[4] = (v = 0x7fff80 + (v >>> 16) + z[4] + (y[12] - x[12] - z[12] + x[4]) * 38) & 0xffff;
    r[5] = (v = 0x7fff80 + (v >>> 16) + z[5] + (y[13] - x[13] - z[13] + x[5]) * 38) & 0xffff;
    r[6] = (v = 0x7fff80 + (v >>> 16) + z[6] + (y[14] - x[14] - z[14] + x[6]) * 38) & 0xffff;
    r[7] = (v = 0x7fff80 + (v >>> 16) + z[7] + (y[15] - x[15] - z[15] + x[7]) * 38) & 0xffff;
    r[8] = (v = 0x7fff80 + (v >>> 16) + z[8] + y[0] - x[0] - z[0] + x[8] * 38) & 0xffff;
    r[9] = (v = 0x7fff80 + (v >>> 16) + z[9] + y[1] - x[1] - z[1] + x[9] * 38) & 0xffff;
    r[10] = (v = 0x7fff80 + (v >>> 16) + z[10] + y[2] - x[2] - z[2] + x[10] * 38) & 0xffff;
    r[11] = (v = 0x7fff80 + (v >>> 16) + z[11] + y[3] - x[3] - z[3] + x[11] * 38) & 0xffff;
    r[12] = (v = 0x7fff80 + (v >>> 16) + z[12] + y[4] - x[4] - z[4] + x[12] * 38) & 0xffff;
    r[13] = (v = 0x7fff80 + (v >>> 16) + z[13] + y[5] - x[5] - z[5] + x[13] * 38) & 0xffff;
    r[14] = (v = 0x7fff80 + (v >>> 16) + z[14] + y[6] - x[6] - z[6] + x[14] * 38) & 0xffff;
    r[15] = 0x7fff80 + (v >>> 16) + z[15] + y[7] - x[7] - z[7] + x[15] * 38;
    _reduce(r);
    return r;
  }
  function _mul8h(a7, a6, a5, a4, a3, a2, a1, a0, b7, b6, b5, b4, b3, b2, b1, b0) {
    var r = [];
    var v;
    r[0] = (v = a0 * b0) & 0xffff;
    r[1] = (v = (0 | (v / 0x10000)) + a0 * b1 + a1 * b0) & 0xffff;
    r[2] = (v = (0 | (v / 0x10000)) + a0 * b2 + a1 * b1 + a2 * b0) & 0xffff;
    r[3] = (v = (0 | (v / 0x10000)) + a0 * b3 + a1 * b2 + a2 * b1 + a3 * b0) & 0xffff;
    r[4] = (v = (0 | (v / 0x10000)) + a0 * b4 + a1 * b3 + a2 * b2 + a3 * b1 + a4 * b0) & 0xffff;
    r[5] = (v = (0 | (v / 0x10000)) + a0 * b5 + a1 * b4 + a2 * b3 + a3 * b2 + a4 * b1 + a5 * b0) & 0xffff;
    r[6] = (v = (0 | (v / 0x10000)) + a0 * b6 + a1 * b5 + a2 * b4 + a3 * b3 + a4 * b2 + a5 * b1 + a6 * b0) & 0xffff;
    r[7] = (v = (0 | (v / 0x10000)) + a0 * b7 + a1 * b6 + a2 * b5 + a3 * b4 + a4 * b3 + a5 * b2 + a6 * b1 + a7 * b0) & 0xffff;
    r[8] = (v = (0 | (v / 0x10000)) + a1 * b7 + a2 * b6 + a3 * b5 + a4 * b4 + a5 * b3 + a6 * b2 + a7 * b1) & 0xffff;
    r[9] = (v = (0 | (v / 0x10000)) + a2 * b7 + a3 * b6 + a4 * b5 + a5 * b4 + a6 * b3 + a7 * b2) & 0xffff;
    r[10] = (v = (0 | (v / 0x10000)) + a3 * b7 + a4 * b6 + a5 * b5 + a6 * b4 + a7 * b3) & 0xffff;
    r[11] = (v = (0 | (v / 0x10000)) + a4 * b7 + a5 * b6 + a6 * b5 + a7 * b4) & 0xffff;
    r[12] = (v = (0 | (v / 0x10000)) + a5 * b7 + a6 * b6 + a7 * b5) & 0xffff;
    r[13] = (v = (0 | (v / 0x10000)) + a6 * b7 + a7 * b6) & 0xffff;
    r[14] = (v = (0 | (v / 0x10000)) + a7 * b7) & 0xffff;
    r[15] = (0 | (v / 0x10000));
    return r;
  }
  function _mulmodp(a, b) {
    var x = _mul8h(a[15], a[14], a[13], a[12], a[11], a[10], a[9], a[8], b[15], b[14], b[13], b[12], b[11], b[10], b[9], b[8]);
    var z = _mul8h(a[7], a[6], a[5], a[4], a[3], a[2], a[1], a[0], b[7], b[6], b[5], b[4], b[3], b[2], b[1], b[0]);
    var y = _mul8h(a[15] + a[7], a[14] + a[6], a[13] + a[5], a[12] + a[4], a[11] + a[3], a[10] + a[2], a[9] + a[1], a[8] + a[0], b[15] + b[7], b[14] + b[6], b[13] + b[5], b[12] + b[4], b[11] + b[3], b[10] + b[2], b[9] + b[1], b[8] + b[0]);
    var r = [];
    var v;
    r[0] = (v = 0x800000 + z[0] + (y[8] - x[8] - z[8] + x[0] - 0x80) * 38) & 0xffff;
    r[1] = (v = 0x7fff80 + (v >>> 16) + z[1] + (y[9] - x[9] - z[9] + x[1]) * 38) & 0xffff;
    r[2] = (v = 0x7fff80 + (v >>> 16) + z[2] + (y[10] - x[10] - z[10] + x[2]) * 38) & 0xffff;
    r[3] = (v = 0x7fff80 + (v >>> 16) + z[3] + (y[11] - x[11] - z[11] + x[3]) * 38) & 0xffff;
    r[4] = (v = 0x7fff80 + (v >>> 16) + z[4] + (y[12] - x[12] - z[12] + x[4]) * 38) & 0xffff;
    r[5] = (v = 0x7fff80 + (v >>> 16) + z[5] + (y[13] - x[13] - z[13] + x[5]) * 38) & 0xffff;
    r[6] = (v = 0x7fff80 + (v >>> 16) + z[6] + (y[14] - x[14] - z[14] + x[6]) * 38) & 0xffff;
    r[7] = (v = 0x7fff80 + (v >>> 16) + z[7] + (y[15] - x[15] - z[15] + x[7]) * 38) & 0xffff;
    r[8] = (v = 0x7fff80 + (v >>> 16) + z[8] + y[0] - x[0] - z[0] + x[8] * 38) & 0xffff;
    r[9] = (v = 0x7fff80 + (v >>> 16) + z[9] + y[1] - x[1] - z[1] + x[9] * 38) & 0xffff;
    r[10] = (v = 0x7fff80 + (v >>> 16) + z[10] + y[2] - x[2] - z[2] + x[10] * 38) & 0xffff;
    r[11] = (v = 0x7fff80 + (v >>> 16) + z[11] + y[3] - x[3] - z[3] + x[11] * 38) & 0xffff;
    r[12] = (v = 0x7fff80 + (v >>> 16) + z[12] + y[4] - x[4] - z[4] + x[12] * 38) & 0xffff;
    r[13] = (v = 0x7fff80 + (v >>> 16) + z[13] + y[5] - x[5] - z[5] + x[13] * 38) & 0xffff;
    r[14] = (v = 0x7fff80 + (v >>> 16) + z[14] + y[6] - x[6] - z[6] + x[14] * 38) & 0xffff;
    r[15] = 0x7fff80 + (v >>> 16) + z[15] + y[7] - x[7] - z[7] + x[15] * 38;
    _reduce(r);
    return r;
  }
  function _reduce(arr) {
    var aCopy = arr.slice(0);
    var choice = [arr, aCopy];
    var v = arr[15];
    var a = choice[(v < 0x8000) & 1];
    a[15] = v & 0x7fff;
    v = (0 | (v / 0x8000)) * 19;
    a[0] = (v += a[0]) & 0xffff;
    v = v >>> 16;
    a[1] = (v += a[1]) & 0xffff;
    v = v >>> 16;
    a[2] = (v += a[2]) & 0xffff;
    v = v >>> 16;
    a[3] = (v += a[3]) & 0xffff;
    v = v >>> 16;
    a[4] = (v += a[4]) & 0xffff;
    v = v >>> 16;
    a[5] = (v += a[5]) & 0xffff;
    v = v >>> 16;
    a[6] = (v += a[6]) & 0xffff;
    v = v >>> 16;
    a[7] = (v += a[7]) & 0xffff;
    v = v >>> 16;
    a[8] = (v += a[8]) & 0xffff;
    v = v >>> 16;
    a[9] = (v += a[9]) & 0xffff;
    v = v >>> 16;
    a[10] = (v += a[10]) & 0xffff;
    v = v >>> 16;
    a[11] = (v += a[11]) & 0xffff;
    v = v >>> 16;
    a[12] = (v += a[12]) & 0xffff;
    v = v >>> 16;
    a[13] = (v += a[13]) & 0xffff;
    v = v >>> 16;
    a[14] = (v += a[14]) & 0xffff;
    v = v >>> 16;
    a[15] += v;
  }
  function _addmodp(a, b) {
    var r = [];
    var v;
    r[0] = (v = ((0 | (a[15] >>> 15)) + (0 | (b[15] >>> 15))) * 19 + a[0] + b[0]) & 0xffff;
    r[1] = (v = (v >>> 16) + a[1] + b[1]) & 0xffff;
    r[2] = (v = (v >>> 16) + a[2] + b[2]) & 0xffff;
    r[3] = (v = (v >>> 16) + a[3] + b[3]) & 0xffff;
    r[4] = (v = (v >>> 16) + a[4] + b[4]) & 0xffff;
    r[5] = (v = (v >>> 16) + a[5] + b[5]) & 0xffff;
    r[6] = (v = (v >>> 16) + a[6] + b[6]) & 0xffff;
    r[7] = (v = (v >>> 16) + a[7] + b[7]) & 0xffff;
    r[8] = (v = (v >>> 16) + a[8] + b[8]) & 0xffff;
    r[9] = (v = (v >>> 16) + a[9] + b[9]) & 0xffff;
    r[10] = (v = (v >>> 16) + a[10] + b[10]) & 0xffff;
    r[11] = (v = (v >>> 16) + a[11] + b[11]) & 0xffff;
    r[12] = (v = (v >>> 16) + a[12] + b[12]) & 0xffff;
    r[13] = (v = (v >>> 16) + a[13] + b[13]) & 0xffff;
    r[14] = (v = (v >>> 16) + a[14] + b[14]) & 0xffff;
    r[15] = (v >>> 16) + (a[15] & 0x7fff) + (b[15] & 0x7fff);
    return r;
  }
  function _submodp(a, b) {
    var r = [];
    var v;
    r[0] = (v = 0x80000 + ((0 | (a[15] >>> 15)) - (0 | (b[15] >>> 15)) - 1) * 19 + a[0] - b[0]) & 0xffff;
    r[1] = (v = (v >>> 16) + 0x7fff8 + a[1] - b[1]) & 0xffff;
    r[2] = (v = (v >>> 16) + 0x7fff8 + a[2] - b[2]) & 0xffff;
    r[3] = (v = (v >>> 16) + 0x7fff8 + a[3] - b[3]) & 0xffff;
    r[4] = (v = (v >>> 16) + 0x7fff8 + a[4] - b[4]) & 0xffff;
    r[5] = (v = (v >>> 16) + 0x7fff8 + a[5] - b[5]) & 0xffff;
    r[6] = (v = (v >>> 16) + 0x7fff8 + a[6] - b[6]) & 0xffff;
    r[7] = (v = (v >>> 16) + 0x7fff8 + a[7] - b[7]) & 0xffff;
    r[8] = (v = (v >>> 16) + 0x7fff8 + a[8] - b[8]) & 0xffff;
    r[9] = (v = (v >>> 16) + 0x7fff8 + a[9] - b[9]) & 0xffff;
    r[10] = (v = (v >>> 16) + 0x7fff8 + a[10] - b[10]) & 0xffff;
    r[11] = (v = (v >>> 16) + 0x7fff8 + a[11] - b[11]) & 0xffff;
    r[12] = (v = (v >>> 16) + 0x7fff8 + a[12] - b[12]) & 0xffff;
    r[13] = (v = (v >>> 16) + 0x7fff8 + a[13] - b[13]) & 0xffff;
    r[14] = (v = (v >>> 16) + 0x7fff8 + a[14] - b[14]) & 0xffff;
    r[15] = (v >>> 16) + 0x7ff8 + (a[15] & 0x7fff) - (b[15] & 0x7fff);
    return r;
  }
  function _invmodp(a) {
    var c = a;
    var i = 250;
    while (--i) {
      a = _sqrmodp(a);
      a = _mulmodp(a, c);
    }
    a = _sqrmodp(a);
    a = _sqrmodp(a);
    a = _mulmodp(a, c);
    a = _sqrmodp(a);
    a = _sqrmodp(a);
    a = _mulmodp(a, c);
    a = _sqrmodp(a);
    a = _mulmodp(a, c);
    return a;
  }
  function _mulasmall(a) {
    var m = 121665;
    var r = [];
    var v;
    r[0] = (v = a[0] * m) & 0xffff;
    r[1] = (v = (0 | (v / 0x10000)) + a[1] * m) & 0xffff;
    r[2] = (v = (0 | (v / 0x10000)) + a[2] * m) & 0xffff;
    r[3] = (v = (0 | (v / 0x10000)) + a[3] * m) & 0xffff;
    r[4] = (v = (0 | (v / 0x10000)) + a[4] * m) & 0xffff;
    r[5] = (v = (0 | (v / 0x10000)) + a[5] * m) & 0xffff;
    r[6] = (v = (0 | (v / 0x10000)) + a[6] * m) & 0xffff;
    r[7] = (v = (0 | (v / 0x10000)) + a[7] * m) & 0xffff;
    r[8] = (v = (0 | (v / 0x10000)) + a[8] * m) & 0xffff;
    r[9] = (v = (0 | (v / 0x10000)) + a[9] * m) & 0xffff;
    r[10] = (v = (0 | (v / 0x10000)) + a[10] * m) & 0xffff;
    r[11] = (v = (0 | (v / 0x10000)) + a[11] * m) & 0xffff;
    r[12] = (v = (0 | (v / 0x10000)) + a[12] * m) & 0xffff;
    r[13] = (v = (0 | (v / 0x10000)) + a[13] * m) & 0xffff;
    r[14] = (v = (0 | (v / 0x10000)) + a[14] * m) & 0xffff;
    r[15] = (0 | (v / 0x10000)) + a[15] * m;
    _reduce(r);
    return r;
  }
  function _dbl(x, z) {
    var x_2,
        z_2,
        m,
        n,
        o;
    m = _sqrmodp(_addmodp(x, z));
    n = _sqrmodp(_submodp(x, z));
    o = _submodp(m, n);
    x_2 = _mulmodp(n, m);
    z_2 = _mulmodp(_addmodp(_mulasmall(o), m), o);
    return [x_2, z_2];
  }
  function _sum(x, z, x_p, z_p, x_1) {
    var x_3,
        z_3,
        p,
        q;
    p = _mulmodp(_submodp(x, z), _addmodp(x_p, z_p));
    q = _mulmodp(_addmodp(x, z), _submodp(x_p, z_p));
    x_3 = _sqrmodp(_addmodp(p, q));
    z_3 = _mulmodp(_sqrmodp(_submodp(p, q)), x_1);
    return [x_3, z_3];
  }
  function _generateKey(curve25519) {
    var buffer = crypto.randomBytes(32);
    if (curve25519 === true) {
      buffer[0] &= 0xf8;
      buffer[31] = (buffer[31] & 0x7f) | 0x40;
    }
    var result = [];
    for (var i = 0; i < buffer.length; i++) {
      result.push(String.fromCharCode(buffer[i]));
    }
    return result.join('');
  }
  ns.getbit = _getbit;
  ns.setbit = _setbit;
  ns.addmodp = _addmodp;
  ns.invmodp = _invmodp;
  ns.mulmodp = _mulmodp;
  ns.reduce = _reduce;
  ns.dbl = _dbl;
  ns.sum = _sum;
  ns.ZERO = _ZERO;
  ns.ONE = _ONE;
  ns.BASE = _BASE;
  ns.bigintadd = _bigintadd;
  ns.bigintsub = _bigintsub;
  ns.bigintcmp = _bigintcmp;
  ns.mulmodp = _mulmodp;
  ns.sqrmodp = _sqrmodp;
  ns.generateKey = _generateKey;
  module.exports = ns;
  return module.exports;
});

$__System.registerDynamic("npm:jodid25519@1.0.2/lib/utils.js", ["npm:jodid25519@1.0.2/lib/core.js"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var core = $__require('npm:jodid25519@1.0.2/lib/core.js');
  var ns = {};
  var _HEXCHARS = "0123456789abcdef";
  function _hexencode(vector) {
    var result = [];
    for (var i = vector.length - 1; i >= 0; i--) {
      var value = vector[i];
      result.push(_HEXCHARS.substr((value >>> 12) & 0x0f, 1));
      result.push(_HEXCHARS.substr((value >>> 8) & 0x0f, 1));
      result.push(_HEXCHARS.substr((value >>> 4) & 0x0f, 1));
      result.push(_HEXCHARS.substr(value & 0x0f, 1));
    }
    return result.join('');
  }
  function _hexdecode(vector) {
    var result = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    for (var i = vector.length - 1,
        l = 0; i >= 0; i -= 4) {
      result[l] = (_HEXCHARS.indexOf(vector.charAt(i))) | (_HEXCHARS.indexOf(vector.charAt(i - 1)) << 4) | (_HEXCHARS.indexOf(vector.charAt(i - 2)) << 8) | (_HEXCHARS.indexOf(vector.charAt(i - 3)) << 12);
      l++;
    }
    return result;
  }
  var _BASE32CHARS = "abcdefghijklmnopqrstuvwxyz234567";
  var _BASE32VALUES = (function() {
    var result = {};
    for (var i = 0; i < _BASE32CHARS.length; i++) {
      result[_BASE32CHARS.charAt(i)] = i;
    }
    return result;
  })();
  function _base32encode(n) {
    var c;
    var r = "";
    for (c = 0; c < 255; c += 5) {
      r = _BASE32CHARS.substr(core.getbit(n, c) + (core.getbit(n, c + 1) << 1) + (core.getbit(n, c + 2) << 2) + (core.getbit(n, c + 3) << 3) + (core.getbit(n, c + 4) << 4), 1) + r;
    }
    return r;
  }
  function _base32decode(n) {
    var c = 0;
    var r = core.ZERO();
    var l = n.length;
    for (c = 0; (l > 0) && (c < 255); c += 5) {
      l--;
      var v = _BASE32VALUES[n.substr(l, 1)];
      core.setbit(r, c, v & 1);
      v >>= 1;
      core.setbit(r, c + 1, v & 1);
      v >>= 1;
      core.setbit(r, c + 2, v & 1);
      v >>= 1;
      core.setbit(r, c + 3, v & 1);
      v >>= 1;
      core.setbit(r, c + 4, v & 1);
    }
    return r;
  }
  function _map(f, l) {
    var result = new Array(l.length);
    for (var i = 0; i < l.length; i++) {
      result[i] = f(l[i]);
    }
    return result;
  }
  function _chr(n) {
    return String.fromCharCode(n);
  }
  function _ord(c) {
    return c.charCodeAt(0);
  }
  function _bytes2string(bytes) {
    return _map(_chr, bytes).join('');
  }
  function _string2bytes(s) {
    return _map(_ord, s);
  }
  ns.hexEncode = _hexencode;
  ns.hexDecode = _hexdecode;
  ns.base32encode = _base32encode;
  ns.base32decode = _base32decode;
  ns.bytes2string = _bytes2string;
  ns.string2bytes = _string2bytes;
  module.exports = ns;
  return module.exports;
});

$__System.registerDynamic("npm:jodid25519@1.0.2/index.js", ["npm:jodid25519@1.0.2/lib/dh.js", "npm:jodid25519@1.0.2/lib/eddsa.js", "npm:jodid25519@1.0.2/lib/curve255.js", "npm:jodid25519@1.0.2/lib/utils.js"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var dh = $__require('npm:jodid25519@1.0.2/lib/dh.js');
  var eddsa = $__require('npm:jodid25519@1.0.2/lib/eddsa.js');
  var curve255 = $__require('npm:jodid25519@1.0.2/lib/curve255.js');
  var utils = $__require('npm:jodid25519@1.0.2/lib/utils.js');
  var ns = {};
  ns.VERSION = '0.7.1';
  ns.dh = dh;
  ns.eddsa = eddsa;
  ns.curve255 = curve255;
  ns.utils = utils;
  module.exports = ns;
  return module.exports;
});

$__System.registerDynamic("npm:sshpk@1.8.1/lib/private-key.js", ["npm:assert-plus@1.0.0/assert.js", "npm:sshpk@1.8.1/lib/algs.js", "@node/crypto", "npm:sshpk@1.8.1/lib/fingerprint.js", "npm:sshpk@1.8.1/lib/signature.js", "npm:sshpk@1.8.1/lib/errors.js", "@node/util", "npm:sshpk@1.8.1/lib/utils.js", "npm:sshpk@1.8.1/lib/ed-compat.js", "npm:sshpk@1.8.1/lib/key.js", "npm:sshpk@1.8.1/lib/formats/auto.js", "npm:sshpk@1.8.1/lib/formats/pem.js", "npm:sshpk@1.8.1/lib/formats/pkcs1.js", "npm:sshpk@1.8.1/lib/formats/pkcs8.js", "npm:sshpk@1.8.1/lib/formats/rfc4253.js", "npm:sshpk@1.8.1/lib/formats/ssh-private.js", "npm:jodid25519@1.0.2/index.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = PrivateKey;
  var assert = $__require('npm:assert-plus@1.0.0/assert.js');
  var algs = $__require('npm:sshpk@1.8.1/lib/algs.js');
  var crypto = $__require('@node/crypto');
  var Fingerprint = $__require('npm:sshpk@1.8.1/lib/fingerprint.js');
  var Signature = $__require('npm:sshpk@1.8.1/lib/signature.js');
  var errs = $__require('npm:sshpk@1.8.1/lib/errors.js');
  var util = $__require('@node/util');
  var utils = $__require('npm:sshpk@1.8.1/lib/utils.js');
  var edCompat;
  var ed;
  try {
    edCompat = $__require('npm:sshpk@1.8.1/lib/ed-compat.js');
  } catch (e) {}
  var Key = $__require('npm:sshpk@1.8.1/lib/key.js');
  var InvalidAlgorithmError = errs.InvalidAlgorithmError;
  var KeyParseError = errs.KeyParseError;
  var KeyEncryptedError = errs.KeyEncryptedError;
  var formats = {};
  formats['auto'] = $__require('npm:sshpk@1.8.1/lib/formats/auto.js');
  formats['pem'] = $__require('npm:sshpk@1.8.1/lib/formats/pem.js');
  formats['pkcs1'] = $__require('npm:sshpk@1.8.1/lib/formats/pkcs1.js');
  formats['pkcs8'] = $__require('npm:sshpk@1.8.1/lib/formats/pkcs8.js');
  formats['rfc4253'] = $__require('npm:sshpk@1.8.1/lib/formats/rfc4253.js');
  formats['ssh-private'] = $__require('npm:sshpk@1.8.1/lib/formats/ssh-private.js');
  formats['openssh'] = formats['ssh-private'];
  formats['ssh'] = formats['ssh-private'];
  function PrivateKey(opts) {
    assert.object(opts, 'options');
    Key.call(this, opts);
    this._pubCache = undefined;
  }
  util.inherits(PrivateKey, Key);
  PrivateKey.formats = formats;
  PrivateKey.prototype.toBuffer = function(format, options) {
    if (format === undefined)
      format = 'pkcs1';
    assert.string(format, 'format');
    assert.object(formats[format], 'formats[format]');
    assert.optionalObject(options, 'options');
    return (formats[format].write(this, options));
  };
  PrivateKey.prototype.hash = function(algo) {
    return (this.toPublic().hash(algo));
  };
  PrivateKey.prototype.toPublic = function() {
    if (this._pubCache)
      return (this._pubCache);
    var algInfo = algs.info[this.type];
    var pubParts = [];
    for (var i = 0; i < algInfo.parts.length; ++i) {
      var p = algInfo.parts[i];
      pubParts.push(this.part[p]);
    }
    this._pubCache = new Key({
      type: this.type,
      source: this,
      parts: pubParts
    });
    if (this.comment)
      this._pubCache.comment = this.comment;
    return (this._pubCache);
  };
  PrivateKey.prototype.derive = function(newType, newSize) {
    assert.string(newType, 'type');
    assert.optionalNumber(newSize, 'size');
    var priv,
        pub;
    if (this.type === 'ed25519' && newType === 'curve25519') {
      if (ed === undefined)
        ed = $__require('npm:jodid25519@1.0.2/index.js');
      priv = this.part.r.data;
      if (priv[0] === 0x00)
        priv = priv.slice(1);
      priv = priv.slice(0, 32);
      pub = ed.dh.publicKey(priv);
      priv = utils.mpNormalize(Buffer.concat([priv, pub]));
      return (new PrivateKey({
        type: 'curve25519',
        parts: [{
          name: 'R',
          data: utils.mpNormalize(pub)
        }, {
          name: 'r',
          data: priv
        }]
      }));
    } else if (this.type === 'curve25519' && newType === 'ed25519') {
      if (ed === undefined)
        ed = $__require('npm:jodid25519@1.0.2/index.js');
      priv = this.part.r.data;
      if (priv[0] === 0x00)
        priv = priv.slice(1);
      priv = priv.slice(0, 32);
      pub = ed.eddsa.publicKey(priv.toString('binary'));
      pub = new Buffer(pub, 'binary');
      priv = utils.mpNormalize(Buffer.concat([priv, pub]));
      return (new PrivateKey({
        type: 'ed25519',
        parts: [{
          name: 'R',
          data: utils.mpNormalize(pub)
        }, {
          name: 'r',
          data: priv
        }]
      }));
    }
    throw (new Error('Key derivation not supported from ' + this.type + ' to ' + newType));
  };
  PrivateKey.prototype.createVerify = function(hashAlgo) {
    return (this.toPublic().createVerify(hashAlgo));
  };
  PrivateKey.prototype.createSign = function(hashAlgo) {
    if (hashAlgo === undefined)
      hashAlgo = this.defaultHashAlgorithm();
    assert.string(hashAlgo, 'hash algorithm');
    if (this.type === 'ed25519' && edCompat !== undefined)
      return (new edCompat.Signer(this, hashAlgo));
    if (this.type === 'curve25519')
      throw (new Error('Curve25519 keys are not suitable for ' + 'signing or verification'));
    var v,
        nm,
        err;
    try {
      nm = this.type.toUpperCase() + '-';
      if (this.type === 'ecdsa')
        nm = 'ecdsa-with-';
      nm += hashAlgo.toUpperCase();
      v = crypto.createSign(nm);
    } catch (e) {
      err = e;
    }
    if (v === undefined || (err instanceof Error && err.message.match(/Unknown message digest/))) {
      nm = 'RSA-';
      nm += hashAlgo.toUpperCase();
      v = crypto.createSign(nm);
    }
    assert.ok(v, 'failed to create verifier');
    var oldSign = v.sign.bind(v);
    var key = this.toBuffer('pkcs1');
    var type = this.type;
    v.sign = function() {
      var sig = oldSign(key);
      if (typeof(sig) === 'string')
        sig = new Buffer(sig, 'binary');
      sig = Signature.parse(sig, type, 'asn1');
      sig.hashAlgorithm = hashAlgo;
      return (sig);
    };
    return (v);
  };
  PrivateKey.parse = function(data, format, options) {
    if (typeof(data) !== 'string')
      assert.buffer(data, 'data');
    if (format === undefined)
      format = 'auto';
    assert.string(format, 'format');
    if (typeof(options) === 'string')
      options = {filename: options};
    assert.optionalObject(options, 'options');
    if (options === undefined)
      options = {};
    assert.optionalString(options.filename, 'options.filename');
    if (options.filename === undefined)
      options.filename = '(unnamed)';
    assert.object(formats[format], 'formats[format]');
    try {
      var k = formats[format].read(data, options);
      assert.ok(k instanceof PrivateKey, 'key is not a private key');
      if (!k.comment)
        k.comment = options.filename;
      return (k);
    } catch (e) {
      if (e.name === 'KeyEncryptedError')
        throw (e);
      throw (new KeyParseError(options.filename, format, e));
    }
  };
  PrivateKey.isPrivateKey = function(obj, ver) {
    return (utils.isCompatible(obj, PrivateKey, ver));
  };
  PrivateKey.prototype._sshpkApiVersion = [1, 4];
  PrivateKey._oldVersionDetect = function(obj) {
    assert.func(obj.toPublic);
    assert.func(obj.createSign);
    if (obj.derive)
      return ([1, 3]);
    if (obj.defaultHashAlgorithm)
      return ([1, 2]);
    if (obj.formats['auto'])
      return ([1, 1]);
    return ([1, 0]);
  };
  return module.exports;
});

$__System.registerDynamic("npm:assert-plus@1.0.0/assert.js", ["@node/assert", "@node/stream", "@node/util", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"),
      Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var assert = $__require('@node/assert');
  var Stream = $__require('@node/stream').Stream;
  var util = $__require('@node/util');
  var UUID_REGEXP = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;
  function _capitalize(str) {
    return (str.charAt(0).toUpperCase() + str.slice(1));
  }
  function _toss(name, expected, oper, arg, actual) {
    throw new assert.AssertionError({
      message: util.format('%s (%s) is required', name, expected),
      actual: (actual === undefined) ? typeof(arg) : actual(arg),
      expected: expected,
      operator: oper || '===',
      stackStartFunction: _toss.caller
    });
  }
  function _getClass(arg) {
    return (Object.prototype.toString.call(arg).slice(8, -1));
  }
  function noop() {}
  var types = {
    bool: {check: function(arg) {
        return typeof(arg) === 'boolean';
      }},
    func: {check: function(arg) {
        return typeof(arg) === 'function';
      }},
    string: {check: function(arg) {
        return typeof(arg) === 'string';
      }},
    object: {check: function(arg) {
        return typeof(arg) === 'object' && arg !== null;
      }},
    number: {check: function(arg) {
        return typeof(arg) === 'number' && !isNaN(arg);
      }},
    finite: {check: function(arg) {
        return typeof(arg) === 'number' && !isNaN(arg) && isFinite(arg);
      }},
    buffer: {
      check: function(arg) {
        return Buffer.isBuffer(arg);
      },
      operator: 'Buffer.isBuffer'
    },
    array: {
      check: function(arg) {
        return Array.isArray(arg);
      },
      operator: 'Array.isArray'
    },
    stream: {
      check: function(arg) {
        return arg instanceof Stream;
      },
      operator: 'instanceof',
      actual: _getClass
    },
    date: {
      check: function(arg) {
        return arg instanceof Date;
      },
      operator: 'instanceof',
      actual: _getClass
    },
    regexp: {
      check: function(arg) {
        return arg instanceof RegExp;
      },
      operator: 'instanceof',
      actual: _getClass
    },
    uuid: {
      check: function(arg) {
        return typeof(arg) === 'string' && UUID_REGEXP.test(arg);
      },
      operator: 'isUUID'
    }
  };
  function _setExports(ndebug) {
    var keys = Object.keys(types);
    var out;
    if (process.env.NODE_NDEBUG) {
      out = noop;
    } else {
      out = function(arg, msg) {
        if (!arg) {
          _toss(msg, 'true', arg);
        }
      };
    }
    keys.forEach(function(k) {
      if (ndebug) {
        out[k] = noop;
        return;
      }
      var type = types[k];
      out[k] = function(arg, msg) {
        if (!type.check(arg)) {
          _toss(msg, k, type.operator, arg, type.actual);
        }
      };
    });
    keys.forEach(function(k) {
      var name = 'optional' + _capitalize(k);
      if (ndebug) {
        out[name] = noop;
        return;
      }
      var type = types[k];
      out[name] = function(arg, msg) {
        if (arg === undefined || arg === null) {
          return;
        }
        if (!type.check(arg)) {
          _toss(msg, k, type.operator, arg, type.actual);
        }
      };
    });
    keys.forEach(function(k) {
      var name = 'arrayOf' + _capitalize(k);
      if (ndebug) {
        out[name] = noop;
        return;
      }
      var type = types[k];
      var expected = '[' + k + ']';
      out[name] = function(arg, msg) {
        if (!Array.isArray(arg)) {
          _toss(msg, expected, type.operator, arg, type.actual);
        }
        var i;
        for (i = 0; i < arg.length; i++) {
          if (!type.check(arg[i])) {
            _toss(msg, expected, type.operator, arg, type.actual);
          }
        }
      };
    });
    keys.forEach(function(k) {
      var name = 'optionalArrayOf' + _capitalize(k);
      if (ndebug) {
        out[name] = noop;
        return;
      }
      var type = types[k];
      var expected = '[' + k + ']';
      out[name] = function(arg, msg) {
        if (arg === undefined || arg === null) {
          return;
        }
        if (!Array.isArray(arg)) {
          _toss(msg, expected, type.operator, arg, type.actual);
        }
        var i;
        for (i = 0; i < arg.length; i++) {
          if (!type.check(arg[i])) {
            _toss(msg, expected, type.operator, arg, type.actual);
          }
        }
      };
    });
    Object.keys(assert).forEach(function(k) {
      if (k === 'AssertionError') {
        out[k] = assert[k];
        return;
      }
      if (ndebug) {
        out[k] = noop;
        return;
      }
      out[k] = assert[k];
    });
    out._setExports = _setExports;
    return out;
  }
  module.exports = _setExports(process.env.NODE_NDEBUG);
  return module.exports;
});

$__System.registerDynamic("npm:sshpk@1.8.1/lib/errors.js", ["npm:assert-plus@1.0.0/assert.js", "@node/util"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var assert = $__require('npm:assert-plus@1.0.0/assert.js');
  var util = $__require('@node/util');
  function FingerprintFormatError(fp, format) {
    if (Error.captureStackTrace)
      Error.captureStackTrace(this, FingerprintFormatError);
    this.name = 'FingerprintFormatError';
    this.fingerprint = fp;
    this.format = format;
    this.message = 'Fingerprint format is not supported, or is invalid: ';
    if (fp !== undefined)
      this.message += ' fingerprint = ' + fp;
    if (format !== undefined)
      this.message += ' format = ' + format;
  }
  util.inherits(FingerprintFormatError, Error);
  function InvalidAlgorithmError(alg) {
    if (Error.captureStackTrace)
      Error.captureStackTrace(this, InvalidAlgorithmError);
    this.name = 'InvalidAlgorithmError';
    this.algorithm = alg;
    this.message = 'Algorithm "' + alg + '" is not supported';
  }
  util.inherits(InvalidAlgorithmError, Error);
  function KeyParseError(name, format, innerErr) {
    if (Error.captureStackTrace)
      Error.captureStackTrace(this, KeyParseError);
    this.name = 'KeyParseError';
    this.format = format;
    this.keyName = name;
    this.innerErr = innerErr;
    this.message = 'Failed to parse ' + name + ' as a valid ' + format + ' format key: ' + innerErr.message;
  }
  util.inherits(KeyParseError, Error);
  function SignatureParseError(type, format, innerErr) {
    if (Error.captureStackTrace)
      Error.captureStackTrace(this, SignatureParseError);
    this.name = 'SignatureParseError';
    this.type = type;
    this.format = format;
    this.innerErr = innerErr;
    this.message = 'Failed to parse the given data as a ' + type + ' signature in ' + format + ' format: ' + innerErr.message;
  }
  util.inherits(SignatureParseError, Error);
  function KeyEncryptedError(name, format) {
    if (Error.captureStackTrace)
      Error.captureStackTrace(this, KeyEncryptedError);
    this.name = 'KeyEncryptedError';
    this.format = format;
    this.keyName = name;
    this.message = 'The ' + format + ' format key ' + name + ' is ' + 'encrypted (password-protected), and no passphrase was ' + 'provided in `options`';
  }
  util.inherits(KeyEncryptedError, Error);
  module.exports = {
    FingerprintFormatError: FingerprintFormatError,
    InvalidAlgorithmError: InvalidAlgorithmError,
    KeyParseError: KeyParseError,
    SignatureParseError: SignatureParseError,
    KeyEncryptedError: KeyEncryptedError
  };
  return module.exports;
});

$__System.registerDynamic("npm:sshpk@1.8.1/lib/index.js", ["npm:sshpk@1.8.1/lib/key.js", "npm:sshpk@1.8.1/lib/fingerprint.js", "npm:sshpk@1.8.1/lib/signature.js", "npm:sshpk@1.8.1/lib/private-key.js", "npm:sshpk@1.8.1/lib/errors.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Key = $__require('npm:sshpk@1.8.1/lib/key.js');
  var Fingerprint = $__require('npm:sshpk@1.8.1/lib/fingerprint.js');
  var Signature = $__require('npm:sshpk@1.8.1/lib/signature.js');
  var PrivateKey = $__require('npm:sshpk@1.8.1/lib/private-key.js');
  var errs = $__require('npm:sshpk@1.8.1/lib/errors.js');
  module.exports = {
    Key: Key,
    parseKey: Key.parse,
    Fingerprint: Fingerprint,
    parseFingerprint: Fingerprint.parse,
    Signature: Signature,
    parseSignature: Signature.parse,
    PrivateKey: PrivateKey,
    parsePrivateKey: PrivateKey.parse,
    FingerprintFormatError: errs.FingerprintFormatError,
    InvalidAlgorithmError: errs.InvalidAlgorithmError,
    KeyParseError: errs.KeyParseError,
    SignatureParseError: errs.SignatureParseError,
    KeyEncryptedError: errs.KeyEncryptedError
  };
  return module.exports;
});

$__System.registerDynamic("npm:http-signature@1.1.1/lib/utils.js", ["npm:assert-plus@0.2.0/assert.js", "npm:sshpk@1.8.1/lib/index.js", "@node/util"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var assert = $__require('npm:assert-plus@0.2.0/assert.js');
  var sshpk = $__require('npm:sshpk@1.8.1/lib/index.js');
  var util = $__require('@node/util');
  var HASH_ALGOS = {
    'sha1': true,
    'sha256': true,
    'sha512': true
  };
  var PK_ALGOS = {
    'rsa': true,
    'dsa': true,
    'ecdsa': true
  };
  function HttpSignatureError(message, caller) {
    if (Error.captureStackTrace)
      Error.captureStackTrace(this, caller || HttpSignatureError);
    this.message = message;
    this.name = caller.name;
  }
  util.inherits(HttpSignatureError, Error);
  function InvalidAlgorithmError(message) {
    HttpSignatureError.call(this, message, InvalidAlgorithmError);
  }
  util.inherits(InvalidAlgorithmError, HttpSignatureError);
  function validateAlgorithm(algorithm) {
    var alg = algorithm.toLowerCase().split('-');
    if (alg.length !== 2) {
      throw (new InvalidAlgorithmError(alg[0].toUpperCase() + ' is not a ' + 'valid algorithm'));
    }
    if (alg[0] !== 'hmac' && !PK_ALGOS[alg[0]]) {
      throw (new InvalidAlgorithmError(alg[0].toUpperCase() + ' type keys ' + 'are not supported'));
    }
    if (!HASH_ALGOS[alg[1]]) {
      throw (new InvalidAlgorithmError(alg[1].toUpperCase() + ' is not a ' + 'supported hash algorithm'));
    }
    return (alg);
  }
  module.exports = {
    HASH_ALGOS: HASH_ALGOS,
    PK_ALGOS: PK_ALGOS,
    HttpSignatureError: HttpSignatureError,
    InvalidAlgorithmError: InvalidAlgorithmError,
    validateAlgorithm: validateAlgorithm,
    sshKeyToPEM: function sshKeyToPEM(key) {
      assert.string(key, 'ssh_key');
      var k = sshpk.parseKey(key, 'ssh');
      return (k.toString('pem'));
    },
    fingerprint: function fingerprint(key) {
      assert.string(key, 'ssh_key');
      var k = sshpk.parseKey(key, 'ssh');
      return (k.fingerprint('md5').toString('hex'));
    },
    pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {
      assert.equal('string', typeof(pem), 'typeof pem');
      var k = sshpk.parseKey(pem, 'pem');
      k.comment = comment;
      return (k.toString('ssh'));
    }
  };
  return module.exports;
});

$__System.registerDynamic("npm:http-signature@1.1.1/lib/index.js", ["npm:http-signature@1.1.1/lib/parser.js", "npm:http-signature@1.1.1/lib/signer.js", "npm:http-signature@1.1.1/lib/verify.js", "npm:http-signature@1.1.1/lib/utils.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var parser = $__require('npm:http-signature@1.1.1/lib/parser.js');
  var signer = $__require('npm:http-signature@1.1.1/lib/signer.js');
  var verify = $__require('npm:http-signature@1.1.1/lib/verify.js');
  var utils = $__require('npm:http-signature@1.1.1/lib/utils.js');
  module.exports = {
    parse: parser.parseRequest,
    parseRequest: parser.parseRequest,
    sign: signer.signRequest,
    signRequest: signer.signRequest,
    createSigner: signer.createSigner,
    isSigner: signer.isSigner,
    sshKeyToPEM: utils.sshKeyToPEM,
    sshKeyFingerprint: utils.fingerprint,
    pemToRsaSSHKey: utils.pemToRsaSSHKey,
    verify: verify.verifySignature,
    verifySignature: verify.verifySignature,
    verifyHMAC: verify.verifyHMAC
  };
  return module.exports;
});

$__System.registerDynamic("npm:stringstream@0.0.5/stringstream.js", ["@node/util", "@node/stream", "@node/string_decoder", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"),
      Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var util = $__require('@node/util');
  var Stream = $__require('@node/stream');
  var StringDecoder = $__require('@node/string_decoder').StringDecoder;
  module.exports = StringStream;
  module.exports.AlignedStringDecoder = AlignedStringDecoder;
  function StringStream(from, to) {
    if (!(this instanceof StringStream))
      return new StringStream(from, to);
    Stream.call(this);
    if (from == null)
      from = 'utf8';
    this.readable = this.writable = true;
    this.paused = false;
    this.toEncoding = (to == null ? from : to);
    this.fromEncoding = (to == null ? '' : from);
    this.decoder = new AlignedStringDecoder(this.toEncoding);
  }
  util.inherits(StringStream, Stream);
  StringStream.prototype.write = function(data) {
    if (!this.writable) {
      var err = new Error('stream not writable');
      err.code = 'EPIPE';
      this.emit('error', err);
      return false;
    }
    if (this.fromEncoding) {
      if (Buffer.isBuffer(data))
        data = data.toString();
      data = new Buffer(data, this.fromEncoding);
    }
    var string = this.decoder.write(data);
    if (string.length)
      this.emit('data', string);
    return !this.paused;
  };
  StringStream.prototype.flush = function() {
    if (this.decoder.flush) {
      var string = this.decoder.flush();
      if (string.length)
        this.emit('data', string);
    }
  };
  StringStream.prototype.end = function() {
    if (!this.writable && !this.readable)
      return;
    this.flush();
    this.emit('end');
    this.writable = this.readable = false;
    this.destroy();
  };
  StringStream.prototype.destroy = function() {
    this.decoder = null;
    this.writable = this.readable = false;
    this.emit('close');
  };
  StringStream.prototype.pause = function() {
    this.paused = true;
  };
  StringStream.prototype.resume = function() {
    if (this.paused)
      this.emit('drain');
    this.paused = false;
  };
  function AlignedStringDecoder(encoding) {
    StringDecoder.call(this, encoding);
    switch (this.encoding) {
      case 'base64':
        this.write = alignedWrite;
        this.alignedBuffer = new Buffer(3);
        this.alignedBytes = 0;
        break;
    }
  }
  util.inherits(AlignedStringDecoder, StringDecoder);
  AlignedStringDecoder.prototype.flush = function() {
    if (!this.alignedBuffer || !this.alignedBytes)
      return '';
    var leftover = this.alignedBuffer.toString(this.encoding, 0, this.alignedBytes);
    this.alignedBytes = 0;
    return leftover;
  };
  function alignedWrite(buffer) {
    var rem = (this.alignedBytes + buffer.length) % this.alignedBuffer.length;
    if (!rem && !this.alignedBytes)
      return buffer.toString(this.encoding);
    var returnBuffer = new Buffer(this.alignedBytes + buffer.length - rem);
    this.alignedBuffer.copy(returnBuffer, 0, 0, this.alignedBytes);
    buffer.copy(returnBuffer, this.alignedBytes, 0, buffer.length - rem);
    buffer.copy(this.alignedBuffer, 0, buffer.length - rem, buffer.length);
    this.alignedBytes = rem;
    return returnBuffer.toString(this.encoding);
  }
  return module.exports;
});

$__System.registerDynamic("npm:forever-agent@0.6.1/index.js", ["@node/util", "@node/http", "@node/net", "@node/tls", "@node/https"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = ForeverAgent;
  ForeverAgent.SSL = ForeverAgentSSL;
  var util = $__require('@node/util'),
      Agent = $__require('@node/http').Agent,
      net = $__require('@node/net'),
      tls = $__require('@node/tls'),
      AgentSSL = $__require('@node/https').Agent;
  function getConnectionName(host, port) {
    var name = '';
    if (typeof host === 'string') {
      name = host + ':' + port;
    } else {
      name = host.host + ':' + host.port + ':' + (host.localAddress ? (host.localAddress + ':') : ':');
    }
    return name;
  }
  function ForeverAgent(options) {
    var self = this;
    self.options = options || {};
    self.requests = {};
    self.sockets = {};
    self.freeSockets = {};
    self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets;
    self.minSockets = self.options.minSockets || ForeverAgent.defaultMinSockets;
    self.on('free', function(socket, host, port) {
      var name = getConnectionName(host, port);
      if (self.requests[name] && self.requests[name].length) {
        self.requests[name].shift().onSocket(socket);
      } else if (self.sockets[name].length < self.minSockets) {
        if (!self.freeSockets[name])
          self.freeSockets[name] = [];
        self.freeSockets[name].push(socket);
        var onIdleError = function() {
          socket.destroy();
        };
        socket._onIdleError = onIdleError;
        socket.on('error', onIdleError);
      } else {
        socket.destroy();
      }
    });
  }
  util.inherits(ForeverAgent, Agent);
  ForeverAgent.defaultMinSockets = 5;
  ForeverAgent.prototype.createConnection = net.createConnection;
  ForeverAgent.prototype.addRequestNoreuse = Agent.prototype.addRequest;
  ForeverAgent.prototype.addRequest = function(req, host, port) {
    var name = getConnectionName(host, port);
    if (typeof host !== 'string') {
      var options = host;
      port = options.port;
      host = options.host;
    }
    if (this.freeSockets[name] && this.freeSockets[name].length > 0 && !req.useChunkedEncodingByDefault) {
      var idleSocket = this.freeSockets[name].pop();
      idleSocket.removeListener('error', idleSocket._onIdleError);
      delete idleSocket._onIdleError;
      req._reusedSocket = true;
      req.onSocket(idleSocket);
    } else {
      this.addRequestNoreuse(req, host, port);
    }
  };
  ForeverAgent.prototype.removeSocket = function(s, name, host, port) {
    if (this.sockets[name]) {
      var index = this.sockets[name].indexOf(s);
      if (index !== -1) {
        this.sockets[name].splice(index, 1);
      }
    } else if (this.sockets[name] && this.sockets[name].length === 0) {
      delete this.sockets[name];
      delete this.requests[name];
    }
    if (this.freeSockets[name]) {
      var index = this.freeSockets[name].indexOf(s);
      if (index !== -1) {
        this.freeSockets[name].splice(index, 1);
        if (this.freeSockets[name].length === 0) {
          delete this.freeSockets[name];
        }
      }
    }
    if (this.requests[name] && this.requests[name].length) {
      this.createSocket(name, host, port).emit('free');
    }
  };
  function ForeverAgentSSL(options) {
    ForeverAgent.call(this, options);
  }
  util.inherits(ForeverAgentSSL, ForeverAgent);
  ForeverAgentSSL.prototype.createConnection = createConnectionSSL;
  ForeverAgentSSL.prototype.addRequestNoreuse = AgentSSL.prototype.addRequest;
  function createConnectionSSL(port, host, options) {
    if (typeof port === 'object') {
      options = port;
    } else if (typeof host === 'object') {
      options = host;
    } else if (typeof options === 'object') {
      options = options;
    } else {
      options = {};
    }
    if (typeof port === 'number') {
      options.port = port;
    }
    if (typeof host === 'string') {
      options.host = host;
    }
    return tls.connect(options);
  }
  return module.exports;
});

$__System.registerDynamic("npm:mime-db@1.22.0/db.json", [], false, function() {
  return {
    "application/1d-interleaved-parityfec": {
      "source": "iana"
    },
    "application/3gpdash-qoe-report+xml": {
      "source": "iana"
    },
    "application/3gpp-ims+xml": {
      "source": "iana"
    },
    "application/a2l": {
      "source": "iana"
    },
    "application/activemessage": {
      "source": "iana"
    },
    "application/alto-costmap+json": {
      "source": "iana",
      "compressible": true
    },
    "application/alto-costmapfilter+json": {
      "source": "iana",
      "compressible": true
    },
    "application/alto-directory+json": {
      "source": "iana",
      "compressible": true
    },
    "application/alto-endpointcost+json": {
      "source": "iana",
      "compressible": true
    },
    "application/alto-endpointcostparams+json": {
      "source": "iana",
      "compressible": true
    },
    "application/alto-endpointprop+json": {
      "source": "iana",
      "compressible": true
    },
    "application/alto-endpointpropparams+json": {
      "source": "iana",
      "compressible": true
    },
    "application/alto-error+json": {
      "source": "iana",
      "compressible": true
    },
    "application/alto-networkmap+json": {
      "source": "iana",
      "compressible": true
    },
    "application/alto-networkmapfilter+json": {
      "source": "iana",
      "compressible": true
    },
    "application/aml": {
      "source": "iana"
    },
    "application/andrew-inset": {
      "source": "iana",
      "extensions": [
        "ez"
      ]
    },
    "application/applefile": {
      "source": "iana"
    },
    "application/applixware": {
      "source": "apache",
      "extensions": [
        "aw"
      ]
    },
    "application/atf": {
      "source": "iana"
    },
    "application/atfx": {
      "source": "iana"
    },
    "application/atom+xml": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "atom"
      ]
    },
    "application/atomcat+xml": {
      "source": "iana",
      "extensions": [
        "atomcat"
      ]
    },
    "application/atomdeleted+xml": {
      "source": "iana"
    },
    "application/atomicmail": {
      "source": "iana"
    },
    "application/atomsvc+xml": {
      "source": "iana",
      "extensions": [
        "atomsvc"
      ]
    },
    "application/atxml": {
      "source": "iana"
    },
    "application/auth-policy+xml": {
      "source": "iana"
    },
    "application/bacnet-xdd+zip": {
      "source": "iana"
    },
    "application/batch-smtp": {
      "source": "iana"
    },
    "application/bdoc": {
      "compressible": false,
      "extensions": [
        "bdoc"
      ]
    },
    "application/beep+xml": {
      "source": "iana"
    },
    "application/calendar+json": {
      "source": "iana",
      "compressible": true
    },
    "application/calendar+xml": {
      "source": "iana"
    },
    "application/call-completion": {
      "source": "iana"
    },
    "application/cals-1840": {
      "source": "iana"
    },
    "application/cbor": {
      "source": "iana"
    },
    "application/ccmp+xml": {
      "source": "iana"
    },
    "application/ccxml+xml": {
      "source": "iana",
      "extensions": [
        "ccxml"
      ]
    },
    "application/cdfx+xml": {
      "source": "iana"
    },
    "application/cdmi-capability": {
      "source": "iana",
      "extensions": [
        "cdmia"
      ]
    },
    "application/cdmi-container": {
      "source": "iana",
      "extensions": [
        "cdmic"
      ]
    },
    "application/cdmi-domain": {
      "source": "iana",
      "extensions": [
        "cdmid"
      ]
    },
    "application/cdmi-object": {
      "source": "iana",
      "extensions": [
        "cdmio"
      ]
    },
    "application/cdmi-queue": {
      "source": "iana",
      "extensions": [
        "cdmiq"
      ]
    },
    "application/cdni": {
      "source": "iana"
    },
    "application/cea": {
      "source": "iana"
    },
    "application/cea-2018+xml": {
      "source": "iana"
    },
    "application/cellml+xml": {
      "source": "iana"
    },
    "application/cfw": {
      "source": "iana"
    },
    "application/cms": {
      "source": "iana"
    },
    "application/cnrp+xml": {
      "source": "iana"
    },
    "application/coap-group+json": {
      "source": "iana",
      "compressible": true
    },
    "application/commonground": {
      "source": "iana"
    },
    "application/conference-info+xml": {
      "source": "iana"
    },
    "application/cpl+xml": {
      "source": "iana"
    },
    "application/csrattrs": {
      "source": "iana"
    },
    "application/csta+xml": {
      "source": "iana"
    },
    "application/cstadata+xml": {
      "source": "iana"
    },
    "application/csvm+json": {
      "source": "iana",
      "compressible": true
    },
    "application/cu-seeme": {
      "source": "apache",
      "extensions": [
        "cu"
      ]
    },
    "application/cybercash": {
      "source": "iana"
    },
    "application/dart": {
      "compressible": true
    },
    "application/dash+xml": {
      "source": "iana",
      "extensions": [
        "mpd"
      ]
    },
    "application/dashdelta": {
      "source": "iana"
    },
    "application/davmount+xml": {
      "source": "iana",
      "extensions": [
        "davmount"
      ]
    },
    "application/dca-rft": {
      "source": "iana"
    },
    "application/dcd": {
      "source": "iana"
    },
    "application/dec-dx": {
      "source": "iana"
    },
    "application/dialog-info+xml": {
      "source": "iana"
    },
    "application/dicom": {
      "source": "iana"
    },
    "application/dii": {
      "source": "iana"
    },
    "application/dit": {
      "source": "iana"
    },
    "application/dns": {
      "source": "iana"
    },
    "application/docbook+xml": {
      "source": "apache",
      "extensions": [
        "dbk"
      ]
    },
    "application/dskpp+xml": {
      "source": "iana"
    },
    "application/dssc+der": {
      "source": "iana",
      "extensions": [
        "dssc"
      ]
    },
    "application/dssc+xml": {
      "source": "iana",
      "extensions": [
        "xdssc"
      ]
    },
    "application/dvcs": {
      "source": "iana"
    },
    "application/ecmascript": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "ecma"
      ]
    },
    "application/edi-consent": {
      "source": "iana"
    },
    "application/edi-x12": {
      "source": "iana",
      "compressible": false
    },
    "application/edifact": {
      "source": "iana",
      "compressible": false
    },
    "application/emergencycalldata.comment+xml": {
      "source": "iana"
    },
    "application/emergencycalldata.deviceinfo+xml": {
      "source": "iana"
    },
    "application/emergencycalldata.providerinfo+xml": {
      "source": "iana"
    },
    "application/emergencycalldata.serviceinfo+xml": {
      "source": "iana"
    },
    "application/emergencycalldata.subscriberinfo+xml": {
      "source": "iana"
    },
    "application/emma+xml": {
      "source": "iana",
      "extensions": [
        "emma"
      ]
    },
    "application/emotionml+xml": {
      "source": "iana"
    },
    "application/encaprtp": {
      "source": "iana"
    },
    "application/epp+xml": {
      "source": "iana"
    },
    "application/epub+zip": {
      "source": "iana",
      "extensions": [
        "epub"
      ]
    },
    "application/eshop": {
      "source": "iana"
    },
    "application/exi": {
      "source": "iana",
      "extensions": [
        "exi"
      ]
    },
    "application/fastinfoset": {
      "source": "iana"
    },
    "application/fastsoap": {
      "source": "iana"
    },
    "application/fdt+xml": {
      "source": "iana"
    },
    "application/fits": {
      "source": "iana"
    },
    "application/font-sfnt": {
      "source": "iana"
    },
    "application/font-tdpfr": {
      "source": "iana",
      "extensions": [
        "pfr"
      ]
    },
    "application/font-woff": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "woff"
      ]
    },
    "application/font-woff2": {
      "compressible": false,
      "extensions": [
        "woff2"
      ]
    },
    "application/framework-attributes+xml": {
      "source": "iana"
    },
    "application/gml+xml": {
      "source": "apache",
      "extensions": [
        "gml"
      ]
    },
    "application/gpx+xml": {
      "source": "apache",
      "extensions": [
        "gpx"
      ]
    },
    "application/gxf": {
      "source": "apache",
      "extensions": [
        "gxf"
      ]
    },
    "application/gzip": {
      "source": "iana",
      "compressible": false
    },
    "application/h224": {
      "source": "iana"
    },
    "application/held+xml": {
      "source": "iana"
    },
    "application/http": {
      "source": "iana"
    },
    "application/hyperstudio": {
      "source": "iana",
      "extensions": [
        "stk"
      ]
    },
    "application/ibe-key-request+xml": {
      "source": "iana"
    },
    "application/ibe-pkg-reply+xml": {
      "source": "iana"
    },
    "application/ibe-pp-data": {
      "source": "iana"
    },
    "application/iges": {
      "source": "iana"
    },
    "application/im-iscomposing+xml": {
      "source": "iana"
    },
    "application/index": {
      "source": "iana"
    },
    "application/index.cmd": {
      "source": "iana"
    },
    "application/index.obj": {
      "source": "iana"
    },
    "application/index.response": {
      "source": "iana"
    },
    "application/index.vnd": {
      "source": "iana"
    },
    "application/inkml+xml": {
      "source": "iana",
      "extensions": [
        "ink",
        "inkml"
      ]
    },
    "application/iotp": {
      "source": "iana"
    },
    "application/ipfix": {
      "source": "iana",
      "extensions": [
        "ipfix"
      ]
    },
    "application/ipp": {
      "source": "iana"
    },
    "application/isup": {
      "source": "iana"
    },
    "application/its+xml": {
      "source": "iana"
    },
    "application/java-archive": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "jar",
        "war",
        "ear"
      ]
    },
    "application/java-serialized-object": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "ser"
      ]
    },
    "application/java-vm": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "class"
      ]
    },
    "application/javascript": {
      "source": "iana",
      "charset": "UTF-8",
      "compressible": true,
      "extensions": [
        "js"
      ]
    },
    "application/jose": {
      "source": "iana"
    },
    "application/jose+json": {
      "source": "iana",
      "compressible": true
    },
    "application/jrd+json": {
      "source": "iana",
      "compressible": true
    },
    "application/json": {
      "source": "iana",
      "charset": "UTF-8",
      "compressible": true,
      "extensions": [
        "json",
        "map"
      ]
    },
    "application/json-patch+json": {
      "source": "iana",
      "compressible": true
    },
    "application/json-seq": {
      "source": "iana"
    },
    "application/json5": {
      "extensions": [
        "json5"
      ]
    },
    "application/jsonml+json": {
      "source": "apache",
      "compressible": true,
      "extensions": [
        "jsonml"
      ]
    },
    "application/jwk+json": {
      "source": "iana",
      "compressible": true
    },
    "application/jwk-set+json": {
      "source": "iana",
      "compressible": true
    },
    "application/jwt": {
      "source": "iana"
    },
    "application/kpml-request+xml": {
      "source": "iana"
    },
    "application/kpml-response+xml": {
      "source": "iana"
    },
    "application/ld+json": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "jsonld"
      ]
    },
    "application/link-format": {
      "source": "iana"
    },
    "application/load-control+xml": {
      "source": "iana"
    },
    "application/lost+xml": {
      "source": "iana",
      "extensions": [
        "lostxml"
      ]
    },
    "application/lostsync+xml": {
      "source": "iana"
    },
    "application/lxf": {
      "source": "iana"
    },
    "application/mac-binhex40": {
      "source": "iana",
      "extensions": [
        "hqx"
      ]
    },
    "application/mac-compactpro": {
      "source": "apache",
      "extensions": [
        "cpt"
      ]
    },
    "application/macwriteii": {
      "source": "iana"
    },
    "application/mads+xml": {
      "source": "iana",
      "extensions": [
        "mads"
      ]
    },
    "application/manifest+json": {
      "charset": "UTF-8",
      "compressible": true,
      "extensions": [
        "webmanifest"
      ]
    },
    "application/marc": {
      "source": "iana",
      "extensions": [
        "mrc"
      ]
    },
    "application/marcxml+xml": {
      "source": "iana",
      "extensions": [
        "mrcx"
      ]
    },
    "application/mathematica": {
      "source": "iana",
      "extensions": [
        "ma",
        "nb",
        "mb"
      ]
    },
    "application/mathml+xml": {
      "source": "iana",
      "extensions": [
        "mathml"
      ]
    },
    "application/mathml-content+xml": {
      "source": "iana"
    },
    "application/mathml-presentation+xml": {
      "source": "iana"
    },
    "application/mbms-associated-procedure-description+xml": {
      "source": "iana"
    },
    "application/mbms-deregister+xml": {
      "source": "iana"
    },
    "application/mbms-envelope+xml": {
      "source": "iana"
    },
    "application/mbms-msk+xml": {
      "source": "iana"
    },
    "application/mbms-msk-response+xml": {
      "source": "iana"
    },
    "application/mbms-protection-description+xml": {
      "source": "iana"
    },
    "application/mbms-reception-report+xml": {
      "source": "iana"
    },
    "application/mbms-register+xml": {
      "source": "iana"
    },
    "application/mbms-register-response+xml": {
      "source": "iana"
    },
    "application/mbms-schedule+xml": {
      "source": "iana"
    },
    "application/mbms-user-service-description+xml": {
      "source": "iana"
    },
    "application/mbox": {
      "source": "iana",
      "extensions": [
        "mbox"
      ]
    },
    "application/media-policy-dataset+xml": {
      "source": "iana"
    },
    "application/media_control+xml": {
      "source": "iana"
    },
    "application/mediaservercontrol+xml": {
      "source": "iana",
      "extensions": [
        "mscml"
      ]
    },
    "application/merge-patch+json": {
      "source": "iana",
      "compressible": true
    },
    "application/metalink+xml": {
      "source": "apache",
      "extensions": [
        "metalink"
      ]
    },
    "application/metalink4+xml": {
      "source": "iana",
      "extensions": [
        "meta4"
      ]
    },
    "application/mets+xml": {
      "source": "iana",
      "extensions": [
        "mets"
      ]
    },
    "application/mf4": {
      "source": "iana"
    },
    "application/mikey": {
      "source": "iana"
    },
    "application/mods+xml": {
      "source": "iana",
      "extensions": [
        "mods"
      ]
    },
    "application/moss-keys": {
      "source": "iana"
    },
    "application/moss-signature": {
      "source": "iana"
    },
    "application/mosskey-data": {
      "source": "iana"
    },
    "application/mosskey-request": {
      "source": "iana"
    },
    "application/mp21": {
      "source": "iana",
      "extensions": [
        "m21",
        "mp21"
      ]
    },
    "application/mp4": {
      "source": "iana",
      "extensions": [
        "mp4s",
        "m4p"
      ]
    },
    "application/mpeg4-generic": {
      "source": "iana"
    },
    "application/mpeg4-iod": {
      "source": "iana"
    },
    "application/mpeg4-iod-xmt": {
      "source": "iana"
    },
    "application/mrb-consumer+xml": {
      "source": "iana"
    },
    "application/mrb-publish+xml": {
      "source": "iana"
    },
    "application/msc-ivr+xml": {
      "source": "iana"
    },
    "application/msc-mixer+xml": {
      "source": "iana"
    },
    "application/msword": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "doc",
        "dot"
      ]
    },
    "application/mxf": {
      "source": "iana",
      "extensions": [
        "mxf"
      ]
    },
    "application/nasdata": {
      "source": "iana"
    },
    "application/news-checkgroups": {
      "source": "iana"
    },
    "application/news-groupinfo": {
      "source": "iana"
    },
    "application/news-transmission": {
      "source": "iana"
    },
    "application/nlsml+xml": {
      "source": "iana"
    },
    "application/nss": {
      "source": "iana"
    },
    "application/ocsp-request": {
      "source": "iana"
    },
    "application/ocsp-response": {
      "source": "iana"
    },
    "application/octet-stream": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "bin",
        "dms",
        "lrf",
        "mar",
        "so",
        "dist",
        "distz",
        "pkg",
        "bpk",
        "dump",
        "elc",
        "deploy",
        "exe",
        "dll",
        "deb",
        "dmg",
        "iso",
        "img",
        "msi",
        "msp",
        "msm",
        "buffer"
      ]
    },
    "application/oda": {
      "source": "iana",
      "extensions": [
        "oda"
      ]
    },
    "application/odx": {
      "source": "iana"
    },
    "application/oebps-package+xml": {
      "source": "iana",
      "extensions": [
        "opf"
      ]
    },
    "application/ogg": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "ogx"
      ]
    },
    "application/omdoc+xml": {
      "source": "apache",
      "extensions": [
        "omdoc"
      ]
    },
    "application/onenote": {
      "source": "apache",
      "extensions": [
        "onetoc",
        "onetoc2",
        "onetmp",
        "onepkg"
      ]
    },
    "application/oxps": {
      "source": "iana",
      "extensions": [
        "oxps"
      ]
    },
    "application/p2p-overlay+xml": {
      "source": "iana"
    },
    "application/parityfec": {
      "source": "iana"
    },
    "application/patch-ops-error+xml": {
      "source": "iana",
      "extensions": [
        "xer"
      ]
    },
    "application/pdf": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "pdf"
      ]
    },
    "application/pdx": {
      "source": "iana"
    },
    "application/pgp-encrypted": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "pgp"
      ]
    },
    "application/pgp-keys": {
      "source": "iana"
    },
    "application/pgp-signature": {
      "source": "iana",
      "extensions": [
        "asc",
        "sig"
      ]
    },
    "application/pics-rules": {
      "source": "apache",
      "extensions": [
        "prf"
      ]
    },
    "application/pidf+xml": {
      "source": "iana"
    },
    "application/pidf-diff+xml": {
      "source": "iana"
    },
    "application/pkcs10": {
      "source": "iana",
      "extensions": [
        "p10"
      ]
    },
    "application/pkcs12": {
      "source": "iana"
    },
    "application/pkcs7-mime": {
      "source": "iana",
      "extensions": [
        "p7m",
        "p7c"
      ]
    },
    "application/pkcs7-signature": {
      "source": "iana",
      "extensions": [
        "p7s"
      ]
    },
    "application/pkcs8": {
      "source": "iana",
      "extensions": [
        "p8"
      ]
    },
    "application/pkix-attr-cert": {
      "source": "iana",
      "extensions": [
        "ac"
      ]
    },
    "application/pkix-cert": {
      "source": "iana",
      "extensions": [
        "cer"
      ]
    },
    "application/pkix-crl": {
      "source": "iana",
      "extensions": [
        "crl"
      ]
    },
    "application/pkix-pkipath": {
      "source": "iana",
      "extensions": [
        "pkipath"
      ]
    },
    "application/pkixcmp": {
      "source": "iana",
      "extensions": [
        "pki"
      ]
    },
    "application/pls+xml": {
      "source": "iana",
      "extensions": [
        "pls"
      ]
    },
    "application/poc-settings+xml": {
      "source": "iana"
    },
    "application/postscript": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "ai",
        "eps",
        "ps"
      ]
    },
    "application/ppsp-tracker+json": {
      "source": "iana",
      "compressible": true
    },
    "application/problem+json": {
      "source": "iana",
      "compressible": true
    },
    "application/problem+xml": {
      "source": "iana"
    },
    "application/provenance+xml": {
      "source": "iana"
    },
    "application/prs.alvestrand.titrax-sheet": {
      "source": "iana"
    },
    "application/prs.cww": {
      "source": "iana",
      "extensions": [
        "cww"
      ]
    },
    "application/prs.hpub+zip": {
      "source": "iana"
    },
    "application/prs.nprend": {
      "source": "iana"
    },
    "application/prs.plucker": {
      "source": "iana"
    },
    "application/prs.rdf-xml-crypt": {
      "source": "iana"
    },
    "application/prs.xsf+xml": {
      "source": "iana"
    },
    "application/pskc+xml": {
      "source": "iana",
      "extensions": [
        "pskcxml"
      ]
    },
    "application/qsig": {
      "source": "iana"
    },
    "application/raptorfec": {
      "source": "iana"
    },
    "application/rdap+json": {
      "source": "iana",
      "compressible": true
    },
    "application/rdf+xml": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "rdf"
      ]
    },
    "application/reginfo+xml": {
      "source": "iana",
      "extensions": [
        "rif"
      ]
    },
    "application/relax-ng-compact-syntax": {
      "source": "iana",
      "extensions": [
        "rnc"
      ]
    },
    "application/remote-printing": {
      "source": "iana"
    },
    "application/reputon+json": {
      "source": "iana",
      "compressible": true
    },
    "application/resource-lists+xml": {
      "source": "iana",
      "extensions": [
        "rl"
      ]
    },
    "application/resource-lists-diff+xml": {
      "source": "iana",
      "extensions": [
        "rld"
      ]
    },
    "application/rfc+xml": {
      "source": "iana"
    },
    "application/riscos": {
      "source": "iana"
    },
    "application/rlmi+xml": {
      "source": "iana"
    },
    "application/rls-services+xml": {
      "source": "iana",
      "extensions": [
        "rs"
      ]
    },
    "application/rpki-ghostbusters": {
      "source": "iana",
      "extensions": [
        "gbr"
      ]
    },
    "application/rpki-manifest": {
      "source": "iana",
      "extensions": [
        "mft"
      ]
    },
    "application/rpki-roa": {
      "source": "iana",
      "extensions": [
        "roa"
      ]
    },
    "application/rpki-updown": {
      "source": "iana"
    },
    "application/rsd+xml": {
      "source": "apache",
      "extensions": [
        "rsd"
      ]
    },
    "application/rss+xml": {
      "source": "apache",
      "compressible": true,
      "extensions": [
        "rss"
      ]
    },
    "application/rtf": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "rtf"
      ]
    },
    "application/rtploopback": {
      "source": "iana"
    },
    "application/rtx": {
      "source": "iana"
    },
    "application/samlassertion+xml": {
      "source": "iana"
    },
    "application/samlmetadata+xml": {
      "source": "iana"
    },
    "application/sbml+xml": {
      "source": "iana",
      "extensions": [
        "sbml"
      ]
    },
    "application/scaip+xml": {
      "source": "iana"
    },
    "application/scim+json": {
      "source": "iana",
      "compressible": true
    },
    "application/scvp-cv-request": {
      "source": "iana",
      "extensions": [
        "scq"
      ]
    },
    "application/scvp-cv-response": {
      "source": "iana",
      "extensions": [
        "scs"
      ]
    },
    "application/scvp-vp-request": {
      "source": "iana",
      "extensions": [
        "spq"
      ]
    },
    "application/scvp-vp-response": {
      "source": "iana",
      "extensions": [
        "spp"
      ]
    },
    "application/sdp": {
      "source": "iana",
      "extensions": [
        "sdp"
      ]
    },
    "application/sep+xml": {
      "source": "iana"
    },
    "application/sep-exi": {
      "source": "iana"
    },
    "application/session-info": {
      "source": "iana"
    },
    "application/set-payment": {
      "source": "iana"
    },
    "application/set-payment-initiation": {
      "source": "iana",
      "extensions": [
        "setpay"
      ]
    },
    "application/set-registration": {
      "source": "iana"
    },
    "application/set-registration-initiation": {
      "source": "iana",
      "extensions": [
        "setreg"
      ]
    },
    "application/sgml": {
      "source": "iana"
    },
    "application/sgml-open-catalog": {
      "source": "iana"
    },
    "application/shf+xml": {
      "source": "iana",
      "extensions": [
        "shf"
      ]
    },
    "application/sieve": {
      "source": "iana"
    },
    "application/simple-filter+xml": {
      "source": "iana"
    },
    "application/simple-message-summary": {
      "source": "iana"
    },
    "application/simplesymbolcontainer": {
      "source": "iana"
    },
    "application/slate": {
      "source": "iana"
    },
    "application/smil": {
      "source": "iana"
    },
    "application/smil+xml": {
      "source": "iana",
      "extensions": [
        "smi",
        "smil"
      ]
    },
    "application/smpte336m": {
      "source": "iana"
    },
    "application/soap+fastinfoset": {
      "source": "iana"
    },
    "application/soap+xml": {
      "source": "iana",
      "compressible": true
    },
    "application/sparql-query": {
      "source": "iana",
      "extensions": [
        "rq"
      ]
    },
    "application/sparql-results+xml": {
      "source": "iana",
      "extensions": [
        "srx"
      ]
    },
    "application/spirits-event+xml": {
      "source": "iana"
    },
    "application/sql": {
      "source": "iana"
    },
    "application/srgs": {
      "source": "iana",
      "extensions": [
        "gram"
      ]
    },
    "application/srgs+xml": {
      "source": "iana",
      "extensions": [
        "grxml"
      ]
    },
    "application/sru+xml": {
      "source": "iana",
      "extensions": [
        "sru"
      ]
    },
    "application/ssdl+xml": {
      "source": "apache",
      "extensions": [
        "ssdl"
      ]
    },
    "application/ssml+xml": {
      "source": "iana",
      "extensions": [
        "ssml"
      ]
    },
    "application/tamp-apex-update": {
      "source": "iana"
    },
    "application/tamp-apex-update-confirm": {
      "source": "iana"
    },
    "application/tamp-community-update": {
      "source": "iana"
    },
    "application/tamp-community-update-confirm": {
      "source": "iana"
    },
    "application/tamp-error": {
      "source": "iana"
    },
    "application/tamp-sequence-adjust": {
      "source": "iana"
    },
    "application/tamp-sequence-adjust-confirm": {
      "source": "iana"
    },
    "application/tamp-status-query": {
      "source": "iana"
    },
    "application/tamp-status-response": {
      "source": "iana"
    },
    "application/tamp-update": {
      "source": "iana"
    },
    "application/tamp-update-confirm": {
      "source": "iana"
    },
    "application/tar": {
      "compressible": true
    },
    "application/tei+xml": {
      "source": "iana",
      "extensions": [
        "tei",
        "teicorpus"
      ]
    },
    "application/thraud+xml": {
      "source": "iana",
      "extensions": [
        "tfi"
      ]
    },
    "application/timestamp-query": {
      "source": "iana"
    },
    "application/timestamp-reply": {
      "source": "iana"
    },
    "application/timestamped-data": {
      "source": "iana",
      "extensions": [
        "tsd"
      ]
    },
    "application/ttml+xml": {
      "source": "iana"
    },
    "application/tve-trigger": {
      "source": "iana"
    },
    "application/ulpfec": {
      "source": "iana"
    },
    "application/urc-grpsheet+xml": {
      "source": "iana"
    },
    "application/urc-ressheet+xml": {
      "source": "iana"
    },
    "application/urc-targetdesc+xml": {
      "source": "iana"
    },
    "application/urc-uisocketdesc+xml": {
      "source": "iana"
    },
    "application/vcard+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vcard+xml": {
      "source": "iana"
    },
    "application/vemmi": {
      "source": "iana"
    },
    "application/vividence.scriptfile": {
      "source": "apache"
    },
    "application/vnd.3gpp-prose+xml": {
      "source": "iana"
    },
    "application/vnd.3gpp-prose-pc3ch+xml": {
      "source": "iana"
    },
    "application/vnd.3gpp.access-transfer-events+xml": {
      "source": "iana"
    },
    "application/vnd.3gpp.bsf+xml": {
      "source": "iana"
    },
    "application/vnd.3gpp.mid-call+xml": {
      "source": "iana"
    },
    "application/vnd.3gpp.pic-bw-large": {
      "source": "iana",
      "extensions": [
        "plb"
      ]
    },
    "application/vnd.3gpp.pic-bw-small": {
      "source": "iana",
      "extensions": [
        "psb"
      ]
    },
    "application/vnd.3gpp.pic-bw-var": {
      "source": "iana",
      "extensions": [
        "pvb"
      ]
    },
    "application/vnd.3gpp.sms": {
      "source": "iana"
    },
    "application/vnd.3gpp.srvcc-ext+xml": {
      "source": "iana"
    },
    "application/vnd.3gpp.srvcc-info+xml": {
      "source": "iana"
    },
    "application/vnd.3gpp.state-and-event-info+xml": {
      "source": "iana"
    },
    "application/vnd.3gpp.ussd+xml": {
      "source": "iana"
    },
    "application/vnd.3gpp2.bcmcsinfo+xml": {
      "source": "iana"
    },
    "application/vnd.3gpp2.sms": {
      "source": "iana"
    },
    "application/vnd.3gpp2.tcap": {
      "source": "iana",
      "extensions": [
        "tcap"
      ]
    },
    "application/vnd.3m.post-it-notes": {
      "source": "iana",
      "extensions": [
        "pwn"
      ]
    },
    "application/vnd.accpac.simply.aso": {
      "source": "iana",
      "extensions": [
        "aso"
      ]
    },
    "application/vnd.accpac.simply.imp": {
      "source": "iana",
      "extensions": [
        "imp"
      ]
    },
    "application/vnd.acucobol": {
      "source": "iana",
      "extensions": [
        "acu"
      ]
    },
    "application/vnd.acucorp": {
      "source": "iana",
      "extensions": [
        "atc",
        "acutc"
      ]
    },
    "application/vnd.adobe.air-application-installer-package+zip": {
      "source": "apache",
      "extensions": [
        "air"
      ]
    },
    "application/vnd.adobe.flash.movie": {
      "source": "iana"
    },
    "application/vnd.adobe.formscentral.fcdt": {
      "source": "iana",
      "extensions": [
        "fcdt"
      ]
    },
    "application/vnd.adobe.fxp": {
      "source": "iana",
      "extensions": [
        "fxp",
        "fxpl"
      ]
    },
    "application/vnd.adobe.partial-upload": {
      "source": "iana"
    },
    "application/vnd.adobe.xdp+xml": {
      "source": "iana",
      "extensions": [
        "xdp"
      ]
    },
    "application/vnd.adobe.xfdf": {
      "source": "iana",
      "extensions": [
        "xfdf"
      ]
    },
    "application/vnd.aether.imp": {
      "source": "iana"
    },
    "application/vnd.ah-barcode": {
      "source": "iana"
    },
    "application/vnd.ahead.space": {
      "source": "iana",
      "extensions": [
        "ahead"
      ]
    },
    "application/vnd.airzip.filesecure.azf": {
      "source": "iana",
      "extensions": [
        "azf"
      ]
    },
    "application/vnd.airzip.filesecure.azs": {
      "source": "iana",
      "extensions": [
        "azs"
      ]
    },
    "application/vnd.amazon.ebook": {
      "source": "apache",
      "extensions": [
        "azw"
      ]
    },
    "application/vnd.americandynamics.acc": {
      "source": "iana",
      "extensions": [
        "acc"
      ]
    },
    "application/vnd.amiga.ami": {
      "source": "iana",
      "extensions": [
        "ami"
      ]
    },
    "application/vnd.amundsen.maze+xml": {
      "source": "iana"
    },
    "application/vnd.android.package-archive": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "apk"
      ]
    },
    "application/vnd.anki": {
      "source": "iana"
    },
    "application/vnd.anser-web-certificate-issue-initiation": {
      "source": "iana",
      "extensions": [
        "cii"
      ]
    },
    "application/vnd.anser-web-funds-transfer-initiation": {
      "source": "apache",
      "extensions": [
        "fti"
      ]
    },
    "application/vnd.antix.game-component": {
      "source": "iana",
      "extensions": [
        "atx"
      ]
    },
    "application/vnd.apache.thrift.binary": {
      "source": "iana"
    },
    "application/vnd.apache.thrift.compact": {
      "source": "iana"
    },
    "application/vnd.apache.thrift.json": {
      "source": "iana"
    },
    "application/vnd.api+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.apple.installer+xml": {
      "source": "iana",
      "extensions": [
        "mpkg"
      ]
    },
    "application/vnd.apple.mpegurl": {
      "source": "iana",
      "extensions": [
        "m3u8"
      ]
    },
    "application/vnd.apple.pkpass": {
      "compressible": false,
      "extensions": [
        "pkpass"
      ]
    },
    "application/vnd.arastra.swi": {
      "source": "iana"
    },
    "application/vnd.aristanetworks.swi": {
      "source": "iana",
      "extensions": [
        "swi"
      ]
    },
    "application/vnd.artsquare": {
      "source": "iana"
    },
    "application/vnd.astraea-software.iota": {
      "source": "iana",
      "extensions": [
        "iota"
      ]
    },
    "application/vnd.audiograph": {
      "source": "iana",
      "extensions": [
        "aep"
      ]
    },
    "application/vnd.autopackage": {
      "source": "iana"
    },
    "application/vnd.avistar+xml": {
      "source": "iana"
    },
    "application/vnd.balsamiq.bmml+xml": {
      "source": "iana"
    },
    "application/vnd.balsamiq.bmpr": {
      "source": "iana"
    },
    "application/vnd.bekitzur-stech+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.biopax.rdf+xml": {
      "source": "iana"
    },
    "application/vnd.blueice.multipass": {
      "source": "iana",
      "extensions": [
        "mpm"
      ]
    },
    "application/vnd.bluetooth.ep.oob": {
      "source": "iana"
    },
    "application/vnd.bluetooth.le.oob": {
      "source": "iana"
    },
    "application/vnd.bmi": {
      "source": "iana",
      "extensions": [
        "bmi"
      ]
    },
    "application/vnd.businessobjects": {
      "source": "iana",
      "extensions": [
        "rep"
      ]
    },
    "application/vnd.cab-jscript": {
      "source": "iana"
    },
    "application/vnd.canon-cpdl": {
      "source": "iana"
    },
    "application/vnd.canon-lips": {
      "source": "iana"
    },
    "application/vnd.cendio.thinlinc.clientconf": {
      "source": "iana"
    },
    "application/vnd.century-systems.tcp_stream": {
      "source": "iana"
    },
    "application/vnd.chemdraw+xml": {
      "source": "iana",
      "extensions": [
        "cdxml"
      ]
    },
    "application/vnd.chipnuts.karaoke-mmd": {
      "source": "iana",
      "extensions": [
        "mmd"
      ]
    },
    "application/vnd.cinderella": {
      "source": "iana",
      "extensions": [
        "cdy"
      ]
    },
    "application/vnd.cirpack.isdn-ext": {
      "source": "iana"
    },
    "application/vnd.citationstyles.style+xml": {
      "source": "iana"
    },
    "application/vnd.claymore": {
      "source": "iana",
      "extensions": [
        "cla"
      ]
    },
    "application/vnd.cloanto.rp9": {
      "source": "iana",
      "extensions": [
        "rp9"
      ]
    },
    "application/vnd.clonk.c4group": {
      "source": "iana",
      "extensions": [
        "c4g",
        "c4d",
        "c4f",
        "c4p",
        "c4u"
      ]
    },
    "application/vnd.cluetrust.cartomobile-config": {
      "source": "iana",
      "extensions": [
        "c11amc"
      ]
    },
    "application/vnd.cluetrust.cartomobile-config-pkg": {
      "source": "iana",
      "extensions": [
        "c11amz"
      ]
    },
    "application/vnd.coffeescript": {
      "source": "iana"
    },
    "application/vnd.collection+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.collection.doc+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.collection.next+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.commerce-battelle": {
      "source": "iana"
    },
    "application/vnd.commonspace": {
      "source": "iana",
      "extensions": [
        "csp"
      ]
    },
    "application/vnd.contact.cmsg": {
      "source": "iana",
      "extensions": [
        "cdbcmsg"
      ]
    },
    "application/vnd.cosmocaller": {
      "source": "iana",
      "extensions": [
        "cmc"
      ]
    },
    "application/vnd.crick.clicker": {
      "source": "iana",
      "extensions": [
        "clkx"
      ]
    },
    "application/vnd.crick.clicker.keyboard": {
      "source": "iana",
      "extensions": [
        "clkk"
      ]
    },
    "application/vnd.crick.clicker.palette": {
      "source": "iana",
      "extensions": [
        "clkp"
      ]
    },
    "application/vnd.crick.clicker.template": {
      "source": "iana",
      "extensions": [
        "clkt"
      ]
    },
    "application/vnd.crick.clicker.wordbank": {
      "source": "iana",
      "extensions": [
        "clkw"
      ]
    },
    "application/vnd.criticaltools.wbs+xml": {
      "source": "iana",
      "extensions": [
        "wbs"
      ]
    },
    "application/vnd.ctc-posml": {
      "source": "iana",
      "extensions": [
        "pml"
      ]
    },
    "application/vnd.ctct.ws+xml": {
      "source": "iana"
    },
    "application/vnd.cups-pdf": {
      "source": "iana"
    },
    "application/vnd.cups-postscript": {
      "source": "iana"
    },
    "application/vnd.cups-ppd": {
      "source": "iana",
      "extensions": [
        "ppd"
      ]
    },
    "application/vnd.cups-raster": {
      "source": "iana"
    },
    "application/vnd.cups-raw": {
      "source": "iana"
    },
    "application/vnd.curl": {
      "source": "iana"
    },
    "application/vnd.curl.car": {
      "source": "apache",
      "extensions": [
        "car"
      ]
    },
    "application/vnd.curl.pcurl": {
      "source": "apache",
      "extensions": [
        "pcurl"
      ]
    },
    "application/vnd.cyan.dean.root+xml": {
      "source": "iana"
    },
    "application/vnd.cybank": {
      "source": "iana"
    },
    "application/vnd.dart": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "dart"
      ]
    },
    "application/vnd.data-vision.rdz": {
      "source": "iana",
      "extensions": [
        "rdz"
      ]
    },
    "application/vnd.debian.binary-package": {
      "source": "iana"
    },
    "application/vnd.dece.data": {
      "source": "iana",
      "extensions": [
        "uvf",
        "uvvf",
        "uvd",
        "uvvd"
      ]
    },
    "application/vnd.dece.ttml+xml": {
      "source": "iana",
      "extensions": [
        "uvt",
        "uvvt"
      ]
    },
    "application/vnd.dece.unspecified": {
      "source": "iana",
      "extensions": [
        "uvx",
        "uvvx"
      ]
    },
    "application/vnd.dece.zip": {
      "source": "iana",
      "extensions": [
        "uvz",
        "uvvz"
      ]
    },
    "application/vnd.denovo.fcselayout-link": {
      "source": "iana",
      "extensions": [
        "fe_launch"
      ]
    },
    "application/vnd.desmume-movie": {
      "source": "iana"
    },
    "application/vnd.dir-bi.plate-dl-nosuffix": {
      "source": "iana"
    },
    "application/vnd.dm.delegation+xml": {
      "source": "iana"
    },
    "application/vnd.dna": {
      "source": "iana",
      "extensions": [
        "dna"
      ]
    },
    "application/vnd.document+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.dolby.mlp": {
      "source": "apache",
      "extensions": [
        "mlp"
      ]
    },
    "application/vnd.dolby.mobile.1": {
      "source": "iana"
    },
    "application/vnd.dolby.mobile.2": {
      "source": "iana"
    },
    "application/vnd.doremir.scorecloud-binary-document": {
      "source": "iana"
    },
    "application/vnd.dpgraph": {
      "source": "iana",
      "extensions": [
        "dpg"
      ]
    },
    "application/vnd.dreamfactory": {
      "source": "iana",
      "extensions": [
        "dfac"
      ]
    },
    "application/vnd.drive+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.ds-keypoint": {
      "source": "apache",
      "extensions": [
        "kpxx"
      ]
    },
    "application/vnd.dtg.local": {
      "source": "iana"
    },
    "application/vnd.dtg.local.flash": {
      "source": "iana"
    },
    "application/vnd.dtg.local.html": {
      "source": "iana"
    },
    "application/vnd.dvb.ait": {
      "source": "iana",
      "extensions": [
        "ait"
      ]
    },
    "application/vnd.dvb.dvbj": {
      "source": "iana"
    },
    "application/vnd.dvb.esgcontainer": {
      "source": "iana"
    },
    "application/vnd.dvb.ipdcdftnotifaccess": {
      "source": "iana"
    },
    "application/vnd.dvb.ipdcesgaccess": {
      "source": "iana"
    },
    "application/vnd.dvb.ipdcesgaccess2": {
      "source": "iana"
    },
    "application/vnd.dvb.ipdcesgpdd": {
      "source": "iana"
    },
    "application/vnd.dvb.ipdcroaming": {
      "source": "iana"
    },
    "application/vnd.dvb.iptv.alfec-base": {
      "source": "iana"
    },
    "application/vnd.dvb.iptv.alfec-enhancement": {
      "source": "iana"
    },
    "application/vnd.dvb.notif-aggregate-root+xml": {
      "source": "iana"
    },
    "application/vnd.dvb.notif-container+xml": {
      "source": "iana"
    },
    "application/vnd.dvb.notif-generic+xml": {
      "source": "iana"
    },
    "application/vnd.dvb.notif-ia-msglist+xml": {
      "source": "iana"
    },
    "application/vnd.dvb.notif-ia-registration-request+xml": {
      "source": "iana"
    },
    "application/vnd.dvb.notif-ia-registration-response+xml": {
      "source": "iana"
    },
    "application/vnd.dvb.notif-init+xml": {
      "source": "iana"
    },
    "application/vnd.dvb.pfr": {
      "source": "iana"
    },
    "application/vnd.dvb.service": {
      "source": "iana",
      "extensions": [
        "svc"
      ]
    },
    "application/vnd.dxr": {
      "source": "iana"
    },
    "application/vnd.dynageo": {
      "source": "iana",
      "extensions": [
        "geo"
      ]
    },
    "application/vnd.dzr": {
      "source": "iana"
    },
    "application/vnd.easykaraoke.cdgdownload": {
      "source": "iana"
    },
    "application/vnd.ecdis-update": {
      "source": "iana"
    },
    "application/vnd.ecowin.chart": {
      "source": "iana",
      "extensions": [
        "mag"
      ]
    },
    "application/vnd.ecowin.filerequest": {
      "source": "iana"
    },
    "application/vnd.ecowin.fileupdate": {
      "source": "iana"
    },
    "application/vnd.ecowin.series": {
      "source": "iana"
    },
    "application/vnd.ecowin.seriesrequest": {
      "source": "iana"
    },
    "application/vnd.ecowin.seriesupdate": {
      "source": "iana"
    },
    "application/vnd.emclient.accessrequest+xml": {
      "source": "iana"
    },
    "application/vnd.enliven": {
      "source": "iana",
      "extensions": [
        "nml"
      ]
    },
    "application/vnd.enphase.envoy": {
      "source": "iana"
    },
    "application/vnd.eprints.data+xml": {
      "source": "iana"
    },
    "application/vnd.epson.esf": {
      "source": "iana",
      "extensions": [
        "esf"
      ]
    },
    "application/vnd.epson.msf": {
      "source": "iana",
      "extensions": [
        "msf"
      ]
    },
    "application/vnd.epson.quickanime": {
      "source": "iana",
      "extensions": [
        "qam"
      ]
    },
    "application/vnd.epson.salt": {
      "source": "iana",
      "extensions": [
        "slt"
      ]
    },
    "application/vnd.epson.ssf": {
      "source": "iana",
      "extensions": [
        "ssf"
      ]
    },
    "application/vnd.ericsson.quickcall": {
      "source": "iana"
    },
    "application/vnd.eszigno3+xml": {
      "source": "iana",
      "extensions": [
        "es3",
        "et3"
      ]
    },
    "application/vnd.etsi.aoc+xml": {
      "source": "iana"
    },
    "application/vnd.etsi.asic-e+zip": {
      "source": "iana"
    },
    "application/vnd.etsi.asic-s+zip": {
      "source": "iana"
    },
    "application/vnd.etsi.cug+xml": {
      "source": "iana"
    },
    "application/vnd.etsi.iptvcommand+xml": {
      "source": "iana"
    },
    "application/vnd.etsi.iptvdiscovery+xml": {
      "source": "iana"
    },
    "application/vnd.etsi.iptvprofile+xml": {
      "source": "iana"
    },
    "application/vnd.etsi.iptvsad-bc+xml": {
      "source": "iana"
    },
    "application/vnd.etsi.iptvsad-cod+xml": {
      "source": "iana"
    },
    "application/vnd.etsi.iptvsad-npvr+xml": {
      "source": "iana"
    },
    "application/vnd.etsi.iptvservice+xml": {
      "source": "iana"
    },
    "application/vnd.etsi.iptvsync+xml": {
      "source": "iana"
    },
    "application/vnd.etsi.iptvueprofile+xml": {
      "source": "iana"
    },
    "application/vnd.etsi.mcid+xml": {
      "source": "iana"
    },
    "application/vnd.etsi.mheg5": {
      "source": "iana"
    },
    "application/vnd.etsi.overload-control-policy-dataset+xml": {
      "source": "iana"
    },
    "application/vnd.etsi.pstn+xml": {
      "source": "iana"
    },
    "application/vnd.etsi.sci+xml": {
      "source": "iana"
    },
    "application/vnd.etsi.simservs+xml": {
      "source": "iana"
    },
    "application/vnd.etsi.timestamp-token": {
      "source": "iana"
    },
    "application/vnd.etsi.tsl+xml": {
      "source": "iana"
    },
    "application/vnd.etsi.tsl.der": {
      "source": "iana"
    },
    "application/vnd.eudora.data": {
      "source": "iana"
    },
    "application/vnd.ezpix-album": {
      "source": "iana",
      "extensions": [
        "ez2"
      ]
    },
    "application/vnd.ezpix-package": {
      "source": "iana",
      "extensions": [
        "ez3"
      ]
    },
    "application/vnd.f-secure.mobile": {
      "source": "iana"
    },
    "application/vnd.fastcopy-disk-image": {
      "source": "iana"
    },
    "application/vnd.fdf": {
      "source": "iana",
      "extensions": [
        "fdf"
      ]
    },
    "application/vnd.fdsn.mseed": {
      "source": "iana",
      "extensions": [
        "mseed"
      ]
    },
    "application/vnd.fdsn.seed": {
      "source": "iana",
      "extensions": [
        "seed",
        "dataless"
      ]
    },
    "application/vnd.ffsns": {
      "source": "iana"
    },
    "application/vnd.filmit.zfc": {
      "source": "iana"
    },
    "application/vnd.fints": {
      "source": "iana"
    },
    "application/vnd.firemonkeys.cloudcell": {
      "source": "iana"
    },
    "application/vnd.flographit": {
      "source": "iana",
      "extensions": [
        "gph"
      ]
    },
    "application/vnd.fluxtime.clip": {
      "source": "iana",
      "extensions": [
        "ftc"
      ]
    },
    "application/vnd.font-fontforge-sfd": {
      "source": "iana"
    },
    "application/vnd.framemaker": {
      "source": "iana",
      "extensions": [
        "fm",
        "frame",
        "maker",
        "book"
      ]
    },
    "application/vnd.frogans.fnc": {
      "source": "iana",
      "extensions": [
        "fnc"
      ]
    },
    "application/vnd.frogans.ltf": {
      "source": "iana",
      "extensions": [
        "ltf"
      ]
    },
    "application/vnd.fsc.weblaunch": {
      "source": "iana",
      "extensions": [
        "fsc"
      ]
    },
    "application/vnd.fujitsu.oasys": {
      "source": "iana",
      "extensions": [
        "oas"
      ]
    },
    "application/vnd.fujitsu.oasys2": {
      "source": "iana",
      "extensions": [
        "oa2"
      ]
    },
    "application/vnd.fujitsu.oasys3": {
      "source": "iana",
      "extensions": [
        "oa3"
      ]
    },
    "application/vnd.fujitsu.oasysgp": {
      "source": "iana",
      "extensions": [
        "fg5"
      ]
    },
    "application/vnd.fujitsu.oasysprs": {
      "source": "iana",
      "extensions": [
        "bh2"
      ]
    },
    "application/vnd.fujixerox.art-ex": {
      "source": "iana"
    },
    "application/vnd.fujixerox.art4": {
      "source": "iana"
    },
    "application/vnd.fujixerox.ddd": {
      "source": "iana",
      "extensions": [
        "ddd"
      ]
    },
    "application/vnd.fujixerox.docuworks": {
      "source": "iana",
      "extensions": [
        "xdw"
      ]
    },
    "application/vnd.fujixerox.docuworks.binder": {
      "source": "iana",
      "extensions": [
        "xbd"
      ]
    },
    "application/vnd.fujixerox.docuworks.container": {
      "source": "iana"
    },
    "application/vnd.fujixerox.hbpl": {
      "source": "iana"
    },
    "application/vnd.fut-misnet": {
      "source": "iana"
    },
    "application/vnd.fuzzysheet": {
      "source": "iana",
      "extensions": [
        "fzs"
      ]
    },
    "application/vnd.genomatix.tuxedo": {
      "source": "iana",
      "extensions": [
        "txd"
      ]
    },
    "application/vnd.geo+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.geocube+xml": {
      "source": "iana"
    },
    "application/vnd.geogebra.file": {
      "source": "iana",
      "extensions": [
        "ggb"
      ]
    },
    "application/vnd.geogebra.tool": {
      "source": "iana",
      "extensions": [
        "ggt"
      ]
    },
    "application/vnd.geometry-explorer": {
      "source": "iana",
      "extensions": [
        "gex",
        "gre"
      ]
    },
    "application/vnd.geonext": {
      "source": "iana",
      "extensions": [
        "gxt"
      ]
    },
    "application/vnd.geoplan": {
      "source": "iana",
      "extensions": [
        "g2w"
      ]
    },
    "application/vnd.geospace": {
      "source": "iana",
      "extensions": [
        "g3w"
      ]
    },
    "application/vnd.gerber": {
      "source": "iana"
    },
    "application/vnd.globalplatform.card-content-mgt": {
      "source": "iana"
    },
    "application/vnd.globalplatform.card-content-mgt-response": {
      "source": "iana"
    },
    "application/vnd.gmx": {
      "source": "iana",
      "extensions": [
        "gmx"
      ]
    },
    "application/vnd.google-apps.document": {
      "compressible": false,
      "extensions": [
        "gdoc"
      ]
    },
    "application/vnd.google-apps.presentation": {
      "compressible": false,
      "extensions": [
        "gslides"
      ]
    },
    "application/vnd.google-apps.spreadsheet": {
      "compressible": false,
      "extensions": [
        "gsheet"
      ]
    },
    "application/vnd.google-earth.kml+xml": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "kml"
      ]
    },
    "application/vnd.google-earth.kmz": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "kmz"
      ]
    },
    "application/vnd.gov.sk.e-form+xml": {
      "source": "iana"
    },
    "application/vnd.gov.sk.e-form+zip": {
      "source": "iana"
    },
    "application/vnd.gov.sk.xmldatacontainer+xml": {
      "source": "iana"
    },
    "application/vnd.grafeq": {
      "source": "iana",
      "extensions": [
        "gqf",
        "gqs"
      ]
    },
    "application/vnd.gridmp": {
      "source": "iana"
    },
    "application/vnd.groove-account": {
      "source": "iana",
      "extensions": [
        "gac"
      ]
    },
    "application/vnd.groove-help": {
      "source": "iana",
      "extensions": [
        "ghf"
      ]
    },
    "application/vnd.groove-identity-message": {
      "source": "iana",
      "extensions": [
        "gim"
      ]
    },
    "application/vnd.groove-injector": {
      "source": "iana",
      "extensions": [
        "grv"
      ]
    },
    "application/vnd.groove-tool-message": {
      "source": "iana",
      "extensions": [
        "gtm"
      ]
    },
    "application/vnd.groove-tool-template": {
      "source": "iana",
      "extensions": [
        "tpl"
      ]
    },
    "application/vnd.groove-vcard": {
      "source": "iana",
      "extensions": [
        "vcg"
      ]
    },
    "application/vnd.hal+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.hal+xml": {
      "source": "iana",
      "extensions": [
        "hal"
      ]
    },
    "application/vnd.handheld-entertainment+xml": {
      "source": "iana",
      "extensions": [
        "zmm"
      ]
    },
    "application/vnd.hbci": {
      "source": "iana",
      "extensions": [
        "hbci"
      ]
    },
    "application/vnd.hcl-bireports": {
      "source": "iana"
    },
    "application/vnd.hdt": {
      "source": "iana"
    },
    "application/vnd.heroku+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.hhe.lesson-player": {
      "source": "iana",
      "extensions": [
        "les"
      ]
    },
    "application/vnd.hp-hpgl": {
      "source": "iana",
      "extensions": [
        "hpgl"
      ]
    },
    "application/vnd.hp-hpid": {
      "source": "iana",
      "extensions": [
        "hpid"
      ]
    },
    "application/vnd.hp-hps": {
      "source": "iana",
      "extensions": [
        "hps"
      ]
    },
    "application/vnd.hp-jlyt": {
      "source": "iana",
      "extensions": [
        "jlt"
      ]
    },
    "application/vnd.hp-pcl": {
      "source": "iana",
      "extensions": [
        "pcl"
      ]
    },
    "application/vnd.hp-pclxl": {
      "source": "iana",
      "extensions": [
        "pclxl"
      ]
    },
    "application/vnd.httphone": {
      "source": "iana"
    },
    "application/vnd.hydrostatix.sof-data": {
      "source": "iana",
      "extensions": [
        "sfd-hdstx"
      ]
    },
    "application/vnd.hyperdrive+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.hzn-3d-crossword": {
      "source": "iana"
    },
    "application/vnd.ibm.afplinedata": {
      "source": "iana"
    },
    "application/vnd.ibm.electronic-media": {
      "source": "iana"
    },
    "application/vnd.ibm.minipay": {
      "source": "iana",
      "extensions": [
        "mpy"
      ]
    },
    "application/vnd.ibm.modcap": {
      "source": "iana",
      "extensions": [
        "afp",
        "listafp",
        "list3820"
      ]
    },
    "application/vnd.ibm.rights-management": {
      "source": "iana",
      "extensions": [
        "irm"
      ]
    },
    "application/vnd.ibm.secure-container": {
      "source": "iana",
      "extensions": [
        "sc"
      ]
    },
    "application/vnd.iccprofile": {
      "source": "iana",
      "extensions": [
        "icc",
        "icm"
      ]
    },
    "application/vnd.ieee.1905": {
      "source": "iana"
    },
    "application/vnd.igloader": {
      "source": "iana",
      "extensions": [
        "igl"
      ]
    },
    "application/vnd.immervision-ivp": {
      "source": "iana",
      "extensions": [
        "ivp"
      ]
    },
    "application/vnd.immervision-ivu": {
      "source": "iana",
      "extensions": [
        "ivu"
      ]
    },
    "application/vnd.ims.imsccv1p1": {
      "source": "iana"
    },
    "application/vnd.ims.imsccv1p2": {
      "source": "iana"
    },
    "application/vnd.ims.imsccv1p3": {
      "source": "iana"
    },
    "application/vnd.ims.lis.v2.result+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.ims.lti.v2.toolproxy+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.ims.lti.v2.toolproxy.id+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.ims.lti.v2.toolsettings+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.ims.lti.v2.toolsettings.simple+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.informedcontrol.rms+xml": {
      "source": "iana"
    },
    "application/vnd.informix-visionary": {
      "source": "iana"
    },
    "application/vnd.infotech.project": {
      "source": "iana"
    },
    "application/vnd.infotech.project+xml": {
      "source": "iana"
    },
    "application/vnd.innopath.wamp.notification": {
      "source": "iana"
    },
    "application/vnd.insors.igm": {
      "source": "iana",
      "extensions": [
        "igm"
      ]
    },
    "application/vnd.intercon.formnet": {
      "source": "iana",
      "extensions": [
        "xpw",
        "xpx"
      ]
    },
    "application/vnd.intergeo": {
      "source": "iana",
      "extensions": [
        "i2g"
      ]
    },
    "application/vnd.intertrust.digibox": {
      "source": "iana"
    },
    "application/vnd.intertrust.nncp": {
      "source": "iana"
    },
    "application/vnd.intu.qbo": {
      "source": "iana",
      "extensions": [
        "qbo"
      ]
    },
    "application/vnd.intu.qfx": {
      "source": "iana",
      "extensions": [
        "qfx"
      ]
    },
    "application/vnd.iptc.g2.catalogitem+xml": {
      "source": "iana"
    },
    "application/vnd.iptc.g2.conceptitem+xml": {
      "source": "iana"
    },
    "application/vnd.iptc.g2.knowledgeitem+xml": {
      "source": "iana"
    },
    "application/vnd.iptc.g2.newsitem+xml": {
      "source": "iana"
    },
    "application/vnd.iptc.g2.newsmessage+xml": {
      "source": "iana"
    },
    "application/vnd.iptc.g2.packageitem+xml": {
      "source": "iana"
    },
    "application/vnd.iptc.g2.planningitem+xml": {
      "source": "iana"
    },
    "application/vnd.ipunplugged.rcprofile": {
      "source": "iana",
      "extensions": [
        "rcprofile"
      ]
    },
    "application/vnd.irepository.package+xml": {
      "source": "iana",
      "extensions": [
        "irp"
      ]
    },
    "application/vnd.is-xpr": {
      "source": "iana",
      "extensions": [
        "xpr"
      ]
    },
    "application/vnd.isac.fcs": {
      "source": "iana",
      "extensions": [
        "fcs"
      ]
    },
    "application/vnd.jam": {
      "source": "iana",
      "extensions": [
        "jam"
      ]
    },
    "application/vnd.japannet-directory-service": {
      "source": "iana"
    },
    "application/vnd.japannet-jpnstore-wakeup": {
      "source": "iana"
    },
    "application/vnd.japannet-payment-wakeup": {
      "source": "iana"
    },
    "application/vnd.japannet-registration": {
      "source": "iana"
    },
    "application/vnd.japannet-registration-wakeup": {
      "source": "iana"
    },
    "application/vnd.japannet-setstore-wakeup": {
      "source": "iana"
    },
    "application/vnd.japannet-verification": {
      "source": "iana"
    },
    "application/vnd.japannet-verification-wakeup": {
      "source": "iana"
    },
    "application/vnd.jcp.javame.midlet-rms": {
      "source": "iana",
      "extensions": [
        "rms"
      ]
    },
    "application/vnd.jisp": {
      "source": "iana",
      "extensions": [
        "jisp"
      ]
    },
    "application/vnd.joost.joda-archive": {
      "source": "iana",
      "extensions": [
        "joda"
      ]
    },
    "application/vnd.jsk.isdn-ngn": {
      "source": "iana"
    },
    "application/vnd.kahootz": {
      "source": "iana",
      "extensions": [
        "ktz",
        "ktr"
      ]
    },
    "application/vnd.kde.karbon": {
      "source": "iana",
      "extensions": [
        "karbon"
      ]
    },
    "application/vnd.kde.kchart": {
      "source": "iana",
      "extensions": [
        "chrt"
      ]
    },
    "application/vnd.kde.kformula": {
      "source": "iana",
      "extensions": [
        "kfo"
      ]
    },
    "application/vnd.kde.kivio": {
      "source": "iana",
      "extensions": [
        "flw"
      ]
    },
    "application/vnd.kde.kontour": {
      "source": "iana",
      "extensions": [
        "kon"
      ]
    },
    "application/vnd.kde.kpresenter": {
      "source": "iana",
      "extensions": [
        "kpr",
        "kpt"
      ]
    },
    "application/vnd.kde.kspread": {
      "source": "iana",
      "extensions": [
        "ksp"
      ]
    },
    "application/vnd.kde.kword": {
      "source": "iana",
      "extensions": [
        "kwd",
        "kwt"
      ]
    },
    "application/vnd.kenameaapp": {
      "source": "iana",
      "extensions": [
        "htke"
      ]
    },
    "application/vnd.kidspiration": {
      "source": "iana",
      "extensions": [
        "kia"
      ]
    },
    "application/vnd.kinar": {
      "source": "iana",
      "extensions": [
        "kne",
        "knp"
      ]
    },
    "application/vnd.koan": {
      "source": "iana",
      "extensions": [
        "skp",
        "skd",
        "skt",
        "skm"
      ]
    },
    "application/vnd.kodak-descriptor": {
      "source": "iana",
      "extensions": [
        "sse"
      ]
    },
    "application/vnd.las.las+xml": {
      "source": "iana",
      "extensions": [
        "lasxml"
      ]
    },
    "application/vnd.liberty-request+xml": {
      "source": "iana"
    },
    "application/vnd.llamagraphics.life-balance.desktop": {
      "source": "iana",
      "extensions": [
        "lbd"
      ]
    },
    "application/vnd.llamagraphics.life-balance.exchange+xml": {
      "source": "iana",
      "extensions": [
        "lbe"
      ]
    },
    "application/vnd.lotus-1-2-3": {
      "source": "iana",
      "extensions": [
        "123"
      ]
    },
    "application/vnd.lotus-approach": {
      "source": "iana",
      "extensions": [
        "apr"
      ]
    },
    "application/vnd.lotus-freelance": {
      "source": "iana",
      "extensions": [
        "pre"
      ]
    },
    "application/vnd.lotus-notes": {
      "source": "iana",
      "extensions": [
        "nsf"
      ]
    },
    "application/vnd.lotus-organizer": {
      "source": "iana",
      "extensions": [
        "org"
      ]
    },
    "application/vnd.lotus-screencam": {
      "source": "iana",
      "extensions": [
        "scm"
      ]
    },
    "application/vnd.lotus-wordpro": {
      "source": "iana",
      "extensions": [
        "lwp"
      ]
    },
    "application/vnd.macports.portpkg": {
      "source": "iana",
      "extensions": [
        "portpkg"
      ]
    },
    "application/vnd.mapbox-vector-tile": {
      "source": "iana"
    },
    "application/vnd.marlin.drm.actiontoken+xml": {
      "source": "iana"
    },
    "application/vnd.marlin.drm.conftoken+xml": {
      "source": "iana"
    },
    "application/vnd.marlin.drm.license+xml": {
      "source": "iana"
    },
    "application/vnd.marlin.drm.mdcf": {
      "source": "iana"
    },
    "application/vnd.mason+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.maxmind.maxmind-db": {
      "source": "iana"
    },
    "application/vnd.mcd": {
      "source": "iana",
      "extensions": [
        "mcd"
      ]
    },
    "application/vnd.medcalcdata": {
      "source": "iana",
      "extensions": [
        "mc1"
      ]
    },
    "application/vnd.mediastation.cdkey": {
      "source": "iana",
      "extensions": [
        "cdkey"
      ]
    },
    "application/vnd.meridian-slingshot": {
      "source": "iana"
    },
    "application/vnd.mfer": {
      "source": "iana",
      "extensions": [
        "mwf"
      ]
    },
    "application/vnd.mfmp": {
      "source": "iana",
      "extensions": [
        "mfm"
      ]
    },
    "application/vnd.micro+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.micrografx.flo": {
      "source": "iana",
      "extensions": [
        "flo"
      ]
    },
    "application/vnd.micrografx.igx": {
      "source": "iana",
      "extensions": [
        "igx"
      ]
    },
    "application/vnd.microsoft.portable-executable": {
      "source": "iana"
    },
    "application/vnd.miele+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.mif": {
      "source": "iana",
      "extensions": [
        "mif"
      ]
    },
    "application/vnd.minisoft-hp3000-save": {
      "source": "iana"
    },
    "application/vnd.mitsubishi.misty-guard.trustweb": {
      "source": "iana"
    },
    "application/vnd.mobius.daf": {
      "source": "iana",
      "extensions": [
        "daf"
      ]
    },
    "application/vnd.mobius.dis": {
      "source": "iana",
      "extensions": [
        "dis"
      ]
    },
    "application/vnd.mobius.mbk": {
      "source": "iana",
      "extensions": [
        "mbk"
      ]
    },
    "application/vnd.mobius.mqy": {
      "source": "iana",
      "extensions": [
        "mqy"
      ]
    },
    "application/vnd.mobius.msl": {
      "source": "iana",
      "extensions": [
        "msl"
      ]
    },
    "application/vnd.mobius.plc": {
      "source": "iana",
      "extensions": [
        "plc"
      ]
    },
    "application/vnd.mobius.txf": {
      "source": "iana",
      "extensions": [
        "txf"
      ]
    },
    "application/vnd.mophun.application": {
      "source": "iana",
      "extensions": [
        "mpn"
      ]
    },
    "application/vnd.mophun.certificate": {
      "source": "iana",
      "extensions": [
        "mpc"
      ]
    },
    "application/vnd.motorola.flexsuite": {
      "source": "iana"
    },
    "application/vnd.motorola.flexsuite.adsi": {
      "source": "iana"
    },
    "application/vnd.motorola.flexsuite.fis": {
      "source": "iana"
    },
    "application/vnd.motorola.flexsuite.gotap": {
      "source": "iana"
    },
    "application/vnd.motorola.flexsuite.kmr": {
      "source": "iana"
    },
    "application/vnd.motorola.flexsuite.ttc": {
      "source": "iana"
    },
    "application/vnd.motorola.flexsuite.wem": {
      "source": "iana"
    },
    "application/vnd.motorola.iprm": {
      "source": "iana"
    },
    "application/vnd.mozilla.xul+xml": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "xul"
      ]
    },
    "application/vnd.ms-3mfdocument": {
      "source": "iana"
    },
    "application/vnd.ms-artgalry": {
      "source": "iana",
      "extensions": [
        "cil"
      ]
    },
    "application/vnd.ms-asf": {
      "source": "iana"
    },
    "application/vnd.ms-cab-compressed": {
      "source": "iana",
      "extensions": [
        "cab"
      ]
    },
    "application/vnd.ms-color.iccprofile": {
      "source": "apache"
    },
    "application/vnd.ms-excel": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "xls",
        "xlm",
        "xla",
        "xlc",
        "xlt",
        "xlw"
      ]
    },
    "application/vnd.ms-excel.addin.macroenabled.12": {
      "source": "iana",
      "extensions": [
        "xlam"
      ]
    },
    "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
      "source": "iana",
      "extensions": [
        "xlsb"
      ]
    },
    "application/vnd.ms-excel.sheet.macroenabled.12": {
      "source": "iana",
      "extensions": [
        "xlsm"
      ]
    },
    "application/vnd.ms-excel.template.macroenabled.12": {
      "source": "iana",
      "extensions": [
        "xltm"
      ]
    },
    "application/vnd.ms-fontobject": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "eot"
      ]
    },
    "application/vnd.ms-htmlhelp": {
      "source": "iana",
      "extensions": [
        "chm"
      ]
    },
    "application/vnd.ms-ims": {
      "source": "iana",
      "extensions": [
        "ims"
      ]
    },
    "application/vnd.ms-lrm": {
      "source": "iana",
      "extensions": [
        "lrm"
      ]
    },
    "application/vnd.ms-office.activex+xml": {
      "source": "iana"
    },
    "application/vnd.ms-officetheme": {
      "source": "iana",
      "extensions": [
        "thmx"
      ]
    },
    "application/vnd.ms-opentype": {
      "source": "apache",
      "compressible": true
    },
    "application/vnd.ms-package.obfuscated-opentype": {
      "source": "apache"
    },
    "application/vnd.ms-pki.seccat": {
      "source": "apache",
      "extensions": [
        "cat"
      ]
    },
    "application/vnd.ms-pki.stl": {
      "source": "apache",
      "extensions": [
        "stl"
      ]
    },
    "application/vnd.ms-playready.initiator+xml": {
      "source": "iana"
    },
    "application/vnd.ms-powerpoint": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "ppt",
        "pps",
        "pot"
      ]
    },
    "application/vnd.ms-powerpoint.addin.macroenabled.12": {
      "source": "iana",
      "extensions": [
        "ppam"
      ]
    },
    "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
      "source": "iana",
      "extensions": [
        "pptm"
      ]
    },
    "application/vnd.ms-powerpoint.slide.macroenabled.12": {
      "source": "iana",
      "extensions": [
        "sldm"
      ]
    },
    "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
      "source": "iana",
      "extensions": [
        "ppsm"
      ]
    },
    "application/vnd.ms-powerpoint.template.macroenabled.12": {
      "source": "iana",
      "extensions": [
        "potm"
      ]
    },
    "application/vnd.ms-printdevicecapabilities+xml": {
      "source": "iana"
    },
    "application/vnd.ms-printing.printticket+xml": {
      "source": "apache"
    },
    "application/vnd.ms-printschematicket+xml": {
      "source": "iana"
    },
    "application/vnd.ms-project": {
      "source": "iana",
      "extensions": [
        "mpp",
        "mpt"
      ]
    },
    "application/vnd.ms-tnef": {
      "source": "iana"
    },
    "application/vnd.ms-windows.devicepairing": {
      "source": "iana"
    },
    "application/vnd.ms-windows.nwprinting.oob": {
      "source": "iana"
    },
    "application/vnd.ms-windows.printerpairing": {
      "source": "iana"
    },
    "application/vnd.ms-windows.wsd.oob": {
      "source": "iana"
    },
    "application/vnd.ms-wmdrm.lic-chlg-req": {
      "source": "iana"
    },
    "application/vnd.ms-wmdrm.lic-resp": {
      "source": "iana"
    },
    "application/vnd.ms-wmdrm.meter-chlg-req": {
      "source": "iana"
    },
    "application/vnd.ms-wmdrm.meter-resp": {
      "source": "iana"
    },
    "application/vnd.ms-word.document.macroenabled.12": {
      "source": "iana",
      "extensions": [
        "docm"
      ]
    },
    "application/vnd.ms-word.template.macroenabled.12": {
      "source": "iana",
      "extensions": [
        "dotm"
      ]
    },
    "application/vnd.ms-works": {
      "source": "iana",
      "extensions": [
        "wps",
        "wks",
        "wcm",
        "wdb"
      ]
    },
    "application/vnd.ms-wpl": {
      "source": "iana",
      "extensions": [
        "wpl"
      ]
    },
    "application/vnd.ms-xpsdocument": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "xps"
      ]
    },
    "application/vnd.msa-disk-image": {
      "source": "iana"
    },
    "application/vnd.mseq": {
      "source": "iana",
      "extensions": [
        "mseq"
      ]
    },
    "application/vnd.msign": {
      "source": "iana"
    },
    "application/vnd.multiad.creator": {
      "source": "iana"
    },
    "application/vnd.multiad.creator.cif": {
      "source": "iana"
    },
    "application/vnd.music-niff": {
      "source": "iana"
    },
    "application/vnd.musician": {
      "source": "iana",
      "extensions": [
        "mus"
      ]
    },
    "application/vnd.muvee.style": {
      "source": "iana",
      "extensions": [
        "msty"
      ]
    },
    "application/vnd.mynfc": {
      "source": "iana",
      "extensions": [
        "taglet"
      ]
    },
    "application/vnd.ncd.control": {
      "source": "iana"
    },
    "application/vnd.ncd.reference": {
      "source": "iana"
    },
    "application/vnd.nervana": {
      "source": "iana"
    },
    "application/vnd.netfpx": {
      "source": "iana"
    },
    "application/vnd.neurolanguage.nlu": {
      "source": "iana",
      "extensions": [
        "nlu"
      ]
    },
    "application/vnd.nintendo.nitro.rom": {
      "source": "iana"
    },
    "application/vnd.nintendo.snes.rom": {
      "source": "iana"
    },
    "application/vnd.nitf": {
      "source": "iana",
      "extensions": [
        "ntf",
        "nitf"
      ]
    },
    "application/vnd.noblenet-directory": {
      "source": "iana",
      "extensions": [
        "nnd"
      ]
    },
    "application/vnd.noblenet-sealer": {
      "source": "iana",
      "extensions": [
        "nns"
      ]
    },
    "application/vnd.noblenet-web": {
      "source": "iana",
      "extensions": [
        "nnw"
      ]
    },
    "application/vnd.nokia.catalogs": {
      "source": "iana"
    },
    "application/vnd.nokia.conml+wbxml": {
      "source": "iana"
    },
    "application/vnd.nokia.conml+xml": {
      "source": "iana"
    },
    "application/vnd.nokia.iptv.config+xml": {
      "source": "iana"
    },
    "application/vnd.nokia.isds-radio-presets": {
      "source": "iana"
    },
    "application/vnd.nokia.landmark+wbxml": {
      "source": "iana"
    },
    "application/vnd.nokia.landmark+xml": {
      "source": "iana"
    },
    "application/vnd.nokia.landmarkcollection+xml": {
      "source": "iana"
    },
    "application/vnd.nokia.n-gage.ac+xml": {
      "source": "iana"
    },
    "application/vnd.nokia.n-gage.data": {
      "source": "iana",
      "extensions": [
        "ngdat"
      ]
    },
    "application/vnd.nokia.n-gage.symbian.install": {
      "source": "iana",
      "extensions": [
        "n-gage"
      ]
    },
    "application/vnd.nokia.ncd": {
      "source": "iana"
    },
    "application/vnd.nokia.pcd+wbxml": {
      "source": "iana"
    },
    "application/vnd.nokia.pcd+xml": {
      "source": "iana"
    },
    "application/vnd.nokia.radio-preset": {
      "source": "iana",
      "extensions": [
        "rpst"
      ]
    },
    "application/vnd.nokia.radio-presets": {
      "source": "iana",
      "extensions": [
        "rpss"
      ]
    },
    "application/vnd.novadigm.edm": {
      "source": "iana",
      "extensions": [
        "edm"
      ]
    },
    "application/vnd.novadigm.edx": {
      "source": "iana",
      "extensions": [
        "edx"
      ]
    },
    "application/vnd.novadigm.ext": {
      "source": "iana",
      "extensions": [
        "ext"
      ]
    },
    "application/vnd.ntt-local.content-share": {
      "source": "iana"
    },
    "application/vnd.ntt-local.file-transfer": {
      "source": "iana"
    },
    "application/vnd.ntt-local.ogw_remote-access": {
      "source": "iana"
    },
    "application/vnd.ntt-local.sip-ta_remote": {
      "source": "iana"
    },
    "application/vnd.ntt-local.sip-ta_tcp_stream": {
      "source": "iana"
    },
    "application/vnd.oasis.opendocument.chart": {
      "source": "iana",
      "extensions": [
        "odc"
      ]
    },
    "application/vnd.oasis.opendocument.chart-template": {
      "source": "iana",
      "extensions": [
        "otc"
      ]
    },
    "application/vnd.oasis.opendocument.database": {
      "source": "iana",
      "extensions": [
        "odb"
      ]
    },
    "application/vnd.oasis.opendocument.formula": {
      "source": "iana",
      "extensions": [
        "odf"
      ]
    },
    "application/vnd.oasis.opendocument.formula-template": {
      "source": "iana",
      "extensions": [
        "odft"
      ]
    },
    "application/vnd.oasis.opendocument.graphics": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "odg"
      ]
    },
    "application/vnd.oasis.opendocument.graphics-template": {
      "source": "iana",
      "extensions": [
        "otg"
      ]
    },
    "application/vnd.oasis.opendocument.image": {
      "source": "iana",
      "extensions": [
        "odi"
      ]
    },
    "application/vnd.oasis.opendocument.image-template": {
      "source": "iana",
      "extensions": [
        "oti"
      ]
    },
    "application/vnd.oasis.opendocument.presentation": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "odp"
      ]
    },
    "application/vnd.oasis.opendocument.presentation-template": {
      "source": "iana",
      "extensions": [
        "otp"
      ]
    },
    "application/vnd.oasis.opendocument.spreadsheet": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "ods"
      ]
    },
    "application/vnd.oasis.opendocument.spreadsheet-template": {
      "source": "iana",
      "extensions": [
        "ots"
      ]
    },
    "application/vnd.oasis.opendocument.text": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "odt"
      ]
    },
    "application/vnd.oasis.opendocument.text-master": {
      "source": "iana",
      "extensions": [
        "odm"
      ]
    },
    "application/vnd.oasis.opendocument.text-template": {
      "source": "iana",
      "extensions": [
        "ott"
      ]
    },
    "application/vnd.oasis.opendocument.text-web": {
      "source": "iana",
      "extensions": [
        "oth"
      ]
    },
    "application/vnd.obn": {
      "source": "iana"
    },
    "application/vnd.oftn.l10n+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.oipf.contentaccessdownload+xml": {
      "source": "iana"
    },
    "application/vnd.oipf.contentaccessstreaming+xml": {
      "source": "iana"
    },
    "application/vnd.oipf.cspg-hexbinary": {
      "source": "iana"
    },
    "application/vnd.oipf.dae.svg+xml": {
      "source": "iana"
    },
    "application/vnd.oipf.dae.xhtml+xml": {
      "source": "iana"
    },
    "application/vnd.oipf.mippvcontrolmessage+xml": {
      "source": "iana"
    },
    "application/vnd.oipf.pae.gem": {
      "source": "iana"
    },
    "application/vnd.oipf.spdiscovery+xml": {
      "source": "iana"
    },
    "application/vnd.oipf.spdlist+xml": {
      "source": "iana"
    },
    "application/vnd.oipf.ueprofile+xml": {
      "source": "iana"
    },
    "application/vnd.oipf.userprofile+xml": {
      "source": "iana"
    },
    "application/vnd.olpc-sugar": {
      "source": "iana",
      "extensions": [
        "xo"
      ]
    },
    "application/vnd.oma-scws-config": {
      "source": "iana"
    },
    "application/vnd.oma-scws-http-request": {
      "source": "iana"
    },
    "application/vnd.oma-scws-http-response": {
      "source": "iana"
    },
    "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
      "source": "iana"
    },
    "application/vnd.oma.bcast.drm-trigger+xml": {
      "source": "iana"
    },
    "application/vnd.oma.bcast.imd+xml": {
      "source": "iana"
    },
    "application/vnd.oma.bcast.ltkm": {
      "source": "iana"
    },
    "application/vnd.oma.bcast.notification+xml": {
      "source": "iana"
    },
    "application/vnd.oma.bcast.provisioningtrigger": {
      "source": "iana"
    },
    "application/vnd.oma.bcast.sgboot": {
      "source": "iana"
    },
    "application/vnd.oma.bcast.sgdd+xml": {
      "source": "iana"
    },
    "application/vnd.oma.bcast.sgdu": {
      "source": "iana"
    },
    "application/vnd.oma.bcast.simple-symbol-container": {
      "source": "iana"
    },
    "application/vnd.oma.bcast.smartcard-trigger+xml": {
      "source": "iana"
    },
    "application/vnd.oma.bcast.sprov+xml": {
      "source": "iana"
    },
    "application/vnd.oma.bcast.stkm": {
      "source": "iana"
    },
    "application/vnd.oma.cab-address-book+xml": {
      "source": "iana"
    },
    "application/vnd.oma.cab-feature-handler+xml": {
      "source": "iana"
    },
    "application/vnd.oma.cab-pcc+xml": {
      "source": "iana"
    },
    "application/vnd.oma.cab-subs-invite+xml": {
      "source": "iana"
    },
    "application/vnd.oma.cab-user-prefs+xml": {
      "source": "iana"
    },
    "application/vnd.oma.dcd": {
      "source": "iana"
    },
    "application/vnd.oma.dcdc": {
      "source": "iana"
    },
    "application/vnd.oma.dd2+xml": {
      "source": "iana",
      "extensions": [
        "dd2"
      ]
    },
    "application/vnd.oma.drm.risd+xml": {
      "source": "iana"
    },
    "application/vnd.oma.group-usage-list+xml": {
      "source": "iana"
    },
    "application/vnd.oma.pal+xml": {
      "source": "iana"
    },
    "application/vnd.oma.poc.detailed-progress-report+xml": {
      "source": "iana"
    },
    "application/vnd.oma.poc.final-report+xml": {
      "source": "iana"
    },
    "application/vnd.oma.poc.groups+xml": {
      "source": "iana"
    },
    "application/vnd.oma.poc.invocation-descriptor+xml": {
      "source": "iana"
    },
    "application/vnd.oma.poc.optimized-progress-report+xml": {
      "source": "iana"
    },
    "application/vnd.oma.push": {
      "source": "iana"
    },
    "application/vnd.oma.scidm.messages+xml": {
      "source": "iana"
    },
    "application/vnd.oma.xcap-directory+xml": {
      "source": "iana"
    },
    "application/vnd.omads-email+xml": {
      "source": "iana"
    },
    "application/vnd.omads-file+xml": {
      "source": "iana"
    },
    "application/vnd.omads-folder+xml": {
      "source": "iana"
    },
    "application/vnd.omaloc-supl-init": {
      "source": "iana"
    },
    "application/vnd.openblox.game+xml": {
      "source": "iana"
    },
    "application/vnd.openblox.game-binary": {
      "source": "iana"
    },
    "application/vnd.openeye.oeb": {
      "source": "iana"
    },
    "application/vnd.openofficeorg.extension": {
      "source": "apache",
      "extensions": [
        "oxt"
      ]
    },
    "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.drawing+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml-template": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "pptx"
      ]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slide": {
      "source": "iana",
      "extensions": [
        "sldx"
      ]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
      "source": "iana",
      "extensions": [
        "ppsx"
      ]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.template": {
      "source": "apache",
      "extensions": [
        "potx"
      ]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml-template": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "xlsx"
      ]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
      "source": "apache",
      "extensions": [
        "xltx"
      ]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.theme+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.vmldrawing": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml-template": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "docx"
      ]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
      "source": "apache",
      "extensions": [
        "dotx"
      ]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-package.core-properties+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
      "source": "iana"
    },
    "application/vnd.openxmlformats-package.relationships+xml": {
      "source": "iana"
    },
    "application/vnd.oracle.resource+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.orange.indata": {
      "source": "iana"
    },
    "application/vnd.osa.netdeploy": {
      "source": "iana"
    },
    "application/vnd.osgeo.mapguide.package": {
      "source": "iana",
      "extensions": [
        "mgp"
      ]
    },
    "application/vnd.osgi.bundle": {
      "source": "iana"
    },
    "application/vnd.osgi.dp": {
      "source": "iana",
      "extensions": [
        "dp"
      ]
    },
    "application/vnd.osgi.subsystem": {
      "source": "iana",
      "extensions": [
        "esa"
      ]
    },
    "application/vnd.otps.ct-kip+xml": {
      "source": "iana"
    },
    "application/vnd.oxli.countgraph": {
      "source": "iana"
    },
    "application/vnd.pagerduty+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.palm": {
      "source": "iana",
      "extensions": [
        "pdb",
        "pqa",
        "oprc"
      ]
    },
    "application/vnd.panoply": {
      "source": "iana"
    },
    "application/vnd.paos+xml": {
      "source": "iana"
    },
    "application/vnd.paos.xml": {
      "source": "apache"
    },
    "application/vnd.pawaafile": {
      "source": "iana",
      "extensions": [
        "paw"
      ]
    },
    "application/vnd.pcos": {
      "source": "iana"
    },
    "application/vnd.pg.format": {
      "source": "iana",
      "extensions": [
        "str"
      ]
    },
    "application/vnd.pg.osasli": {
      "source": "iana",
      "extensions": [
        "ei6"
      ]
    },
    "application/vnd.piaccess.application-licence": {
      "source": "iana"
    },
    "application/vnd.picsel": {
      "source": "iana",
      "extensions": [
        "efif"
      ]
    },
    "application/vnd.pmi.widget": {
      "source": "iana",
      "extensions": [
        "wg"
      ]
    },
    "application/vnd.poc.group-advertisement+xml": {
      "source": "iana"
    },
    "application/vnd.pocketlearn": {
      "source": "iana",
      "extensions": [
        "plf"
      ]
    },
    "application/vnd.powerbuilder6": {
      "source": "iana",
      "extensions": [
        "pbd"
      ]
    },
    "application/vnd.powerbuilder6-s": {
      "source": "iana"
    },
    "application/vnd.powerbuilder7": {
      "source": "iana"
    },
    "application/vnd.powerbuilder7-s": {
      "source": "iana"
    },
    "application/vnd.powerbuilder75": {
      "source": "iana"
    },
    "application/vnd.powerbuilder75-s": {
      "source": "iana"
    },
    "application/vnd.preminet": {
      "source": "iana"
    },
    "application/vnd.previewsystems.box": {
      "source": "iana",
      "extensions": [
        "box"
      ]
    },
    "application/vnd.proteus.magazine": {
      "source": "iana",
      "extensions": [
        "mgz"
      ]
    },
    "application/vnd.publishare-delta-tree": {
      "source": "iana",
      "extensions": [
        "qps"
      ]
    },
    "application/vnd.pvi.ptid1": {
      "source": "iana",
      "extensions": [
        "ptid"
      ]
    },
    "application/vnd.pwg-multiplexed": {
      "source": "iana"
    },
    "application/vnd.pwg-xhtml-print+xml": {
      "source": "iana"
    },
    "application/vnd.qualcomm.brew-app-res": {
      "source": "iana"
    },
    "application/vnd.quark.quarkxpress": {
      "source": "iana",
      "extensions": [
        "qxd",
        "qxt",
        "qwd",
        "qwt",
        "qxl",
        "qxb"
      ]
    },
    "application/vnd.quobject-quoxdocument": {
      "source": "iana"
    },
    "application/vnd.radisys.moml+xml": {
      "source": "iana"
    },
    "application/vnd.radisys.msml+xml": {
      "source": "iana"
    },
    "application/vnd.radisys.msml-audit+xml": {
      "source": "iana"
    },
    "application/vnd.radisys.msml-audit-conf+xml": {
      "source": "iana"
    },
    "application/vnd.radisys.msml-audit-conn+xml": {
      "source": "iana"
    },
    "application/vnd.radisys.msml-audit-dialog+xml": {
      "source": "iana"
    },
    "application/vnd.radisys.msml-audit-stream+xml": {
      "source": "iana"
    },
    "application/vnd.radisys.msml-conf+xml": {
      "source": "iana"
    },
    "application/vnd.radisys.msml-dialog+xml": {
      "source": "iana"
    },
    "application/vnd.radisys.msml-dialog-base+xml": {
      "source": "iana"
    },
    "application/vnd.radisys.msml-dialog-fax-detect+xml": {
      "source": "iana"
    },
    "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
      "source": "iana"
    },
    "application/vnd.radisys.msml-dialog-group+xml": {
      "source": "iana"
    },
    "application/vnd.radisys.msml-dialog-speech+xml": {
      "source": "iana"
    },
    "application/vnd.radisys.msml-dialog-transform+xml": {
      "source": "iana"
    },
    "application/vnd.rainstor.data": {
      "source": "iana"
    },
    "application/vnd.rapid": {
      "source": "iana"
    },
    "application/vnd.realvnc.bed": {
      "source": "iana",
      "extensions": [
        "bed"
      ]
    },
    "application/vnd.recordare.musicxml": {
      "source": "iana",
      "extensions": [
        "mxl"
      ]
    },
    "application/vnd.recordare.musicxml+xml": {
      "source": "iana",
      "extensions": [
        "musicxml"
      ]
    },
    "application/vnd.renlearn.rlprint": {
      "source": "iana"
    },
    "application/vnd.rig.cryptonote": {
      "source": "iana",
      "extensions": [
        "cryptonote"
      ]
    },
    "application/vnd.rim.cod": {
      "source": "apache",
      "extensions": [
        "cod"
      ]
    },
    "application/vnd.rn-realmedia": {
      "source": "apache",
      "extensions": [
        "rm"
      ]
    },
    "application/vnd.rn-realmedia-vbr": {
      "source": "apache",
      "extensions": [
        "rmvb"
      ]
    },
    "application/vnd.route66.link66+xml": {
      "source": "iana",
      "extensions": [
        "link66"
      ]
    },
    "application/vnd.rs-274x": {
      "source": "iana"
    },
    "application/vnd.ruckus.download": {
      "source": "iana"
    },
    "application/vnd.s3sms": {
      "source": "iana"
    },
    "application/vnd.sailingtracker.track": {
      "source": "iana",
      "extensions": [
        "st"
      ]
    },
    "application/vnd.sbm.cid": {
      "source": "iana"
    },
    "application/vnd.sbm.mid2": {
      "source": "iana"
    },
    "application/vnd.scribus": {
      "source": "iana"
    },
    "application/vnd.sealed.3df": {
      "source": "iana"
    },
    "application/vnd.sealed.csf": {
      "source": "iana"
    },
    "application/vnd.sealed.doc": {
      "source": "iana"
    },
    "application/vnd.sealed.eml": {
      "source": "iana"
    },
    "application/vnd.sealed.mht": {
      "source": "iana"
    },
    "application/vnd.sealed.net": {
      "source": "iana"
    },
    "application/vnd.sealed.ppt": {
      "source": "iana"
    },
    "application/vnd.sealed.tiff": {
      "source": "iana"
    },
    "application/vnd.sealed.xls": {
      "source": "iana"
    },
    "application/vnd.sealedmedia.softseal.html": {
      "source": "iana"
    },
    "application/vnd.sealedmedia.softseal.pdf": {
      "source": "iana"
    },
    "application/vnd.seemail": {
      "source": "iana",
      "extensions": [
        "see"
      ]
    },
    "application/vnd.sema": {
      "source": "iana",
      "extensions": [
        "sema"
      ]
    },
    "application/vnd.semd": {
      "source": "iana",
      "extensions": [
        "semd"
      ]
    },
    "application/vnd.semf": {
      "source": "iana",
      "extensions": [
        "semf"
      ]
    },
    "application/vnd.shana.informed.formdata": {
      "source": "iana",
      "extensions": [
        "ifm"
      ]
    },
    "application/vnd.shana.informed.formtemplate": {
      "source": "iana",
      "extensions": [
        "itp"
      ]
    },
    "application/vnd.shana.informed.interchange": {
      "source": "iana",
      "extensions": [
        "iif"
      ]
    },
    "application/vnd.shana.informed.package": {
      "source": "iana",
      "extensions": [
        "ipk"
      ]
    },
    "application/vnd.simtech-mindmapper": {
      "source": "iana",
      "extensions": [
        "twd",
        "twds"
      ]
    },
    "application/vnd.siren+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.smaf": {
      "source": "iana",
      "extensions": [
        "mmf"
      ]
    },
    "application/vnd.smart.notebook": {
      "source": "iana"
    },
    "application/vnd.smart.teacher": {
      "source": "iana",
      "extensions": [
        "teacher"
      ]
    },
    "application/vnd.software602.filler.form+xml": {
      "source": "iana"
    },
    "application/vnd.software602.filler.form-xml-zip": {
      "source": "iana"
    },
    "application/vnd.solent.sdkm+xml": {
      "source": "iana",
      "extensions": [
        "sdkm",
        "sdkd"
      ]
    },
    "application/vnd.spotfire.dxp": {
      "source": "iana",
      "extensions": [
        "dxp"
      ]
    },
    "application/vnd.spotfire.sfs": {
      "source": "iana",
      "extensions": [
        "sfs"
      ]
    },
    "application/vnd.sss-cod": {
      "source": "iana"
    },
    "application/vnd.sss-dtf": {
      "source": "iana"
    },
    "application/vnd.sss-ntf": {
      "source": "iana"
    },
    "application/vnd.stardivision.calc": {
      "source": "apache",
      "extensions": [
        "sdc"
      ]
    },
    "application/vnd.stardivision.draw": {
      "source": "apache",
      "extensions": [
        "sda"
      ]
    },
    "application/vnd.stardivision.impress": {
      "source": "apache",
      "extensions": [
        "sdd"
      ]
    },
    "application/vnd.stardivision.math": {
      "source": "apache",
      "extensions": [
        "smf"
      ]
    },
    "application/vnd.stardivision.writer": {
      "source": "apache",
      "extensions": [
        "sdw",
        "vor"
      ]
    },
    "application/vnd.stardivision.writer-global": {
      "source": "apache",
      "extensions": [
        "sgl"
      ]
    },
    "application/vnd.stepmania.package": {
      "source": "iana",
      "extensions": [
        "smzip"
      ]
    },
    "application/vnd.stepmania.stepchart": {
      "source": "iana",
      "extensions": [
        "sm"
      ]
    },
    "application/vnd.street-stream": {
      "source": "iana"
    },
    "application/vnd.sun.wadl+xml": {
      "source": "iana"
    },
    "application/vnd.sun.xml.calc": {
      "source": "apache",
      "extensions": [
        "sxc"
      ]
    },
    "application/vnd.sun.xml.calc.template": {
      "source": "apache",
      "extensions": [
        "stc"
      ]
    },
    "application/vnd.sun.xml.draw": {
      "source": "apache",
      "extensions": [
        "sxd"
      ]
    },
    "application/vnd.sun.xml.draw.template": {
      "source": "apache",
      "extensions": [
        "std"
      ]
    },
    "application/vnd.sun.xml.impress": {
      "source": "apache",
      "extensions": [
        "sxi"
      ]
    },
    "application/vnd.sun.xml.impress.template": {
      "source": "apache",
      "extensions": [
        "sti"
      ]
    },
    "application/vnd.sun.xml.math": {
      "source": "apache",
      "extensions": [
        "sxm"
      ]
    },
    "application/vnd.sun.xml.writer": {
      "source": "apache",
      "extensions": [
        "sxw"
      ]
    },
    "application/vnd.sun.xml.writer.global": {
      "source": "apache",
      "extensions": [
        "sxg"
      ]
    },
    "application/vnd.sun.xml.writer.template": {
      "source": "apache",
      "extensions": [
        "stw"
      ]
    },
    "application/vnd.sus-calendar": {
      "source": "iana",
      "extensions": [
        "sus",
        "susp"
      ]
    },
    "application/vnd.svd": {
      "source": "iana",
      "extensions": [
        "svd"
      ]
    },
    "application/vnd.swiftview-ics": {
      "source": "iana"
    },
    "application/vnd.symbian.install": {
      "source": "apache",
      "extensions": [
        "sis",
        "sisx"
      ]
    },
    "application/vnd.syncml+xml": {
      "source": "iana",
      "extensions": [
        "xsm"
      ]
    },
    "application/vnd.syncml.dm+wbxml": {
      "source": "iana",
      "extensions": [
        "bdm"
      ]
    },
    "application/vnd.syncml.dm+xml": {
      "source": "iana",
      "extensions": [
        "xdm"
      ]
    },
    "application/vnd.syncml.dm.notification": {
      "source": "iana"
    },
    "application/vnd.syncml.dmddf+wbxml": {
      "source": "iana"
    },
    "application/vnd.syncml.dmddf+xml": {
      "source": "iana"
    },
    "application/vnd.syncml.dmtnds+wbxml": {
      "source": "iana"
    },
    "application/vnd.syncml.dmtnds+xml": {
      "source": "iana"
    },
    "application/vnd.syncml.ds.notification": {
      "source": "iana"
    },
    "application/vnd.tao.intent-module-archive": {
      "source": "iana",
      "extensions": [
        "tao"
      ]
    },
    "application/vnd.tcpdump.pcap": {
      "source": "iana",
      "extensions": [
        "pcap",
        "cap",
        "dmp"
      ]
    },
    "application/vnd.tmd.mediaflex.api+xml": {
      "source": "iana"
    },
    "application/vnd.tml": {
      "source": "iana"
    },
    "application/vnd.tmobile-livetv": {
      "source": "iana",
      "extensions": [
        "tmo"
      ]
    },
    "application/vnd.trid.tpt": {
      "source": "iana",
      "extensions": [
        "tpt"
      ]
    },
    "application/vnd.triscape.mxs": {
      "source": "iana",
      "extensions": [
        "mxs"
      ]
    },
    "application/vnd.trueapp": {
      "source": "iana",
      "extensions": [
        "tra"
      ]
    },
    "application/vnd.truedoc": {
      "source": "iana"
    },
    "application/vnd.ubisoft.webplayer": {
      "source": "iana"
    },
    "application/vnd.ufdl": {
      "source": "iana",
      "extensions": [
        "ufd",
        "ufdl"
      ]
    },
    "application/vnd.uiq.theme": {
      "source": "iana",
      "extensions": [
        "utz"
      ]
    },
    "application/vnd.umajin": {
      "source": "iana",
      "extensions": [
        "umj"
      ]
    },
    "application/vnd.unity": {
      "source": "iana",
      "extensions": [
        "unityweb"
      ]
    },
    "application/vnd.uoml+xml": {
      "source": "iana",
      "extensions": [
        "uoml"
      ]
    },
    "application/vnd.uplanet.alert": {
      "source": "iana"
    },
    "application/vnd.uplanet.alert-wbxml": {
      "source": "iana"
    },
    "application/vnd.uplanet.bearer-choice": {
      "source": "iana"
    },
    "application/vnd.uplanet.bearer-choice-wbxml": {
      "source": "iana"
    },
    "application/vnd.uplanet.cacheop": {
      "source": "iana"
    },
    "application/vnd.uplanet.cacheop-wbxml": {
      "source": "iana"
    },
    "application/vnd.uplanet.channel": {
      "source": "iana"
    },
    "application/vnd.uplanet.channel-wbxml": {
      "source": "iana"
    },
    "application/vnd.uplanet.list": {
      "source": "iana"
    },
    "application/vnd.uplanet.list-wbxml": {
      "source": "iana"
    },
    "application/vnd.uplanet.listcmd": {
      "source": "iana"
    },
    "application/vnd.uplanet.listcmd-wbxml": {
      "source": "iana"
    },
    "application/vnd.uplanet.signal": {
      "source": "iana"
    },
    "application/vnd.uri-map": {
      "source": "iana"
    },
    "application/vnd.valve.source.material": {
      "source": "iana"
    },
    "application/vnd.vcx": {
      "source": "iana",
      "extensions": [
        "vcx"
      ]
    },
    "application/vnd.vd-study": {
      "source": "iana"
    },
    "application/vnd.vectorworks": {
      "source": "iana"
    },
    "application/vnd.verimatrix.vcas": {
      "source": "iana"
    },
    "application/vnd.vidsoft.vidconference": {
      "source": "iana"
    },
    "application/vnd.visio": {
      "source": "iana",
      "extensions": [
        "vsd",
        "vst",
        "vss",
        "vsw"
      ]
    },
    "application/vnd.visionary": {
      "source": "iana",
      "extensions": [
        "vis"
      ]
    },
    "application/vnd.vividence.scriptfile": {
      "source": "iana"
    },
    "application/vnd.vsf": {
      "source": "iana",
      "extensions": [
        "vsf"
      ]
    },
    "application/vnd.wap.sic": {
      "source": "iana"
    },
    "application/vnd.wap.slc": {
      "source": "iana"
    },
    "application/vnd.wap.wbxml": {
      "source": "iana",
      "extensions": [
        "wbxml"
      ]
    },
    "application/vnd.wap.wmlc": {
      "source": "iana",
      "extensions": [
        "wmlc"
      ]
    },
    "application/vnd.wap.wmlscriptc": {
      "source": "iana",
      "extensions": [
        "wmlsc"
      ]
    },
    "application/vnd.webturbo": {
      "source": "iana",
      "extensions": [
        "wtb"
      ]
    },
    "application/vnd.wfa.p2p": {
      "source": "iana"
    },
    "application/vnd.wfa.wsc": {
      "source": "iana"
    },
    "application/vnd.windows.devicepairing": {
      "source": "iana"
    },
    "application/vnd.wmc": {
      "source": "iana"
    },
    "application/vnd.wmf.bootstrap": {
      "source": "iana"
    },
    "application/vnd.wolfram.mathematica": {
      "source": "iana"
    },
    "application/vnd.wolfram.mathematica.package": {
      "source": "iana"
    },
    "application/vnd.wolfram.player": {
      "source": "iana",
      "extensions": [
        "nbp"
      ]
    },
    "application/vnd.wordperfect": {
      "source": "iana",
      "extensions": [
        "wpd"
      ]
    },
    "application/vnd.wqd": {
      "source": "iana",
      "extensions": [
        "wqd"
      ]
    },
    "application/vnd.wrq-hp3000-labelled": {
      "source": "iana"
    },
    "application/vnd.wt.stf": {
      "source": "iana",
      "extensions": [
        "stf"
      ]
    },
    "application/vnd.wv.csp+wbxml": {
      "source": "iana"
    },
    "application/vnd.wv.csp+xml": {
      "source": "iana"
    },
    "application/vnd.wv.ssp+xml": {
      "source": "iana"
    },
    "application/vnd.xacml+json": {
      "source": "iana",
      "compressible": true
    },
    "application/vnd.xara": {
      "source": "iana",
      "extensions": [
        "xar"
      ]
    },
    "application/vnd.xfdl": {
      "source": "iana",
      "extensions": [
        "xfdl"
      ]
    },
    "application/vnd.xfdl.webform": {
      "source": "iana"
    },
    "application/vnd.xmi+xml": {
      "source": "iana"
    },
    "application/vnd.xmpie.cpkg": {
      "source": "iana"
    },
    "application/vnd.xmpie.dpkg": {
      "source": "iana"
    },
    "application/vnd.xmpie.plan": {
      "source": "iana"
    },
    "application/vnd.xmpie.ppkg": {
      "source": "iana"
    },
    "application/vnd.xmpie.xlim": {
      "source": "iana"
    },
    "application/vnd.yamaha.hv-dic": {
      "source": "iana",
      "extensions": [
        "hvd"
      ]
    },
    "application/vnd.yamaha.hv-script": {
      "source": "iana",
      "extensions": [
        "hvs"
      ]
    },
    "application/vnd.yamaha.hv-voice": {
      "source": "iana",
      "extensions": [
        "hvp"
      ]
    },
    "application/vnd.yamaha.openscoreformat": {
      "source": "iana",
      "extensions": [
        "osf"
      ]
    },
    "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
      "source": "iana",
      "extensions": [
        "osfpvg"
      ]
    },
    "application/vnd.yamaha.remote-setup": {
      "source": "iana"
    },
    "application/vnd.yamaha.smaf-audio": {
      "source": "iana",
      "extensions": [
        "saf"
      ]
    },
    "application/vnd.yamaha.smaf-phrase": {
      "source": "iana",
      "extensions": [
        "spf"
      ]
    },
    "application/vnd.yamaha.through-ngn": {
      "source": "iana"
    },
    "application/vnd.yamaha.tunnel-udpencap": {
      "source": "iana"
    },
    "application/vnd.yaoweme": {
      "source": "iana"
    },
    "application/vnd.yellowriver-custom-menu": {
      "source": "iana",
      "extensions": [
        "cmp"
      ]
    },
    "application/vnd.zul": {
      "source": "iana",
      "extensions": [
        "zir",
        "zirz"
      ]
    },
    "application/vnd.zzazz.deck+xml": {
      "source": "iana",
      "extensions": [
        "zaz"
      ]
    },
    "application/voicexml+xml": {
      "source": "iana",
      "extensions": [
        "vxml"
      ]
    },
    "application/vq-rtcpxr": {
      "source": "iana"
    },
    "application/watcherinfo+xml": {
      "source": "iana"
    },
    "application/whoispp-query": {
      "source": "iana"
    },
    "application/whoispp-response": {
      "source": "iana"
    },
    "application/widget": {
      "source": "iana",
      "extensions": [
        "wgt"
      ]
    },
    "application/winhlp": {
      "source": "apache",
      "extensions": [
        "hlp"
      ]
    },
    "application/wita": {
      "source": "iana"
    },
    "application/wordperfect5.1": {
      "source": "iana"
    },
    "application/wsdl+xml": {
      "source": "iana",
      "extensions": [
        "wsdl"
      ]
    },
    "application/wspolicy+xml": {
      "source": "iana",
      "extensions": [
        "wspolicy"
      ]
    },
    "application/x-7z-compressed": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "7z"
      ]
    },
    "application/x-abiword": {
      "source": "apache",
      "extensions": [
        "abw"
      ]
    },
    "application/x-ace-compressed": {
      "source": "apache",
      "extensions": [
        "ace"
      ]
    },
    "application/x-amf": {
      "source": "apache"
    },
    "application/x-apple-diskimage": {
      "source": "apache",
      "extensions": [
        "dmg"
      ]
    },
    "application/x-authorware-bin": {
      "source": "apache",
      "extensions": [
        "aab",
        "x32",
        "u32",
        "vox"
      ]
    },
    "application/x-authorware-map": {
      "source": "apache",
      "extensions": [
        "aam"
      ]
    },
    "application/x-authorware-seg": {
      "source": "apache",
      "extensions": [
        "aas"
      ]
    },
    "application/x-bcpio": {
      "source": "apache",
      "extensions": [
        "bcpio"
      ]
    },
    "application/x-bdoc": {
      "compressible": false,
      "extensions": [
        "bdoc"
      ]
    },
    "application/x-bittorrent": {
      "source": "apache",
      "extensions": [
        "torrent"
      ]
    },
    "application/x-blorb": {
      "source": "apache",
      "extensions": [
        "blb",
        "blorb"
      ]
    },
    "application/x-bzip": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "bz"
      ]
    },
    "application/x-bzip2": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "bz2",
        "boz"
      ]
    },
    "application/x-cbr": {
      "source": "apache",
      "extensions": [
        "cbr",
        "cba",
        "cbt",
        "cbz",
        "cb7"
      ]
    },
    "application/x-cdlink": {
      "source": "apache",
      "extensions": [
        "vcd"
      ]
    },
    "application/x-cfs-compressed": {
      "source": "apache",
      "extensions": [
        "cfs"
      ]
    },
    "application/x-chat": {
      "source": "apache",
      "extensions": [
        "chat"
      ]
    },
    "application/x-chess-pgn": {
      "source": "apache",
      "extensions": [
        "pgn"
      ]
    },
    "application/x-chrome-extension": {
      "extensions": [
        "crx"
      ]
    },
    "application/x-cocoa": {
      "source": "nginx",
      "extensions": [
        "cco"
      ]
    },
    "application/x-compress": {
      "source": "apache"
    },
    "application/x-conference": {
      "source": "apache",
      "extensions": [
        "nsc"
      ]
    },
    "application/x-cpio": {
      "source": "apache",
      "extensions": [
        "cpio"
      ]
    },
    "application/x-csh": {
      "source": "apache",
      "extensions": [
        "csh"
      ]
    },
    "application/x-deb": {
      "compressible": false
    },
    "application/x-debian-package": {
      "source": "apache",
      "extensions": [
        "deb",
        "udeb"
      ]
    },
    "application/x-dgc-compressed": {
      "source": "apache",
      "extensions": [
        "dgc"
      ]
    },
    "application/x-director": {
      "source": "apache",
      "extensions": [
        "dir",
        "dcr",
        "dxr",
        "cst",
        "cct",
        "cxt",
        "w3d",
        "fgd",
        "swa"
      ]
    },
    "application/x-doom": {
      "source": "apache",
      "extensions": [
        "wad"
      ]
    },
    "application/x-dtbncx+xml": {
      "source": "apache",
      "extensions": [
        "ncx"
      ]
    },
    "application/x-dtbook+xml": {
      "source": "apache",
      "extensions": [
        "dtb"
      ]
    },
    "application/x-dtbresource+xml": {
      "source": "apache",
      "extensions": [
        "res"
      ]
    },
    "application/x-dvi": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "dvi"
      ]
    },
    "application/x-envoy": {
      "source": "apache",
      "extensions": [
        "evy"
      ]
    },
    "application/x-eva": {
      "source": "apache",
      "extensions": [
        "eva"
      ]
    },
    "application/x-font-bdf": {
      "source": "apache",
      "extensions": [
        "bdf"
      ]
    },
    "application/x-font-dos": {
      "source": "apache"
    },
    "application/x-font-framemaker": {
      "source": "apache"
    },
    "application/x-font-ghostscript": {
      "source": "apache",
      "extensions": [
        "gsf"
      ]
    },
    "application/x-font-libgrx": {
      "source": "apache"
    },
    "application/x-font-linux-psf": {
      "source": "apache",
      "extensions": [
        "psf"
      ]
    },
    "application/x-font-otf": {
      "source": "apache",
      "compressible": true,
      "extensions": [
        "otf"
      ]
    },
    "application/x-font-pcf": {
      "source": "apache",
      "extensions": [
        "pcf"
      ]
    },
    "application/x-font-snf": {
      "source": "apache",
      "extensions": [
        "snf"
      ]
    },
    "application/x-font-speedo": {
      "source": "apache"
    },
    "application/x-font-sunos-news": {
      "source": "apache"
    },
    "application/x-font-ttf": {
      "source": "apache",
      "compressible": true,
      "extensions": [
        "ttf",
        "ttc"
      ]
    },
    "application/x-font-type1": {
      "source": "apache",
      "extensions": [
        "pfa",
        "pfb",
        "pfm",
        "afm"
      ]
    },
    "application/x-font-vfont": {
      "source": "apache"
    },
    "application/x-freearc": {
      "source": "apache",
      "extensions": [
        "arc"
      ]
    },
    "application/x-futuresplash": {
      "source": "apache",
      "extensions": [
        "spl"
      ]
    },
    "application/x-gca-compressed": {
      "source": "apache",
      "extensions": [
        "gca"
      ]
    },
    "application/x-glulx": {
      "source": "apache",
      "extensions": [
        "ulx"
      ]
    },
    "application/x-gnumeric": {
      "source": "apache",
      "extensions": [
        "gnumeric"
      ]
    },
    "application/x-gramps-xml": {
      "source": "apache",
      "extensions": [
        "gramps"
      ]
    },
    "application/x-gtar": {
      "source": "apache",
      "extensions": [
        "gtar"
      ]
    },
    "application/x-gzip": {
      "source": "apache"
    },
    "application/x-hdf": {
      "source": "apache",
      "extensions": [
        "hdf"
      ]
    },
    "application/x-httpd-php": {
      "compressible": true,
      "extensions": [
        "php"
      ]
    },
    "application/x-install-instructions": {
      "source": "apache",
      "extensions": [
        "install"
      ]
    },
    "application/x-iso9660-image": {
      "source": "apache",
      "extensions": [
        "iso"
      ]
    },
    "application/x-java-archive-diff": {
      "source": "nginx",
      "extensions": [
        "jardiff"
      ]
    },
    "application/x-java-jnlp-file": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "jnlp"
      ]
    },
    "application/x-javascript": {
      "compressible": true
    },
    "application/x-latex": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "latex"
      ]
    },
    "application/x-lua-bytecode": {
      "extensions": [
        "luac"
      ]
    },
    "application/x-lzh-compressed": {
      "source": "apache",
      "extensions": [
        "lzh",
        "lha"
      ]
    },
    "application/x-makeself": {
      "source": "nginx",
      "extensions": [
        "run"
      ]
    },
    "application/x-mie": {
      "source": "apache",
      "extensions": [
        "mie"
      ]
    },
    "application/x-mobipocket-ebook": {
      "source": "apache",
      "extensions": [
        "prc",
        "mobi"
      ]
    },
    "application/x-mpegurl": {
      "compressible": false
    },
    "application/x-ms-application": {
      "source": "apache",
      "extensions": [
        "application"
      ]
    },
    "application/x-ms-shortcut": {
      "source": "apache",
      "extensions": [
        "lnk"
      ]
    },
    "application/x-ms-wmd": {
      "source": "apache",
      "extensions": [
        "wmd"
      ]
    },
    "application/x-ms-wmz": {
      "source": "apache",
      "extensions": [
        "wmz"
      ]
    },
    "application/x-ms-xbap": {
      "source": "apache",
      "extensions": [
        "xbap"
      ]
    },
    "application/x-msaccess": {
      "source": "apache",
      "extensions": [
        "mdb"
      ]
    },
    "application/x-msbinder": {
      "source": "apache",
      "extensions": [
        "obd"
      ]
    },
    "application/x-mscardfile": {
      "source": "apache",
      "extensions": [
        "crd"
      ]
    },
    "application/x-msclip": {
      "source": "apache",
      "extensions": [
        "clp"
      ]
    },
    "application/x-msdos-program": {
      "extensions": [
        "exe"
      ]
    },
    "application/x-msdownload": {
      "source": "apache",
      "extensions": [
        "exe",
        "dll",
        "com",
        "bat",
        "msi"
      ]
    },
    "application/x-msmediaview": {
      "source": "apache",
      "extensions": [
        "mvb",
        "m13",
        "m14"
      ]
    },
    "application/x-msmetafile": {
      "source": "apache",
      "extensions": [
        "wmf",
        "wmz",
        "emf",
        "emz"
      ]
    },
    "application/x-msmoney": {
      "source": "apache",
      "extensions": [
        "mny"
      ]
    },
    "application/x-mspublisher": {
      "source": "apache",
      "extensions": [
        "pub"
      ]
    },
    "application/x-msschedule": {
      "source": "apache",
      "extensions": [
        "scd"
      ]
    },
    "application/x-msterminal": {
      "source": "apache",
      "extensions": [
        "trm"
      ]
    },
    "application/x-mswrite": {
      "source": "apache",
      "extensions": [
        "wri"
      ]
    },
    "application/x-netcdf": {
      "source": "apache",
      "extensions": [
        "nc",
        "cdf"
      ]
    },
    "application/x-ns-proxy-autoconfig": {
      "compressible": true,
      "extensions": [
        "pac"
      ]
    },
    "application/x-nzb": {
      "source": "apache",
      "extensions": [
        "nzb"
      ]
    },
    "application/x-perl": {
      "source": "nginx",
      "extensions": [
        "pl",
        "pm"
      ]
    },
    "application/x-pilot": {
      "source": "nginx",
      "extensions": [
        "prc",
        "pdb"
      ]
    },
    "application/x-pkcs12": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "p12",
        "pfx"
      ]
    },
    "application/x-pkcs7-certificates": {
      "source": "apache",
      "extensions": [
        "p7b",
        "spc"
      ]
    },
    "application/x-pkcs7-certreqresp": {
      "source": "apache",
      "extensions": [
        "p7r"
      ]
    },
    "application/x-rar-compressed": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "rar"
      ]
    },
    "application/x-redhat-package-manager": {
      "source": "nginx",
      "extensions": [
        "rpm"
      ]
    },
    "application/x-research-info-systems": {
      "source": "apache",
      "extensions": [
        "ris"
      ]
    },
    "application/x-sea": {
      "source": "nginx",
      "extensions": [
        "sea"
      ]
    },
    "application/x-sh": {
      "source": "apache",
      "compressible": true,
      "extensions": [
        "sh"
      ]
    },
    "application/x-shar": {
      "source": "apache",
      "extensions": [
        "shar"
      ]
    },
    "application/x-shockwave-flash": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "swf"
      ]
    },
    "application/x-silverlight-app": {
      "source": "apache",
      "extensions": [
        "xap"
      ]
    },
    "application/x-sql": {
      "source": "apache",
      "extensions": [
        "sql"
      ]
    },
    "application/x-stuffit": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "sit"
      ]
    },
    "application/x-stuffitx": {
      "source": "apache",
      "extensions": [
        "sitx"
      ]
    },
    "application/x-subrip": {
      "source": "apache",
      "extensions": [
        "srt"
      ]
    },
    "application/x-sv4cpio": {
      "source": "apache",
      "extensions": [
        "sv4cpio"
      ]
    },
    "application/x-sv4crc": {
      "source": "apache",
      "extensions": [
        "sv4crc"
      ]
    },
    "application/x-t3vm-image": {
      "source": "apache",
      "extensions": [
        "t3"
      ]
    },
    "application/x-tads": {
      "source": "apache",
      "extensions": [
        "gam"
      ]
    },
    "application/x-tar": {
      "source": "apache",
      "compressible": true,
      "extensions": [
        "tar"
      ]
    },
    "application/x-tcl": {
      "source": "apache",
      "extensions": [
        "tcl",
        "tk"
      ]
    },
    "application/x-tex": {
      "source": "apache",
      "extensions": [
        "tex"
      ]
    },
    "application/x-tex-tfm": {
      "source": "apache",
      "extensions": [
        "tfm"
      ]
    },
    "application/x-texinfo": {
      "source": "apache",
      "extensions": [
        "texinfo",
        "texi"
      ]
    },
    "application/x-tgif": {
      "source": "apache",
      "extensions": [
        "obj"
      ]
    },
    "application/x-ustar": {
      "source": "apache",
      "extensions": [
        "ustar"
      ]
    },
    "application/x-wais-source": {
      "source": "apache",
      "extensions": [
        "src"
      ]
    },
    "application/x-web-app-manifest+json": {
      "compressible": true,
      "extensions": [
        "webapp"
      ]
    },
    "application/x-www-form-urlencoded": {
      "source": "iana",
      "compressible": true
    },
    "application/x-x509-ca-cert": {
      "source": "apache",
      "extensions": [
        "der",
        "crt",
        "pem"
      ]
    },
    "application/x-xfig": {
      "source": "apache",
      "extensions": [
        "fig"
      ]
    },
    "application/x-xliff+xml": {
      "source": "apache",
      "extensions": [
        "xlf"
      ]
    },
    "application/x-xpinstall": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "xpi"
      ]
    },
    "application/x-xz": {
      "source": "apache",
      "extensions": [
        "xz"
      ]
    },
    "application/x-zmachine": {
      "source": "apache",
      "extensions": [
        "z1",
        "z2",
        "z3",
        "z4",
        "z5",
        "z6",
        "z7",
        "z8"
      ]
    },
    "application/x400-bp": {
      "source": "iana"
    },
    "application/xacml+xml": {
      "source": "iana"
    },
    "application/xaml+xml": {
      "source": "apache",
      "extensions": [
        "xaml"
      ]
    },
    "application/xcap-att+xml": {
      "source": "iana"
    },
    "application/xcap-caps+xml": {
      "source": "iana"
    },
    "application/xcap-diff+xml": {
      "source": "iana",
      "extensions": [
        "xdf"
      ]
    },
    "application/xcap-el+xml": {
      "source": "iana"
    },
    "application/xcap-error+xml": {
      "source": "iana"
    },
    "application/xcap-ns+xml": {
      "source": "iana"
    },
    "application/xcon-conference-info+xml": {
      "source": "iana"
    },
    "application/xcon-conference-info-diff+xml": {
      "source": "iana"
    },
    "application/xenc+xml": {
      "source": "iana",
      "extensions": [
        "xenc"
      ]
    },
    "application/xhtml+xml": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "xhtml",
        "xht"
      ]
    },
    "application/xhtml-voice+xml": {
      "source": "apache"
    },
    "application/xml": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "xml",
        "xsl",
        "xsd",
        "rng"
      ]
    },
    "application/xml-dtd": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "dtd"
      ]
    },
    "application/xml-external-parsed-entity": {
      "source": "iana"
    },
    "application/xml-patch+xml": {
      "source": "iana"
    },
    "application/xmpp+xml": {
      "source": "iana"
    },
    "application/xop+xml": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "xop"
      ]
    },
    "application/xproc+xml": {
      "source": "apache",
      "extensions": [
        "xpl"
      ]
    },
    "application/xslt+xml": {
      "source": "iana",
      "extensions": [
        "xslt"
      ]
    },
    "application/xspf+xml": {
      "source": "apache",
      "extensions": [
        "xspf"
      ]
    },
    "application/xv+xml": {
      "source": "iana",
      "extensions": [
        "mxml",
        "xhvml",
        "xvml",
        "xvm"
      ]
    },
    "application/yang": {
      "source": "iana",
      "extensions": [
        "yang"
      ]
    },
    "application/yin+xml": {
      "source": "iana",
      "extensions": [
        "yin"
      ]
    },
    "application/zip": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "zip"
      ]
    },
    "application/zlib": {
      "source": "iana"
    },
    "audio/1d-interleaved-parityfec": {
      "source": "iana"
    },
    "audio/32kadpcm": {
      "source": "iana"
    },
    "audio/3gpp": {
      "source": "iana"
    },
    "audio/3gpp2": {
      "source": "iana"
    },
    "audio/ac3": {
      "source": "iana"
    },
    "audio/adpcm": {
      "source": "apache",
      "extensions": [
        "adp"
      ]
    },
    "audio/amr": {
      "source": "iana"
    },
    "audio/amr-wb": {
      "source": "iana"
    },
    "audio/amr-wb+": {
      "source": "iana"
    },
    "audio/aptx": {
      "source": "iana"
    },
    "audio/asc": {
      "source": "iana"
    },
    "audio/atrac-advanced-lossless": {
      "source": "iana"
    },
    "audio/atrac-x": {
      "source": "iana"
    },
    "audio/atrac3": {
      "source": "iana"
    },
    "audio/basic": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "au",
        "snd"
      ]
    },
    "audio/bv16": {
      "source": "iana"
    },
    "audio/bv32": {
      "source": "iana"
    },
    "audio/clearmode": {
      "source": "iana"
    },
    "audio/cn": {
      "source": "iana"
    },
    "audio/dat12": {
      "source": "iana"
    },
    "audio/dls": {
      "source": "iana"
    },
    "audio/dsr-es201108": {
      "source": "iana"
    },
    "audio/dsr-es202050": {
      "source": "iana"
    },
    "audio/dsr-es202211": {
      "source": "iana"
    },
    "audio/dsr-es202212": {
      "source": "iana"
    },
    "audio/dv": {
      "source": "iana"
    },
    "audio/dvi4": {
      "source": "iana"
    },
    "audio/eac3": {
      "source": "iana"
    },
    "audio/encaprtp": {
      "source": "iana"
    },
    "audio/evrc": {
      "source": "iana"
    },
    "audio/evrc-qcp": {
      "source": "iana"
    },
    "audio/evrc0": {
      "source": "iana"
    },
    "audio/evrc1": {
      "source": "iana"
    },
    "audio/evrcb": {
      "source": "iana"
    },
    "audio/evrcb0": {
      "source": "iana"
    },
    "audio/evrcb1": {
      "source": "iana"
    },
    "audio/evrcnw": {
      "source": "iana"
    },
    "audio/evrcnw0": {
      "source": "iana"
    },
    "audio/evrcnw1": {
      "source": "iana"
    },
    "audio/evrcwb": {
      "source": "iana"
    },
    "audio/evrcwb0": {
      "source": "iana"
    },
    "audio/evrcwb1": {
      "source": "iana"
    },
    "audio/evs": {
      "source": "iana"
    },
    "audio/fwdred": {
      "source": "iana"
    },
    "audio/g711-0": {
      "source": "iana"
    },
    "audio/g719": {
      "source": "iana"
    },
    "audio/g722": {
      "source": "iana"
    },
    "audio/g7221": {
      "source": "iana"
    },
    "audio/g723": {
      "source": "iana"
    },
    "audio/g726-16": {
      "source": "iana"
    },
    "audio/g726-24": {
      "source": "iana"
    },
    "audio/g726-32": {
      "source": "iana"
    },
    "audio/g726-40": {
      "source": "iana"
    },
    "audio/g728": {
      "source": "iana"
    },
    "audio/g729": {
      "source": "iana"
    },
    "audio/g7291": {
      "source": "iana"
    },
    "audio/g729d": {
      "source": "iana"
    },
    "audio/g729e": {
      "source": "iana"
    },
    "audio/gsm": {
      "source": "iana"
    },
    "audio/gsm-efr": {
      "source": "iana"
    },
    "audio/gsm-hr-08": {
      "source": "iana"
    },
    "audio/ilbc": {
      "source": "iana"
    },
    "audio/ip-mr_v2.5": {
      "source": "iana"
    },
    "audio/isac": {
      "source": "apache"
    },
    "audio/l16": {
      "source": "iana"
    },
    "audio/l20": {
      "source": "iana"
    },
    "audio/l24": {
      "source": "iana",
      "compressible": false
    },
    "audio/l8": {
      "source": "iana"
    },
    "audio/lpc": {
      "source": "iana"
    },
    "audio/midi": {
      "source": "apache",
      "extensions": [
        "mid",
        "midi",
        "kar",
        "rmi"
      ]
    },
    "audio/mobile-xmf": {
      "source": "iana"
    },
    "audio/mp4": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "m4a",
        "mp4a"
      ]
    },
    "audio/mp4a-latm": {
      "source": "iana"
    },
    "audio/mpa": {
      "source": "iana"
    },
    "audio/mpa-robust": {
      "source": "iana"
    },
    "audio/mpeg": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "mpga",
        "mp2",
        "mp2a",
        "mp3",
        "m2a",
        "m3a"
      ]
    },
    "audio/mpeg4-generic": {
      "source": "iana"
    },
    "audio/musepack": {
      "source": "apache"
    },
    "audio/ogg": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "oga",
        "ogg",
        "spx"
      ]
    },
    "audio/opus": {
      "source": "iana"
    },
    "audio/parityfec": {
      "source": "iana"
    },
    "audio/pcma": {
      "source": "iana"
    },
    "audio/pcma-wb": {
      "source": "iana"
    },
    "audio/pcmu": {
      "source": "iana"
    },
    "audio/pcmu-wb": {
      "source": "iana"
    },
    "audio/prs.sid": {
      "source": "iana"
    },
    "audio/qcelp": {
      "source": "iana"
    },
    "audio/raptorfec": {
      "source": "iana"
    },
    "audio/red": {
      "source": "iana"
    },
    "audio/rtp-enc-aescm128": {
      "source": "iana"
    },
    "audio/rtp-midi": {
      "source": "iana"
    },
    "audio/rtploopback": {
      "source": "iana"
    },
    "audio/rtx": {
      "source": "iana"
    },
    "audio/s3m": {
      "source": "apache",
      "extensions": [
        "s3m"
      ]
    },
    "audio/silk": {
      "source": "apache",
      "extensions": [
        "sil"
      ]
    },
    "audio/smv": {
      "source": "iana"
    },
    "audio/smv-qcp": {
      "source": "iana"
    },
    "audio/smv0": {
      "source": "iana"
    },
    "audio/sp-midi": {
      "source": "iana"
    },
    "audio/speex": {
      "source": "iana"
    },
    "audio/t140c": {
      "source": "iana"
    },
    "audio/t38": {
      "source": "iana"
    },
    "audio/telephone-event": {
      "source": "iana"
    },
    "audio/tone": {
      "source": "iana"
    },
    "audio/uemclip": {
      "source": "iana"
    },
    "audio/ulpfec": {
      "source": "iana"
    },
    "audio/vdvi": {
      "source": "iana"
    },
    "audio/vmr-wb": {
      "source": "iana"
    },
    "audio/vnd.3gpp.iufp": {
      "source": "iana"
    },
    "audio/vnd.4sb": {
      "source": "iana"
    },
    "audio/vnd.audiokoz": {
      "source": "iana"
    },
    "audio/vnd.celp": {
      "source": "iana"
    },
    "audio/vnd.cisco.nse": {
      "source": "iana"
    },
    "audio/vnd.cmles.radio-events": {
      "source": "iana"
    },
    "audio/vnd.cns.anp1": {
      "source": "iana"
    },
    "audio/vnd.cns.inf1": {
      "source": "iana"
    },
    "audio/vnd.dece.audio": {
      "source": "iana",
      "extensions": [
        "uva",
        "uvva"
      ]
    },
    "audio/vnd.digital-winds": {
      "source": "iana",
      "extensions": [
        "eol"
      ]
    },
    "audio/vnd.dlna.adts": {
      "source": "iana"
    },
    "audio/vnd.dolby.heaac.1": {
      "source": "iana"
    },
    "audio/vnd.dolby.heaac.2": {
      "source": "iana"
    },
    "audio/vnd.dolby.mlp": {
      "source": "iana"
    },
    "audio/vnd.dolby.mps": {
      "source": "iana"
    },
    "audio/vnd.dolby.pl2": {
      "source": "iana"
    },
    "audio/vnd.dolby.pl2x": {
      "source": "iana"
    },
    "audio/vnd.dolby.pl2z": {
      "source": "iana"
    },
    "audio/vnd.dolby.pulse.1": {
      "source": "iana"
    },
    "audio/vnd.dra": {
      "source": "iana",
      "extensions": [
        "dra"
      ]
    },
    "audio/vnd.dts": {
      "source": "iana",
      "extensions": [
        "dts"
      ]
    },
    "audio/vnd.dts.hd": {
      "source": "iana",
      "extensions": [
        "dtshd"
      ]
    },
    "audio/vnd.dvb.file": {
      "source": "iana"
    },
    "audio/vnd.everad.plj": {
      "source": "iana"
    },
    "audio/vnd.hns.audio": {
      "source": "iana"
    },
    "audio/vnd.lucent.voice": {
      "source": "iana",
      "extensions": [
        "lvp"
      ]
    },
    "audio/vnd.ms-playready.media.pya": {
      "source": "iana",
      "extensions": [
        "pya"
      ]
    },
    "audio/vnd.nokia.mobile-xmf": {
      "source": "iana"
    },
    "audio/vnd.nortel.vbk": {
      "source": "iana"
    },
    "audio/vnd.nuera.ecelp4800": {
      "source": "iana",
      "extensions": [
        "ecelp4800"
      ]
    },
    "audio/vnd.nuera.ecelp7470": {
      "source": "iana",
      "extensions": [
        "ecelp7470"
      ]
    },
    "audio/vnd.nuera.ecelp9600": {
      "source": "iana",
      "extensions": [
        "ecelp9600"
      ]
    },
    "audio/vnd.octel.sbc": {
      "source": "iana"
    },
    "audio/vnd.qcelp": {
      "source": "iana"
    },
    "audio/vnd.rhetorex.32kadpcm": {
      "source": "iana"
    },
    "audio/vnd.rip": {
      "source": "iana",
      "extensions": [
        "rip"
      ]
    },
    "audio/vnd.rn-realaudio": {
      "compressible": false
    },
    "audio/vnd.sealedmedia.softseal.mpeg": {
      "source": "iana"
    },
    "audio/vnd.vmx.cvsd": {
      "source": "iana"
    },
    "audio/vnd.wave": {
      "compressible": false
    },
    "audio/vorbis": {
      "source": "iana",
      "compressible": false
    },
    "audio/vorbis-config": {
      "source": "iana"
    },
    "audio/wav": {
      "compressible": false,
      "extensions": [
        "wav"
      ]
    },
    "audio/wave": {
      "compressible": false,
      "extensions": [
        "wav"
      ]
    },
    "audio/webm": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "weba"
      ]
    },
    "audio/x-aac": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "aac"
      ]
    },
    "audio/x-aiff": {
      "source": "apache",
      "extensions": [
        "aif",
        "aiff",
        "aifc"
      ]
    },
    "audio/x-caf": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "caf"
      ]
    },
    "audio/x-flac": {
      "source": "apache",
      "extensions": [
        "flac"
      ]
    },
    "audio/x-m4a": {
      "source": "nginx",
      "extensions": [
        "m4a"
      ]
    },
    "audio/x-matroska": {
      "source": "apache",
      "extensions": [
        "mka"
      ]
    },
    "audio/x-mpegurl": {
      "source": "apache",
      "extensions": [
        "m3u"
      ]
    },
    "audio/x-ms-wax": {
      "source": "apache",
      "extensions": [
        "wax"
      ]
    },
    "audio/x-ms-wma": {
      "source": "apache",
      "extensions": [
        "wma"
      ]
    },
    "audio/x-pn-realaudio": {
      "source": "apache",
      "extensions": [
        "ram",
        "ra"
      ]
    },
    "audio/x-pn-realaudio-plugin": {
      "source": "apache",
      "extensions": [
        "rmp"
      ]
    },
    "audio/x-realaudio": {
      "source": "nginx",
      "extensions": [
        "ra"
      ]
    },
    "audio/x-tta": {
      "source": "apache"
    },
    "audio/x-wav": {
      "source": "apache",
      "extensions": [
        "wav"
      ]
    },
    "audio/xm": {
      "source": "apache",
      "extensions": [
        "xm"
      ]
    },
    "chemical/x-cdx": {
      "source": "apache",
      "extensions": [
        "cdx"
      ]
    },
    "chemical/x-cif": {
      "source": "apache",
      "extensions": [
        "cif"
      ]
    },
    "chemical/x-cmdf": {
      "source": "apache",
      "extensions": [
        "cmdf"
      ]
    },
    "chemical/x-cml": {
      "source": "apache",
      "extensions": [
        "cml"
      ]
    },
    "chemical/x-csml": {
      "source": "apache",
      "extensions": [
        "csml"
      ]
    },
    "chemical/x-pdb": {
      "source": "apache"
    },
    "chemical/x-xyz": {
      "source": "apache",
      "extensions": [
        "xyz"
      ]
    },
    "font/opentype": {
      "compressible": true,
      "extensions": [
        "otf"
      ]
    },
    "image/bmp": {
      "source": "apache",
      "compressible": true,
      "extensions": [
        "bmp"
      ]
    },
    "image/cgm": {
      "source": "iana",
      "extensions": [
        "cgm"
      ]
    },
    "image/fits": {
      "source": "iana"
    },
    "image/g3fax": {
      "source": "iana",
      "extensions": [
        "g3"
      ]
    },
    "image/gif": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "gif"
      ]
    },
    "image/ief": {
      "source": "iana",
      "extensions": [
        "ief"
      ]
    },
    "image/jp2": {
      "source": "iana"
    },
    "image/jpeg": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "jpeg",
        "jpg",
        "jpe"
      ]
    },
    "image/jpm": {
      "source": "iana"
    },
    "image/jpx": {
      "source": "iana"
    },
    "image/ktx": {
      "source": "iana",
      "extensions": [
        "ktx"
      ]
    },
    "image/naplps": {
      "source": "iana"
    },
    "image/pjpeg": {
      "compressible": false
    },
    "image/png": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "png"
      ]
    },
    "image/prs.btif": {
      "source": "iana",
      "extensions": [
        "btif"
      ]
    },
    "image/prs.pti": {
      "source": "iana"
    },
    "image/pwg-raster": {
      "source": "iana"
    },
    "image/sgi": {
      "source": "apache",
      "extensions": [
        "sgi"
      ]
    },
    "image/svg+xml": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "svg",
        "svgz"
      ]
    },
    "image/t38": {
      "source": "iana"
    },
    "image/tiff": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "tiff",
        "tif"
      ]
    },
    "image/tiff-fx": {
      "source": "iana"
    },
    "image/vnd.adobe.photoshop": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "psd"
      ]
    },
    "image/vnd.airzip.accelerator.azv": {
      "source": "iana"
    },
    "image/vnd.cns.inf2": {
      "source": "iana"
    },
    "image/vnd.dece.graphic": {
      "source": "iana",
      "extensions": [
        "uvi",
        "uvvi",
        "uvg",
        "uvvg"
      ]
    },
    "image/vnd.djvu": {
      "source": "iana",
      "extensions": [
        "djvu",
        "djv"
      ]
    },
    "image/vnd.dvb.subtitle": {
      "source": "iana",
      "extensions": [
        "sub"
      ]
    },
    "image/vnd.dwg": {
      "source": "iana",
      "extensions": [
        "dwg"
      ]
    },
    "image/vnd.dxf": {
      "source": "iana",
      "extensions": [
        "dxf"
      ]
    },
    "image/vnd.fastbidsheet": {
      "source": "iana",
      "extensions": [
        "fbs"
      ]
    },
    "image/vnd.fpx": {
      "source": "iana",
      "extensions": [
        "fpx"
      ]
    },
    "image/vnd.fst": {
      "source": "iana",
      "extensions": [
        "fst"
      ]
    },
    "image/vnd.fujixerox.edmics-mmr": {
      "source": "iana",
      "extensions": [
        "mmr"
      ]
    },
    "image/vnd.fujixerox.edmics-rlc": {
      "source": "iana",
      "extensions": [
        "rlc"
      ]
    },
    "image/vnd.globalgraphics.pgb": {
      "source": "iana"
    },
    "image/vnd.microsoft.icon": {
      "source": "iana"
    },
    "image/vnd.mix": {
      "source": "iana"
    },
    "image/vnd.mozilla.apng": {
      "source": "iana"
    },
    "image/vnd.ms-modi": {
      "source": "iana",
      "extensions": [
        "mdi"
      ]
    },
    "image/vnd.ms-photo": {
      "source": "apache",
      "extensions": [
        "wdp"
      ]
    },
    "image/vnd.net-fpx": {
      "source": "iana",
      "extensions": [
        "npx"
      ]
    },
    "image/vnd.radiance": {
      "source": "iana"
    },
    "image/vnd.sealed.png": {
      "source": "iana"
    },
    "image/vnd.sealedmedia.softseal.gif": {
      "source": "iana"
    },
    "image/vnd.sealedmedia.softseal.jpg": {
      "source": "iana"
    },
    "image/vnd.svf": {
      "source": "iana"
    },
    "image/vnd.tencent.tap": {
      "source": "iana"
    },
    "image/vnd.valve.source.texture": {
      "source": "iana"
    },
    "image/vnd.wap.wbmp": {
      "source": "iana",
      "extensions": [
        "wbmp"
      ]
    },
    "image/vnd.xiff": {
      "source": "iana",
      "extensions": [
        "xif"
      ]
    },
    "image/vnd.zbrush.pcx": {
      "source": "iana"
    },
    "image/webp": {
      "source": "apache",
      "extensions": [
        "webp"
      ]
    },
    "image/x-3ds": {
      "source": "apache",
      "extensions": [
        "3ds"
      ]
    },
    "image/x-cmu-raster": {
      "source": "apache",
      "extensions": [
        "ras"
      ]
    },
    "image/x-cmx": {
      "source": "apache",
      "extensions": [
        "cmx"
      ]
    },
    "image/x-freehand": {
      "source": "apache",
      "extensions": [
        "fh",
        "fhc",
        "fh4",
        "fh5",
        "fh7"
      ]
    },
    "image/x-icon": {
      "source": "apache",
      "compressible": true,
      "extensions": [
        "ico"
      ]
    },
    "image/x-jng": {
      "source": "nginx",
      "extensions": [
        "jng"
      ]
    },
    "image/x-mrsid-image": {
      "source": "apache",
      "extensions": [
        "sid"
      ]
    },
    "image/x-ms-bmp": {
      "source": "nginx",
      "compressible": true,
      "extensions": [
        "bmp"
      ]
    },
    "image/x-pcx": {
      "source": "apache",
      "extensions": [
        "pcx"
      ]
    },
    "image/x-pict": {
      "source": "apache",
      "extensions": [
        "pic",
        "pct"
      ]
    },
    "image/x-portable-anymap": {
      "source": "apache",
      "extensions": [
        "pnm"
      ]
    },
    "image/x-portable-bitmap": {
      "source": "apache",
      "extensions": [
        "pbm"
      ]
    },
    "image/x-portable-graymap": {
      "source": "apache",
      "extensions": [
        "pgm"
      ]
    },
    "image/x-portable-pixmap": {
      "source": "apache",
      "extensions": [
        "ppm"
      ]
    },
    "image/x-rgb": {
      "source": "apache",
      "extensions": [
        "rgb"
      ]
    },
    "image/x-tga": {
      "source": "apache",
      "extensions": [
        "tga"
      ]
    },
    "image/x-xbitmap": {
      "source": "apache",
      "extensions": [
        "xbm"
      ]
    },
    "image/x-xcf": {
      "compressible": false
    },
    "image/x-xpixmap": {
      "source": "apache",
      "extensions": [
        "xpm"
      ]
    },
    "image/x-xwindowdump": {
      "source": "apache",
      "extensions": [
        "xwd"
      ]
    },
    "message/cpim": {
      "source": "iana"
    },
    "message/delivery-status": {
      "source": "iana"
    },
    "message/disposition-notification": {
      "source": "iana"
    },
    "message/external-body": {
      "source": "iana"
    },
    "message/feedback-report": {
      "source": "iana"
    },
    "message/global": {
      "source": "iana"
    },
    "message/global-delivery-status": {
      "source": "iana"
    },
    "message/global-disposition-notification": {
      "source": "iana"
    },
    "message/global-headers": {
      "source": "iana"
    },
    "message/http": {
      "source": "iana",
      "compressible": false
    },
    "message/imdn+xml": {
      "source": "iana",
      "compressible": true
    },
    "message/news": {
      "source": "iana"
    },
    "message/partial": {
      "source": "iana",
      "compressible": false
    },
    "message/rfc822": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "eml",
        "mime"
      ]
    },
    "message/s-http": {
      "source": "iana"
    },
    "message/sip": {
      "source": "iana"
    },
    "message/sipfrag": {
      "source": "iana"
    },
    "message/tracking-status": {
      "source": "iana"
    },
    "message/vnd.si.simp": {
      "source": "iana"
    },
    "message/vnd.wfa.wsc": {
      "source": "iana"
    },
    "model/iges": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "igs",
        "iges"
      ]
    },
    "model/mesh": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "msh",
        "mesh",
        "silo"
      ]
    },
    "model/vnd.collada+xml": {
      "source": "iana",
      "extensions": [
        "dae"
      ]
    },
    "model/vnd.dwf": {
      "source": "iana",
      "extensions": [
        "dwf"
      ]
    },
    "model/vnd.flatland.3dml": {
      "source": "iana"
    },
    "model/vnd.gdl": {
      "source": "iana",
      "extensions": [
        "gdl"
      ]
    },
    "model/vnd.gs-gdl": {
      "source": "apache"
    },
    "model/vnd.gs.gdl": {
      "source": "iana"
    },
    "model/vnd.gtw": {
      "source": "iana",
      "extensions": [
        "gtw"
      ]
    },
    "model/vnd.moml+xml": {
      "source": "iana"
    },
    "model/vnd.mts": {
      "source": "iana",
      "extensions": [
        "mts"
      ]
    },
    "model/vnd.opengex": {
      "source": "iana"
    },
    "model/vnd.parasolid.transmit.binary": {
      "source": "iana"
    },
    "model/vnd.parasolid.transmit.text": {
      "source": "iana"
    },
    "model/vnd.rosette.annotated-data-model": {
      "source": "iana"
    },
    "model/vnd.valve.source.compiled-map": {
      "source": "iana"
    },
    "model/vnd.vtu": {
      "source": "iana",
      "extensions": [
        "vtu"
      ]
    },
    "model/vrml": {
      "source": "iana",
      "compressible": false,
      "extensions": [
        "wrl",
        "vrml"
      ]
    },
    "model/x3d+binary": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "x3db",
        "x3dbz"
      ]
    },
    "model/x3d+fastinfoset": {
      "source": "iana"
    },
    "model/x3d+vrml": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "x3dv",
        "x3dvz"
      ]
    },
    "model/x3d+xml": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "x3d",
        "x3dz"
      ]
    },
    "model/x3d-vrml": {
      "source": "iana"
    },
    "multipart/alternative": {
      "source": "iana",
      "compressible": false
    },
    "multipart/appledouble": {
      "source": "iana"
    },
    "multipart/byteranges": {
      "source": "iana"
    },
    "multipart/digest": {
      "source": "iana"
    },
    "multipart/encrypted": {
      "source": "iana",
      "compressible": false
    },
    "multipart/form-data": {
      "source": "iana",
      "compressible": false
    },
    "multipart/header-set": {
      "source": "iana"
    },
    "multipart/mixed": {
      "source": "iana",
      "compressible": false
    },
    "multipart/parallel": {
      "source": "iana"
    },
    "multipart/related": {
      "source": "iana",
      "compressible": false
    },
    "multipart/report": {
      "source": "iana"
    },
    "multipart/signed": {
      "source": "iana",
      "compressible": false
    },
    "multipart/voice-message": {
      "source": "iana"
    },
    "multipart/x-mixed-replace": {
      "source": "iana"
    },
    "text/1d-interleaved-parityfec": {
      "source": "iana"
    },
    "text/cache-manifest": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "appcache",
        "manifest"
      ]
    },
    "text/calendar": {
      "source": "iana",
      "extensions": [
        "ics",
        "ifb"
      ]
    },
    "text/calender": {
      "compressible": true
    },
    "text/cmd": {
      "compressible": true
    },
    "text/coffeescript": {
      "extensions": [
        "coffee",
        "litcoffee"
      ]
    },
    "text/css": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "css"
      ]
    },
    "text/csv": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "csv"
      ]
    },
    "text/csv-schema": {
      "source": "iana"
    },
    "text/directory": {
      "source": "iana"
    },
    "text/dns": {
      "source": "iana"
    },
    "text/ecmascript": {
      "source": "iana"
    },
    "text/encaprtp": {
      "source": "iana"
    },
    "text/enriched": {
      "source": "iana"
    },
    "text/fwdred": {
      "source": "iana"
    },
    "text/grammar-ref-list": {
      "source": "iana"
    },
    "text/hjson": {
      "extensions": [
        "hjson"
      ]
    },
    "text/html": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "html",
        "htm",
        "shtml"
      ]
    },
    "text/jade": {
      "extensions": [
        "jade"
      ]
    },
    "text/javascript": {
      "source": "iana",
      "compressible": true
    },
    "text/jcr-cnd": {
      "source": "iana"
    },
    "text/jsx": {
      "compressible": true,
      "extensions": [
        "jsx"
      ]
    },
    "text/less": {
      "extensions": [
        "less"
      ]
    },
    "text/markdown": {
      "source": "iana"
    },
    "text/mathml": {
      "source": "nginx",
      "extensions": [
        "mml"
      ]
    },
    "text/mizar": {
      "source": "iana"
    },
    "text/n3": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "n3"
      ]
    },
    "text/parameters": {
      "source": "iana"
    },
    "text/parityfec": {
      "source": "iana"
    },
    "text/plain": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "txt",
        "text",
        "conf",
        "def",
        "list",
        "log",
        "in",
        "ini"
      ]
    },
    "text/provenance-notation": {
      "source": "iana"
    },
    "text/prs.fallenstein.rst": {
      "source": "iana"
    },
    "text/prs.lines.tag": {
      "source": "iana",
      "extensions": [
        "dsc"
      ]
    },
    "text/raptorfec": {
      "source": "iana"
    },
    "text/red": {
      "source": "iana"
    },
    "text/rfc822-headers": {
      "source": "iana"
    },
    "text/richtext": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "rtx"
      ]
    },
    "text/rtf": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "rtf"
      ]
    },
    "text/rtp-enc-aescm128": {
      "source": "iana"
    },
    "text/rtploopback": {
      "source": "iana"
    },
    "text/rtx": {
      "source": "iana"
    },
    "text/sgml": {
      "source": "iana",
      "extensions": [
        "sgml",
        "sgm"
      ]
    },
    "text/slim": {
      "extensions": [
        "slim",
        "slm"
      ]
    },
    "text/stylus": {
      "extensions": [
        "stylus",
        "styl"
      ]
    },
    "text/t140": {
      "source": "iana"
    },
    "text/tab-separated-values": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "tsv"
      ]
    },
    "text/troff": {
      "source": "iana",
      "extensions": [
        "t",
        "tr",
        "roff",
        "man",
        "me",
        "ms"
      ]
    },
    "text/turtle": {
      "source": "iana",
      "extensions": [
        "ttl"
      ]
    },
    "text/ulpfec": {
      "source": "iana"
    },
    "text/uri-list": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "uri",
        "uris",
        "urls"
      ]
    },
    "text/vcard": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "vcard"
      ]
    },
    "text/vnd.a": {
      "source": "iana"
    },
    "text/vnd.abc": {
      "source": "iana"
    },
    "text/vnd.curl": {
      "source": "iana",
      "extensions": [
        "curl"
      ]
    },
    "text/vnd.curl.dcurl": {
      "source": "apache",
      "extensions": [
        "dcurl"
      ]
    },
    "text/vnd.curl.mcurl": {
      "source": "apache",
      "extensions": [
        "mcurl"
      ]
    },
    "text/vnd.curl.scurl": {
      "source": "apache",
      "extensions": [
        "scurl"
      ]
    },
    "text/vnd.debian.copyright": {
      "source": "iana"
    },
    "text/vnd.dmclientscript": {
      "source": "iana"
    },
    "text/vnd.dvb.subtitle": {
      "source": "iana",
      "extensions": [
        "sub"
      ]
    },
    "text/vnd.esmertec.theme-descriptor": {
      "source": "iana"
    },
    "text/vnd.fly": {
      "source": "iana",
      "extensions": [
        "fly"
      ]
    },
    "text/vnd.fmi.flexstor": {
      "source": "iana",
      "extensions": [
        "flx"
      ]
    },
    "text/vnd.graphviz": {
      "source": "iana",
      "extensions": [
        "gv"
      ]
    },
    "text/vnd.in3d.3dml": {
      "source": "iana",
      "extensions": [
        "3dml"
      ]
    },
    "text/vnd.in3d.spot": {
      "source": "iana",
      "extensions": [
        "spot"
      ]
    },
    "text/vnd.iptc.newsml": {
      "source": "iana"
    },
    "text/vnd.iptc.nitf": {
      "source": "iana"
    },
    "text/vnd.latex-z": {
      "source": "iana"
    },
    "text/vnd.motorola.reflex": {
      "source": "iana"
    },
    "text/vnd.ms-mediapackage": {
      "source": "iana"
    },
    "text/vnd.net2phone.commcenter.command": {
      "source": "iana"
    },
    "text/vnd.radisys.msml-basic-layout": {
      "source": "iana"
    },
    "text/vnd.si.uricatalogue": {
      "source": "iana"
    },
    "text/vnd.sun.j2me.app-descriptor": {
      "source": "iana",
      "extensions": [
        "jad"
      ]
    },
    "text/vnd.trolltech.linguist": {
      "source": "iana"
    },
    "text/vnd.wap.si": {
      "source": "iana"
    },
    "text/vnd.wap.sl": {
      "source": "iana"
    },
    "text/vnd.wap.wml": {
      "source": "iana",
      "extensions": [
        "wml"
      ]
    },
    "text/vnd.wap.wmlscript": {
      "source": "iana",
      "extensions": [
        "wmls"
      ]
    },
    "text/vtt": {
      "charset": "UTF-8",
      "compressible": true,
      "extensions": [
        "vtt"
      ]
    },
    "text/x-asm": {
      "source": "apache",
      "extensions": [
        "s",
        "asm"
      ]
    },
    "text/x-c": {
      "source": "apache",
      "extensions": [
        "c",
        "cc",
        "cxx",
        "cpp",
        "h",
        "hh",
        "dic"
      ]
    },
    "text/x-component": {
      "source": "nginx",
      "extensions": [
        "htc"
      ]
    },
    "text/x-fortran": {
      "source": "apache",
      "extensions": [
        "f",
        "for",
        "f77",
        "f90"
      ]
    },
    "text/x-gwt-rpc": {
      "compressible": true
    },
    "text/x-handlebars-template": {
      "extensions": [
        "hbs"
      ]
    },
    "text/x-java-source": {
      "source": "apache",
      "extensions": [
        "java"
      ]
    },
    "text/x-jquery-tmpl": {
      "compressible": true
    },
    "text/x-lua": {
      "extensions": [
        "lua"
      ]
    },
    "text/x-markdown": {
      "compressible": true,
      "extensions": [
        "markdown",
        "md",
        "mkd"
      ]
    },
    "text/x-nfo": {
      "source": "apache",
      "extensions": [
        "nfo"
      ]
    },
    "text/x-opml": {
      "source": "apache",
      "extensions": [
        "opml"
      ]
    },
    "text/x-pascal": {
      "source": "apache",
      "extensions": [
        "p",
        "pas"
      ]
    },
    "text/x-processing": {
      "compressible": true,
      "extensions": [
        "pde"
      ]
    },
    "text/x-sass": {
      "extensions": [
        "sass"
      ]
    },
    "text/x-scss": {
      "extensions": [
        "scss"
      ]
    },
    "text/x-setext": {
      "source": "apache",
      "extensions": [
        "etx"
      ]
    },
    "text/x-sfv": {
      "source": "apache",
      "extensions": [
        "sfv"
      ]
    },
    "text/x-suse-ymp": {
      "compressible": true,
      "extensions": [
        "ymp"
      ]
    },
    "text/x-uuencode": {
      "source": "apache",
      "extensions": [
        "uu"
      ]
    },
    "text/x-vcalendar": {
      "source": "apache",
      "extensions": [
        "vcs"
      ]
    },
    "text/x-vcard": {
      "source": "apache",
      "extensions": [
        "vcf"
      ]
    },
    "text/xml": {
      "source": "iana",
      "compressible": true,
      "extensions": [
        "xml"
      ]
    },
    "text/xml-external-parsed-entity": {
      "source": "iana"
    },
    "text/yaml": {
      "extensions": [
        "yaml",
        "yml"
      ]
    },
    "video/1d-interleaved-parityfec": {
      "source": "apache"
    },
    "video/3gpp": {
      "source": "apache",
      "extensions": [
        "3gp",
        "3gpp"
      ]
    },
    "video/3gpp-tt": {
      "source": "apache"
    },
    "video/3gpp2": {
      "source": "apache",
      "extensions": [
        "3g2"
      ]
    },
    "video/bmpeg": {
      "source": "apache"
    },
    "video/bt656": {
      "source": "apache"
    },
    "video/celb": {
      "source": "apache"
    },
    "video/dv": {
      "source": "apache"
    },
    "video/h261": {
      "source": "apache",
      "extensions": [
        "h261"
      ]
    },
    "video/h263": {
      "source": "apache",
      "extensions": [
        "h263"
      ]
    },
    "video/h263-1998": {
      "source": "apache"
    },
    "video/h263-2000": {
      "source": "apache"
    },
    "video/h264": {
      "source": "apache",
      "extensions": [
        "h264"
      ]
    },
    "video/h264-rcdo": {
      "source": "apache"
    },
    "video/h264-svc": {
      "source": "apache"
    },
    "video/jpeg": {
      "source": "apache",
      "extensions": [
        "jpgv"
      ]
    },
    "video/jpeg2000": {
      "source": "apache"
    },
    "video/jpm": {
      "source": "apache",
      "extensions": [
        "jpm",
        "jpgm"
      ]
    },
    "video/mj2": {
      "source": "apache",
      "extensions": [
        "mj2",
        "mjp2"
      ]
    },
    "video/mp1s": {
      "source": "apache"
    },
    "video/mp2p": {
      "source": "apache"
    },
    "video/mp2t": {
      "source": "apache",
      "extensions": [
        "ts"
      ]
    },
    "video/mp4": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "mp4",
        "mp4v",
        "mpg4"
      ]
    },
    "video/mp4v-es": {
      "source": "apache"
    },
    "video/mpeg": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "mpeg",
        "mpg",
        "mpe",
        "m1v",
        "m2v"
      ]
    },
    "video/mpeg4-generic": {
      "source": "apache"
    },
    "video/mpv": {
      "source": "apache"
    },
    "video/nv": {
      "source": "apache"
    },
    "video/ogg": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "ogv"
      ]
    },
    "video/parityfec": {
      "source": "apache"
    },
    "video/pointer": {
      "source": "apache"
    },
    "video/quicktime": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "qt",
        "mov"
      ]
    },
    "video/raw": {
      "source": "apache"
    },
    "video/rtp-enc-aescm128": {
      "source": "apache"
    },
    "video/rtx": {
      "source": "apache"
    },
    "video/smpte292m": {
      "source": "apache"
    },
    "video/ulpfec": {
      "source": "apache"
    },
    "video/vc1": {
      "source": "apache"
    },
    "video/vnd.cctv": {
      "source": "apache"
    },
    "video/vnd.dece.hd": {
      "source": "apache",
      "extensions": [
        "uvh",
        "uvvh"
      ]
    },
    "video/vnd.dece.mobile": {
      "source": "apache",
      "extensions": [
        "uvm",
        "uvvm"
      ]
    },
    "video/vnd.dece.mp4": {
      "source": "apache"
    },
    "video/vnd.dece.pd": {
      "source": "apache",
      "extensions": [
        "uvp",
        "uvvp"
      ]
    },
    "video/vnd.dece.sd": {
      "source": "apache",
      "extensions": [
        "uvs",
        "uvvs"
      ]
    },
    "video/vnd.dece.video": {
      "source": "apache",
      "extensions": [
        "uvv",
        "uvvv"
      ]
    },
    "video/vnd.directv.mpeg": {
      "source": "apache"
    },
    "video/vnd.directv.mpeg-tts": {
      "source": "apache"
    },
    "video/vnd.dlna.mpeg-tts": {
      "source": "apache"
    },
    "video/vnd.dvb.file": {
      "source": "apache",
      "extensions": [
        "dvb"
      ]
    },
    "video/vnd.fvt": {
      "source": "apache",
      "extensions": [
        "fvt"
      ]
    },
    "video/vnd.hns.video": {
      "source": "apache"
    },
    "video/vnd.iptvforum.1dparityfec-1010": {
      "source": "apache"
    },
    "video/vnd.iptvforum.1dparityfec-2005": {
      "source": "apache"
    },
    "video/vnd.iptvforum.2dparityfec-1010": {
      "source": "apache"
    },
    "video/vnd.iptvforum.2dparityfec-2005": {
      "source": "apache"
    },
    "video/vnd.iptvforum.ttsavc": {
      "source": "apache"
    },
    "video/vnd.iptvforum.ttsmpeg2": {
      "source": "apache"
    },
    "video/vnd.motorola.video": {
      "source": "apache"
    },
    "video/vnd.motorola.videop": {
      "source": "apache"
    },
    "video/vnd.mpegurl": {
      "source": "apache",
      "extensions": [
        "mxu",
        "m4u"
      ]
    },
    "video/vnd.ms-playready.media.pyv": {
      "source": "apache",
      "extensions": [
        "pyv"
      ]
    },
    "video/vnd.nokia.interleaved-multimedia": {
      "source": "apache"
    },
    "video/vnd.nokia.videovoip": {
      "source": "apache"
    },
    "video/vnd.objectvideo": {
      "source": "apache"
    },
    "video/vnd.sealed.mpeg1": {
      "source": "apache"
    },
    "video/vnd.sealed.mpeg4": {
      "source": "apache"
    },
    "video/vnd.sealed.swf": {
      "source": "apache"
    },
    "video/vnd.sealedmedia.softseal.mov": {
      "source": "apache"
    },
    "video/vnd.uvvu.mp4": {
      "source": "apache",
      "extensions": [
        "uvu",
        "uvvu"
      ]
    },
    "video/vnd.vivo": {
      "source": "apache",
      "extensions": [
        "viv"
      ]
    },
    "video/webm": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "webm"
      ]
    },
    "video/x-f4v": {
      "source": "apache",
      "extensions": [
        "f4v"
      ]
    },
    "video/x-fli": {
      "source": "apache",
      "extensions": [
        "fli"
      ]
    },
    "video/x-flv": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "flv"
      ]
    },
    "video/x-m4v": {
      "source": "apache",
      "extensions": [
        "m4v"
      ]
    },
    "video/x-matroska": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "mkv",
        "mk3d",
        "mks"
      ]
    },
    "video/x-mng": {
      "source": "apache",
      "extensions": [
        "mng"
      ]
    },
    "video/x-ms-asf": {
      "source": "apache",
      "extensions": [
        "asf",
        "asx"
      ]
    },
    "video/x-ms-vob": {
      "source": "apache",
      "extensions": [
        "vob"
      ]
    },
    "video/x-ms-wm": {
      "source": "apache",
      "extensions": [
        "wm"
      ]
    },
    "video/x-ms-wmv": {
      "source": "apache",
      "compressible": false,
      "extensions": [
        "wmv"
      ]
    },
    "video/x-ms-wmx": {
      "source": "apache",
      "extensions": [
        "wmx"
      ]
    },
    "video/x-ms-wvx": {
      "source": "apache",
      "extensions": [
        "wvx"
      ]
    },
    "video/x-msvideo": {
      "source": "apache",
      "extensions": [
        "avi"
      ]
    },
    "video/x-sgi-movie": {
      "source": "apache",
      "extensions": [
        "movie"
      ]
    },
    "video/x-smv": {
      "source": "apache",
      "extensions": [
        "smv"
      ]
    },
    "x-conference/x-cooltalk": {
      "source": "apache",
      "extensions": [
        "ice"
      ]
    },
    "x-shader/x-fragment": {
      "compressible": true
    },
    "x-shader/x-vertex": {
      "compressible": true
    }
  };
});

$__System.registerDynamic("npm:mime-db@1.22.0/index.js", ["npm:mime-db@1.22.0/db.json"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('npm:mime-db@1.22.0/db.json');
  return module.exports;
});

$__System.registerDynamic("npm:mime-types@2.1.10/index.js", ["npm:mime-db@1.22.0/index.js", "@node/path"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var db = $__require('npm:mime-db@1.22.0/index.js');
  var extname = $__require('@node/path').extname;
  var extractTypeRegExp = /^\s*([^;\s]*)(?:;|\s|$)/;
  var textTypeRegExp = /^text\//i;
  exports.charset = charset;
  exports.charsets = {lookup: charset};
  exports.contentType = contentType;
  exports.extension = extension;
  exports.extensions = Object.create(null);
  exports.lookup = lookup;
  exports.types = Object.create(null);
  populateMaps(exports.extensions, exports.types);
  function charset(type) {
    if (!type || typeof type !== 'string') {
      return false;
    }
    var match = extractTypeRegExp.exec(type);
    var mime = match && db[match[1].toLowerCase()];
    if (mime && mime.charset) {
      return mime.charset;
    }
    if (match && textTypeRegExp.test(match[1])) {
      return 'UTF-8';
    }
    return false;
  }
  function contentType(str) {
    if (!str || typeof str !== 'string') {
      return false;
    }
    var mime = str.indexOf('/') === -1 ? exports.lookup(str) : str;
    if (!mime) {
      return false;
    }
    if (mime.indexOf('charset') === -1) {
      var charset = exports.charset(mime);
      if (charset)
        mime += '; charset=' + charset.toLowerCase();
    }
    return mime;
  }
  function extension(type) {
    if (!type || typeof type !== 'string') {
      return false;
    }
    var match = extractTypeRegExp.exec(type);
    var exts = match && exports.extensions[match[1].toLowerCase()];
    if (!exts || !exts.length) {
      return false;
    }
    return exts[0];
  }
  function lookup(path) {
    if (!path || typeof path !== 'string') {
      return false;
    }
    var extension = extname('x.' + path).toLowerCase().substr(1);
    if (!extension) {
      return false;
    }
    return exports.types[extension] || false;
  }
  function populateMaps(extensions, types) {
    var preference = ['nginx', 'apache', undefined, 'iana'];
    Object.keys(db).forEach(function forEachMimeType(type) {
      var mime = db[type];
      var exts = mime.extensions;
      if (!exts || !exts.length) {
        return;
      }
      extensions[type] = exts;
      for (var i = 0; i < exts.length; i++) {
        var extension = exts[i];
        if (types[extension]) {
          var from = preference.indexOf(db[types[extension]].source);
          var to = preference.indexOf(mime.source);
          if (types[extension] !== 'application/octet-stream' && from > to || (from === to && types[extension].substr(0, 12) === 'application/')) {
            continue;
          }
        }
        types[extension] = type;
      }
    });
  }
  return module.exports;
});

$__System.registerDynamic("npm:async@1.5.2/lib/async.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  (function() {
    var async = {};
    function noop() {}
    function identity(v) {
      return v;
    }
    function toBool(v) {
      return !!v;
    }
    function notId(v) {
      return !v;
    }
    var previous_async;
    var root = typeof self === 'object' && self.self === self && self || typeof global === 'object' && global.global === global && global || this;
    if (root != null) {
      previous_async = root.async;
    }
    async.noConflict = function() {
      root.async = previous_async;
      return async;
    };
    function only_once(fn) {
      return function() {
        if (fn === null)
          throw new Error("Callback was already called.");
        fn.apply(this, arguments);
        fn = null;
      };
    }
    function _once(fn) {
      return function() {
        if (fn === null)
          return;
        fn.apply(this, arguments);
        fn = null;
      };
    }
    var _toString = Object.prototype.toString;
    var _isArray = Array.isArray || function(obj) {
      return _toString.call(obj) === '[object Array]';
    };
    var _isObject = function(obj) {
      var type = typeof obj;
      return type === 'function' || type === 'object' && !!obj;
    };
    function _isArrayLike(arr) {
      return _isArray(arr) || (typeof arr.length === "number" && arr.length >= 0 && arr.length % 1 === 0);
    }
    function _arrayEach(arr, iterator) {
      var index = -1,
          length = arr.length;
      while (++index < length) {
        iterator(arr[index], index, arr);
      }
    }
    function _map(arr, iterator) {
      var index = -1,
          length = arr.length,
          result = Array(length);
      while (++index < length) {
        result[index] = iterator(arr[index], index, arr);
      }
      return result;
    }
    function _range(count) {
      return _map(Array(count), function(v, i) {
        return i;
      });
    }
    function _reduce(arr, iterator, memo) {
      _arrayEach(arr, function(x, i, a) {
        memo = iterator(memo, x, i, a);
      });
      return memo;
    }
    function _forEachOf(object, iterator) {
      _arrayEach(_keys(object), function(key) {
        iterator(object[key], key);
      });
    }
    function _indexOf(arr, item) {
      for (var i = 0; i < arr.length; i++) {
        if (arr[i] === item)
          return i;
      }
      return -1;
    }
    var _keys = Object.keys || function(obj) {
      var keys = [];
      for (var k in obj) {
        if (obj.hasOwnProperty(k)) {
          keys.push(k);
        }
      }
      return keys;
    };
    function _keyIterator(coll) {
      var i = -1;
      var len;
      var keys;
      if (_isArrayLike(coll)) {
        len = coll.length;
        return function next() {
          i++;
          return i < len ? i : null;
        };
      } else {
        keys = _keys(coll);
        len = keys.length;
        return function next() {
          i++;
          return i < len ? keys[i] : null;
        };
      }
    }
    function _restParam(func, startIndex) {
      startIndex = startIndex == null ? func.length - 1 : +startIndex;
      return function() {
        var length = Math.max(arguments.length - startIndex, 0);
        var rest = Array(length);
        for (var index = 0; index < length; index++) {
          rest[index] = arguments[index + startIndex];
        }
        switch (startIndex) {
          case 0:
            return func.call(this, rest);
          case 1:
            return func.call(this, arguments[0], rest);
        }
      };
    }
    function _withoutIndex(iterator) {
      return function(value, index, callback) {
        return iterator(value, callback);
      };
    }
    var _setImmediate = typeof setImmediate === 'function' && setImmediate;
    var _delay = _setImmediate ? function(fn) {
      _setImmediate(fn);
    } : function(fn) {
      setTimeout(fn, 0);
    };
    if (typeof process === 'object' && typeof process.nextTick === 'function') {
      async.nextTick = process.nextTick;
    } else {
      async.nextTick = _delay;
    }
    async.setImmediate = _setImmediate ? _delay : async.nextTick;
    async.forEach = async.each = function(arr, iterator, callback) {
      return async.eachOf(arr, _withoutIndex(iterator), callback);
    };
    async.forEachSeries = async.eachSeries = function(arr, iterator, callback) {
      return async.eachOfSeries(arr, _withoutIndex(iterator), callback);
    };
    async.forEachLimit = async.eachLimit = function(arr, limit, iterator, callback) {
      return _eachOfLimit(limit)(arr, _withoutIndex(iterator), callback);
    };
    async.forEachOf = async.eachOf = function(object, iterator, callback) {
      callback = _once(callback || noop);
      object = object || [];
      var iter = _keyIterator(object);
      var key,
          completed = 0;
      while ((key = iter()) != null) {
        completed += 1;
        iterator(object[key], key, only_once(done));
      }
      if (completed === 0)
        callback(null);
      function done(err) {
        completed--;
        if (err) {
          callback(err);
        } else if (key === null && completed <= 0) {
          callback(null);
        }
      }
    };
    async.forEachOfSeries = async.eachOfSeries = function(obj, iterator, callback) {
      callback = _once(callback || noop);
      obj = obj || [];
      var nextKey = _keyIterator(obj);
      var key = nextKey();
      function iterate() {
        var sync = true;
        if (key === null) {
          return callback(null);
        }
        iterator(obj[key], key, only_once(function(err) {
          if (err) {
            callback(err);
          } else {
            key = nextKey();
            if (key === null) {
              return callback(null);
            } else {
              if (sync) {
                async.setImmediate(iterate);
              } else {
                iterate();
              }
            }
          }
        }));
        sync = false;
      }
      iterate();
    };
    async.forEachOfLimit = async.eachOfLimit = function(obj, limit, iterator, callback) {
      _eachOfLimit(limit)(obj, iterator, callback);
    };
    function _eachOfLimit(limit) {
      return function(obj, iterator, callback) {
        callback = _once(callback || noop);
        obj = obj || [];
        var nextKey = _keyIterator(obj);
        if (limit <= 0) {
          return callback(null);
        }
        var done = false;
        var running = 0;
        var errored = false;
        (function replenish() {
          if (done && running <= 0) {
            return callback(null);
          }
          while (running < limit && !errored) {
            var key = nextKey();
            if (key === null) {
              done = true;
              if (running <= 0) {
                callback(null);
              }
              return;
            }
            running += 1;
            iterator(obj[key], key, only_once(function(err) {
              running -= 1;
              if (err) {
                callback(err);
                errored = true;
              } else {
                replenish();
              }
            }));
          }
        })();
      };
    }
    function doParallel(fn) {
      return function(obj, iterator, callback) {
        return fn(async.eachOf, obj, iterator, callback);
      };
    }
    function doParallelLimit(fn) {
      return function(obj, limit, iterator, callback) {
        return fn(_eachOfLimit(limit), obj, iterator, callback);
      };
    }
    function doSeries(fn) {
      return function(obj, iterator, callback) {
        return fn(async.eachOfSeries, obj, iterator, callback);
      };
    }
    function _asyncMap(eachfn, arr, iterator, callback) {
      callback = _once(callback || noop);
      arr = arr || [];
      var results = _isArrayLike(arr) ? [] : {};
      eachfn(arr, function(value, index, callback) {
        iterator(value, function(err, v) {
          results[index] = v;
          callback(err);
        });
      }, function(err) {
        callback(err, results);
      });
    }
    async.map = doParallel(_asyncMap);
    async.mapSeries = doSeries(_asyncMap);
    async.mapLimit = doParallelLimit(_asyncMap);
    async.inject = async.foldl = async.reduce = function(arr, memo, iterator, callback) {
      async.eachOfSeries(arr, function(x, i, callback) {
        iterator(memo, x, function(err, v) {
          memo = v;
          callback(err);
        });
      }, function(err) {
        callback(err, memo);
      });
    };
    async.foldr = async.reduceRight = function(arr, memo, iterator, callback) {
      var reversed = _map(arr, identity).reverse();
      async.reduce(reversed, memo, iterator, callback);
    };
    async.transform = function(arr, memo, iterator, callback) {
      if (arguments.length === 3) {
        callback = iterator;
        iterator = memo;
        memo = _isArray(arr) ? [] : {};
      }
      async.eachOf(arr, function(v, k, cb) {
        iterator(memo, v, k, cb);
      }, function(err) {
        callback(err, memo);
      });
    };
    function _filter(eachfn, arr, iterator, callback) {
      var results = [];
      eachfn(arr, function(x, index, callback) {
        iterator(x, function(v) {
          if (v) {
            results.push({
              index: index,
              value: x
            });
          }
          callback();
        });
      }, function() {
        callback(_map(results.sort(function(a, b) {
          return a.index - b.index;
        }), function(x) {
          return x.value;
        }));
      });
    }
    async.select = async.filter = doParallel(_filter);
    async.selectLimit = async.filterLimit = doParallelLimit(_filter);
    async.selectSeries = async.filterSeries = doSeries(_filter);
    function _reject(eachfn, arr, iterator, callback) {
      _filter(eachfn, arr, function(value, cb) {
        iterator(value, function(v) {
          cb(!v);
        });
      }, callback);
    }
    async.reject = doParallel(_reject);
    async.rejectLimit = doParallelLimit(_reject);
    async.rejectSeries = doSeries(_reject);
    function _createTester(eachfn, check, getResult) {
      return function(arr, limit, iterator, cb) {
        function done() {
          if (cb)
            cb(getResult(false, void 0));
        }
        function iteratee(x, _, callback) {
          if (!cb)
            return callback();
          iterator(x, function(v) {
            if (cb && check(v)) {
              cb(getResult(true, x));
              cb = iterator = false;
            }
            callback();
          });
        }
        if (arguments.length > 3) {
          eachfn(arr, limit, iteratee, done);
        } else {
          cb = iterator;
          iterator = limit;
          eachfn(arr, iteratee, done);
        }
      };
    }
    async.any = async.some = _createTester(async.eachOf, toBool, identity);
    async.someLimit = _createTester(async.eachOfLimit, toBool, identity);
    async.all = async.every = _createTester(async.eachOf, notId, notId);
    async.everyLimit = _createTester(async.eachOfLimit, notId, notId);
    function _findGetResult(v, x) {
      return x;
    }
    async.detect = _createTester(async.eachOf, identity, _findGetResult);
    async.detectSeries = _createTester(async.eachOfSeries, identity, _findGetResult);
    async.detectLimit = _createTester(async.eachOfLimit, identity, _findGetResult);
    async.sortBy = function(arr, iterator, callback) {
      async.map(arr, function(x, callback) {
        iterator(x, function(err, criteria) {
          if (err) {
            callback(err);
          } else {
            callback(null, {
              value: x,
              criteria: criteria
            });
          }
        });
      }, function(err, results) {
        if (err) {
          return callback(err);
        } else {
          callback(null, _map(results.sort(comparator), function(x) {
            return x.value;
          }));
        }
      });
      function comparator(left, right) {
        var a = left.criteria,
            b = right.criteria;
        return a < b ? -1 : a > b ? 1 : 0;
      }
    };
    async.auto = function(tasks, concurrency, callback) {
      if (typeof arguments[1] === 'function') {
        callback = concurrency;
        concurrency = null;
      }
      callback = _once(callback || noop);
      var keys = _keys(tasks);
      var remainingTasks = keys.length;
      if (!remainingTasks) {
        return callback(null);
      }
      if (!concurrency) {
        concurrency = remainingTasks;
      }
      var results = {};
      var runningTasks = 0;
      var hasError = false;
      var listeners = [];
      function addListener(fn) {
        listeners.unshift(fn);
      }
      function removeListener(fn) {
        var idx = _indexOf(listeners, fn);
        if (idx >= 0)
          listeners.splice(idx, 1);
      }
      function taskComplete() {
        remainingTasks--;
        _arrayEach(listeners.slice(0), function(fn) {
          fn();
        });
      }
      addListener(function() {
        if (!remainingTasks) {
          callback(null, results);
        }
      });
      _arrayEach(keys, function(k) {
        if (hasError)
          return;
        var task = _isArray(tasks[k]) ? tasks[k] : [tasks[k]];
        var taskCallback = _restParam(function(err, args) {
          runningTasks--;
          if (args.length <= 1) {
            args = args[0];
          }
          if (err) {
            var safeResults = {};
            _forEachOf(results, function(val, rkey) {
              safeResults[rkey] = val;
            });
            safeResults[k] = args;
            hasError = true;
            callback(err, safeResults);
          } else {
            results[k] = args;
            async.setImmediate(taskComplete);
          }
        });
        var requires = task.slice(0, task.length - 1);
        var len = requires.length;
        var dep;
        while (len--) {
          if (!(dep = tasks[requires[len]])) {
            throw new Error('Has nonexistent dependency in ' + requires.join(', '));
          }
          if (_isArray(dep) && _indexOf(dep, k) >= 0) {
            throw new Error('Has cyclic dependencies');
          }
        }
        function ready() {
          return runningTasks < concurrency && _reduce(requires, function(a, x) {
            return (a && results.hasOwnProperty(x));
          }, true) && !results.hasOwnProperty(k);
        }
        if (ready()) {
          runningTasks++;
          task[task.length - 1](taskCallback, results);
        } else {
          addListener(listener);
        }
        function listener() {
          if (ready()) {
            runningTasks++;
            removeListener(listener);
            task[task.length - 1](taskCallback, results);
          }
        }
      });
    };
    async.retry = function(times, task, callback) {
      var DEFAULT_TIMES = 5;
      var DEFAULT_INTERVAL = 0;
      var attempts = [];
      var opts = {
        times: DEFAULT_TIMES,
        interval: DEFAULT_INTERVAL
      };
      function parseTimes(acc, t) {
        if (typeof t === 'number') {
          acc.times = parseInt(t, 10) || DEFAULT_TIMES;
        } else if (typeof t === 'object') {
          acc.times = parseInt(t.times, 10) || DEFAULT_TIMES;
          acc.interval = parseInt(t.interval, 10) || DEFAULT_INTERVAL;
        } else {
          throw new Error('Unsupported argument type for \'times\': ' + typeof t);
        }
      }
      var length = arguments.length;
      if (length < 1 || length > 3) {
        throw new Error('Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)');
      } else if (length <= 2 && typeof times === 'function') {
        callback = task;
        task = times;
      }
      if (typeof times !== 'function') {
        parseTimes(opts, times);
      }
      opts.callback = callback;
      opts.task = task;
      function wrappedTask(wrappedCallback, wrappedResults) {
        function retryAttempt(task, finalAttempt) {
          return function(seriesCallback) {
            task(function(err, result) {
              seriesCallback(!err || finalAttempt, {
                err: err,
                result: result
              });
            }, wrappedResults);
          };
        }
        function retryInterval(interval) {
          return function(seriesCallback) {
            setTimeout(function() {
              seriesCallback(null);
            }, interval);
          };
        }
        while (opts.times) {
          var finalAttempt = !(opts.times -= 1);
          attempts.push(retryAttempt(opts.task, finalAttempt));
          if (!finalAttempt && opts.interval > 0) {
            attempts.push(retryInterval(opts.interval));
          }
        }
        async.series(attempts, function(done, data) {
          data = data[data.length - 1];
          (wrappedCallback || opts.callback)(data.err, data.result);
        });
      }
      return opts.callback ? wrappedTask() : wrappedTask;
    };
    async.waterfall = function(tasks, callback) {
      callback = _once(callback || noop);
      if (!_isArray(tasks)) {
        var err = new Error('First argument to waterfall must be an array of functions');
        return callback(err);
      }
      if (!tasks.length) {
        return callback();
      }
      function wrapIterator(iterator) {
        return _restParam(function(err, args) {
          if (err) {
            callback.apply(null, [err].concat(args));
          } else {
            var next = iterator.next();
            if (next) {
              args.push(wrapIterator(next));
            } else {
              args.push(callback);
            }
            ensureAsync(iterator).apply(null, args);
          }
        });
      }
      wrapIterator(async.iterator(tasks))();
    };
    function _parallel(eachfn, tasks, callback) {
      callback = callback || noop;
      var results = _isArrayLike(tasks) ? [] : {};
      eachfn(tasks, function(task, key, callback) {
        task(_restParam(function(err, args) {
          if (args.length <= 1) {
            args = args[0];
          }
          results[key] = args;
          callback(err);
        }));
      }, function(err) {
        callback(err, results);
      });
    }
    async.parallel = function(tasks, callback) {
      _parallel(async.eachOf, tasks, callback);
    };
    async.parallelLimit = function(tasks, limit, callback) {
      _parallel(_eachOfLimit(limit), tasks, callback);
    };
    async.series = function(tasks, callback) {
      _parallel(async.eachOfSeries, tasks, callback);
    };
    async.iterator = function(tasks) {
      function makeCallback(index) {
        function fn() {
          if (tasks.length) {
            tasks[index].apply(null, arguments);
          }
          return fn.next();
        }
        fn.next = function() {
          return (index < tasks.length - 1) ? makeCallback(index + 1) : null;
        };
        return fn;
      }
      return makeCallback(0);
    };
    async.apply = _restParam(function(fn, args) {
      return _restParam(function(callArgs) {
        return fn.apply(null, args.concat(callArgs));
      });
    });
    function _concat(eachfn, arr, fn, callback) {
      var result = [];
      eachfn(arr, function(x, index, cb) {
        fn(x, function(err, y) {
          result = result.concat(y || []);
          cb(err);
        });
      }, function(err) {
        callback(err, result);
      });
    }
    async.concat = doParallel(_concat);
    async.concatSeries = doSeries(_concat);
    async.whilst = function(test, iterator, callback) {
      callback = callback || noop;
      if (test()) {
        var next = _restParam(function(err, args) {
          if (err) {
            callback(err);
          } else if (test.apply(this, args)) {
            iterator(next);
          } else {
            callback.apply(null, [null].concat(args));
          }
        });
        iterator(next);
      } else {
        callback(null);
      }
    };
    async.doWhilst = function(iterator, test, callback) {
      var calls = 0;
      return async.whilst(function() {
        return ++calls <= 1 || test.apply(this, arguments);
      }, iterator, callback);
    };
    async.until = function(test, iterator, callback) {
      return async.whilst(function() {
        return !test.apply(this, arguments);
      }, iterator, callback);
    };
    async.doUntil = function(iterator, test, callback) {
      return async.doWhilst(iterator, function() {
        return !test.apply(this, arguments);
      }, callback);
    };
    async.during = function(test, iterator, callback) {
      callback = callback || noop;
      var next = _restParam(function(err, args) {
        if (err) {
          callback(err);
        } else {
          args.push(check);
          test.apply(this, args);
        }
      });
      var check = function(err, truth) {
        if (err) {
          callback(err);
        } else if (truth) {
          iterator(next);
        } else {
          callback(null);
        }
      };
      test(check);
    };
    async.doDuring = function(iterator, test, callback) {
      var calls = 0;
      async.during(function(next) {
        if (calls++ < 1) {
          next(null, true);
        } else {
          test.apply(this, arguments);
        }
      }, iterator, callback);
    };
    function _queue(worker, concurrency, payload) {
      if (concurrency == null) {
        concurrency = 1;
      } else if (concurrency === 0) {
        throw new Error('Concurrency must not be zero');
      }
      function _insert(q, data, pos, callback) {
        if (callback != null && typeof callback !== "function") {
          throw new Error("task callback must be a function");
        }
        q.started = true;
        if (!_isArray(data)) {
          data = [data];
        }
        if (data.length === 0 && q.idle()) {
          return async.setImmediate(function() {
            q.drain();
          });
        }
        _arrayEach(data, function(task) {
          var item = {
            data: task,
            callback: callback || noop
          };
          if (pos) {
            q.tasks.unshift(item);
          } else {
            q.tasks.push(item);
          }
          if (q.tasks.length === q.concurrency) {
            q.saturated();
          }
        });
        async.setImmediate(q.process);
      }
      function _next(q, tasks) {
        return function() {
          workers -= 1;
          var removed = false;
          var args = arguments;
          _arrayEach(tasks, function(task) {
            _arrayEach(workersList, function(worker, index) {
              if (worker === task && !removed) {
                workersList.splice(index, 1);
                removed = true;
              }
            });
            task.callback.apply(task, args);
          });
          if (q.tasks.length + workers === 0) {
            q.drain();
          }
          q.process();
        };
      }
      var workers = 0;
      var workersList = [];
      var q = {
        tasks: [],
        concurrency: concurrency,
        payload: payload,
        saturated: noop,
        empty: noop,
        drain: noop,
        started: false,
        paused: false,
        push: function(data, callback) {
          _insert(q, data, false, callback);
        },
        kill: function() {
          q.drain = noop;
          q.tasks = [];
        },
        unshift: function(data, callback) {
          _insert(q, data, true, callback);
        },
        process: function() {
          while (!q.paused && workers < q.concurrency && q.tasks.length) {
            var tasks = q.payload ? q.tasks.splice(0, q.payload) : q.tasks.splice(0, q.tasks.length);
            var data = _map(tasks, function(task) {
              return task.data;
            });
            if (q.tasks.length === 0) {
              q.empty();
            }
            workers += 1;
            workersList.push(tasks[0]);
            var cb = only_once(_next(q, tasks));
            worker(data, cb);
          }
        },
        length: function() {
          return q.tasks.length;
        },
        running: function() {
          return workers;
        },
        workersList: function() {
          return workersList;
        },
        idle: function() {
          return q.tasks.length + workers === 0;
        },
        pause: function() {
          q.paused = true;
        },
        resume: function() {
          if (q.paused === false) {
            return;
          }
          q.paused = false;
          var resumeCount = Math.min(q.concurrency, q.tasks.length);
          for (var w = 1; w <= resumeCount; w++) {
            async.setImmediate(q.process);
          }
        }
      };
      return q;
    }
    async.queue = function(worker, concurrency) {
      var q = _queue(function(items, cb) {
        worker(items[0], cb);
      }, concurrency, 1);
      return q;
    };
    async.priorityQueue = function(worker, concurrency) {
      function _compareTasks(a, b) {
        return a.priority - b.priority;
      }
      function _binarySearch(sequence, item, compare) {
        var beg = -1,
            end = sequence.length - 1;
        while (beg < end) {
          var mid = beg + ((end - beg + 1) >>> 1);
          if (compare(item, sequence[mid]) >= 0) {
            beg = mid;
          } else {
            end = mid - 1;
          }
        }
        return beg;
      }
      function _insert(q, data, priority, callback) {
        if (callback != null && typeof callback !== "function") {
          throw new Error("task callback must be a function");
        }
        q.started = true;
        if (!_isArray(data)) {
          data = [data];
        }
        if (data.length === 0) {
          return async.setImmediate(function() {
            q.drain();
          });
        }
        _arrayEach(data, function(task) {
          var item = {
            data: task,
            priority: priority,
            callback: typeof callback === 'function' ? callback : noop
          };
          q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);
          if (q.tasks.length === q.concurrency) {
            q.saturated();
          }
          async.setImmediate(q.process);
        });
      }
      var q = async.queue(worker, concurrency);
      q.push = function(data, priority, callback) {
        _insert(q, data, priority, callback);
      };
      delete q.unshift;
      return q;
    };
    async.cargo = function(worker, payload) {
      return _queue(worker, 1, payload);
    };
    function _console_fn(name) {
      return _restParam(function(fn, args) {
        fn.apply(null, args.concat([_restParam(function(err, args) {
          if (typeof console === 'object') {
            if (err) {
              if (console.error) {
                console.error(err);
              }
            } else if (console[name]) {
              _arrayEach(args, function(x) {
                console[name](x);
              });
            }
          }
        })]));
      });
    }
    async.log = _console_fn('log');
    async.dir = _console_fn('dir');
    async.memoize = function(fn, hasher) {
      var memo = {};
      var queues = {};
      var has = Object.prototype.hasOwnProperty;
      hasher = hasher || identity;
      var memoized = _restParam(function memoized(args) {
        var callback = args.pop();
        var key = hasher.apply(null, args);
        if (has.call(memo, key)) {
          async.setImmediate(function() {
            callback.apply(null, memo[key]);
          });
        } else if (has.call(queues, key)) {
          queues[key].push(callback);
        } else {
          queues[key] = [callback];
          fn.apply(null, args.concat([_restParam(function(args) {
            memo[key] = args;
            var q = queues[key];
            delete queues[key];
            for (var i = 0,
                l = q.length; i < l; i++) {
              q[i].apply(null, args);
            }
          })]));
        }
      });
      memoized.memo = memo;
      memoized.unmemoized = fn;
      return memoized;
    };
    async.unmemoize = function(fn) {
      return function() {
        return (fn.unmemoized || fn).apply(null, arguments);
      };
    };
    function _times(mapper) {
      return function(count, iterator, callback) {
        mapper(_range(count), iterator, callback);
      };
    }
    async.times = _times(async.map);
    async.timesSeries = _times(async.mapSeries);
    async.timesLimit = function(count, limit, iterator, callback) {
      return async.mapLimit(_range(count), limit, iterator, callback);
    };
    async.seq = function() {
      var fns = arguments;
      return _restParam(function(args) {
        var that = this;
        var callback = args[args.length - 1];
        if (typeof callback == 'function') {
          args.pop();
        } else {
          callback = noop;
        }
        async.reduce(fns, args, function(newargs, fn, cb) {
          fn.apply(that, newargs.concat([_restParam(function(err, nextargs) {
            cb(err, nextargs);
          })]));
        }, function(err, results) {
          callback.apply(that, [err].concat(results));
        });
      });
    };
    async.compose = function() {
      return async.seq.apply(null, Array.prototype.reverse.call(arguments));
    };
    function _applyEach(eachfn) {
      return _restParam(function(fns, args) {
        var go = _restParam(function(args) {
          var that = this;
          var callback = args.pop();
          return eachfn(fns, function(fn, _, cb) {
            fn.apply(that, args.concat([cb]));
          }, callback);
        });
        if (args.length) {
          return go.apply(this, args);
        } else {
          return go;
        }
      });
    }
    async.applyEach = _applyEach(async.eachOf);
    async.applyEachSeries = _applyEach(async.eachOfSeries);
    async.forever = function(fn, callback) {
      var done = only_once(callback || noop);
      var task = ensureAsync(fn);
      function next(err) {
        if (err) {
          return done(err);
        }
        task(next);
      }
      next();
    };
    function ensureAsync(fn) {
      return _restParam(function(args) {
        var callback = args.pop();
        args.push(function() {
          var innerArgs = arguments;
          if (sync) {
            async.setImmediate(function() {
              callback.apply(null, innerArgs);
            });
          } else {
            callback.apply(null, innerArgs);
          }
        });
        var sync = true;
        fn.apply(this, args);
        sync = false;
      });
    }
    async.ensureAsync = ensureAsync;
    async.constant = _restParam(function(values) {
      var args = [null].concat(values);
      return function(callback) {
        return callback.apply(this, args);
      };
    });
    async.wrapSync = async.asyncify = function asyncify(func) {
      return _restParam(function(args) {
        var callback = args.pop();
        var result;
        try {
          result = func.apply(this, args);
        } catch (e) {
          return callback(e);
        }
        if (_isObject(result) && typeof result.then === "function") {
          result.then(function(value) {
            callback(null, value);
          })["catch"](function(err) {
            callback(err.message ? err : new Error(err));
          });
        } else {
          callback(null, result);
        }
      });
    };
    if (typeof module === 'object' && module.exports) {
      module.exports = async;
    } else if (typeof define === 'function' && define.amd) {
      define([], function() {
        return async;
      });
    } else {
      root.async = async;
    }
  }());
  return module.exports;
});

$__System.registerDynamic("npm:form-data@1.0.0-rc4/lib/populate.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function(dst, src) {
    for (var prop in src) {
      if (src.hasOwnProperty(prop) && !dst[prop]) {
        dst[prop] = src[prop];
      }
    }
    return dst;
  };
  return module.exports;
});

$__System.registerDynamic("npm:form-data@1.0.0-rc4/lib/form_data.js", ["npm:combined-stream@1.0.5/lib/combined_stream.js", "@node/util", "@node/path", "@node/http", "@node/https", "@node/url", "@node/fs", "npm:mime-types@2.1.10/index.js", "npm:async@1.5.2/lib/async.js", "npm:form-data@1.0.0-rc4/lib/populate.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"),
      Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var CombinedStream = $__require('npm:combined-stream@1.0.5/lib/combined_stream.js');
  var util = $__require('@node/util');
  var path = $__require('@node/path');
  var http = $__require('@node/http');
  var https = $__require('@node/https');
  var parseUrl = $__require('@node/url').parse;
  var fs = $__require('@node/fs');
  var mime = $__require('npm:mime-types@2.1.10/index.js');
  var async = $__require('npm:async@1.5.2/lib/async.js');
  var populate = $__require('npm:form-data@1.0.0-rc4/lib/populate.js');
  module.exports = FormData;
  util.inherits(FormData, CombinedStream);
  function FormData() {
    if (!(this instanceof FormData)) {
      throw new TypeError('Failed to construct FormData: Please use the _new_ operator, this object constructor cannot be called as a function.');
    }
    this._overheadLength = 0;
    this._valueLength = 0;
    this._lengthRetrievers = [];
    CombinedStream.call(this);
  }
  FormData.LINE_BREAK = '\r\n';
  FormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';
  FormData.prototype.append = function(field, value, options) {
    options = options || {};
    if (typeof options == 'string') {
      options = {filename: options};
    }
    var append = CombinedStream.prototype.append.bind(this);
    if (typeof value == 'number') {
      value = '' + value;
    }
    if (util.isArray(value)) {
      this._error(new Error('Arrays are not supported.'));
      return;
    }
    var header = this._multiPartHeader(field, value, options);
    var footer = this._multiPartFooter();
    append(header);
    append(value);
    append(footer);
    this._trackLength(header, value, options);
  };
  FormData.prototype._trackLength = function(header, value, options) {
    var valueLength = 0;
    if (options.knownLength != null) {
      valueLength += +options.knownLength;
    } else if (Buffer.isBuffer(value)) {
      valueLength = value.length;
    } else if (typeof value === 'string') {
      valueLength = Buffer.byteLength(value);
    }
    this._valueLength += valueLength;
    this._overheadLength += Buffer.byteLength(header) + FormData.LINE_BREAK.length;
    if (!value || (!value.path && !(value.readable && value.hasOwnProperty('httpVersion')))) {
      return;
    }
    if (!options.knownLength) {
      this._lengthRetrievers.push(function(next) {
        if (value.hasOwnProperty('fd')) {
          if (value.end != undefined && value.end != Infinity && value.start != undefined) {
            next(null, value.end + 1 - (value.start ? value.start : 0));
          } else {
            fs.stat(value.path, function(err, stat) {
              var fileSize;
              if (err) {
                next(err);
                return;
              }
              fileSize = stat.size - (value.start ? value.start : 0);
              next(null, fileSize);
            });
          }
        } else if (value.hasOwnProperty('httpVersion')) {
          next(null, +value.headers['content-length']);
        } else if (value.hasOwnProperty('httpModule')) {
          value.on('response', function(response) {
            value.pause();
            next(null, +response.headers['content-length']);
          });
          value.resume();
        } else {
          next('Unknown stream');
        }
      });
    }
  };
  FormData.prototype._multiPartHeader = function(field, value, options) {
    if (options.header) {
      return options.header;
    }
    var contentDisposition = this._getContentDisposition(value, options);
    var contentType = this._getContentType(value, options);
    var contents = '';
    var headers = {
      'Content-Disposition': ['form-data', 'name="' + field + '"'].concat(contentDisposition || []),
      'Content-Type': [].concat(contentType || [])
    };
    for (var prop in headers) {
      if (headers[prop].length) {
        contents += prop + ': ' + headers[prop].join('; ') + FormData.LINE_BREAK;
      }
    }
    return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;
  };
  FormData.prototype._getContentDisposition = function(value, options) {
    var contentDisposition;
    var filename = options.filename || value.path;
    if (!filename && value.readable && value.hasOwnProperty('httpVersion')) {
      filename = value.client._httpMessage.path;
    }
    if (filename) {
      contentDisposition = 'filename="' + path.basename(filename) + '"';
    }
    return contentDisposition;
  };
  FormData.prototype._getContentType = function(value, options) {
    var contentType = options.contentType;
    if (!contentType && value.path) {
      contentType = mime.lookup(value.path);
    }
    if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {
      contentType = value.headers['content-type'];
    }
    if (!contentType && options.filename) {
      contentType = mime.lookup(options.filename);
    }
    if (!contentType && typeof value == 'object') {
      contentType = FormData.DEFAULT_CONTENT_TYPE;
    }
    return contentType;
  };
  FormData.prototype._multiPartFooter = function() {
    return function(next) {
      var footer = FormData.LINE_BREAK;
      var lastPart = (this._streams.length === 0);
      if (lastPart) {
        footer += this._lastBoundary();
      }
      next(footer);
    }.bind(this);
  };
  FormData.prototype._lastBoundary = function() {
    return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;
  };
  FormData.prototype.getHeaders = function(userHeaders) {
    var header;
    var formHeaders = {'content-type': 'multipart/form-data; boundary=' + this.getBoundary()};
    for (header in userHeaders) {
      if (userHeaders.hasOwnProperty(header)) {
        formHeaders[header.toLowerCase()] = userHeaders[header];
      }
    }
    return formHeaders;
  };
  FormData.prototype.getCustomHeaders = function(contentType) {
    contentType = contentType ? contentType : 'multipart/form-data';
    var formHeaders = {
      'content-type': contentType + '; boundary=' + this.getBoundary(),
      'content-length': this.getLengthSync()
    };
    return formHeaders;
  };
  FormData.prototype.getBoundary = function() {
    if (!this._boundary) {
      this._generateBoundary();
    }
    return this._boundary;
  };
  FormData.prototype._generateBoundary = function() {
    var boundary = '--------------------------';
    for (var i = 0; i < 24; i++) {
      boundary += Math.floor(Math.random() * 10).toString(16);
    }
    this._boundary = boundary;
  };
  FormData.prototype.getLengthSync = function() {
    var knownLength = this._overheadLength + this._valueLength;
    if (this._streams.length) {
      knownLength += this._lastBoundary().length;
    }
    if (this._lengthRetrievers.length) {
      this._error(new Error('Cannot calculate proper length in synchronous way.'));
    }
    return knownLength;
  };
  FormData.prototype.getLength = function(cb) {
    var knownLength = this._overheadLength + this._valueLength;
    if (this._streams.length) {
      knownLength += this._lastBoundary().length;
    }
    if (!this._lengthRetrievers.length) {
      process.nextTick(cb.bind(this, null, knownLength));
      return;
    }
    async.parallel(this._lengthRetrievers, function(err, values) {
      if (err) {
        cb(err);
        return;
      }
      values.forEach(function(length) {
        knownLength += length;
      });
      cb(null, knownLength);
    });
  };
  FormData.prototype.submit = function(params, cb) {
    var request,
        options,
        defaults = {method: 'post'};
    ;
    if (typeof params == 'string') {
      params = parseUrl(params);
      options = populate({
        port: params.port,
        path: params.pathname,
        host: params.hostname
      }, defaults);
    } else {
      options = populate(params, defaults);
      if (!options.port) {
        options.port = options.protocol == 'https:' ? 443 : 80;
      }
    }
    options.headers = this.getHeaders(params.headers);
    if (options.protocol == 'https:') {
      request = https.request(options);
    } else {
      request = http.request(options);
    }
    this.getLength(function(err, length) {
      if (err) {
        this._error(err);
        return;
      }
      request.setHeader('Content-Length', length);
      this.pipe(request);
      if (cb) {
        request.on('error', cb);
        request.on('response', cb.bind(this, null));
      }
    }.bind(this));
    return request;
  };
  FormData.prototype._error = function(err) {
    if (!this.error) {
      this.error = err;
      this.pause();
      this.emit('error', err);
    }
  };
  return module.exports;
});

$__System.registerDynamic("npm:is-typedarray@1.0.0/index.js", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = isTypedArray;
  isTypedArray.strict = isStrictTypedArray;
  isTypedArray.loose = isLooseTypedArray;
  var toString = Object.prototype.toString;
  var names = {
    '[object Int8Array]': true,
    '[object Int16Array]': true,
    '[object Int32Array]': true,
    '[object Uint8Array]': true,
    '[object Uint8ClampedArray]': true,
    '[object Uint16Array]': true,
    '[object Uint32Array]': true,
    '[object Float32Array]': true,
    '[object Float64Array]': true
  };
  function isTypedArray(arr) {
    return (isStrictTypedArray(arr) || isLooseTypedArray(arr));
  }
  function isStrictTypedArray(arr) {
    return (arr instanceof Int8Array || arr instanceof Int16Array || arr instanceof Int32Array || arr instanceof Uint8Array || arr instanceof Uint8ClampedArray || arr instanceof Uint16Array || arr instanceof Uint32Array || arr instanceof Float32Array || arr instanceof Float64Array);
  }
  function isLooseTypedArray(arr) {
    return names[toString.call(arr)];
  }
  return module.exports;
});

$__System.registerDynamic("npm:tough-cookie@2.2.2/lib/store.js", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  function Store() {}
  exports.Store = Store;
  Store.prototype.synchronous = false;
  Store.prototype.findCookie = function(domain, path, key, cb) {
    throw new Error('findCookie is not implemented');
  };
  Store.prototype.findCookies = function(domain, path, cb) {
    throw new Error('findCookies is not implemented');
  };
  Store.prototype.putCookie = function(cookie, cb) {
    throw new Error('putCookie is not implemented');
  };
  Store.prototype.updateCookie = function(oldCookie, newCookie, cb) {
    throw new Error('updateCookie is not implemented');
  };
  Store.prototype.removeCookie = function(domain, path, key, cb) {
    throw new Error('removeCookie is not implemented');
  };
  Store.prototype.removeCookies = function(domain, path, cb) {
    throw new Error('removeCookies is not implemented');
  };
  Store.prototype.getAllCookies = function(cb) {
    throw new Error('getAllCookies is not implemented (therefore jar cannot be serialized)');
  };
  return module.exports;
});

$__System.registerDynamic("npm:tough-cookie@2.2.2/lib/memstore.js", ["npm:tough-cookie@2.2.2/lib/store.js", "npm:tough-cookie@2.2.2/lib/permuteDomain.js", "npm:tough-cookie@2.2.2/lib/pathMatch.js", "@node/util"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Store = $__require('npm:tough-cookie@2.2.2/lib/store.js').Store;
  var permuteDomain = $__require('npm:tough-cookie@2.2.2/lib/permuteDomain.js').permuteDomain;
  var pathMatch = $__require('npm:tough-cookie@2.2.2/lib/pathMatch.js').pathMatch;
  var util = $__require('@node/util');
  function MemoryCookieStore() {
    Store.call(this);
    this.idx = {};
  }
  util.inherits(MemoryCookieStore, Store);
  exports.MemoryCookieStore = MemoryCookieStore;
  MemoryCookieStore.prototype.idx = null;
  MemoryCookieStore.prototype.synchronous = true;
  MemoryCookieStore.prototype.inspect = function() {
    return "{ idx: " + util.inspect(this.idx, false, 2) + ' }';
  };
  MemoryCookieStore.prototype.findCookie = function(domain, path, key, cb) {
    if (!this.idx[domain]) {
      return cb(null, undefined);
    }
    if (!this.idx[domain][path]) {
      return cb(null, undefined);
    }
    return cb(null, this.idx[domain][path][key] || null);
  };
  MemoryCookieStore.prototype.findCookies = function(domain, path, cb) {
    var results = [];
    if (!domain) {
      return cb(null, []);
    }
    var pathMatcher;
    if (!path) {
      pathMatcher = function matchAll(domainIndex) {
        for (var curPath in domainIndex) {
          var pathIndex = domainIndex[curPath];
          for (var key in pathIndex) {
            results.push(pathIndex[key]);
          }
        }
      };
    } else {
      pathMatcher = function matchRFC(domainIndex) {
        Object.keys(domainIndex).forEach(function(cookiePath) {
          if (pathMatch(path, cookiePath)) {
            var pathIndex = domainIndex[cookiePath];
            for (var key in pathIndex) {
              results.push(pathIndex[key]);
            }
          }
        });
      };
    }
    var domains = permuteDomain(domain) || [domain];
    var idx = this.idx;
    domains.forEach(function(curDomain) {
      var domainIndex = idx[curDomain];
      if (!domainIndex) {
        return;
      }
      pathMatcher(domainIndex);
    });
    cb(null, results);
  };
  MemoryCookieStore.prototype.putCookie = function(cookie, cb) {
    if (!this.idx[cookie.domain]) {
      this.idx[cookie.domain] = {};
    }
    if (!this.idx[cookie.domain][cookie.path]) {
      this.idx[cookie.domain][cookie.path] = {};
    }
    this.idx[cookie.domain][cookie.path][cookie.key] = cookie;
    cb(null);
  };
  MemoryCookieStore.prototype.updateCookie = function(oldCookie, newCookie, cb) {
    this.putCookie(newCookie, cb);
  };
  MemoryCookieStore.prototype.removeCookie = function(domain, path, key, cb) {
    if (this.idx[domain] && this.idx[domain][path] && this.idx[domain][path][key]) {
      delete this.idx[domain][path][key];
    }
    cb(null);
  };
  MemoryCookieStore.prototype.removeCookies = function(domain, path, cb) {
    if (this.idx[domain]) {
      if (path) {
        delete this.idx[domain][path];
      } else {
        delete this.idx[domain];
      }
    }
    return cb(null);
  };
  MemoryCookieStore.prototype.getAllCookies = function(cb) {
    var cookies = [];
    var idx = this.idx;
    var domains = Object.keys(idx);
    domains.forEach(function(domain) {
      var paths = Object.keys(idx[domain]);
      paths.forEach(function(path) {
        var keys = Object.keys(idx[domain][path]);
        keys.forEach(function(key) {
          if (key !== null) {
            cookies.push(idx[domain][path][key]);
          }
        });
      });
    });
    cookies.sort(function(a, b) {
      return (a.creationIndex || 0) - (b.creationIndex || 0);
    });
    cb(null, cookies);
  };
  return module.exports;
});

$__System.registerDynamic("npm:tough-cookie@2.2.2/lib/pathMatch.js", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  function pathMatch(reqPath, cookiePath) {
    if (cookiePath === reqPath) {
      return true;
    }
    var idx = reqPath.indexOf(cookiePath);
    if (idx === 0) {
      if (cookiePath.substr(-1) === "/") {
        return true;
      }
      if (reqPath.substr(cookiePath.length, 1) === "/") {
        return true;
      }
    }
    return false;
  }
  exports.pathMatch = pathMatch;
  return module.exports;
});

$__System.registerDynamic("npm:tough-cookie@2.2.2/package.json", [], false, function() {
  return {
    "author": {
      "name": "Jeremy Stashewsky",
      "email": "jstashewsky@salesforce.com",
      "website": "https://github.com/stash"
    },
    "contributors": [
      {
        "name": "Alexander Savin",
        "website": "https://github.com/apsavin"
      },
      {
        "name": "Ian Livingstone",
        "website": "https://github.com/ianlivingstone"
      },
      {
        "name": "Ivan Nikulin",
        "website": "https://github.com/inikulin"
      },
      {
        "name": "Lalit Kapoor",
        "website": "https://github.com/lalitkapoor"
      },
      {
        "name": "Sam Thompson",
        "website": "https://github.com/sambthompson"
      },
      {
        "name": "Sebastian Mayr",
        "website": "https://github.com/Sebmaster"
      }
    ],
    "license": "BSD-3-Clause",
    "name": "tough-cookie",
    "description": "RFC6265 Cookies and Cookie Jar for node.js",
    "keywords": [
      "HTTP",
      "cookie",
      "cookies",
      "set-cookie",
      "cookiejar",
      "jar",
      "RFC6265",
      "RFC2965"
    ],
    "version": "2.2.2",
    "homepage": "https://github.com/SalesforceEng/tough-cookie",
    "repository": {
      "type": "git",
      "url": "git://github.com/SalesforceEng/tough-cookie.git"
    },
    "bugs": {
      "url": "https://github.com/SalesforceEng/tough-cookie/issues"
    },
    "main": "./lib/cookie",
    "files": [
      "lib"
    ],
    "scripts": {
      "suffixup": "curl -o public_suffix_list.dat https://publicsuffix.org/list/public_suffix_list.dat && ./generate-pubsuffix.js",
      "test": "vows test/*_test.js"
    },
    "engines": {
      "node": ">=0.10.0"
    },
    "devDependencies": {
      "async": "^1.4.2",
      "vows": "^0.8.1"
    }
  };
});

$__System.registerDynamic("npm:tough-cookie@2.2.2/lib/pubsuffix.js", ["@node/punycode"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var punycode = $__require('@node/punycode');
  module.exports.getPublicSuffix = function getPublicSuffix(domain) {
    if (!domain) {
      return null;
    }
    if (domain.match(/^\./)) {
      return null;
    }
    var asciiDomain = punycode.toASCII(domain);
    var converted = false;
    if (asciiDomain !== domain) {
      domain = asciiDomain;
      converted = true;
    }
    if (index[domain]) {
      return null;
    }
    domain = domain.toLowerCase();
    var parts = domain.split('.').reverse();
    var suffix = '';
    var suffixLen = 0;
    for (var i = 0; i < parts.length; i++) {
      var part = parts[i];
      var starstr = '*' + suffix;
      var partstr = part + suffix;
      if (index[starstr]) {
        suffixLen = i + 1;
        if (index[partstr] === false) {
          suffixLen--;
        }
      } else if (index[partstr]) {
        suffixLen = i + 1;
      }
      suffix = '.' + partstr;
    }
    if (index['*' + suffix]) {
      return null;
    }
    suffixLen = suffixLen || 1;
    if (parts.length > suffixLen) {
      var publicSuffix = parts.slice(0, suffixLen + 1).reverse().join('.');
      return converted ? punycode.toUnicode(publicSuffix) : publicSuffix;
    }
    return null;
  };
  var index = module.exports.index = Object.freeze({
    "ac": true,
    "com.ac": true,
    "edu.ac": true,
    "gov.ac": true,
    "net.ac": true,
    "mil.ac": true,
    "org.ac": true,
    "ad": true,
    "nom.ad": true,
    "ae": true,
    "co.ae": true,
    "net.ae": true,
    "org.ae": true,
    "sch.ae": true,
    "ac.ae": true,
    "gov.ae": true,
    "mil.ae": true,
    "aero": true,
    "accident-investigation.aero": true,
    "accident-prevention.aero": true,
    "aerobatic.aero": true,
    "aeroclub.aero": true,
    "aerodrome.aero": true,
    "agents.aero": true,
    "aircraft.aero": true,
    "airline.aero": true,
    "airport.aero": true,
    "air-surveillance.aero": true,
    "airtraffic.aero": true,
    "air-traffic-control.aero": true,
    "ambulance.aero": true,
    "amusement.aero": true,
    "association.aero": true,
    "author.aero": true,
    "ballooning.aero": true,
    "broker.aero": true,
    "caa.aero": true,
    "cargo.aero": true,
    "catering.aero": true,
    "certification.aero": true,
    "championship.aero": true,
    "charter.aero": true,
    "civilaviation.aero": true,
    "club.aero": true,
    "conference.aero": true,
    "consultant.aero": true,
    "consulting.aero": true,
    "control.aero": true,
    "council.aero": true,
    "crew.aero": true,
    "design.aero": true,
    "dgca.aero": true,
    "educator.aero": true,
    "emergency.aero": true,
    "engine.aero": true,
    "engineer.aero": true,
    "entertainment.aero": true,
    "equipment.aero": true,
    "exchange.aero": true,
    "express.aero": true,
    "federation.aero": true,
    "flight.aero": true,
    "freight.aero": true,
    "fuel.aero": true,
    "gliding.aero": true,
    "government.aero": true,
    "groundhandling.aero": true,
    "group.aero": true,
    "hanggliding.aero": true,
    "homebuilt.aero": true,
    "insurance.aero": true,
    "journal.aero": true,
    "journalist.aero": true,
    "leasing.aero": true,
    "logistics.aero": true,
    "magazine.aero": true,
    "maintenance.aero": true,
    "marketplace.aero": true,
    "media.aero": true,
    "microlight.aero": true,
    "modelling.aero": true,
    "navigation.aero": true,
    "parachuting.aero": true,
    "paragliding.aero": true,
    "passenger-association.aero": true,
    "pilot.aero": true,
    "press.aero": true,
    "production.aero": true,
    "recreation.aero": true,
    "repbody.aero": true,
    "res.aero": true,
    "research.aero": true,
    "rotorcraft.aero": true,
    "safety.aero": true,
    "scientist.aero": true,
    "services.aero": true,
    "show.aero": true,
    "skydiving.aero": true,
    "software.aero": true,
    "student.aero": true,
    "taxi.aero": true,
    "trader.aero": true,
    "trading.aero": true,
    "trainer.aero": true,
    "union.aero": true,
    "workinggroup.aero": true,
    "works.aero": true,
    "af": true,
    "gov.af": true,
    "com.af": true,
    "org.af": true,
    "net.af": true,
    "edu.af": true,
    "ag": true,
    "com.ag": true,
    "org.ag": true,
    "net.ag": true,
    "co.ag": true,
    "nom.ag": true,
    "ai": true,
    "off.ai": true,
    "com.ai": true,
    "net.ai": true,
    "org.ai": true,
    "al": true,
    "com.al": true,
    "edu.al": true,
    "gov.al": true,
    "mil.al": true,
    "net.al": true,
    "org.al": true,
    "am": true,
    "an": true,
    "com.an": true,
    "net.an": true,
    "org.an": true,
    "edu.an": true,
    "ao": true,
    "ed.ao": true,
    "gv.ao": true,
    "og.ao": true,
    "co.ao": true,
    "pb.ao": true,
    "it.ao": true,
    "aq": true,
    "ar": true,
    "com.ar": true,
    "edu.ar": true,
    "gob.ar": true,
    "gov.ar": true,
    "int.ar": true,
    "mil.ar": true,
    "net.ar": true,
    "org.ar": true,
    "tur.ar": true,
    "arpa": true,
    "e164.arpa": true,
    "in-addr.arpa": true,
    "ip6.arpa": true,
    "iris.arpa": true,
    "uri.arpa": true,
    "urn.arpa": true,
    "as": true,
    "gov.as": true,
    "asia": true,
    "at": true,
    "ac.at": true,
    "co.at": true,
    "gv.at": true,
    "or.at": true,
    "au": true,
    "com.au": true,
    "net.au": true,
    "org.au": true,
    "edu.au": true,
    "gov.au": true,
    "asn.au": true,
    "id.au": true,
    "info.au": true,
    "conf.au": true,
    "oz.au": true,
    "act.au": true,
    "nsw.au": true,
    "nt.au": true,
    "qld.au": true,
    "sa.au": true,
    "tas.au": true,
    "vic.au": true,
    "wa.au": true,
    "act.edu.au": true,
    "nsw.edu.au": true,
    "nt.edu.au": true,
    "qld.edu.au": true,
    "sa.edu.au": true,
    "tas.edu.au": true,
    "vic.edu.au": true,
    "wa.edu.au": true,
    "qld.gov.au": true,
    "sa.gov.au": true,
    "tas.gov.au": true,
    "vic.gov.au": true,
    "wa.gov.au": true,
    "aw": true,
    "com.aw": true,
    "ax": true,
    "az": true,
    "com.az": true,
    "net.az": true,
    "int.az": true,
    "gov.az": true,
    "org.az": true,
    "edu.az": true,
    "info.az": true,
    "pp.az": true,
    "mil.az": true,
    "name.az": true,
    "pro.az": true,
    "biz.az": true,
    "ba": true,
    "org.ba": true,
    "net.ba": true,
    "edu.ba": true,
    "gov.ba": true,
    "mil.ba": true,
    "unsa.ba": true,
    "unbi.ba": true,
    "co.ba": true,
    "com.ba": true,
    "rs.ba": true,
    "bb": true,
    "biz.bb": true,
    "co.bb": true,
    "com.bb": true,
    "edu.bb": true,
    "gov.bb": true,
    "info.bb": true,
    "net.bb": true,
    "org.bb": true,
    "store.bb": true,
    "tv.bb": true,
    "*.bd": true,
    "be": true,
    "ac.be": true,
    "bf": true,
    "gov.bf": true,
    "bg": true,
    "a.bg": true,
    "b.bg": true,
    "c.bg": true,
    "d.bg": true,
    "e.bg": true,
    "f.bg": true,
    "g.bg": true,
    "h.bg": true,
    "i.bg": true,
    "j.bg": true,
    "k.bg": true,
    "l.bg": true,
    "m.bg": true,
    "n.bg": true,
    "o.bg": true,
    "p.bg": true,
    "q.bg": true,
    "r.bg": true,
    "s.bg": true,
    "t.bg": true,
    "u.bg": true,
    "v.bg": true,
    "w.bg": true,
    "x.bg": true,
    "y.bg": true,
    "z.bg": true,
    "0.bg": true,
    "1.bg": true,
    "2.bg": true,
    "3.bg": true,
    "4.bg": true,
    "5.bg": true,
    "6.bg": true,
    "7.bg": true,
    "8.bg": true,
    "9.bg": true,
    "bh": true,
    "com.bh": true,
    "edu.bh": true,
    "net.bh": true,
    "org.bh": true,
    "gov.bh": true,
    "bi": true,
    "co.bi": true,
    "com.bi": true,
    "edu.bi": true,
    "or.bi": true,
    "org.bi": true,
    "biz": true,
    "bj": true,
    "asso.bj": true,
    "barreau.bj": true,
    "gouv.bj": true,
    "bm": true,
    "com.bm": true,
    "edu.bm": true,
    "gov.bm": true,
    "net.bm": true,
    "org.bm": true,
    "*.bn": true,
    "bo": true,
    "com.bo": true,
    "edu.bo": true,
    "gov.bo": true,
    "gob.bo": true,
    "int.bo": true,
    "org.bo": true,
    "net.bo": true,
    "mil.bo": true,
    "tv.bo": true,
    "br": true,
    "adm.br": true,
    "adv.br": true,
    "agr.br": true,
    "am.br": true,
    "arq.br": true,
    "art.br": true,
    "ato.br": true,
    "b.br": true,
    "bio.br": true,
    "blog.br": true,
    "bmd.br": true,
    "cim.br": true,
    "cng.br": true,
    "cnt.br": true,
    "com.br": true,
    "coop.br": true,
    "ecn.br": true,
    "eco.br": true,
    "edu.br": true,
    "emp.br": true,
    "eng.br": true,
    "esp.br": true,
    "etc.br": true,
    "eti.br": true,
    "far.br": true,
    "flog.br": true,
    "fm.br": true,
    "fnd.br": true,
    "fot.br": true,
    "fst.br": true,
    "g12.br": true,
    "ggf.br": true,
    "gov.br": true,
    "imb.br": true,
    "ind.br": true,
    "inf.br": true,
    "jor.br": true,
    "jus.br": true,
    "leg.br": true,
    "lel.br": true,
    "mat.br": true,
    "med.br": true,
    "mil.br": true,
    "mp.br": true,
    "mus.br": true,
    "net.br": true,
    "*.nom.br": true,
    "not.br": true,
    "ntr.br": true,
    "odo.br": true,
    "org.br": true,
    "ppg.br": true,
    "pro.br": true,
    "psc.br": true,
    "psi.br": true,
    "qsl.br": true,
    "radio.br": true,
    "rec.br": true,
    "slg.br": true,
    "srv.br": true,
    "taxi.br": true,
    "teo.br": true,
    "tmp.br": true,
    "trd.br": true,
    "tur.br": true,
    "tv.br": true,
    "vet.br": true,
    "vlog.br": true,
    "wiki.br": true,
    "zlg.br": true,
    "bs": true,
    "com.bs": true,
    "net.bs": true,
    "org.bs": true,
    "edu.bs": true,
    "gov.bs": true,
    "bt": true,
    "com.bt": true,
    "edu.bt": true,
    "gov.bt": true,
    "net.bt": true,
    "org.bt": true,
    "bv": true,
    "bw": true,
    "co.bw": true,
    "org.bw": true,
    "by": true,
    "gov.by": true,
    "mil.by": true,
    "com.by": true,
    "of.by": true,
    "bz": true,
    "com.bz": true,
    "net.bz": true,
    "org.bz": true,
    "edu.bz": true,
    "gov.bz": true,
    "ca": true,
    "ab.ca": true,
    "bc.ca": true,
    "mb.ca": true,
    "nb.ca": true,
    "nf.ca": true,
    "nl.ca": true,
    "ns.ca": true,
    "nt.ca": true,
    "nu.ca": true,
    "on.ca": true,
    "pe.ca": true,
    "qc.ca": true,
    "sk.ca": true,
    "yk.ca": true,
    "gc.ca": true,
    "cat": true,
    "cc": true,
    "cd": true,
    "gov.cd": true,
    "cf": true,
    "cg": true,
    "ch": true,
    "ci": true,
    "org.ci": true,
    "or.ci": true,
    "com.ci": true,
    "co.ci": true,
    "edu.ci": true,
    "ed.ci": true,
    "ac.ci": true,
    "net.ci": true,
    "go.ci": true,
    "asso.ci": true,
    "xn--aroport-bya.ci": true,
    "int.ci": true,
    "presse.ci": true,
    "md.ci": true,
    "gouv.ci": true,
    "*.ck": true,
    "www.ck": false,
    "cl": true,
    "gov.cl": true,
    "gob.cl": true,
    "co.cl": true,
    "mil.cl": true,
    "cm": true,
    "co.cm": true,
    "com.cm": true,
    "gov.cm": true,
    "net.cm": true,
    "cn": true,
    "ac.cn": true,
    "com.cn": true,
    "edu.cn": true,
    "gov.cn": true,
    "net.cn": true,
    "org.cn": true,
    "mil.cn": true,
    "xn--55qx5d.cn": true,
    "xn--io0a7i.cn": true,
    "xn--od0alg.cn": true,
    "ah.cn": true,
    "bj.cn": true,
    "cq.cn": true,
    "fj.cn": true,
    "gd.cn": true,
    "gs.cn": true,
    "gz.cn": true,
    "gx.cn": true,
    "ha.cn": true,
    "hb.cn": true,
    "he.cn": true,
    "hi.cn": true,
    "hl.cn": true,
    "hn.cn": true,
    "jl.cn": true,
    "js.cn": true,
    "jx.cn": true,
    "ln.cn": true,
    "nm.cn": true,
    "nx.cn": true,
    "qh.cn": true,
    "sc.cn": true,
    "sd.cn": true,
    "sh.cn": true,
    "sn.cn": true,
    "sx.cn": true,
    "tj.cn": true,
    "xj.cn": true,
    "xz.cn": true,
    "yn.cn": true,
    "zj.cn": true,
    "hk.cn": true,
    "mo.cn": true,
    "tw.cn": true,
    "co": true,
    "arts.co": true,
    "com.co": true,
    "edu.co": true,
    "firm.co": true,
    "gov.co": true,
    "info.co": true,
    "int.co": true,
    "mil.co": true,
    "net.co": true,
    "nom.co": true,
    "org.co": true,
    "rec.co": true,
    "web.co": true,
    "com": true,
    "coop": true,
    "cr": true,
    "ac.cr": true,
    "co.cr": true,
    "ed.cr": true,
    "fi.cr": true,
    "go.cr": true,
    "or.cr": true,
    "sa.cr": true,
    "cu": true,
    "com.cu": true,
    "edu.cu": true,
    "org.cu": true,
    "net.cu": true,
    "gov.cu": true,
    "inf.cu": true,
    "cv": true,
    "cw": true,
    "com.cw": true,
    "edu.cw": true,
    "net.cw": true,
    "org.cw": true,
    "cx": true,
    "gov.cx": true,
    "ac.cy": true,
    "biz.cy": true,
    "com.cy": true,
    "ekloges.cy": true,
    "gov.cy": true,
    "ltd.cy": true,
    "name.cy": true,
    "net.cy": true,
    "org.cy": true,
    "parliament.cy": true,
    "press.cy": true,
    "pro.cy": true,
    "tm.cy": true,
    "cz": true,
    "de": true,
    "dj": true,
    "dk": true,
    "dm": true,
    "com.dm": true,
    "net.dm": true,
    "org.dm": true,
    "edu.dm": true,
    "gov.dm": true,
    "do": true,
    "art.do": true,
    "com.do": true,
    "edu.do": true,
    "gob.do": true,
    "gov.do": true,
    "mil.do": true,
    "net.do": true,
    "org.do": true,
    "sld.do": true,
    "web.do": true,
    "dz": true,
    "com.dz": true,
    "org.dz": true,
    "net.dz": true,
    "gov.dz": true,
    "edu.dz": true,
    "asso.dz": true,
    "pol.dz": true,
    "art.dz": true,
    "ec": true,
    "com.ec": true,
    "info.ec": true,
    "net.ec": true,
    "fin.ec": true,
    "k12.ec": true,
    "med.ec": true,
    "pro.ec": true,
    "org.ec": true,
    "edu.ec": true,
    "gov.ec": true,
    "gob.ec": true,
    "mil.ec": true,
    "edu": true,
    "ee": true,
    "edu.ee": true,
    "gov.ee": true,
    "riik.ee": true,
    "lib.ee": true,
    "med.ee": true,
    "com.ee": true,
    "pri.ee": true,
    "aip.ee": true,
    "org.ee": true,
    "fie.ee": true,
    "eg": true,
    "com.eg": true,
    "edu.eg": true,
    "eun.eg": true,
    "gov.eg": true,
    "mil.eg": true,
    "name.eg": true,
    "net.eg": true,
    "org.eg": true,
    "sci.eg": true,
    "*.er": true,
    "es": true,
    "com.es": true,
    "nom.es": true,
    "org.es": true,
    "gob.es": true,
    "edu.es": true,
    "et": true,
    "com.et": true,
    "gov.et": true,
    "org.et": true,
    "edu.et": true,
    "biz.et": true,
    "name.et": true,
    "info.et": true,
    "net.et": true,
    "eu": true,
    "fi": true,
    "aland.fi": true,
    "*.fj": true,
    "*.fk": true,
    "fm": true,
    "fo": true,
    "fr": true,
    "com.fr": true,
    "asso.fr": true,
    "nom.fr": true,
    "prd.fr": true,
    "presse.fr": true,
    "tm.fr": true,
    "aeroport.fr": true,
    "assedic.fr": true,
    "avocat.fr": true,
    "avoues.fr": true,
    "cci.fr": true,
    "chambagri.fr": true,
    "chirurgiens-dentistes.fr": true,
    "experts-comptables.fr": true,
    "geometre-expert.fr": true,
    "gouv.fr": true,
    "greta.fr": true,
    "huissier-justice.fr": true,
    "medecin.fr": true,
    "notaires.fr": true,
    "pharmacien.fr": true,
    "port.fr": true,
    "veterinaire.fr": true,
    "ga": true,
    "gb": true,
    "gd": true,
    "ge": true,
    "com.ge": true,
    "edu.ge": true,
    "gov.ge": true,
    "org.ge": true,
    "mil.ge": true,
    "net.ge": true,
    "pvt.ge": true,
    "gf": true,
    "gg": true,
    "co.gg": true,
    "net.gg": true,
    "org.gg": true,
    "gh": true,
    "com.gh": true,
    "edu.gh": true,
    "gov.gh": true,
    "org.gh": true,
    "mil.gh": true,
    "gi": true,
    "com.gi": true,
    "ltd.gi": true,
    "gov.gi": true,
    "mod.gi": true,
    "edu.gi": true,
    "org.gi": true,
    "gl": true,
    "co.gl": true,
    "com.gl": true,
    "edu.gl": true,
    "net.gl": true,
    "org.gl": true,
    "gm": true,
    "gn": true,
    "ac.gn": true,
    "com.gn": true,
    "edu.gn": true,
    "gov.gn": true,
    "org.gn": true,
    "net.gn": true,
    "gov": true,
    "gp": true,
    "com.gp": true,
    "net.gp": true,
    "mobi.gp": true,
    "edu.gp": true,
    "org.gp": true,
    "asso.gp": true,
    "gq": true,
    "gr": true,
    "com.gr": true,
    "edu.gr": true,
    "net.gr": true,
    "org.gr": true,
    "gov.gr": true,
    "gs": true,
    "gt": true,
    "com.gt": true,
    "edu.gt": true,
    "gob.gt": true,
    "ind.gt": true,
    "mil.gt": true,
    "net.gt": true,
    "org.gt": true,
    "*.gu": true,
    "gw": true,
    "gy": true,
    "co.gy": true,
    "com.gy": true,
    "net.gy": true,
    "hk": true,
    "com.hk": true,
    "edu.hk": true,
    "gov.hk": true,
    "idv.hk": true,
    "net.hk": true,
    "org.hk": true,
    "xn--55qx5d.hk": true,
    "xn--wcvs22d.hk": true,
    "xn--lcvr32d.hk": true,
    "xn--mxtq1m.hk": true,
    "xn--gmqw5a.hk": true,
    "xn--ciqpn.hk": true,
    "xn--gmq050i.hk": true,
    "xn--zf0avx.hk": true,
    "xn--io0a7i.hk": true,
    "xn--mk0axi.hk": true,
    "xn--od0alg.hk": true,
    "xn--od0aq3b.hk": true,
    "xn--tn0ag.hk": true,
    "xn--uc0atv.hk": true,
    "xn--uc0ay4a.hk": true,
    "hm": true,
    "hn": true,
    "com.hn": true,
    "edu.hn": true,
    "org.hn": true,
    "net.hn": true,
    "mil.hn": true,
    "gob.hn": true,
    "hr": true,
    "iz.hr": true,
    "from.hr": true,
    "name.hr": true,
    "com.hr": true,
    "ht": true,
    "com.ht": true,
    "shop.ht": true,
    "firm.ht": true,
    "info.ht": true,
    "adult.ht": true,
    "net.ht": true,
    "pro.ht": true,
    "org.ht": true,
    "med.ht": true,
    "art.ht": true,
    "coop.ht": true,
    "pol.ht": true,
    "asso.ht": true,
    "edu.ht": true,
    "rel.ht": true,
    "gouv.ht": true,
    "perso.ht": true,
    "hu": true,
    "co.hu": true,
    "info.hu": true,
    "org.hu": true,
    "priv.hu": true,
    "sport.hu": true,
    "tm.hu": true,
    "2000.hu": true,
    "agrar.hu": true,
    "bolt.hu": true,
    "casino.hu": true,
    "city.hu": true,
    "erotica.hu": true,
    "erotika.hu": true,
    "film.hu": true,
    "forum.hu": true,
    "games.hu": true,
    "hotel.hu": true,
    "ingatlan.hu": true,
    "jogasz.hu": true,
    "konyvelo.hu": true,
    "lakas.hu": true,
    "media.hu": true,
    "news.hu": true,
    "reklam.hu": true,
    "sex.hu": true,
    "shop.hu": true,
    "suli.hu": true,
    "szex.hu": true,
    "tozsde.hu": true,
    "utazas.hu": true,
    "video.hu": true,
    "id": true,
    "ac.id": true,
    "biz.id": true,
    "co.id": true,
    "desa.id": true,
    "go.id": true,
    "mil.id": true,
    "my.id": true,
    "net.id": true,
    "or.id": true,
    "sch.id": true,
    "web.id": true,
    "ie": true,
    "gov.ie": true,
    "il": true,
    "ac.il": true,
    "co.il": true,
    "gov.il": true,
    "idf.il": true,
    "k12.il": true,
    "muni.il": true,
    "net.il": true,
    "org.il": true,
    "im": true,
    "ac.im": true,
    "co.im": true,
    "com.im": true,
    "ltd.co.im": true,
    "net.im": true,
    "org.im": true,
    "plc.co.im": true,
    "tt.im": true,
    "tv.im": true,
    "in": true,
    "co.in": true,
    "firm.in": true,
    "net.in": true,
    "org.in": true,
    "gen.in": true,
    "ind.in": true,
    "nic.in": true,
    "ac.in": true,
    "edu.in": true,
    "res.in": true,
    "gov.in": true,
    "mil.in": true,
    "info": true,
    "int": true,
    "eu.int": true,
    "io": true,
    "com.io": true,
    "iq": true,
    "gov.iq": true,
    "edu.iq": true,
    "mil.iq": true,
    "com.iq": true,
    "org.iq": true,
    "net.iq": true,
    "ir": true,
    "ac.ir": true,
    "co.ir": true,
    "gov.ir": true,
    "id.ir": true,
    "net.ir": true,
    "org.ir": true,
    "sch.ir": true,
    "xn--mgba3a4f16a.ir": true,
    "xn--mgba3a4fra.ir": true,
    "is": true,
    "net.is": true,
    "com.is": true,
    "edu.is": true,
    "gov.is": true,
    "org.is": true,
    "int.is": true,
    "it": true,
    "gov.it": true,
    "edu.it": true,
    "abr.it": true,
    "abruzzo.it": true,
    "aosta-valley.it": true,
    "aostavalley.it": true,
    "bas.it": true,
    "basilicata.it": true,
    "cal.it": true,
    "calabria.it": true,
    "cam.it": true,
    "campania.it": true,
    "emilia-romagna.it": true,
    "emiliaromagna.it": true,
    "emr.it": true,
    "friuli-v-giulia.it": true,
    "friuli-ve-giulia.it": true,
    "friuli-vegiulia.it": true,
    "friuli-venezia-giulia.it": true,
    "friuli-veneziagiulia.it": true,
    "friuli-vgiulia.it": true,
    "friuliv-giulia.it": true,
    "friulive-giulia.it": true,
    "friulivegiulia.it": true,
    "friulivenezia-giulia.it": true,
    "friuliveneziagiulia.it": true,
    "friulivgiulia.it": true,
    "fvg.it": true,
    "laz.it": true,
    "lazio.it": true,
    "lig.it": true,
    "liguria.it": true,
    "lom.it": true,
    "lombardia.it": true,
    "lombardy.it": true,
    "lucania.it": true,
    "mar.it": true,
    "marche.it": true,
    "mol.it": true,
    "molise.it": true,
    "piedmont.it": true,
    "piemonte.it": true,
    "pmn.it": true,
    "pug.it": true,
    "puglia.it": true,
    "sar.it": true,
    "sardegna.it": true,
    "sardinia.it": true,
    "sic.it": true,
    "sicilia.it": true,
    "sicily.it": true,
    "taa.it": true,
    "tos.it": true,
    "toscana.it": true,
    "trentino-a-adige.it": true,
    "trentino-aadige.it": true,
    "trentino-alto-adige.it": true,
    "trentino-altoadige.it": true,
    "trentino-s-tirol.it": true,
    "trentino-stirol.it": true,
    "trentino-sud-tirol.it": true,
    "trentino-sudtirol.it": true,
    "trentino-sued-tirol.it": true,
    "trentino-suedtirol.it": true,
    "trentinoa-adige.it": true,
    "trentinoaadige.it": true,
    "trentinoalto-adige.it": true,
    "trentinoaltoadige.it": true,
    "trentinos-tirol.it": true,
    "trentinostirol.it": true,
    "trentinosud-tirol.it": true,
    "trentinosudtirol.it": true,
    "trentinosued-tirol.it": true,
    "trentinosuedtirol.it": true,
    "tuscany.it": true,
    "umb.it": true,
    "umbria.it": true,
    "val-d-aosta.it": true,
    "val-daosta.it": true,
    "vald-aosta.it": true,
    "valdaosta.it": true,
    "valle-aosta.it": true,
    "valle-d-aosta.it": true,
    "valle-daosta.it": true,
    "valleaosta.it": true,
    "valled-aosta.it": true,
    "valledaosta.it": true,
    "vallee-aoste.it": true,
    "valleeaoste.it": true,
    "vao.it": true,
    "vda.it": true,
    "ven.it": true,
    "veneto.it": true,
    "ag.it": true,
    "agrigento.it": true,
    "al.it": true,
    "alessandria.it": true,
    "alto-adige.it": true,
    "altoadige.it": true,
    "an.it": true,
    "ancona.it": true,
    "andria-barletta-trani.it": true,
    "andria-trani-barletta.it": true,
    "andriabarlettatrani.it": true,
    "andriatranibarletta.it": true,
    "ao.it": true,
    "aosta.it": true,
    "aoste.it": true,
    "ap.it": true,
    "aq.it": true,
    "aquila.it": true,
    "ar.it": true,
    "arezzo.it": true,
    "ascoli-piceno.it": true,
    "ascolipiceno.it": true,
    "asti.it": true,
    "at.it": true,
    "av.it": true,
    "avellino.it": true,
    "ba.it": true,
    "balsan.it": true,
    "bari.it": true,
    "barletta-trani-andria.it": true,
    "barlettatraniandria.it": true,
    "belluno.it": true,
    "benevento.it": true,
    "bergamo.it": true,
    "bg.it": true,
    "bi.it": true,
    "biella.it": true,
    "bl.it": true,
    "bn.it": true,
    "bo.it": true,
    "bologna.it": true,
    "bolzano.it": true,
    "bozen.it": true,
    "br.it": true,
    "brescia.it": true,
    "brindisi.it": true,
    "bs.it": true,
    "bt.it": true,
    "bz.it": true,
    "ca.it": true,
    "cagliari.it": true,
    "caltanissetta.it": true,
    "campidano-medio.it": true,
    "campidanomedio.it": true,
    "campobasso.it": true,
    "carbonia-iglesias.it": true,
    "carboniaiglesias.it": true,
    "carrara-massa.it": true,
    "carraramassa.it": true,
    "caserta.it": true,
    "catania.it": true,
    "catanzaro.it": true,
    "cb.it": true,
    "ce.it": true,
    "cesena-forli.it": true,
    "cesenaforli.it": true,
    "ch.it": true,
    "chieti.it": true,
    "ci.it": true,
    "cl.it": true,
    "cn.it": true,
    "co.it": true,
    "como.it": true,
    "cosenza.it": true,
    "cr.it": true,
    "cremona.it": true,
    "crotone.it": true,
    "cs.it": true,
    "ct.it": true,
    "cuneo.it": true,
    "cz.it": true,
    "dell-ogliastra.it": true,
    "dellogliastra.it": true,
    "en.it": true,
    "enna.it": true,
    "fc.it": true,
    "fe.it": true,
    "fermo.it": true,
    "ferrara.it": true,
    "fg.it": true,
    "fi.it": true,
    "firenze.it": true,
    "florence.it": true,
    "fm.it": true,
    "foggia.it": true,
    "forli-cesena.it": true,
    "forlicesena.it": true,
    "fr.it": true,
    "frosinone.it": true,
    "ge.it": true,
    "genoa.it": true,
    "genova.it": true,
    "go.it": true,
    "gorizia.it": true,
    "gr.it": true,
    "grosseto.it": true,
    "iglesias-carbonia.it": true,
    "iglesiascarbonia.it": true,
    "im.it": true,
    "imperia.it": true,
    "is.it": true,
    "isernia.it": true,
    "kr.it": true,
    "la-spezia.it": true,
    "laquila.it": true,
    "laspezia.it": true,
    "latina.it": true,
    "lc.it": true,
    "le.it": true,
    "lecce.it": true,
    "lecco.it": true,
    "li.it": true,
    "livorno.it": true,
    "lo.it": true,
    "lodi.it": true,
    "lt.it": true,
    "lu.it": true,
    "lucca.it": true,
    "macerata.it": true,
    "mantova.it": true,
    "massa-carrara.it": true,
    "massacarrara.it": true,
    "matera.it": true,
    "mb.it": true,
    "mc.it": true,
    "me.it": true,
    "medio-campidano.it": true,
    "mediocampidano.it": true,
    "messina.it": true,
    "mi.it": true,
    "milan.it": true,
    "milano.it": true,
    "mn.it": true,
    "mo.it": true,
    "modena.it": true,
    "monza-brianza.it": true,
    "monza-e-della-brianza.it": true,
    "monza.it": true,
    "monzabrianza.it": true,
    "monzaebrianza.it": true,
    "monzaedellabrianza.it": true,
    "ms.it": true,
    "mt.it": true,
    "na.it": true,
    "naples.it": true,
    "napoli.it": true,
    "no.it": true,
    "novara.it": true,
    "nu.it": true,
    "nuoro.it": true,
    "og.it": true,
    "ogliastra.it": true,
    "olbia-tempio.it": true,
    "olbiatempio.it": true,
    "or.it": true,
    "oristano.it": true,
    "ot.it": true,
    "pa.it": true,
    "padova.it": true,
    "padua.it": true,
    "palermo.it": true,
    "parma.it": true,
    "pavia.it": true,
    "pc.it": true,
    "pd.it": true,
    "pe.it": true,
    "perugia.it": true,
    "pesaro-urbino.it": true,
    "pesarourbino.it": true,
    "pescara.it": true,
    "pg.it": true,
    "pi.it": true,
    "piacenza.it": true,
    "pisa.it": true,
    "pistoia.it": true,
    "pn.it": true,
    "po.it": true,
    "pordenone.it": true,
    "potenza.it": true,
    "pr.it": true,
    "prato.it": true,
    "pt.it": true,
    "pu.it": true,
    "pv.it": true,
    "pz.it": true,
    "ra.it": true,
    "ragusa.it": true,
    "ravenna.it": true,
    "rc.it": true,
    "re.it": true,
    "reggio-calabria.it": true,
    "reggio-emilia.it": true,
    "reggiocalabria.it": true,
    "reggioemilia.it": true,
    "rg.it": true,
    "ri.it": true,
    "rieti.it": true,
    "rimini.it": true,
    "rm.it": true,
    "rn.it": true,
    "ro.it": true,
    "roma.it": true,
    "rome.it": true,
    "rovigo.it": true,
    "sa.it": true,
    "salerno.it": true,
    "sassari.it": true,
    "savona.it": true,
    "si.it": true,
    "siena.it": true,
    "siracusa.it": true,
    "so.it": true,
    "sondrio.it": true,
    "sp.it": true,
    "sr.it": true,
    "ss.it": true,
    "suedtirol.it": true,
    "sv.it": true,
    "ta.it": true,
    "taranto.it": true,
    "te.it": true,
    "tempio-olbia.it": true,
    "tempioolbia.it": true,
    "teramo.it": true,
    "terni.it": true,
    "tn.it": true,
    "to.it": true,
    "torino.it": true,
    "tp.it": true,
    "tr.it": true,
    "trani-andria-barletta.it": true,
    "trani-barletta-andria.it": true,
    "traniandriabarletta.it": true,
    "tranibarlettaandria.it": true,
    "trapani.it": true,
    "trentino.it": true,
    "trento.it": true,
    "treviso.it": true,
    "trieste.it": true,
    "ts.it": true,
    "turin.it": true,
    "tv.it": true,
    "ud.it": true,
    "udine.it": true,
    "urbino-pesaro.it": true,
    "urbinopesaro.it": true,
    "va.it": true,
    "varese.it": true,
    "vb.it": true,
    "vc.it": true,
    "ve.it": true,
    "venezia.it": true,
    "venice.it": true,
    "verbania.it": true,
    "vercelli.it": true,
    "verona.it": true,
    "vi.it": true,
    "vibo-valentia.it": true,
    "vibovalentia.it": true,
    "vicenza.it": true,
    "viterbo.it": true,
    "vr.it": true,
    "vs.it": true,
    "vt.it": true,
    "vv.it": true,
    "je": true,
    "co.je": true,
    "net.je": true,
    "org.je": true,
    "*.jm": true,
    "jo": true,
    "com.jo": true,
    "org.jo": true,
    "net.jo": true,
    "edu.jo": true,
    "sch.jo": true,
    "gov.jo": true,
    "mil.jo": true,
    "name.jo": true,
    "jobs": true,
    "jp": true,
    "ac.jp": true,
    "ad.jp": true,
    "co.jp": true,
    "ed.jp": true,
    "go.jp": true,
    "gr.jp": true,
    "lg.jp": true,
    "ne.jp": true,
    "or.jp": true,
    "aichi.jp": true,
    "akita.jp": true,
    "aomori.jp": true,
    "chiba.jp": true,
    "ehime.jp": true,
    "fukui.jp": true,
    "fukuoka.jp": true,
    "fukushima.jp": true,
    "gifu.jp": true,
    "gunma.jp": true,
    "hiroshima.jp": true,
    "hokkaido.jp": true,
    "hyogo.jp": true,
    "ibaraki.jp": true,
    "ishikawa.jp": true,
    "iwate.jp": true,
    "kagawa.jp": true,
    "kagoshima.jp": true,
    "kanagawa.jp": true,
    "kochi.jp": true,
    "kumamoto.jp": true,
    "kyoto.jp": true,
    "mie.jp": true,
    "miyagi.jp": true,
    "miyazaki.jp": true,
    "nagano.jp": true,
    "nagasaki.jp": true,
    "nara.jp": true,
    "niigata.jp": true,
    "oita.jp": true,
    "okayama.jp": true,
    "okinawa.jp": true,
    "osaka.jp": true,
    "saga.jp": true,
    "saitama.jp": true,
    "shiga.jp": true,
    "shimane.jp": true,
    "shizuoka.jp": true,
    "tochigi.jp": true,
    "tokushima.jp": true,
    "tokyo.jp": true,
    "tottori.jp": true,
    "toyama.jp": true,
    "wakayama.jp": true,
    "yamagata.jp": true,
    "yamaguchi.jp": true,
    "yamanashi.jp": true,
    "xn--4pvxs.jp": true,
    "xn--vgu402c.jp": true,
    "xn--c3s14m.jp": true,
    "xn--f6qx53a.jp": true,
    "xn--8pvr4u.jp": true,
    "xn--uist22h.jp": true,
    "xn--djrs72d6uy.jp": true,
    "xn--mkru45i.jp": true,
    "xn--0trq7p7nn.jp": true,
    "xn--8ltr62k.jp": true,
    "xn--2m4a15e.jp": true,
    "xn--efvn9s.jp": true,
    "xn--32vp30h.jp": true,
    "xn--4it797k.jp": true,
    "xn--1lqs71d.jp": true,
    "xn--5rtp49c.jp": true,
    "xn--5js045d.jp": true,
    "xn--ehqz56n.jp": true,
    "xn--1lqs03n.jp": true,
    "xn--qqqt11m.jp": true,
    "xn--kbrq7o.jp": true,
    "xn--pssu33l.jp": true,
    "xn--ntsq17g.jp": true,
    "xn--uisz3g.jp": true,
    "xn--6btw5a.jp": true,
    "xn--1ctwo.jp": true,
    "xn--6orx2r.jp": true,
    "xn--rht61e.jp": true,
    "xn--rht27z.jp": true,
    "xn--djty4k.jp": true,
    "xn--nit225k.jp": true,
    "xn--rht3d.jp": true,
    "xn--klty5x.jp": true,
    "xn--kltx9a.jp": true,
    "xn--kltp7d.jp": true,
    "xn--uuwu58a.jp": true,
    "xn--zbx025d.jp": true,
    "xn--ntso0iqx3a.jp": true,
    "xn--elqq16h.jp": true,
    "xn--4it168d.jp": true,
    "xn--klt787d.jp": true,
    "xn--rny31h.jp": true,
    "xn--7t0a264c.jp": true,
    "xn--5rtq34k.jp": true,
    "xn--k7yn95e.jp": true,
    "xn--tor131o.jp": true,
    "xn--d5qv7z876c.jp": true,
    "*.kawasaki.jp": true,
    "*.kitakyushu.jp": true,
    "*.kobe.jp": true,
    "*.nagoya.jp": true,
    "*.sapporo.jp": true,
    "*.sendai.jp": true,
    "*.yokohama.jp": true,
    "city.kawasaki.jp": false,
    "city.kitakyushu.jp": false,
    "city.kobe.jp": false,
    "city.nagoya.jp": false,
    "city.sapporo.jp": false,
    "city.sendai.jp": false,
    "city.yokohama.jp": false,
    "aisai.aichi.jp": true,
    "ama.aichi.jp": true,
    "anjo.aichi.jp": true,
    "asuke.aichi.jp": true,
    "chiryu.aichi.jp": true,
    "chita.aichi.jp": true,
    "fuso.aichi.jp": true,
    "gamagori.aichi.jp": true,
    "handa.aichi.jp": true,
    "hazu.aichi.jp": true,
    "hekinan.aichi.jp": true,
    "higashiura.aichi.jp": true,
    "ichinomiya.aichi.jp": true,
    "inazawa.aichi.jp": true,
    "inuyama.aichi.jp": true,
    "isshiki.aichi.jp": true,
    "iwakura.aichi.jp": true,
    "kanie.aichi.jp": true,
    "kariya.aichi.jp": true,
    "kasugai.aichi.jp": true,
    "kira.aichi.jp": true,
    "kiyosu.aichi.jp": true,
    "komaki.aichi.jp": true,
    "konan.aichi.jp": true,
    "kota.aichi.jp": true,
    "mihama.aichi.jp": true,
    "miyoshi.aichi.jp": true,
    "nishio.aichi.jp": true,
    "nisshin.aichi.jp": true,
    "obu.aichi.jp": true,
    "oguchi.aichi.jp": true,
    "oharu.aichi.jp": true,
    "okazaki.aichi.jp": true,
    "owariasahi.aichi.jp": true,
    "seto.aichi.jp": true,
    "shikatsu.aichi.jp": true,
    "shinshiro.aichi.jp": true,
    "shitara.aichi.jp": true,
    "tahara.aichi.jp": true,
    "takahama.aichi.jp": true,
    "tobishima.aichi.jp": true,
    "toei.aichi.jp": true,
    "togo.aichi.jp": true,
    "tokai.aichi.jp": true,
    "tokoname.aichi.jp": true,
    "toyoake.aichi.jp": true,
    "toyohashi.aichi.jp": true,
    "toyokawa.aichi.jp": true,
    "toyone.aichi.jp": true,
    "toyota.aichi.jp": true,
    "tsushima.aichi.jp": true,
    "yatomi.aichi.jp": true,
    "akita.akita.jp": true,
    "daisen.akita.jp": true,
    "fujisato.akita.jp": true,
    "gojome.akita.jp": true,
    "hachirogata.akita.jp": true,
    "happou.akita.jp": true,
    "higashinaruse.akita.jp": true,
    "honjo.akita.jp": true,
    "honjyo.akita.jp": true,
    "ikawa.akita.jp": true,
    "kamikoani.akita.jp": true,
    "kamioka.akita.jp": true,
    "katagami.akita.jp": true,
    "kazuno.akita.jp": true,
    "kitaakita.akita.jp": true,
    "kosaka.akita.jp": true,
    "kyowa.akita.jp": true,
    "misato.akita.jp": true,
    "mitane.akita.jp": true,
    "moriyoshi.akita.jp": true,
    "nikaho.akita.jp": true,
    "noshiro.akita.jp": true,
    "odate.akita.jp": true,
    "oga.akita.jp": true,
    "ogata.akita.jp": true,
    "semboku.akita.jp": true,
    "yokote.akita.jp": true,
    "yurihonjo.akita.jp": true,
    "aomori.aomori.jp": true,
    "gonohe.aomori.jp": true,
    "hachinohe.aomori.jp": true,
    "hashikami.aomori.jp": true,
    "hiranai.aomori.jp": true,
    "hirosaki.aomori.jp": true,
    "itayanagi.aomori.jp": true,
    "kuroishi.aomori.jp": true,
    "misawa.aomori.jp": true,
    "mutsu.aomori.jp": true,
    "nakadomari.aomori.jp": true,
    "noheji.aomori.jp": true,
    "oirase.aomori.jp": true,
    "owani.aomori.jp": true,
    "rokunohe.aomori.jp": true,
    "sannohe.aomori.jp": true,
    "shichinohe.aomori.jp": true,
    "shingo.aomori.jp": true,
    "takko.aomori.jp": true,
    "towada.aomori.jp": true,
    "tsugaru.aomori.jp": true,
    "tsuruta.aomori.jp": true,
    "abiko.chiba.jp": true,
    "asahi.chiba.jp": true,
    "chonan.chiba.jp": true,
    "chosei.chiba.jp": true,
    "choshi.chiba.jp": true,
    "chuo.chiba.jp": true,
    "funabashi.chiba.jp": true,
    "futtsu.chiba.jp": true,
    "hanamigawa.chiba.jp": true,
    "ichihara.chiba.jp": true,
    "ichikawa.chiba.jp": true,
    "ichinomiya.chiba.jp": true,
    "inzai.chiba.jp": true,
    "isumi.chiba.jp": true,
    "kamagaya.chiba.jp": true,
    "kamogawa.chiba.jp": true,
    "kashiwa.chiba.jp": true,
    "katori.chiba.jp": true,
    "katsuura.chiba.jp": true,
    "kimitsu.chiba.jp": true,
    "kisarazu.chiba.jp": true,
    "kozaki.chiba.jp": true,
    "kujukuri.chiba.jp": true,
    "kyonan.chiba.jp": true,
    "matsudo.chiba.jp": true,
    "midori.chiba.jp": true,
    "mihama.chiba.jp": true,
    "minamiboso.chiba.jp": true,
    "mobara.chiba.jp": true,
    "mutsuzawa.chiba.jp": true,
    "nagara.chiba.jp": true,
    "nagareyama.chiba.jp": true,
    "narashino.chiba.jp": true,
    "narita.chiba.jp": true,
    "noda.chiba.jp": true,
    "oamishirasato.chiba.jp": true,
    "omigawa.chiba.jp": true,
    "onjuku.chiba.jp": true,
    "otaki.chiba.jp": true,
    "sakae.chiba.jp": true,
    "sakura.chiba.jp": true,
    "shimofusa.chiba.jp": true,
    "shirako.chiba.jp": true,
    "shiroi.chiba.jp": true,
    "shisui.chiba.jp": true,
    "sodegaura.chiba.jp": true,
    "sosa.chiba.jp": true,
    "tako.chiba.jp": true,
    "tateyama.chiba.jp": true,
    "togane.chiba.jp": true,
    "tohnosho.chiba.jp": true,
    "tomisato.chiba.jp": true,
    "urayasu.chiba.jp": true,
    "yachimata.chiba.jp": true,
    "yachiyo.chiba.jp": true,
    "yokaichiba.chiba.jp": true,
    "yokoshibahikari.chiba.jp": true,
    "yotsukaido.chiba.jp": true,
    "ainan.ehime.jp": true,
    "honai.ehime.jp": true,
    "ikata.ehime.jp": true,
    "imabari.ehime.jp": true,
    "iyo.ehime.jp": true,
    "kamijima.ehime.jp": true,
    "kihoku.ehime.jp": true,
    "kumakogen.ehime.jp": true,
    "masaki.ehime.jp": true,
    "matsuno.ehime.jp": true,
    "matsuyama.ehime.jp": true,
    "namikata.ehime.jp": true,
    "niihama.ehime.jp": true,
    "ozu.ehime.jp": true,
    "saijo.ehime.jp": true,
    "seiyo.ehime.jp": true,
    "shikokuchuo.ehime.jp": true,
    "tobe.ehime.jp": true,
    "toon.ehime.jp": true,
    "uchiko.ehime.jp": true,
    "uwajima.ehime.jp": true,
    "yawatahama.ehime.jp": true,
    "echizen.fukui.jp": true,
    "eiheiji.fukui.jp": true,
    "fukui.fukui.jp": true,
    "ikeda.fukui.jp": true,
    "katsuyama.fukui.jp": true,
    "mihama.fukui.jp": true,
    "minamiechizen.fukui.jp": true,
    "obama.fukui.jp": true,
    "ohi.fukui.jp": true,
    "ono.fukui.jp": true,
    "sabae.fukui.jp": true,
    "sakai.fukui.jp": true,
    "takahama.fukui.jp": true,
    "tsuruga.fukui.jp": true,
    "wakasa.fukui.jp": true,
    "ashiya.fukuoka.jp": true,
    "buzen.fukuoka.jp": true,
    "chikugo.fukuoka.jp": true,
    "chikuho.fukuoka.jp": true,
    "chikujo.fukuoka.jp": true,
    "chikushino.fukuoka.jp": true,
    "chikuzen.fukuoka.jp": true,
    "chuo.fukuoka.jp": true,
    "dazaifu.fukuoka.jp": true,
    "fukuchi.fukuoka.jp": true,
    "hakata.fukuoka.jp": true,
    "higashi.fukuoka.jp": true,
    "hirokawa.fukuoka.jp": true,
    "hisayama.fukuoka.jp": true,
    "iizuka.fukuoka.jp": true,
    "inatsuki.fukuoka.jp": true,
    "kaho.fukuoka.jp": true,
    "kasuga.fukuoka.jp": true,
    "kasuya.fukuoka.jp": true,
    "kawara.fukuoka.jp": true,
    "keisen.fukuoka.jp": true,
    "koga.fukuoka.jp": true,
    "kurate.fukuoka.jp": true,
    "kurogi.fukuoka.jp": true,
    "kurume.fukuoka.jp": true,
    "minami.fukuoka.jp": true,
    "miyako.fukuoka.jp": true,
    "miyama.fukuoka.jp": true,
    "miyawaka.fukuoka.jp": true,
    "mizumaki.fukuoka.jp": true,
    "munakata.fukuoka.jp": true,
    "nakagawa.fukuoka.jp": true,
    "nakama.fukuoka.jp": true,
    "nishi.fukuoka.jp": true,
    "nogata.fukuoka.jp": true,
    "ogori.fukuoka.jp": true,
    "okagaki.fukuoka.jp": true,
    "okawa.fukuoka.jp": true,
    "oki.fukuoka.jp": true,
    "omuta.fukuoka.jp": true,
    "onga.fukuoka.jp": true,
    "onojo.fukuoka.jp": true,
    "oto.fukuoka.jp": true,
    "saigawa.fukuoka.jp": true,
    "sasaguri.fukuoka.jp": true,
    "shingu.fukuoka.jp": true,
    "shinyoshitomi.fukuoka.jp": true,
    "shonai.fukuoka.jp": true,
    "soeda.fukuoka.jp": true,
    "sue.fukuoka.jp": true,
    "tachiarai.fukuoka.jp": true,
    "tagawa.fukuoka.jp": true,
    "takata.fukuoka.jp": true,
    "toho.fukuoka.jp": true,
    "toyotsu.fukuoka.jp": true,
    "tsuiki.fukuoka.jp": true,
    "ukiha.fukuoka.jp": true,
    "umi.fukuoka.jp": true,
    "usui.fukuoka.jp": true,
    "yamada.fukuoka.jp": true,
    "yame.fukuoka.jp": true,
    "yanagawa.fukuoka.jp": true,
    "yukuhashi.fukuoka.jp": true,
    "aizubange.fukushima.jp": true,
    "aizumisato.fukushima.jp": true,
    "aizuwakamatsu.fukushima.jp": true,
    "asakawa.fukushima.jp": true,
    "bandai.fukushima.jp": true,
    "date.fukushima.jp": true,
    "fukushima.fukushima.jp": true,
    "furudono.fukushima.jp": true,
    "futaba.fukushima.jp": true,
    "hanawa.fukushima.jp": true,
    "higashi.fukushima.jp": true,
    "hirata.fukushima.jp": true,
    "hirono.fukushima.jp": true,
    "iitate.fukushima.jp": true,
    "inawashiro.fukushima.jp": true,
    "ishikawa.fukushima.jp": true,
    "iwaki.fukushima.jp": true,
    "izumizaki.fukushima.jp": true,
    "kagamiishi.fukushima.jp": true,
    "kaneyama.fukushima.jp": true,
    "kawamata.fukushima.jp": true,
    "kitakata.fukushima.jp": true,
    "kitashiobara.fukushima.jp": true,
    "koori.fukushima.jp": true,
    "koriyama.fukushima.jp": true,
    "kunimi.fukushima.jp": true,
    "miharu.fukushima.jp": true,
    "mishima.fukushima.jp": true,
    "namie.fukushima.jp": true,
    "nango.fukushima.jp": true,
    "nishiaizu.fukushima.jp": true,
    "nishigo.fukushima.jp": true,
    "okuma.fukushima.jp": true,
    "omotego.fukushima.jp": true,
    "ono.fukushima.jp": true,
    "otama.fukushima.jp": true,
    "samegawa.fukushima.jp": true,
    "shimogo.fukushima.jp": true,
    "shirakawa.fukushima.jp": true,
    "showa.fukushima.jp": true,
    "soma.fukushima.jp": true,
    "sukagawa.fukushima.jp": true,
    "taishin.fukushima.jp": true,
    "tamakawa.fukushima.jp": true,
    "tanagura.fukushima.jp": true,
    "tenei.fukushima.jp": true,
    "yabuki.fukushima.jp": true,
    "yamato.fukushima.jp": true,
    "yamatsuri.fukushima.jp": true,
    "yanaizu.fukushima.jp": true,
    "yugawa.fukushima.jp": true,
    "anpachi.gifu.jp": true,
    "ena.gifu.jp": true,
    "gifu.gifu.jp": true,
    "ginan.gifu.jp": true,
    "godo.gifu.jp": true,
    "gujo.gifu.jp": true,
    "hashima.gifu.jp": true,
    "hichiso.gifu.jp": true,
    "hida.gifu.jp": true,
    "higashishirakawa.gifu.jp": true,
    "ibigawa.gifu.jp": true,
    "ikeda.gifu.jp": true,
    "kakamigahara.gifu.jp": true,
    "kani.gifu.jp": true,
    "kasahara.gifu.jp": true,
    "kasamatsu.gifu.jp": true,
    "kawaue.gifu.jp": true,
    "kitagata.gifu.jp": true,
    "mino.gifu.jp": true,
    "minokamo.gifu.jp": true,
    "mitake.gifu.jp": true,
    "mizunami.gifu.jp": true,
    "motosu.gifu.jp": true,
    "nakatsugawa.gifu.jp": true,
    "ogaki.gifu.jp": true,
    "sakahogi.gifu.jp": true,
    "seki.gifu.jp": true,
    "sekigahara.gifu.jp": true,
    "shirakawa.gifu.jp": true,
    "tajimi.gifu.jp": true,
    "takayama.gifu.jp": true,
    "tarui.gifu.jp": true,
    "toki.gifu.jp": true,
    "tomika.gifu.jp": true,
    "wanouchi.gifu.jp": true,
    "yamagata.gifu.jp": true,
    "yaotsu.gifu.jp": true,
    "yoro.gifu.jp": true,
    "annaka.gunma.jp": true,
    "chiyoda.gunma.jp": true,
    "fujioka.gunma.jp": true,
    "higashiagatsuma.gunma.jp": true,
    "isesaki.gunma.jp": true,
    "itakura.gunma.jp": true,
    "kanna.gunma.jp": true,
    "kanra.gunma.jp": true,
    "katashina.gunma.jp": true,
    "kawaba.gunma.jp": true,
    "kiryu.gunma.jp": true,
    "kusatsu.gunma.jp": true,
    "maebashi.gunma.jp": true,
    "meiwa.gunma.jp": true,
    "midori.gunma.jp": true,
    "minakami.gunma.jp": true,
    "naganohara.gunma.jp": true,
    "nakanojo.gunma.jp": true,
    "nanmoku.gunma.jp": true,
    "numata.gunma.jp": true,
    "oizumi.gunma.jp": true,
    "ora.gunma.jp": true,
    "ota.gunma.jp": true,
    "shibukawa.gunma.jp": true,
    "shimonita.gunma.jp": true,
    "shinto.gunma.jp": true,
    "showa.gunma.jp": true,
    "takasaki.gunma.jp": true,
    "takayama.gunma.jp": true,
    "tamamura.gunma.jp": true,
    "tatebayashi.gunma.jp": true,
    "tomioka.gunma.jp": true,
    "tsukiyono.gunma.jp": true,
    "tsumagoi.gunma.jp": true,
    "ueno.gunma.jp": true,
    "yoshioka.gunma.jp": true,
    "asaminami.hiroshima.jp": true,
    "daiwa.hiroshima.jp": true,
    "etajima.hiroshima.jp": true,
    "fuchu.hiroshima.jp": true,
    "fukuyama.hiroshima.jp": true,
    "hatsukaichi.hiroshima.jp": true,
    "higashihiroshima.hiroshima.jp": true,
    "hongo.hiroshima.jp": true,
    "jinsekikogen.hiroshima.jp": true,
    "kaita.hiroshima.jp": true,
    "kui.hiroshima.jp": true,
    "kumano.hiroshima.jp": true,
    "kure.hiroshima.jp": true,
    "mihara.hiroshima.jp": true,
    "miyoshi.hiroshima.jp": true,
    "naka.hiroshima.jp": true,
    "onomichi.hiroshima.jp": true,
    "osakikamijima.hiroshima.jp": true,
    "otake.hiroshima.jp": true,
    "saka.hiroshima.jp": true,
    "sera.hiroshima.jp": true,
    "seranishi.hiroshima.jp": true,
    "shinichi.hiroshima.jp": true,
    "shobara.hiroshima.jp": true,
    "takehara.hiroshima.jp": true,
    "abashiri.hokkaido.jp": true,
    "abira.hokkaido.jp": true,
    "aibetsu.hokkaido.jp": true,
    "akabira.hokkaido.jp": true,
    "akkeshi.hokkaido.jp": true,
    "asahikawa.hokkaido.jp": true,
    "ashibetsu.hokkaido.jp": true,
    "ashoro.hokkaido.jp": true,
    "assabu.hokkaido.jp": true,
    "atsuma.hokkaido.jp": true,
    "bibai.hokkaido.jp": true,
    "biei.hokkaido.jp": true,
    "bifuka.hokkaido.jp": true,
    "bihoro.hokkaido.jp": true,
    "biratori.hokkaido.jp": true,
    "chippubetsu.hokkaido.jp": true,
    "chitose.hokkaido.jp": true,
    "date.hokkaido.jp": true,
    "ebetsu.hokkaido.jp": true,
    "embetsu.hokkaido.jp": true,
    "eniwa.hokkaido.jp": true,
    "erimo.hokkaido.jp": true,
    "esan.hokkaido.jp": true,
    "esashi.hokkaido.jp": true,
    "fukagawa.hokkaido.jp": true,
    "fukushima.hokkaido.jp": true,
    "furano.hokkaido.jp": true,
    "furubira.hokkaido.jp": true,
    "haboro.hokkaido.jp": true,
    "hakodate.hokkaido.jp": true,
    "hamatonbetsu.hokkaido.jp": true,
    "hidaka.hokkaido.jp": true,
    "higashikagura.hokkaido.jp": true,
    "higashikawa.hokkaido.jp": true,
    "hiroo.hokkaido.jp": true,
    "hokuryu.hokkaido.jp": true,
    "hokuto.hokkaido.jp": true,
    "honbetsu.hokkaido.jp": true,
    "horokanai.hokkaido.jp": true,
    "horonobe.hokkaido.jp": true,
    "ikeda.hokkaido.jp": true,
    "imakane.hokkaido.jp": true,
    "ishikari.hokkaido.jp": true,
    "iwamizawa.hokkaido.jp": true,
    "iwanai.hokkaido.jp": true,
    "kamifurano.hokkaido.jp": true,
    "kamikawa.hokkaido.jp": true,
    "kamishihoro.hokkaido.jp": true,
    "kamisunagawa.hokkaido.jp": true,
    "kamoenai.hokkaido.jp": true,
    "kayabe.hokkaido.jp": true,
    "kembuchi.hokkaido.jp": true,
    "kikonai.hokkaido.jp": true,
    "kimobetsu.hokkaido.jp": true,
    "kitahiroshima.hokkaido.jp": true,
    "kitami.hokkaido.jp": true,
    "kiyosato.hokkaido.jp": true,
    "koshimizu.hokkaido.jp": true,
    "kunneppu.hokkaido.jp": true,
    "kuriyama.hokkaido.jp": true,
    "kuromatsunai.hokkaido.jp": true,
    "kushiro.hokkaido.jp": true,
    "kutchan.hokkaido.jp": true,
    "kyowa.hokkaido.jp": true,
    "mashike.hokkaido.jp": true,
    "matsumae.hokkaido.jp": true,
    "mikasa.hokkaido.jp": true,
    "minamifurano.hokkaido.jp": true,
    "mombetsu.hokkaido.jp": true,
    "moseushi.hokkaido.jp": true,
    "mukawa.hokkaido.jp": true,
    "muroran.hokkaido.jp": true,
    "naie.hokkaido.jp": true,
    "nakagawa.hokkaido.jp": true,
    "nakasatsunai.hokkaido.jp": true,
    "nakatombetsu.hokkaido.jp": true,
    "nanae.hokkaido.jp": true,
    "nanporo.hokkaido.jp": true,
    "nayoro.hokkaido.jp": true,
    "nemuro.hokkaido.jp": true,
    "niikappu.hokkaido.jp": true,
    "niki.hokkaido.jp": true,
    "nishiokoppe.hokkaido.jp": true,
    "noboribetsu.hokkaido.jp": true,
    "numata.hokkaido.jp": true,
    "obihiro.hokkaido.jp": true,
    "obira.hokkaido.jp": true,
    "oketo.hokkaido.jp": true,
    "okoppe.hokkaido.jp": true,
    "otaru.hokkaido.jp": true,
    "otobe.hokkaido.jp": true,
    "otofuke.hokkaido.jp": true,
    "otoineppu.hokkaido.jp": true,
    "oumu.hokkaido.jp": true,
    "ozora.hokkaido.jp": true,
    "pippu.hokkaido.jp": true,
    "rankoshi.hokkaido.jp": true,
    "rebun.hokkaido.jp": true,
    "rikubetsu.hokkaido.jp": true,
    "rishiri.hokkaido.jp": true,
    "rishirifuji.hokkaido.jp": true,
    "saroma.hokkaido.jp": true,
    "sarufutsu.hokkaido.jp": true,
    "shakotan.hokkaido.jp": true,
    "shari.hokkaido.jp": true,
    "shibecha.hokkaido.jp": true,
    "shibetsu.hokkaido.jp": true,
    "shikabe.hokkaido.jp": true,
    "shikaoi.hokkaido.jp": true,
    "shimamaki.hokkaido.jp": true,
    "shimizu.hokkaido.jp": true,
    "shimokawa.hokkaido.jp": true,
    "shinshinotsu.hokkaido.jp": true,
    "shintoku.hokkaido.jp": true,
    "shiranuka.hokkaido.jp": true,
    "shiraoi.hokkaido.jp": true,
    "shiriuchi.hokkaido.jp": true,
    "sobetsu.hokkaido.jp": true,
    "sunagawa.hokkaido.jp": true,
    "taiki.hokkaido.jp": true,
    "takasu.hokkaido.jp": true,
    "takikawa.hokkaido.jp": true,
    "takinoue.hokkaido.jp": true,
    "teshikaga.hokkaido.jp": true,
    "tobetsu.hokkaido.jp": true,
    "tohma.hokkaido.jp": true,
    "tomakomai.hokkaido.jp": true,
    "tomari.hokkaido.jp": true,
    "toya.hokkaido.jp": true,
    "toyako.hokkaido.jp": true,
    "toyotomi.hokkaido.jp": true,
    "toyoura.hokkaido.jp": true,
    "tsubetsu.hokkaido.jp": true,
    "tsukigata.hokkaido.jp": true,
    "urakawa.hokkaido.jp": true,
    "urausu.hokkaido.jp": true,
    "uryu.hokkaido.jp": true,
    "utashinai.hokkaido.jp": true,
    "wakkanai.hokkaido.jp": true,
    "wassamu.hokkaido.jp": true,
    "yakumo.hokkaido.jp": true,
    "yoichi.hokkaido.jp": true,
    "aioi.hyogo.jp": true,
    "akashi.hyogo.jp": true,
    "ako.hyogo.jp": true,
    "amagasaki.hyogo.jp": true,
    "aogaki.hyogo.jp": true,
    "asago.hyogo.jp": true,
    "ashiya.hyogo.jp": true,
    "awaji.hyogo.jp": true,
    "fukusaki.hyogo.jp": true,
    "goshiki.hyogo.jp": true,
    "harima.hyogo.jp": true,
    "himeji.hyogo.jp": true,
    "ichikawa.hyogo.jp": true,
    "inagawa.hyogo.jp": true,
    "itami.hyogo.jp": true,
    "kakogawa.hyogo.jp": true,
    "kamigori.hyogo.jp": true,
    "kamikawa.hyogo.jp": true,
    "kasai.hyogo.jp": true,
    "kasuga.hyogo.jp": true,
    "kawanishi.hyogo.jp": true,
    "miki.hyogo.jp": true,
    "minamiawaji.hyogo.jp": true,
    "nishinomiya.hyogo.jp": true,
    "nishiwaki.hyogo.jp": true,
    "ono.hyogo.jp": true,
    "sanda.hyogo.jp": true,
    "sannan.hyogo.jp": true,
    "sasayama.hyogo.jp": true,
    "sayo.hyogo.jp": true,
    "shingu.hyogo.jp": true,
    "shinonsen.hyogo.jp": true,
    "shiso.hyogo.jp": true,
    "sumoto.hyogo.jp": true,
    "taishi.hyogo.jp": true,
    "taka.hyogo.jp": true,
    "takarazuka.hyogo.jp": true,
    "takasago.hyogo.jp": true,
    "takino.hyogo.jp": true,
    "tamba.hyogo.jp": true,
    "tatsuno.hyogo.jp": true,
    "toyooka.hyogo.jp": true,
    "yabu.hyogo.jp": true,
    "yashiro.hyogo.jp": true,
    "yoka.hyogo.jp": true,
    "yokawa.hyogo.jp": true,
    "ami.ibaraki.jp": true,
    "asahi.ibaraki.jp": true,
    "bando.ibaraki.jp": true,
    "chikusei.ibaraki.jp": true,
    "daigo.ibaraki.jp": true,
    "fujishiro.ibaraki.jp": true,
    "hitachi.ibaraki.jp": true,
    "hitachinaka.ibaraki.jp": true,
    "hitachiomiya.ibaraki.jp": true,
    "hitachiota.ibaraki.jp": true,
    "ibaraki.ibaraki.jp": true,
    "ina.ibaraki.jp": true,
    "inashiki.ibaraki.jp": true,
    "itako.ibaraki.jp": true,
    "iwama.ibaraki.jp": true,
    "joso.ibaraki.jp": true,
    "kamisu.ibaraki.jp": true,
    "kasama.ibaraki.jp": true,
    "kashima.ibaraki.jp": true,
    "kasumigaura.ibaraki.jp": true,
    "koga.ibaraki.jp": true,
    "miho.ibaraki.jp": true,
    "mito.ibaraki.jp": true,
    "moriya.ibaraki.jp": true,
    "naka.ibaraki.jp": true,
    "namegata.ibaraki.jp": true,
    "oarai.ibaraki.jp": true,
    "ogawa.ibaraki.jp": true,
    "omitama.ibaraki.jp": true,
    "ryugasaki.ibaraki.jp": true,
    "sakai.ibaraki.jp": true,
    "sakuragawa.ibaraki.jp": true,
    "shimodate.ibaraki.jp": true,
    "shimotsuma.ibaraki.jp": true,
    "shirosato.ibaraki.jp": true,
    "sowa.ibaraki.jp": true,
    "suifu.ibaraki.jp": true,
    "takahagi.ibaraki.jp": true,
    "tamatsukuri.ibaraki.jp": true,
    "tokai.ibaraki.jp": true,
    "tomobe.ibaraki.jp": true,
    "tone.ibaraki.jp": true,
    "toride.ibaraki.jp": true,
    "tsuchiura.ibaraki.jp": true,
    "tsukuba.ibaraki.jp": true,
    "uchihara.ibaraki.jp": true,
    "ushiku.ibaraki.jp": true,
    "yachiyo.ibaraki.jp": true,
    "yamagata.ibaraki.jp": true,
    "yawara.ibaraki.jp": true,
    "yuki.ibaraki.jp": true,
    "anamizu.ishikawa.jp": true,
    "hakui.ishikawa.jp": true,
    "hakusan.ishikawa.jp": true,
    "kaga.ishikawa.jp": true,
    "kahoku.ishikawa.jp": true,
    "kanazawa.ishikawa.jp": true,
    "kawakita.ishikawa.jp": true,
    "komatsu.ishikawa.jp": true,
    "nakanoto.ishikawa.jp": true,
    "nanao.ishikawa.jp": true,
    "nomi.ishikawa.jp": true,
    "nonoichi.ishikawa.jp": true,
    "noto.ishikawa.jp": true,
    "shika.ishikawa.jp": true,
    "suzu.ishikawa.jp": true,
    "tsubata.ishikawa.jp": true,
    "tsurugi.ishikawa.jp": true,
    "uchinada.ishikawa.jp": true,
    "wajima.ishikawa.jp": true,
    "fudai.iwate.jp": true,
    "fujisawa.iwate.jp": true,
    "hanamaki.iwate.jp": true,
    "hiraizumi.iwate.jp": true,
    "hirono.iwate.jp": true,
    "ichinohe.iwate.jp": true,
    "ichinoseki.iwate.jp": true,
    "iwaizumi.iwate.jp": true,
    "iwate.iwate.jp": true,
    "joboji.iwate.jp": true,
    "kamaishi.iwate.jp": true,
    "kanegasaki.iwate.jp": true,
    "karumai.iwate.jp": true,
    "kawai.iwate.jp": true,
    "kitakami.iwate.jp": true,
    "kuji.iwate.jp": true,
    "kunohe.iwate.jp": true,
    "kuzumaki.iwate.jp": true,
    "miyako.iwate.jp": true,
    "mizusawa.iwate.jp": true,
    "morioka.iwate.jp": true,
    "ninohe.iwate.jp": true,
    "noda.iwate.jp": true,
    "ofunato.iwate.jp": true,
    "oshu.iwate.jp": true,
    "otsuchi.iwate.jp": true,
    "rikuzentakata.iwate.jp": true,
    "shiwa.iwate.jp": true,
    "shizukuishi.iwate.jp": true,
    "sumita.iwate.jp": true,
    "tanohata.iwate.jp": true,
    "tono.iwate.jp": true,
    "yahaba.iwate.jp": true,
    "yamada.iwate.jp": true,
    "ayagawa.kagawa.jp": true,
    "higashikagawa.kagawa.jp": true,
    "kanonji.kagawa.jp": true,
    "kotohira.kagawa.jp": true,
    "manno.kagawa.jp": true,
    "marugame.kagawa.jp": true,
    "mitoyo.kagawa.jp": true,
    "naoshima.kagawa.jp": true,
    "sanuki.kagawa.jp": true,
    "tadotsu.kagawa.jp": true,
    "takamatsu.kagawa.jp": true,
    "tonosho.kagawa.jp": true,
    "uchinomi.kagawa.jp": true,
    "utazu.kagawa.jp": true,
    "zentsuji.kagawa.jp": true,
    "akune.kagoshima.jp": true,
    "amami.kagoshima.jp": true,
    "hioki.kagoshima.jp": true,
    "isa.kagoshima.jp": true,
    "isen.kagoshima.jp": true,
    "izumi.kagoshima.jp": true,
    "kagoshima.kagoshima.jp": true,
    "kanoya.kagoshima.jp": true,
    "kawanabe.kagoshima.jp": true,
    "kinko.kagoshima.jp": true,
    "kouyama.kagoshima.jp": true,
    "makurazaki.kagoshima.jp": true,
    "matsumoto.kagoshima.jp": true,
    "minamitane.kagoshima.jp": true,
    "nakatane.kagoshima.jp": true,
    "nishinoomote.kagoshima.jp": true,
    "satsumasendai.kagoshima.jp": true,
    "soo.kagoshima.jp": true,
    "tarumizu.kagoshima.jp": true,
    "yusui.kagoshima.jp": true,
    "aikawa.kanagawa.jp": true,
    "atsugi.kanagawa.jp": true,
    "ayase.kanagawa.jp": true,
    "chigasaki.kanagawa.jp": true,
    "ebina.kanagawa.jp": true,
    "fujisawa.kanagawa.jp": true,
    "hadano.kanagawa.jp": true,
    "hakone.kanagawa.jp": true,
    "hiratsuka.kanagawa.jp": true,
    "isehara.kanagawa.jp": true,
    "kaisei.kanagawa.jp": true,
    "kamakura.kanagawa.jp": true,
    "kiyokawa.kanagawa.jp": true,
    "matsuda.kanagawa.jp": true,
    "minamiashigara.kanagawa.jp": true,
    "miura.kanagawa.jp": true,
    "nakai.kanagawa.jp": true,
    "ninomiya.kanagawa.jp": true,
    "odawara.kanagawa.jp": true,
    "oi.kanagawa.jp": true,
    "oiso.kanagawa.jp": true,
    "sagamihara.kanagawa.jp": true,
    "samukawa.kanagawa.jp": true,
    "tsukui.kanagawa.jp": true,
    "yamakita.kanagawa.jp": true,
    "yamato.kanagawa.jp": true,
    "yokosuka.kanagawa.jp": true,
    "yugawara.kanagawa.jp": true,
    "zama.kanagawa.jp": true,
    "zushi.kanagawa.jp": true,
    "aki.kochi.jp": true,
    "geisei.kochi.jp": true,
    "hidaka.kochi.jp": true,
    "higashitsuno.kochi.jp": true,
    "ino.kochi.jp": true,
    "kagami.kochi.jp": true,
    "kami.kochi.jp": true,
    "kitagawa.kochi.jp": true,
    "kochi.kochi.jp": true,
    "mihara.kochi.jp": true,
    "motoyama.kochi.jp": true,
    "muroto.kochi.jp": true,
    "nahari.kochi.jp": true,
    "nakamura.kochi.jp": true,
    "nankoku.kochi.jp": true,
    "nishitosa.kochi.jp": true,
    "niyodogawa.kochi.jp": true,
    "ochi.kochi.jp": true,
    "okawa.kochi.jp": true,
    "otoyo.kochi.jp": true,
    "otsuki.kochi.jp": true,
    "sakawa.kochi.jp": true,
    "sukumo.kochi.jp": true,
    "susaki.kochi.jp": true,
    "tosa.kochi.jp": true,
    "tosashimizu.kochi.jp": true,
    "toyo.kochi.jp": true,
    "tsuno.kochi.jp": true,
    "umaji.kochi.jp": true,
    "yasuda.kochi.jp": true,
    "yusuhara.kochi.jp": true,
    "amakusa.kumamoto.jp": true,
    "arao.kumamoto.jp": true,
    "aso.kumamoto.jp": true,
    "choyo.kumamoto.jp": true,
    "gyokuto.kumamoto.jp": true,
    "hitoyoshi.kumamoto.jp": true,
    "kamiamakusa.kumamoto.jp": true,
    "kashima.kumamoto.jp": true,
    "kikuchi.kumamoto.jp": true,
    "kosa.kumamoto.jp": true,
    "kumamoto.kumamoto.jp": true,
    "mashiki.kumamoto.jp": true,
    "mifune.kumamoto.jp": true,
    "minamata.kumamoto.jp": true,
    "minamioguni.kumamoto.jp": true,
    "nagasu.kumamoto.jp": true,
    "nishihara.kumamoto.jp": true,
    "oguni.kumamoto.jp": true,
    "ozu.kumamoto.jp": true,
    "sumoto.kumamoto.jp": true,
    "takamori.kumamoto.jp": true,
    "uki.kumamoto.jp": true,
    "uto.kumamoto.jp": true,
    "yamaga.kumamoto.jp": true,
    "yamato.kumamoto.jp": true,
    "yatsushiro.kumamoto.jp": true,
    "ayabe.kyoto.jp": true,
    "fukuchiyama.kyoto.jp": true,
    "higashiyama.kyoto.jp": true,
    "ide.kyoto.jp": true,
    "ine.kyoto.jp": true,
    "joyo.kyoto.jp": true,
    "kameoka.kyoto.jp": true,
    "kamo.kyoto.jp": true,
    "kita.kyoto.jp": true,
    "kizu.kyoto.jp": true,
    "kumiyama.kyoto.jp": true,
    "kyotamba.kyoto.jp": true,
    "kyotanabe.kyoto.jp": true,
    "kyotango.kyoto.jp": true,
    "maizuru.kyoto.jp": true,
    "minami.kyoto.jp": true,
    "minamiyamashiro.kyoto.jp": true,
    "miyazu.kyoto.jp": true,
    "muko.kyoto.jp": true,
    "nagaokakyo.kyoto.jp": true,
    "nakagyo.kyoto.jp": true,
    "nantan.kyoto.jp": true,
    "oyamazaki.kyoto.jp": true,
    "sakyo.kyoto.jp": true,
    "seika.kyoto.jp": true,
    "tanabe.kyoto.jp": true,
    "uji.kyoto.jp": true,
    "ujitawara.kyoto.jp": true,
    "wazuka.kyoto.jp": true,
    "yamashina.kyoto.jp": true,
    "yawata.kyoto.jp": true,
    "asahi.mie.jp": true,
    "inabe.mie.jp": true,
    "ise.mie.jp": true,
    "kameyama.mie.jp": true,
    "kawagoe.mie.jp": true,
    "kiho.mie.jp": true,
    "kisosaki.mie.jp": true,
    "kiwa.mie.jp": true,
    "komono.mie.jp": true,
    "kumano.mie.jp": true,
    "kuwana.mie.jp": true,
    "matsusaka.mie.jp": true,
    "meiwa.mie.jp": true,
    "mihama.mie.jp": true,
    "minamiise.mie.jp": true,
    "misugi.mie.jp": true,
    "miyama.mie.jp": true,
    "nabari.mie.jp": true,
    "shima.mie.jp": true,
    "suzuka.mie.jp": true,
    "tado.mie.jp": true,
    "taiki.mie.jp": true,
    "taki.mie.jp": true,
    "tamaki.mie.jp": true,
    "toba.mie.jp": true,
    "tsu.mie.jp": true,
    "udono.mie.jp": true,
    "ureshino.mie.jp": true,
    "watarai.mie.jp": true,
    "yokkaichi.mie.jp": true,
    "furukawa.miyagi.jp": true,
    "higashimatsushima.miyagi.jp": true,
    "ishinomaki.miyagi.jp": true,
    "iwanuma.miyagi.jp": true,
    "kakuda.miyagi.jp": true,
    "kami.miyagi.jp": true,
    "kawasaki.miyagi.jp": true,
    "kesennuma.miyagi.jp": true,
    "marumori.miyagi.jp": true,
    "matsushima.miyagi.jp": true,
    "minamisanriku.miyagi.jp": true,
    "misato.miyagi.jp": true,
    "murata.miyagi.jp": true,
    "natori.miyagi.jp": true,
    "ogawara.miyagi.jp": true,
    "ohira.miyagi.jp": true,
    "onagawa.miyagi.jp": true,
    "osaki.miyagi.jp": true,
    "rifu.miyagi.jp": true,
    "semine.miyagi.jp": true,
    "shibata.miyagi.jp": true,
    "shichikashuku.miyagi.jp": true,
    "shikama.miyagi.jp": true,
    "shiogama.miyagi.jp": true,
    "shiroishi.miyagi.jp": true,
    "tagajo.miyagi.jp": true,
    "taiwa.miyagi.jp": true,
    "tome.miyagi.jp": true,
    "tomiya.miyagi.jp": true,
    "wakuya.miyagi.jp": true,
    "watari.miyagi.jp": true,
    "yamamoto.miyagi.jp": true,
    "zao.miyagi.jp": true,
    "aya.miyazaki.jp": true,
    "ebino.miyazaki.jp": true,
    "gokase.miyazaki.jp": true,
    "hyuga.miyazaki.jp": true,
    "kadogawa.miyazaki.jp": true,
    "kawaminami.miyazaki.jp": true,
    "kijo.miyazaki.jp": true,
    "kitagawa.miyazaki.jp": true,
    "kitakata.miyazaki.jp": true,
    "kitaura.miyazaki.jp": true,
    "kobayashi.miyazaki.jp": true,
    "kunitomi.miyazaki.jp": true,
    "kushima.miyazaki.jp": true,
    "mimata.miyazaki.jp": true,
    "miyakonojo.miyazaki.jp": true,
    "miyazaki.miyazaki.jp": true,
    "morotsuka.miyazaki.jp": true,
    "nichinan.miyazaki.jp": true,
    "nishimera.miyazaki.jp": true,
    "nobeoka.miyazaki.jp": true,
    "saito.miyazaki.jp": true,
    "shiiba.miyazaki.jp": true,
    "shintomi.miyazaki.jp": true,
    "takaharu.miyazaki.jp": true,
    "takanabe.miyazaki.jp": true,
    "takazaki.miyazaki.jp": true,
    "tsuno.miyazaki.jp": true,
    "achi.nagano.jp": true,
    "agematsu.nagano.jp": true,
    "anan.nagano.jp": true,
    "aoki.nagano.jp": true,
    "asahi.nagano.jp": true,
    "azumino.nagano.jp": true,
    "chikuhoku.nagano.jp": true,
    "chikuma.nagano.jp": true,
    "chino.nagano.jp": true,
    "fujimi.nagano.jp": true,
    "hakuba.nagano.jp": true,
    "hara.nagano.jp": true,
    "hiraya.nagano.jp": true,
    "iida.nagano.jp": true,
    "iijima.nagano.jp": true,
    "iiyama.nagano.jp": true,
    "iizuna.nagano.jp": true,
    "ikeda.nagano.jp": true,
    "ikusaka.nagano.jp": true,
    "ina.nagano.jp": true,
    "karuizawa.nagano.jp": true,
    "kawakami.nagano.jp": true,
    "kiso.nagano.jp": true,
    "kisofukushima.nagano.jp": true,
    "kitaaiki.nagano.jp": true,
    "komagane.nagano.jp": true,
    "komoro.nagano.jp": true,
    "matsukawa.nagano.jp": true,
    "matsumoto.nagano.jp": true,
    "miasa.nagano.jp": true,
    "minamiaiki.nagano.jp": true,
    "minamimaki.nagano.jp": true,
    "minamiminowa.nagano.jp": true,
    "minowa.nagano.jp": true,
    "miyada.nagano.jp": true,
    "miyota.nagano.jp": true,
    "mochizuki.nagano.jp": true,
    "nagano.nagano.jp": true,
    "nagawa.nagano.jp": true,
    "nagiso.nagano.jp": true,
    "nakagawa.nagano.jp": true,
    "nakano.nagano.jp": true,
    "nozawaonsen.nagano.jp": true,
    "obuse.nagano.jp": true,
    "ogawa.nagano.jp": true,
    "okaya.nagano.jp": true,
    "omachi.nagano.jp": true,
    "omi.nagano.jp": true,
    "ookuwa.nagano.jp": true,
    "ooshika.nagano.jp": true,
    "otaki.nagano.jp": true,
    "otari.nagano.jp": true,
    "sakae.nagano.jp": true,
    "sakaki.nagano.jp": true,
    "saku.nagano.jp": true,
    "sakuho.nagano.jp": true,
    "shimosuwa.nagano.jp": true,
    "shinanomachi.nagano.jp": true,
    "shiojiri.nagano.jp": true,
    "suwa.nagano.jp": true,
    "suzaka.nagano.jp": true,
    "takagi.nagano.jp": true,
    "takamori.nagano.jp": true,
    "takayama.nagano.jp": true,
    "tateshina.nagano.jp": true,
    "tatsuno.nagano.jp": true,
    "togakushi.nagano.jp": true,
    "togura.nagano.jp": true,
    "tomi.nagano.jp": true,
    "ueda.nagano.jp": true,
    "wada.nagano.jp": true,
    "yamagata.nagano.jp": true,
    "yamanouchi.nagano.jp": true,
    "yasaka.nagano.jp": true,
    "yasuoka.nagano.jp": true,
    "chijiwa.nagasaki.jp": true,
    "futsu.nagasaki.jp": true,
    "goto.nagasaki.jp": true,
    "hasami.nagasaki.jp": true,
    "hirado.nagasaki.jp": true,
    "iki.nagasaki.jp": true,
    "isahaya.nagasaki.jp": true,
    "kawatana.nagasaki.jp": true,
    "kuchinotsu.nagasaki.jp": true,
    "matsuura.nagasaki.jp": true,
    "nagasaki.nagasaki.jp": true,
    "obama.nagasaki.jp": true,
    "omura.nagasaki.jp": true,
    "oseto.nagasaki.jp": true,
    "saikai.nagasaki.jp": true,
    "sasebo.nagasaki.jp": true,
    "seihi.nagasaki.jp": true,
    "shimabara.nagasaki.jp": true,
    "shinkamigoto.nagasaki.jp": true,
    "togitsu.nagasaki.jp": true,
    "tsushima.nagasaki.jp": true,
    "unzen.nagasaki.jp": true,
    "ando.nara.jp": true,
    "gose.nara.jp": true,
    "heguri.nara.jp": true,
    "higashiyoshino.nara.jp": true,
    "ikaruga.nara.jp": true,
    "ikoma.nara.jp": true,
    "kamikitayama.nara.jp": true,
    "kanmaki.nara.jp": true,
    "kashiba.nara.jp": true,
    "kashihara.nara.jp": true,
    "katsuragi.nara.jp": true,
    "kawai.nara.jp": true,
    "kawakami.nara.jp": true,
    "kawanishi.nara.jp": true,
    "koryo.nara.jp": true,
    "kurotaki.nara.jp": true,
    "mitsue.nara.jp": true,
    "miyake.nara.jp": true,
    "nara.nara.jp": true,
    "nosegawa.nara.jp": true,
    "oji.nara.jp": true,
    "ouda.nara.jp": true,
    "oyodo.nara.jp": true,
    "sakurai.nara.jp": true,
    "sango.nara.jp": true,
    "shimoichi.nara.jp": true,
    "shimokitayama.nara.jp": true,
    "shinjo.nara.jp": true,
    "soni.nara.jp": true,
    "takatori.nara.jp": true,
    "tawaramoto.nara.jp": true,
    "tenkawa.nara.jp": true,
    "tenri.nara.jp": true,
    "uda.nara.jp": true,
    "yamatokoriyama.nara.jp": true,
    "yamatotakada.nara.jp": true,
    "yamazoe.nara.jp": true,
    "yoshino.nara.jp": true,
    "aga.niigata.jp": true,
    "agano.niigata.jp": true,
    "gosen.niigata.jp": true,
    "itoigawa.niigata.jp": true,
    "izumozaki.niigata.jp": true,
    "joetsu.niigata.jp": true,
    "kamo.niigata.jp": true,
    "kariwa.niigata.jp": true,
    "kashiwazaki.niigata.jp": true,
    "minamiuonuma.niigata.jp": true,
    "mitsuke.niigata.jp": true,
    "muika.niigata.jp": true,
    "murakami.niigata.jp": true,
    "myoko.niigata.jp": true,
    "nagaoka.niigata.jp": true,
    "niigata.niigata.jp": true,
    "ojiya.niigata.jp": true,
    "omi.niigata.jp": true,
    "sado.niigata.jp": true,
    "sanjo.niigata.jp": true,
    "seiro.niigata.jp": true,
    "seirou.niigata.jp": true,
    "sekikawa.niigata.jp": true,
    "shibata.niigata.jp": true,
    "tagami.niigata.jp": true,
    "tainai.niigata.jp": true,
    "tochio.niigata.jp": true,
    "tokamachi.niigata.jp": true,
    "tsubame.niigata.jp": true,
    "tsunan.niigata.jp": true,
    "uonuma.niigata.jp": true,
    "yahiko.niigata.jp": true,
    "yoita.niigata.jp": true,
    "yuzawa.niigata.jp": true,
    "beppu.oita.jp": true,
    "bungoono.oita.jp": true,
    "bungotakada.oita.jp": true,
    "hasama.oita.jp": true,
    "hiji.oita.jp": true,
    "himeshima.oita.jp": true,
    "hita.oita.jp": true,
    "kamitsue.oita.jp": true,
    "kokonoe.oita.jp": true,
    "kuju.oita.jp": true,
    "kunisaki.oita.jp": true,
    "kusu.oita.jp": true,
    "oita.oita.jp": true,
    "saiki.oita.jp": true,
    "taketa.oita.jp": true,
    "tsukumi.oita.jp": true,
    "usa.oita.jp": true,
    "usuki.oita.jp": true,
    "yufu.oita.jp": true,
    "akaiwa.okayama.jp": true,
    "asakuchi.okayama.jp": true,
    "bizen.okayama.jp": true,
    "hayashima.okayama.jp": true,
    "ibara.okayama.jp": true,
    "kagamino.okayama.jp": true,
    "kasaoka.okayama.jp": true,
    "kibichuo.okayama.jp": true,
    "kumenan.okayama.jp": true,
    "kurashiki.okayama.jp": true,
    "maniwa.okayama.jp": true,
    "misaki.okayama.jp": true,
    "nagi.okayama.jp": true,
    "niimi.okayama.jp": true,
    "nishiawakura.okayama.jp": true,
    "okayama.okayama.jp": true,
    "satosho.okayama.jp": true,
    "setouchi.okayama.jp": true,
    "shinjo.okayama.jp": true,
    "shoo.okayama.jp": true,
    "soja.okayama.jp": true,
    "takahashi.okayama.jp": true,
    "tamano.okayama.jp": true,
    "tsuyama.okayama.jp": true,
    "wake.okayama.jp": true,
    "yakage.okayama.jp": true,
    "aguni.okinawa.jp": true,
    "ginowan.okinawa.jp": true,
    "ginoza.okinawa.jp": true,
    "gushikami.okinawa.jp": true,
    "haebaru.okinawa.jp": true,
    "higashi.okinawa.jp": true,
    "hirara.okinawa.jp": true,
    "iheya.okinawa.jp": true,
    "ishigaki.okinawa.jp": true,
    "ishikawa.okinawa.jp": true,
    "itoman.okinawa.jp": true,
    "izena.okinawa.jp": true,
    "kadena.okinawa.jp": true,
    "kin.okinawa.jp": true,
    "kitadaito.okinawa.jp": true,
    "kitanakagusuku.okinawa.jp": true,
    "kumejima.okinawa.jp": true,
    "kunigami.okinawa.jp": true,
    "minamidaito.okinawa.jp": true,
    "motobu.okinawa.jp": true,
    "nago.okinawa.jp": true,
    "naha.okinawa.jp": true,
    "nakagusuku.okinawa.jp": true,
    "nakijin.okinawa.jp": true,
    "nanjo.okinawa.jp": true,
    "nishihara.okinawa.jp": true,
    "ogimi.okinawa.jp": true,
    "okinawa.okinawa.jp": true,
    "onna.okinawa.jp": true,
    "shimoji.okinawa.jp": true,
    "taketomi.okinawa.jp": true,
    "tarama.okinawa.jp": true,
    "tokashiki.okinawa.jp": true,
    "tomigusuku.okinawa.jp": true,
    "tonaki.okinawa.jp": true,
    "urasoe.okinawa.jp": true,
    "uruma.okinawa.jp": true,
    "yaese.okinawa.jp": true,
    "yomitan.okinawa.jp": true,
    "yonabaru.okinawa.jp": true,
    "yonaguni.okinawa.jp": true,
    "zamami.okinawa.jp": true,
    "abeno.osaka.jp": true,
    "chihayaakasaka.osaka.jp": true,
    "chuo.osaka.jp": true,
    "daito.osaka.jp": true,
    "fujiidera.osaka.jp": true,
    "habikino.osaka.jp": true,
    "hannan.osaka.jp": true,
    "higashiosaka.osaka.jp": true,
    "higashisumiyoshi.osaka.jp": true,
    "higashiyodogawa.osaka.jp": true,
    "hirakata.osaka.jp": true,
    "ibaraki.osaka.jp": true,
    "ikeda.osaka.jp": true,
    "izumi.osaka.jp": true,
    "izumiotsu.osaka.jp": true,
    "izumisano.osaka.jp": true,
    "kadoma.osaka.jp": true,
    "kaizuka.osaka.jp": true,
    "kanan.osaka.jp": true,
    "kashiwara.osaka.jp": true,
    "katano.osaka.jp": true,
    "kawachinagano.osaka.jp": true,
    "kishiwada.osaka.jp": true,
    "kita.osaka.jp": true,
    "kumatori.osaka.jp": true,
    "matsubara.osaka.jp": true,
    "minato.osaka.jp": true,
    "minoh.osaka.jp": true,
    "misaki.osaka.jp": true,
    "moriguchi.osaka.jp": true,
    "neyagawa.osaka.jp": true,
    "nishi.osaka.jp": true,
    "nose.osaka.jp": true,
    "osakasayama.osaka.jp": true,
    "sakai.osaka.jp": true,
    "sayama.osaka.jp": true,
    "sennan.osaka.jp": true,
    "settsu.osaka.jp": true,
    "shijonawate.osaka.jp": true,
    "shimamoto.osaka.jp": true,
    "suita.osaka.jp": true,
    "tadaoka.osaka.jp": true,
    "taishi.osaka.jp": true,
    "tajiri.osaka.jp": true,
    "takaishi.osaka.jp": true,
    "takatsuki.osaka.jp": true,
    "tondabayashi.osaka.jp": true,
    "toyonaka.osaka.jp": true,
    "toyono.osaka.jp": true,
    "yao.osaka.jp": true,
    "ariake.saga.jp": true,
    "arita.saga.jp": true,
    "fukudomi.saga.jp": true,
    "genkai.saga.jp": true,
    "hamatama.saga.jp": true,
    "hizen.saga.jp": true,
    "imari.saga.jp": true,
    "kamimine.saga.jp": true,
    "kanzaki.saga.jp": true,
    "karatsu.saga.jp": true,
    "kashima.saga.jp": true,
    "kitagata.saga.jp": true,
    "kitahata.saga.jp": true,
    "kiyama.saga.jp": true,
    "kouhoku.saga.jp": true,
    "kyuragi.saga.jp": true,
    "nishiarita.saga.jp": true,
    "ogi.saga.jp": true,
    "omachi.saga.jp": true,
    "ouchi.saga.jp": true,
    "saga.saga.jp": true,
    "shiroishi.saga.jp": true,
    "taku.saga.jp": true,
    "tara.saga.jp": true,
    "tosu.saga.jp": true,
    "yoshinogari.saga.jp": true,
    "arakawa.saitama.jp": true,
    "asaka.saitama.jp": true,
    "chichibu.saitama.jp": true,
    "fujimi.saitama.jp": true,
    "fujimino.saitama.jp": true,
    "fukaya.saitama.jp": true,
    "hanno.saitama.jp": true,
    "hanyu.saitama.jp": true,
    "hasuda.saitama.jp": true,
    "hatogaya.saitama.jp": true,
    "hatoyama.saitama.jp": true,
    "hidaka.saitama.jp": true,
    "higashichichibu.saitama.jp": true,
    "higashimatsuyama.saitama.jp": true,
    "honjo.saitama.jp": true,
    "ina.saitama.jp": true,
    "iruma.saitama.jp": true,
    "iwatsuki.saitama.jp": true,
    "kamiizumi.saitama.jp": true,
    "kamikawa.saitama.jp": true,
    "kamisato.saitama.jp": true,
    "kasukabe.saitama.jp": true,
    "kawagoe.saitama.jp": true,
    "kawaguchi.saitama.jp": true,
    "kawajima.saitama.jp": true,
    "kazo.saitama.jp": true,
    "kitamoto.saitama.jp": true,
    "koshigaya.saitama.jp": true,
    "kounosu.saitama.jp": true,
    "kuki.saitama.jp": true,
    "kumagaya.saitama.jp": true,
    "matsubushi.saitama.jp": true,
    "minano.saitama.jp": true,
    "misato.saitama.jp": true,
    "miyashiro.saitama.jp": true,
    "miyoshi.saitama.jp": true,
    "moroyama.saitama.jp": true,
    "nagatoro.saitama.jp": true,
    "namegawa.saitama.jp": true,
    "niiza.saitama.jp": true,
    "ogano.saitama.jp": true,
    "ogawa.saitama.jp": true,
    "ogose.saitama.jp": true,
    "okegawa.saitama.jp": true,
    "omiya.saitama.jp": true,
    "otaki.saitama.jp": true,
    "ranzan.saitama.jp": true,
    "ryokami.saitama.jp": true,
    "saitama.saitama.jp": true,
    "sakado.saitama.jp": true,
    "satte.saitama.jp": true,
    "sayama.saitama.jp": true,
    "shiki.saitama.jp": true,
    "shiraoka.saitama.jp": true,
    "soka.saitama.jp": true,
    "sugito.saitama.jp": true,
    "toda.saitama.jp": true,
    "tokigawa.saitama.jp": true,
    "tokorozawa.saitama.jp": true,
    "tsurugashima.saitama.jp": true,
    "urawa.saitama.jp": true,
    "warabi.saitama.jp": true,
    "yashio.saitama.jp": true,
    "yokoze.saitama.jp": true,
    "yono.saitama.jp": true,
    "yorii.saitama.jp": true,
    "yoshida.saitama.jp": true,
    "yoshikawa.saitama.jp": true,
    "yoshimi.saitama.jp": true,
    "aisho.shiga.jp": true,
    "gamo.shiga.jp": true,
    "higashiomi.shiga.jp": true,
    "hikone.shiga.jp": true,
    "koka.shiga.jp": true,
    "konan.shiga.jp": true,
    "kosei.shiga.jp": true,
    "koto.shiga.jp": true,
    "kusatsu.shiga.jp": true,
    "maibara.shiga.jp": true,
    "moriyama.shiga.jp": true,
    "nagahama.shiga.jp": true,
    "nishiazai.shiga.jp": true,
    "notogawa.shiga.jp": true,
    "omihachiman.shiga.jp": true,
    "otsu.shiga.jp": true,
    "ritto.shiga.jp": true,
    "ryuoh.shiga.jp": true,
    "takashima.shiga.jp": true,
    "takatsuki.shiga.jp": true,
    "torahime.shiga.jp": true,
    "toyosato.shiga.jp": true,
    "yasu.shiga.jp": true,
    "akagi.shimane.jp": true,
    "ama.shimane.jp": true,
    "gotsu.shimane.jp": true,
    "hamada.shimane.jp": true,
    "higashiizumo.shimane.jp": true,
    "hikawa.shimane.jp": true,
    "hikimi.shimane.jp": true,
    "izumo.shimane.jp": true,
    "kakinoki.shimane.jp": true,
    "masuda.shimane.jp": true,
    "matsue.shimane.jp": true,
    "misato.shimane.jp": true,
    "nishinoshima.shimane.jp": true,
    "ohda.shimane.jp": true,
    "okinoshima.shimane.jp": true,
    "okuizumo.shimane.jp": true,
    "shimane.shimane.jp": true,
    "tamayu.shimane.jp": true,
    "tsuwano.shimane.jp": true,
    "unnan.shimane.jp": true,
    "yakumo.shimane.jp": true,
    "yasugi.shimane.jp": true,
    "yatsuka.shimane.jp": true,
    "arai.shizuoka.jp": true,
    "atami.shizuoka.jp": true,
    "fuji.shizuoka.jp": true,
    "fujieda.shizuoka.jp": true,
    "fujikawa.shizuoka.jp": true,
    "fujinomiya.shizuoka.jp": true,
    "fukuroi.shizuoka.jp": true,
    "gotemba.shizuoka.jp": true,
    "haibara.shizuoka.jp": true,
    "hamamatsu.shizuoka.jp": true,
    "higashiizu.shizuoka.jp": true,
    "ito.shizuoka.jp": true,
    "iwata.shizuoka.jp": true,
    "izu.shizuoka.jp": true,
    "izunokuni.shizuoka.jp": true,
    "kakegawa.shizuoka.jp": true,
    "kannami.shizuoka.jp": true,
    "kawanehon.shizuoka.jp": true,
    "kawazu.shizuoka.jp": true,
    "kikugawa.shizuoka.jp": true,
    "kosai.shizuoka.jp": true,
    "makinohara.shizuoka.jp": true,
    "matsuzaki.shizuoka.jp": true,
    "minamiizu.shizuoka.jp": true,
    "mishima.shizuoka.jp": true,
    "morimachi.shizuoka.jp": true,
    "nishiizu.shizuoka.jp": true,
    "numazu.shizuoka.jp": true,
    "omaezaki.shizuoka.jp": true,
    "shimada.shizuoka.jp": true,
    "shimizu.shizuoka.jp": true,
    "shimoda.shizuoka.jp": true,
    "shizuoka.shizuoka.jp": true,
    "susono.shizuoka.jp": true,
    "yaizu.shizuoka.jp": true,
    "yoshida.shizuoka.jp": true,
    "ashikaga.tochigi.jp": true,
    "bato.tochigi.jp": true,
    "haga.tochigi.jp": true,
    "ichikai.tochigi.jp": true,
    "iwafune.tochigi.jp": true,
    "kaminokawa.tochigi.jp": true,
    "kanuma.tochigi.jp": true,
    "karasuyama.tochigi.jp": true,
    "kuroiso.tochigi.jp": true,
    "mashiko.tochigi.jp": true,
    "mibu.tochigi.jp": true,
    "moka.tochigi.jp": true,
    "motegi.tochigi.jp": true,
    "nasu.tochigi.jp": true,
    "nasushiobara.tochigi.jp": true,
    "nikko.tochigi.jp": true,
    "nishikata.tochigi.jp": true,
    "nogi.tochigi.jp": true,
    "ohira.tochigi.jp": true,
    "ohtawara.tochigi.jp": true,
    "oyama.tochigi.jp": true,
    "sakura.tochigi.jp": true,
    "sano.tochigi.jp": true,
    "shimotsuke.tochigi.jp": true,
    "shioya.tochigi.jp": true,
    "takanezawa.tochigi.jp": true,
    "tochigi.tochigi.jp": true,
    "tsuga.tochigi.jp": true,
    "ujiie.tochigi.jp": true,
    "utsunomiya.tochigi.jp": true,
    "yaita.tochigi.jp": true,
    "aizumi.tokushima.jp": true,
    "anan.tokushima.jp": true,
    "ichiba.tokushima.jp": true,
    "itano.tokushima.jp": true,
    "kainan.tokushima.jp": true,
    "komatsushima.tokushima.jp": true,
    "matsushige.tokushima.jp": true,
    "mima.tokushima.jp": true,
    "minami.tokushima.jp": true,
    "miyoshi.tokushima.jp": true,
    "mugi.tokushima.jp": true,
    "nakagawa.tokushima.jp": true,
    "naruto.tokushima.jp": true,
    "sanagochi.tokushima.jp": true,
    "shishikui.tokushima.jp": true,
    "tokushima.tokushima.jp": true,
    "wajiki.tokushima.jp": true,
    "adachi.tokyo.jp": true,
    "akiruno.tokyo.jp": true,
    "akishima.tokyo.jp": true,
    "aogashima.tokyo.jp": true,
    "arakawa.tokyo.jp": true,
    "bunkyo.tokyo.jp": true,
    "chiyoda.tokyo.jp": true,
    "chofu.tokyo.jp": true,
    "chuo.tokyo.jp": true,
    "edogawa.tokyo.jp": true,
    "fuchu.tokyo.jp": true,
    "fussa.tokyo.jp": true,
    "hachijo.tokyo.jp": true,
    "hachioji.tokyo.jp": true,
    "hamura.tokyo.jp": true,
    "higashikurume.tokyo.jp": true,
    "higashimurayama.tokyo.jp": true,
    "higashiyamato.tokyo.jp": true,
    "hino.tokyo.jp": true,
    "hinode.tokyo.jp": true,
    "hinohara.tokyo.jp": true,
    "inagi.tokyo.jp": true,
    "itabashi.tokyo.jp": true,
    "katsushika.tokyo.jp": true,
    "kita.tokyo.jp": true,
    "kiyose.tokyo.jp": true,
    "kodaira.tokyo.jp": true,
    "koganei.tokyo.jp": true,
    "kokubunji.tokyo.jp": true,
    "komae.tokyo.jp": true,
    "koto.tokyo.jp": true,
    "kouzushima.tokyo.jp": true,
    "kunitachi.tokyo.jp": true,
    "machida.tokyo.jp": true,
    "meguro.tokyo.jp": true,
    "minato.tokyo.jp": true,
    "mitaka.tokyo.jp": true,
    "mizuho.tokyo.jp": true,
    "musashimurayama.tokyo.jp": true,
    "musashino.tokyo.jp": true,
    "nakano.tokyo.jp": true,
    "nerima.tokyo.jp": true,
    "ogasawara.tokyo.jp": true,
    "okutama.tokyo.jp": true,
    "ome.tokyo.jp": true,
    "oshima.tokyo.jp": true,
    "ota.tokyo.jp": true,
    "setagaya.tokyo.jp": true,
    "shibuya.tokyo.jp": true,
    "shinagawa.tokyo.jp": true,
    "shinjuku.tokyo.jp": true,
    "suginami.tokyo.jp": true,
    "sumida.tokyo.jp": true,
    "tachikawa.tokyo.jp": true,
    "taito.tokyo.jp": true,
    "tama.tokyo.jp": true,
    "toshima.tokyo.jp": true,
    "chizu.tottori.jp": true,
    "hino.tottori.jp": true,
    "kawahara.tottori.jp": true,
    "koge.tottori.jp": true,
    "kotoura.tottori.jp": true,
    "misasa.tottori.jp": true,
    "nanbu.tottori.jp": true,
    "nichinan.tottori.jp": true,
    "sakaiminato.tottori.jp": true,
    "tottori.tottori.jp": true,
    "wakasa.tottori.jp": true,
    "yazu.tottori.jp": true,
    "yonago.tottori.jp": true,
    "asahi.toyama.jp": true,
    "fuchu.toyama.jp": true,
    "fukumitsu.toyama.jp": true,
    "funahashi.toyama.jp": true,
    "himi.toyama.jp": true,
    "imizu.toyama.jp": true,
    "inami.toyama.jp": true,
    "johana.toyama.jp": true,
    "kamiichi.toyama.jp": true,
    "kurobe.toyama.jp": true,
    "nakaniikawa.toyama.jp": true,
    "namerikawa.toyama.jp": true,
    "nanto.toyama.jp": true,
    "nyuzen.toyama.jp": true,
    "oyabe.toyama.jp": true,
    "taira.toyama.jp": true,
    "takaoka.toyama.jp": true,
    "tateyama.toyama.jp": true,
    "toga.toyama.jp": true,
    "tonami.toyama.jp": true,
    "toyama.toyama.jp": true,
    "unazuki.toyama.jp": true,
    "uozu.toyama.jp": true,
    "yamada.toyama.jp": true,
    "arida.wakayama.jp": true,
    "aridagawa.wakayama.jp": true,
    "gobo.wakayama.jp": true,
    "hashimoto.wakayama.jp": true,
    "hidaka.wakayama.jp": true,
    "hirogawa.wakayama.jp": true,
    "inami.wakayama.jp": true,
    "iwade.wakayama.jp": true,
    "kainan.wakayama.jp": true,
    "kamitonda.wakayama.jp": true,
    "katsuragi.wakayama.jp": true,
    "kimino.wakayama.jp": true,
    "kinokawa.wakayama.jp": true,
    "kitayama.wakayama.jp": true,
    "koya.wakayama.jp": true,
    "koza.wakayama.jp": true,
    "kozagawa.wakayama.jp": true,
    "kudoyama.wakayama.jp": true,
    "kushimoto.wakayama.jp": true,
    "mihama.wakayama.jp": true,
    "misato.wakayama.jp": true,
    "nachikatsuura.wakayama.jp": true,
    "shingu.wakayama.jp": true,
    "shirahama.wakayama.jp": true,
    "taiji.wakayama.jp": true,
    "tanabe.wakayama.jp": true,
    "wakayama.wakayama.jp": true,
    "yuasa.wakayama.jp": true,
    "yura.wakayama.jp": true,
    "asahi.yamagata.jp": true,
    "funagata.yamagata.jp": true,
    "higashine.yamagata.jp": true,
    "iide.yamagata.jp": true,
    "kahoku.yamagata.jp": true,
    "kaminoyama.yamagata.jp": true,
    "kaneyama.yamagata.jp": true,
    "kawanishi.yamagata.jp": true,
    "mamurogawa.yamagata.jp": true,
    "mikawa.yamagata.jp": true,
    "murayama.yamagata.jp": true,
    "nagai.yamagata.jp": true,
    "nakayama.yamagata.jp": true,
    "nanyo.yamagata.jp": true,
    "nishikawa.yamagata.jp": true,
    "obanazawa.yamagata.jp": true,
    "oe.yamagata.jp": true,
    "oguni.yamagata.jp": true,
    "ohkura.yamagata.jp": true,
    "oishida.yamagata.jp": true,
    "sagae.yamagata.jp": true,
    "sakata.yamagata.jp": true,
    "sakegawa.yamagata.jp": true,
    "shinjo.yamagata.jp": true,
    "shirataka.yamagata.jp": true,
    "shonai.yamagata.jp": true,
    "takahata.yamagata.jp": true,
    "tendo.yamagata.jp": true,
    "tozawa.yamagata.jp": true,
    "tsuruoka.yamagata.jp": true,
    "yamagata.yamagata.jp": true,
    "yamanobe.yamagata.jp": true,
    "yonezawa.yamagata.jp": true,
    "yuza.yamagata.jp": true,
    "abu.yamaguchi.jp": true,
    "hagi.yamaguchi.jp": true,
    "hikari.yamaguchi.jp": true,
    "hofu.yamaguchi.jp": true,
    "iwakuni.yamaguchi.jp": true,
    "kudamatsu.yamaguchi.jp": true,
    "mitou.yamaguchi.jp": true,
    "nagato.yamaguchi.jp": true,
    "oshima.yamaguchi.jp": true,
    "shimonoseki.yamaguchi.jp": true,
    "shunan.yamaguchi.jp": true,
    "tabuse.yamaguchi.jp": true,
    "tokuyama.yamaguchi.jp": true,
    "toyota.yamaguchi.jp": true,
    "ube.yamaguchi.jp": true,
    "yuu.yamaguchi.jp": true,
    "chuo.yamanashi.jp": true,
    "doshi.yamanashi.jp": true,
    "fuefuki.yamanashi.jp": true,
    "fujikawa.yamanashi.jp": true,
    "fujikawaguchiko.yamanashi.jp": true,
    "fujiyoshida.yamanashi.jp": true,
    "hayakawa.yamanashi.jp": true,
    "hokuto.yamanashi.jp": true,
    "ichikawamisato.yamanashi.jp": true,
    "kai.yamanashi.jp": true,
    "kofu.yamanashi.jp": true,
    "koshu.yamanashi.jp": true,
    "kosuge.yamanashi.jp": true,
    "minami-alps.yamanashi.jp": true,
    "minobu.yamanashi.jp": true,
    "nakamichi.yamanashi.jp": true,
    "nanbu.yamanashi.jp": true,
    "narusawa.yamanashi.jp": true,
    "nirasaki.yamanashi.jp": true,
    "nishikatsura.yamanashi.jp": true,
    "oshino.yamanashi.jp": true,
    "otsuki.yamanashi.jp": true,
    "showa.yamanashi.jp": true,
    "tabayama.yamanashi.jp": true,
    "tsuru.yamanashi.jp": true,
    "uenohara.yamanashi.jp": true,
    "yamanakako.yamanashi.jp": true,
    "yamanashi.yamanashi.jp": true,
    "*.ke": true,
    "kg": true,
    "org.kg": true,
    "net.kg": true,
    "com.kg": true,
    "edu.kg": true,
    "gov.kg": true,
    "mil.kg": true,
    "*.kh": true,
    "ki": true,
    "edu.ki": true,
    "biz.ki": true,
    "net.ki": true,
    "org.ki": true,
    "gov.ki": true,
    "info.ki": true,
    "com.ki": true,
    "km": true,
    "org.km": true,
    "nom.km": true,
    "gov.km": true,
    "prd.km": true,
    "tm.km": true,
    "edu.km": true,
    "mil.km": true,
    "ass.km": true,
    "com.km": true,
    "coop.km": true,
    "asso.km": true,
    "presse.km": true,
    "medecin.km": true,
    "notaires.km": true,
    "pharmaciens.km": true,
    "veterinaire.km": true,
    "gouv.km": true,
    "kn": true,
    "net.kn": true,
    "org.kn": true,
    "edu.kn": true,
    "gov.kn": true,
    "kp": true,
    "com.kp": true,
    "edu.kp": true,
    "gov.kp": true,
    "org.kp": true,
    "rep.kp": true,
    "tra.kp": true,
    "kr": true,
    "ac.kr": true,
    "co.kr": true,
    "es.kr": true,
    "go.kr": true,
    "hs.kr": true,
    "kg.kr": true,
    "mil.kr": true,
    "ms.kr": true,
    "ne.kr": true,
    "or.kr": true,
    "pe.kr": true,
    "re.kr": true,
    "sc.kr": true,
    "busan.kr": true,
    "chungbuk.kr": true,
    "chungnam.kr": true,
    "daegu.kr": true,
    "daejeon.kr": true,
    "gangwon.kr": true,
    "gwangju.kr": true,
    "gyeongbuk.kr": true,
    "gyeonggi.kr": true,
    "gyeongnam.kr": true,
    "incheon.kr": true,
    "jeju.kr": true,
    "jeonbuk.kr": true,
    "jeonnam.kr": true,
    "seoul.kr": true,
    "ulsan.kr": true,
    "*.kw": true,
    "ky": true,
    "edu.ky": true,
    "gov.ky": true,
    "com.ky": true,
    "org.ky": true,
    "net.ky": true,
    "kz": true,
    "org.kz": true,
    "edu.kz": true,
    "net.kz": true,
    "gov.kz": true,
    "mil.kz": true,
    "com.kz": true,
    "la": true,
    "int.la": true,
    "net.la": true,
    "info.la": true,
    "edu.la": true,
    "gov.la": true,
    "per.la": true,
    "com.la": true,
    "org.la": true,
    "lb": true,
    "com.lb": true,
    "edu.lb": true,
    "gov.lb": true,
    "net.lb": true,
    "org.lb": true,
    "lc": true,
    "com.lc": true,
    "net.lc": true,
    "co.lc": true,
    "org.lc": true,
    "edu.lc": true,
    "gov.lc": true,
    "li": true,
    "lk": true,
    "gov.lk": true,
    "sch.lk": true,
    "net.lk": true,
    "int.lk": true,
    "com.lk": true,
    "org.lk": true,
    "edu.lk": true,
    "ngo.lk": true,
    "soc.lk": true,
    "web.lk": true,
    "ltd.lk": true,
    "assn.lk": true,
    "grp.lk": true,
    "hotel.lk": true,
    "ac.lk": true,
    "lr": true,
    "com.lr": true,
    "edu.lr": true,
    "gov.lr": true,
    "org.lr": true,
    "net.lr": true,
    "ls": true,
    "co.ls": true,
    "org.ls": true,
    "lt": true,
    "gov.lt": true,
    "lu": true,
    "lv": true,
    "com.lv": true,
    "edu.lv": true,
    "gov.lv": true,
    "org.lv": true,
    "mil.lv": true,
    "id.lv": true,
    "net.lv": true,
    "asn.lv": true,
    "conf.lv": true,
    "ly": true,
    "com.ly": true,
    "net.ly": true,
    "gov.ly": true,
    "plc.ly": true,
    "edu.ly": true,
    "sch.ly": true,
    "med.ly": true,
    "org.ly": true,
    "id.ly": true,
    "ma": true,
    "co.ma": true,
    "net.ma": true,
    "gov.ma": true,
    "org.ma": true,
    "ac.ma": true,
    "press.ma": true,
    "mc": true,
    "tm.mc": true,
    "asso.mc": true,
    "md": true,
    "me": true,
    "co.me": true,
    "net.me": true,
    "org.me": true,
    "edu.me": true,
    "ac.me": true,
    "gov.me": true,
    "its.me": true,
    "priv.me": true,
    "mg": true,
    "org.mg": true,
    "nom.mg": true,
    "gov.mg": true,
    "prd.mg": true,
    "tm.mg": true,
    "edu.mg": true,
    "mil.mg": true,
    "com.mg": true,
    "co.mg": true,
    "mh": true,
    "mil": true,
    "mk": true,
    "com.mk": true,
    "org.mk": true,
    "net.mk": true,
    "edu.mk": true,
    "gov.mk": true,
    "inf.mk": true,
    "name.mk": true,
    "ml": true,
    "com.ml": true,
    "edu.ml": true,
    "gouv.ml": true,
    "gov.ml": true,
    "net.ml": true,
    "org.ml": true,
    "presse.ml": true,
    "*.mm": true,
    "mn": true,
    "gov.mn": true,
    "edu.mn": true,
    "org.mn": true,
    "mo": true,
    "com.mo": true,
    "net.mo": true,
    "org.mo": true,
    "edu.mo": true,
    "gov.mo": true,
    "mobi": true,
    "mp": true,
    "mq": true,
    "mr": true,
    "gov.mr": true,
    "ms": true,
    "com.ms": true,
    "edu.ms": true,
    "gov.ms": true,
    "net.ms": true,
    "org.ms": true,
    "mt": true,
    "com.mt": true,
    "edu.mt": true,
    "net.mt": true,
    "org.mt": true,
    "mu": true,
    "com.mu": true,
    "net.mu": true,
    "org.mu": true,
    "gov.mu": true,
    "ac.mu": true,
    "co.mu": true,
    "or.mu": true,
    "museum": true,
    "academy.museum": true,
    "agriculture.museum": true,
    "air.museum": true,
    "airguard.museum": true,
    "alabama.museum": true,
    "alaska.museum": true,
    "amber.museum": true,
    "ambulance.museum": true,
    "american.museum": true,
    "americana.museum": true,
    "americanantiques.museum": true,
    "americanart.museum": true,
    "amsterdam.museum": true,
    "and.museum": true,
    "annefrank.museum": true,
    "anthro.museum": true,
    "anthropology.museum": true,
    "antiques.museum": true,
    "aquarium.museum": true,
    "arboretum.museum": true,
    "archaeological.museum": true,
    "archaeology.museum": true,
    "architecture.museum": true,
    "art.museum": true,
    "artanddesign.museum": true,
    "artcenter.museum": true,
    "artdeco.museum": true,
    "arteducation.museum": true,
    "artgallery.museum": true,
    "arts.museum": true,
    "artsandcrafts.museum": true,
    "asmatart.museum": true,
    "assassination.museum": true,
    "assisi.museum": true,
    "association.museum": true,
    "astronomy.museum": true,
    "atlanta.museum": true,
    "austin.museum": true,
    "australia.museum": true,
    "automotive.museum": true,
    "aviation.museum": true,
    "axis.museum": true,
    "badajoz.museum": true,
    "baghdad.museum": true,
    "bahn.museum": true,
    "bale.museum": true,
    "baltimore.museum": true,
    "barcelona.museum": true,
    "baseball.museum": true,
    "basel.museum": true,
    "baths.museum": true,
    "bauern.museum": true,
    "beauxarts.museum": true,
    "beeldengeluid.museum": true,
    "bellevue.museum": true,
    "bergbau.museum": true,
    "berkeley.museum": true,
    "berlin.museum": true,
    "bern.museum": true,
    "bible.museum": true,
    "bilbao.museum": true,
    "bill.museum": true,
    "birdart.museum": true,
    "birthplace.museum": true,
    "bonn.museum": true,
    "boston.museum": true,
    "botanical.museum": true,
    "botanicalgarden.museum": true,
    "botanicgarden.museum": true,
    "botany.museum": true,
    "brandywinevalley.museum": true,
    "brasil.museum": true,
    "bristol.museum": true,
    "british.museum": true,
    "britishcolumbia.museum": true,
    "broadcast.museum": true,
    "brunel.museum": true,
    "brussel.museum": true,
    "brussels.museum": true,
    "bruxelles.museum": true,
    "building.museum": true,
    "burghof.museum": true,
    "bus.museum": true,
    "bushey.museum": true,
    "cadaques.museum": true,
    "california.museum": true,
    "cambridge.museum": true,
    "can.museum": true,
    "canada.museum": true,
    "capebreton.museum": true,
    "carrier.museum": true,
    "cartoonart.museum": true,
    "casadelamoneda.museum": true,
    "castle.museum": true,
    "castres.museum": true,
    "celtic.museum": true,
    "center.museum": true,
    "chattanooga.museum": true,
    "cheltenham.museum": true,
    "chesapeakebay.museum": true,
    "chicago.museum": true,
    "children.museum": true,
    "childrens.museum": true,
    "childrensgarden.museum": true,
    "chiropractic.museum": true,
    "chocolate.museum": true,
    "christiansburg.museum": true,
    "cincinnati.museum": true,
    "cinema.museum": true,
    "circus.museum": true,
    "civilisation.museum": true,
    "civilization.museum": true,
    "civilwar.museum": true,
    "clinton.museum": true,
    "clock.museum": true,
    "coal.museum": true,
    "coastaldefence.museum": true,
    "cody.museum": true,
    "coldwar.museum": true,
    "collection.museum": true,
    "colonialwilliamsburg.museum": true,
    "coloradoplateau.museum": true,
    "columbia.museum": true,
    "columbus.museum": true,
    "communication.museum": true,
    "communications.museum": true,
    "community.museum": true,
    "computer.museum": true,
    "computerhistory.museum": true,
    "xn--comunicaes-v6a2o.museum": true,
    "contemporary.museum": true,
    "contemporaryart.museum": true,
    "convent.museum": true,
    "copenhagen.museum": true,
    "corporation.museum": true,
    "xn--correios-e-telecomunicaes-ghc29a.museum": true,
    "corvette.museum": true,
    "costume.museum": true,
    "countryestate.museum": true,
    "county.museum": true,
    "crafts.museum": true,
    "cranbrook.museum": true,
    "creation.museum": true,
    "cultural.museum": true,
    "culturalcenter.museum": true,
    "culture.museum": true,
    "cyber.museum": true,
    "cymru.museum": true,
    "dali.museum": true,
    "dallas.museum": true,
    "database.museum": true,
    "ddr.museum": true,
    "decorativearts.museum": true,
    "delaware.museum": true,
    "delmenhorst.museum": true,
    "denmark.museum": true,
    "depot.museum": true,
    "design.museum": true,
    "detroit.museum": true,
    "dinosaur.museum": true,
    "discovery.museum": true,
    "dolls.museum": true,
    "donostia.museum": true,
    "durham.museum": true,
    "eastafrica.museum": true,
    "eastcoast.museum": true,
    "education.museum": true,
    "educational.museum": true,
    "egyptian.museum": true,
    "eisenbahn.museum": true,
    "elburg.museum": true,
    "elvendrell.museum": true,
    "embroidery.museum": true,
    "encyclopedic.museum": true,
    "england.museum": true,
    "entomology.museum": true,
    "environment.museum": true,
    "environmentalconservation.museum": true,
    "epilepsy.museum": true,
    "essex.museum": true,
    "estate.museum": true,
    "ethnology.museum": true,
    "exeter.museum": true,
    "exhibition.museum": true,
    "family.museum": true,
    "farm.museum": true,
    "farmequipment.museum": true,
    "farmers.museum": true,
    "farmstead.museum": true,
    "field.museum": true,
    "figueres.museum": true,
    "filatelia.museum": true,
    "film.museum": true,
    "fineart.museum": true,
    "finearts.museum": true,
    "finland.museum": true,
    "flanders.museum": true,
    "florida.museum": true,
    "force.museum": true,
    "fortmissoula.museum": true,
    "fortworth.museum": true,
    "foundation.museum": true,
    "francaise.museum": true,
    "frankfurt.museum": true,
    "franziskaner.museum": true,
    "freemasonry.museum": true,
    "freiburg.museum": true,
    "fribourg.museum": true,
    "frog.museum": true,
    "fundacio.museum": true,
    "furniture.museum": true,
    "gallery.museum": true,
    "garden.museum": true,
    "gateway.museum": true,
    "geelvinck.museum": true,
    "gemological.museum": true,
    "geology.museum": true,
    "georgia.museum": true,
    "giessen.museum": true,
    "glas.museum": true,
    "glass.museum": true,
    "gorge.museum": true,
    "grandrapids.museum": true,
    "graz.museum": true,
    "guernsey.museum": true,
    "halloffame.museum": true,
    "hamburg.museum": true,
    "handson.museum": true,
    "harvestcelebration.museum": true,
    "hawaii.museum": true,
    "health.museum": true,
    "heimatunduhren.museum": true,
    "hellas.museum": true,
    "helsinki.museum": true,
    "hembygdsforbund.museum": true,
    "heritage.museum": true,
    "histoire.museum": true,
    "historical.museum": true,
    "historicalsociety.museum": true,
    "historichouses.museum": true,
    "historisch.museum": true,
    "historisches.museum": true,
    "history.museum": true,
    "historyofscience.museum": true,
    "horology.museum": true,
    "house.museum": true,
    "humanities.museum": true,
    "illustration.museum": true,
    "imageandsound.museum": true,
    "indian.museum": true,
    "indiana.museum": true,
    "indianapolis.museum": true,
    "indianmarket.museum": true,
    "intelligence.museum": true,
    "interactive.museum": true,
    "iraq.museum": true,
    "iron.museum": true,
    "isleofman.museum": true,
    "jamison.museum": true,
    "jefferson.museum": true,
    "jerusalem.museum": true,
    "jewelry.museum": true,
    "jewish.museum": true,
    "jewishart.museum": true,
    "jfk.museum": true,
    "journalism.museum": true,
    "judaica.museum": true,
    "judygarland.museum": true,
    "juedisches.museum": true,
    "juif.museum": true,
    "karate.museum": true,
    "karikatur.museum": true,
    "kids.museum": true,
    "koebenhavn.museum": true,
    "koeln.museum": true,
    "kunst.museum": true,
    "kunstsammlung.museum": true,
    "kunstunddesign.museum": true,
    "labor.museum": true,
    "labour.museum": true,
    "lajolla.museum": true,
    "lancashire.museum": true,
    "landes.museum": true,
    "lans.museum": true,
    "xn--lns-qla.museum": true,
    "larsson.museum": true,
    "lewismiller.museum": true,
    "lincoln.museum": true,
    "linz.museum": true,
    "living.museum": true,
    "livinghistory.museum": true,
    "localhistory.museum": true,
    "london.museum": true,
    "losangeles.museum": true,
    "louvre.museum": true,
    "loyalist.museum": true,
    "lucerne.museum": true,
    "luxembourg.museum": true,
    "luzern.museum": true,
    "mad.museum": true,
    "madrid.museum": true,
    "mallorca.museum": true,
    "manchester.museum": true,
    "mansion.museum": true,
    "mansions.museum": true,
    "manx.museum": true,
    "marburg.museum": true,
    "maritime.museum": true,
    "maritimo.museum": true,
    "maryland.museum": true,
    "marylhurst.museum": true,
    "media.museum": true,
    "medical.museum": true,
    "medizinhistorisches.museum": true,
    "meeres.museum": true,
    "memorial.museum": true,
    "mesaverde.museum": true,
    "michigan.museum": true,
    "midatlantic.museum": true,
    "military.museum": true,
    "mill.museum": true,
    "miners.museum": true,
    "mining.museum": true,
    "minnesota.museum": true,
    "missile.museum": true,
    "missoula.museum": true,
    "modern.museum": true,
    "moma.museum": true,
    "money.museum": true,
    "monmouth.museum": true,
    "monticello.museum": true,
    "montreal.museum": true,
    "moscow.museum": true,
    "motorcycle.museum": true,
    "muenchen.museum": true,
    "muenster.museum": true,
    "mulhouse.museum": true,
    "muncie.museum": true,
    "museet.museum": true,
    "museumcenter.museum": true,
    "museumvereniging.museum": true,
    "music.museum": true,
    "national.museum": true,
    "nationalfirearms.museum": true,
    "nationalheritage.museum": true,
    "nativeamerican.museum": true,
    "naturalhistory.museum": true,
    "naturalhistorymuseum.museum": true,
    "naturalsciences.museum": true,
    "nature.museum": true,
    "naturhistorisches.museum": true,
    "natuurwetenschappen.museum": true,
    "naumburg.museum": true,
    "naval.museum": true,
    "nebraska.museum": true,
    "neues.museum": true,
    "newhampshire.museum": true,
    "newjersey.museum": true,
    "newmexico.museum": true,
    "newport.museum": true,
    "newspaper.museum": true,
    "newyork.museum": true,
    "niepce.museum": true,
    "norfolk.museum": true,
    "north.museum": true,
    "nrw.museum": true,
    "nuernberg.museum": true,
    "nuremberg.museum": true,
    "nyc.museum": true,
    "nyny.museum": true,
    "oceanographic.museum": true,
    "oceanographique.museum": true,
    "omaha.museum": true,
    "online.museum": true,
    "ontario.museum": true,
    "openair.museum": true,
    "oregon.museum": true,
    "oregontrail.museum": true,
    "otago.museum": true,
    "oxford.museum": true,
    "pacific.museum": true,
    "paderborn.museum": true,
    "palace.museum": true,
    "paleo.museum": true,
    "palmsprings.museum": true,
    "panama.museum": true,
    "paris.museum": true,
    "pasadena.museum": true,
    "pharmacy.museum": true,
    "philadelphia.museum": true,
    "philadelphiaarea.museum": true,
    "philately.museum": true,
    "phoenix.museum": true,
    "photography.museum": true,
    "pilots.museum": true,
    "pittsburgh.museum": true,
    "planetarium.museum": true,
    "plantation.museum": true,
    "plants.museum": true,
    "plaza.museum": true,
    "portal.museum": true,
    "portland.museum": true,
    "portlligat.museum": true,
    "posts-and-telecommunications.museum": true,
    "preservation.museum": true,
    "presidio.museum": true,
    "press.museum": true,
    "project.museum": true,
    "public.museum": true,
    "pubol.museum": true,
    "quebec.museum": true,
    "railroad.museum": true,
    "railway.museum": true,
    "research.museum": true,
    "resistance.museum": true,
    "riodejaneiro.museum": true,
    "rochester.museum": true,
    "rockart.museum": true,
    "roma.museum": true,
    "russia.museum": true,
    "saintlouis.museum": true,
    "salem.museum": true,
    "salvadordali.museum": true,
    "salzburg.museum": true,
    "sandiego.museum": true,
    "sanfrancisco.museum": true,
    "santabarbara.museum": true,
    "santacruz.museum": true,
    "santafe.museum": true,
    "saskatchewan.museum": true,
    "satx.museum": true,
    "savannahga.museum": true,
    "schlesisches.museum": true,
    "schoenbrunn.museum": true,
    "schokoladen.museum": true,
    "school.museum": true,
    "schweiz.museum": true,
    "science.museum": true,
    "scienceandhistory.museum": true,
    "scienceandindustry.museum": true,
    "sciencecenter.museum": true,
    "sciencecenters.museum": true,
    "science-fiction.museum": true,
    "sciencehistory.museum": true,
    "sciences.museum": true,
    "sciencesnaturelles.museum": true,
    "scotland.museum": true,
    "seaport.museum": true,
    "settlement.museum": true,
    "settlers.museum": true,
    "shell.museum": true,
    "sherbrooke.museum": true,
    "sibenik.museum": true,
    "silk.museum": true,
    "ski.museum": true,
    "skole.museum": true,
    "society.museum": true,
    "sologne.museum": true,
    "soundandvision.museum": true,
    "southcarolina.museum": true,
    "southwest.museum": true,
    "space.museum": true,
    "spy.museum": true,
    "square.museum": true,
    "stadt.museum": true,
    "stalbans.museum": true,
    "starnberg.museum": true,
    "state.museum": true,
    "stateofdelaware.museum": true,
    "station.museum": true,
    "steam.museum": true,
    "steiermark.museum": true,
    "stjohn.museum": true,
    "stockholm.museum": true,
    "stpetersburg.museum": true,
    "stuttgart.museum": true,
    "suisse.museum": true,
    "surgeonshall.museum": true,
    "surrey.museum": true,
    "svizzera.museum": true,
    "sweden.museum": true,
    "sydney.museum": true,
    "tank.museum": true,
    "tcm.museum": true,
    "technology.museum": true,
    "telekommunikation.museum": true,
    "television.museum": true,
    "texas.museum": true,
    "textile.museum": true,
    "theater.museum": true,
    "time.museum": true,
    "timekeeping.museum": true,
    "topology.museum": true,
    "torino.museum": true,
    "touch.museum": true,
    "town.museum": true,
    "transport.museum": true,
    "tree.museum": true,
    "trolley.museum": true,
    "trust.museum": true,
    "trustee.museum": true,
    "uhren.museum": true,
    "ulm.museum": true,
    "undersea.museum": true,
    "university.museum": true,
    "usa.museum": true,
    "usantiques.museum": true,
    "usarts.museum": true,
    "uscountryestate.museum": true,
    "usculture.museum": true,
    "usdecorativearts.museum": true,
    "usgarden.museum": true,
    "ushistory.museum": true,
    "ushuaia.museum": true,
    "uslivinghistory.museum": true,
    "utah.museum": true,
    "uvic.museum": true,
    "valley.museum": true,
    "vantaa.museum": true,
    "versailles.museum": true,
    "viking.museum": true,
    "village.museum": true,
    "virginia.museum": true,
    "virtual.museum": true,
    "virtuel.museum": true,
    "vlaanderen.museum": true,
    "volkenkunde.museum": true,
    "wales.museum": true,
    "wallonie.museum": true,
    "war.museum": true,
    "washingtondc.museum": true,
    "watchandclock.museum": true,
    "watch-and-clock.museum": true,
    "western.museum": true,
    "westfalen.museum": true,
    "whaling.museum": true,
    "wildlife.museum": true,
    "williamsburg.museum": true,
    "windmill.museum": true,
    "workshop.museum": true,
    "york.museum": true,
    "yorkshire.museum": true,
    "yosemite.museum": true,
    "youth.museum": true,
    "zoological.museum": true,
    "zoology.museum": true,
    "xn--9dbhblg6di.museum": true,
    "xn--h1aegh.museum": true,
    "mv": true,
    "aero.mv": true,
    "biz.mv": true,
    "com.mv": true,
    "coop.mv": true,
    "edu.mv": true,
    "gov.mv": true,
    "info.mv": true,
    "int.mv": true,
    "mil.mv": true,
    "museum.mv": true,
    "name.mv": true,
    "net.mv": true,
    "org.mv": true,
    "pro.mv": true,
    "mw": true,
    "ac.mw": true,
    "biz.mw": true,
    "co.mw": true,
    "com.mw": true,
    "coop.mw": true,
    "edu.mw": true,
    "gov.mw": true,
    "int.mw": true,
    "museum.mw": true,
    "net.mw": true,
    "org.mw": true,
    "mx": true,
    "com.mx": true,
    "org.mx": true,
    "gob.mx": true,
    "edu.mx": true,
    "net.mx": true,
    "my": true,
    "com.my": true,
    "net.my": true,
    "org.my": true,
    "gov.my": true,
    "edu.my": true,
    "mil.my": true,
    "name.my": true,
    "*.mz": true,
    "teledata.mz": false,
    "na": true,
    "info.na": true,
    "pro.na": true,
    "name.na": true,
    "school.na": true,
    "or.na": true,
    "dr.na": true,
    "us.na": true,
    "mx.na": true,
    "ca.na": true,
    "in.na": true,
    "cc.na": true,
    "tv.na": true,
    "ws.na": true,
    "mobi.na": true,
    "co.na": true,
    "com.na": true,
    "org.na": true,
    "name": true,
    "nc": true,
    "asso.nc": true,
    "ne": true,
    "net": true,
    "nf": true,
    "com.nf": true,
    "net.nf": true,
    "per.nf": true,
    "rec.nf": true,
    "web.nf": true,
    "arts.nf": true,
    "firm.nf": true,
    "info.nf": true,
    "other.nf": true,
    "store.nf": true,
    "ng": true,
    "com.ng": true,
    "edu.ng": true,
    "name.ng": true,
    "net.ng": true,
    "org.ng": true,
    "sch.ng": true,
    "gov.ng": true,
    "mil.ng": true,
    "mobi.ng": true,
    "*.ni": true,
    "nl": true,
    "bv.nl": true,
    "no": true,
    "fhs.no": true,
    "vgs.no": true,
    "fylkesbibl.no": true,
    "folkebibl.no": true,
    "museum.no": true,
    "idrett.no": true,
    "priv.no": true,
    "mil.no": true,
    "stat.no": true,
    "dep.no": true,
    "kommune.no": true,
    "herad.no": true,
    "aa.no": true,
    "ah.no": true,
    "bu.no": true,
    "fm.no": true,
    "hl.no": true,
    "hm.no": true,
    "jan-mayen.no": true,
    "mr.no": true,
    "nl.no": true,
    "nt.no": true,
    "of.no": true,
    "ol.no": true,
    "oslo.no": true,
    "rl.no": true,
    "sf.no": true,
    "st.no": true,
    "svalbard.no": true,
    "tm.no": true,
    "tr.no": true,
    "va.no": true,
    "vf.no": true,
    "gs.aa.no": true,
    "gs.ah.no": true,
    "gs.bu.no": true,
    "gs.fm.no": true,
    "gs.hl.no": true,
    "gs.hm.no": true,
    "gs.jan-mayen.no": true,
    "gs.mr.no": true,
    "gs.nl.no": true,
    "gs.nt.no": true,
    "gs.of.no": true,
    "gs.ol.no": true,
    "gs.oslo.no": true,
    "gs.rl.no": true,
    "gs.sf.no": true,
    "gs.st.no": true,
    "gs.svalbard.no": true,
    "gs.tm.no": true,
    "gs.tr.no": true,
    "gs.va.no": true,
    "gs.vf.no": true,
    "akrehamn.no": true,
    "xn--krehamn-dxa.no": true,
    "algard.no": true,
    "xn--lgrd-poac.no": true,
    "arna.no": true,
    "brumunddal.no": true,
    "bryne.no": true,
    "bronnoysund.no": true,
    "xn--brnnysund-m8ac.no": true,
    "drobak.no": true,
    "xn--drbak-wua.no": true,
    "egersund.no": true,
    "fetsund.no": true,
    "floro.no": true,
    "xn--flor-jra.no": true,
    "fredrikstad.no": true,
    "hokksund.no": true,
    "honefoss.no": true,
    "xn--hnefoss-q1a.no": true,
    "jessheim.no": true,
    "jorpeland.no": true,
    "xn--jrpeland-54a.no": true,
    "kirkenes.no": true,
    "kopervik.no": true,
    "krokstadelva.no": true,
    "langevag.no": true,
    "xn--langevg-jxa.no": true,
    "leirvik.no": true,
    "mjondalen.no": true,
    "xn--mjndalen-64a.no": true,
    "mo-i-rana.no": true,
    "mosjoen.no": true,
    "xn--mosjen-eya.no": true,
    "nesoddtangen.no": true,
    "orkanger.no": true,
    "osoyro.no": true,
    "xn--osyro-wua.no": true,
    "raholt.no": true,
    "xn--rholt-mra.no": true,
    "sandnessjoen.no": true,
    "xn--sandnessjen-ogb.no": true,
    "skedsmokorset.no": true,
    "slattum.no": true,
    "spjelkavik.no": true,
    "stathelle.no": true,
    "stavern.no": true,
    "stjordalshalsen.no": true,
    "xn--stjrdalshalsen-sqb.no": true,
    "tananger.no": true,
    "tranby.no": true,
    "vossevangen.no": true,
    "afjord.no": true,
    "xn--fjord-lra.no": true,
    "agdenes.no": true,
    "al.no": true,
    "xn--l-1fa.no": true,
    "alesund.no": true,
    "xn--lesund-hua.no": true,
    "alstahaug.no": true,
    "alta.no": true,
    "xn--lt-liac.no": true,
    "alaheadju.no": true,
    "xn--laheadju-7ya.no": true,
    "alvdal.no": true,
    "amli.no": true,
    "xn--mli-tla.no": true,
    "amot.no": true,
    "xn--mot-tla.no": true,
    "andebu.no": true,
    "andoy.no": true,
    "xn--andy-ira.no": true,
    "andasuolo.no": true,
    "ardal.no": true,
    "xn--rdal-poa.no": true,
    "aremark.no": true,
    "arendal.no": true,
    "xn--s-1fa.no": true,
    "aseral.no": true,
    "xn--seral-lra.no": true,
    "asker.no": true,
    "askim.no": true,
    "askvoll.no": true,
    "askoy.no": true,
    "xn--asky-ira.no": true,
    "asnes.no": true,
    "xn--snes-poa.no": true,
    "audnedaln.no": true,
    "aukra.no": true,
    "aure.no": true,
    "aurland.no": true,
    "aurskog-holand.no": true,
    "xn--aurskog-hland-jnb.no": true,
    "austevoll.no": true,
    "austrheim.no": true,
    "averoy.no": true,
    "xn--avery-yua.no": true,
    "balestrand.no": true,
    "ballangen.no": true,
    "balat.no": true,
    "xn--blt-elab.no": true,
    "balsfjord.no": true,
    "bahccavuotna.no": true,
    "xn--bhccavuotna-k7a.no": true,
    "bamble.no": true,
    "bardu.no": true,
    "beardu.no": true,
    "beiarn.no": true,
    "bajddar.no": true,
    "xn--bjddar-pta.no": true,
    "baidar.no": true,
    "xn--bidr-5nac.no": true,
    "berg.no": true,
    "bergen.no": true,
    "berlevag.no": true,
    "xn--berlevg-jxa.no": true,
    "bearalvahki.no": true,
    "xn--bearalvhki-y4a.no": true,
    "bindal.no": true,
    "birkenes.no": true,
    "bjarkoy.no": true,
    "xn--bjarky-fya.no": true,
    "bjerkreim.no": true,
    "bjugn.no": true,
    "bodo.no": true,
    "xn--bod-2na.no": true,
    "badaddja.no": true,
    "xn--bdddj-mrabd.no": true,
    "budejju.no": true,
    "bokn.no": true,
    "bremanger.no": true,
    "bronnoy.no": true,
    "xn--brnny-wuac.no": true,
    "bygland.no": true,
    "bykle.no": true,
    "barum.no": true,
    "xn--brum-voa.no": true,
    "bo.telemark.no": true,
    "xn--b-5ga.telemark.no": true,
    "bo.nordland.no": true,
    "xn--b-5ga.nordland.no": true,
    "bievat.no": true,
    "xn--bievt-0qa.no": true,
    "bomlo.no": true,
    "xn--bmlo-gra.no": true,
    "batsfjord.no": true,
    "xn--btsfjord-9za.no": true,
    "bahcavuotna.no": true,
    "xn--bhcavuotna-s4a.no": true,
    "dovre.no": true,
    "drammen.no": true,
    "drangedal.no": true,
    "dyroy.no": true,
    "xn--dyry-ira.no": true,
    "donna.no": true,
    "xn--dnna-gra.no": true,
    "eid.no": true,
    "eidfjord.no": true,
    "eidsberg.no": true,
    "eidskog.no": true,
    "eidsvoll.no": true,
    "eigersund.no": true,
    "elverum.no": true,
    "enebakk.no": true,
    "engerdal.no": true,
    "etne.no": true,
    "etnedal.no": true,
    "evenes.no": true,
    "evenassi.no": true,
    "xn--eveni-0qa01ga.no": true,
    "evje-og-hornnes.no": true,
    "farsund.no": true,
    "fauske.no": true,
    "fuossko.no": true,
    "fuoisku.no": true,
    "fedje.no": true,
    "fet.no": true,
    "finnoy.no": true,
    "xn--finny-yua.no": true,
    "fitjar.no": true,
    "fjaler.no": true,
    "fjell.no": true,
    "flakstad.no": true,
    "flatanger.no": true,
    "flekkefjord.no": true,
    "flesberg.no": true,
    "flora.no": true,
    "fla.no": true,
    "xn--fl-zia.no": true,
    "folldal.no": true,
    "forsand.no": true,
    "fosnes.no": true,
    "frei.no": true,
    "frogn.no": true,
    "froland.no": true,
    "frosta.no": true,
    "frana.no": true,
    "xn--frna-woa.no": true,
    "froya.no": true,
    "xn--frya-hra.no": true,
    "fusa.no": true,
    "fyresdal.no": true,
    "forde.no": true,
    "xn--frde-gra.no": true,
    "gamvik.no": true,
    "gangaviika.no": true,
    "xn--ggaviika-8ya47h.no": true,
    "gaular.no": true,
    "gausdal.no": true,
    "gildeskal.no": true,
    "xn--gildeskl-g0a.no": true,
    "giske.no": true,
    "gjemnes.no": true,
    "gjerdrum.no": true,
    "gjerstad.no": true,
    "gjesdal.no": true,
    "gjovik.no": true,
    "xn--gjvik-wua.no": true,
    "gloppen.no": true,
    "gol.no": true,
    "gran.no": true,
    "grane.no": true,
    "granvin.no": true,
    "gratangen.no": true,
    "grimstad.no": true,
    "grong.no": true,
    "kraanghke.no": true,
    "xn--kranghke-b0a.no": true,
    "grue.no": true,
    "gulen.no": true,
    "hadsel.no": true,
    "halden.no": true,
    "halsa.no": true,
    "hamar.no": true,
    "hamaroy.no": true,
    "habmer.no": true,
    "xn--hbmer-xqa.no": true,
    "hapmir.no": true,
    "xn--hpmir-xqa.no": true,
    "hammerfest.no": true,
    "hammarfeasta.no": true,
    "xn--hmmrfeasta-s4ac.no": true,
    "haram.no": true,
    "hareid.no": true,
    "harstad.no": true,
    "hasvik.no": true,
    "aknoluokta.no": true,
    "xn--koluokta-7ya57h.no": true,
    "hattfjelldal.no": true,
    "aarborte.no": true,
    "haugesund.no": true,
    "hemne.no": true,
    "hemnes.no": true,
    "hemsedal.no": true,
    "heroy.more-og-romsdal.no": true,
    "xn--hery-ira.xn--mre-og-romsdal-qqb.no": true,
    "heroy.nordland.no": true,
    "xn--hery-ira.nordland.no": true,
    "hitra.no": true,
    "hjartdal.no": true,
    "hjelmeland.no": true,
    "hobol.no": true,
    "xn--hobl-ira.no": true,
    "hof.no": true,
    "hol.no": true,
    "hole.no": true,
    "holmestrand.no": true,
    "holtalen.no": true,
    "xn--holtlen-hxa.no": true,
    "hornindal.no": true,
    "horten.no": true,
    "hurdal.no": true,
    "hurum.no": true,
    "hvaler.no": true,
    "hyllestad.no": true,
    "hagebostad.no": true,
    "xn--hgebostad-g3a.no": true,
    "hoyanger.no": true,
    "xn--hyanger-q1a.no": true,
    "hoylandet.no": true,
    "xn--hylandet-54a.no": true,
    "ha.no": true,
    "xn--h-2fa.no": true,
    "ibestad.no": true,
    "inderoy.no": true,
    "xn--indery-fya.no": true,
    "iveland.no": true,
    "jevnaker.no": true,
    "jondal.no": true,
    "jolster.no": true,
    "xn--jlster-bya.no": true,
    "karasjok.no": true,
    "karasjohka.no": true,
    "xn--krjohka-hwab49j.no": true,
    "karlsoy.no": true,
    "galsa.no": true,
    "xn--gls-elac.no": true,
    "karmoy.no": true,
    "xn--karmy-yua.no": true,
    "kautokeino.no": true,
    "guovdageaidnu.no": true,
    "klepp.no": true,
    "klabu.no": true,
    "xn--klbu-woa.no": true,
    "kongsberg.no": true,
    "kongsvinger.no": true,
    "kragero.no": true,
    "xn--krager-gya.no": true,
    "kristiansand.no": true,
    "kristiansund.no": true,
    "krodsherad.no": true,
    "xn--krdsherad-m8a.no": true,
    "kvalsund.no": true,
    "rahkkeravju.no": true,
    "xn--rhkkervju-01af.no": true,
    "kvam.no": true,
    "kvinesdal.no": true,
    "kvinnherad.no": true,
    "kviteseid.no": true,
    "kvitsoy.no": true,
    "xn--kvitsy-fya.no": true,
    "kvafjord.no": true,
    "xn--kvfjord-nxa.no": true,
    "giehtavuoatna.no": true,
    "kvanangen.no": true,
    "xn--kvnangen-k0a.no": true,
    "navuotna.no": true,
    "xn--nvuotna-hwa.no": true,
    "kafjord.no": true,
    "xn--kfjord-iua.no": true,
    "gaivuotna.no": true,
    "xn--givuotna-8ya.no": true,
    "larvik.no": true,
    "lavangen.no": true,
    "lavagis.no": true,
    "loabat.no": true,
    "xn--loabt-0qa.no": true,
    "lebesby.no": true,
    "davvesiida.no": true,
    "leikanger.no": true,
    "leirfjord.no": true,
    "leka.no": true,
    "leksvik.no": true,
    "lenvik.no": true,
    "leangaviika.no": true,
    "xn--leagaviika-52b.no": true,
    "lesja.no": true,
    "levanger.no": true,
    "lier.no": true,
    "lierne.no": true,
    "lillehammer.no": true,
    "lillesand.no": true,
    "lindesnes.no": true,
    "lindas.no": true,
    "xn--linds-pra.no": true,
    "lom.no": true,
    "loppa.no": true,
    "lahppi.no": true,
    "xn--lhppi-xqa.no": true,
    "lund.no": true,
    "lunner.no": true,
    "luroy.no": true,
    "xn--lury-ira.no": true,
    "luster.no": true,
    "lyngdal.no": true,
    "lyngen.no": true,
    "ivgu.no": true,
    "lardal.no": true,
    "lerdal.no": true,
    "xn--lrdal-sra.no": true,
    "lodingen.no": true,
    "xn--ldingen-q1a.no": true,
    "lorenskog.no": true,
    "xn--lrenskog-54a.no": true,
    "loten.no": true,
    "xn--lten-gra.no": true,
    "malvik.no": true,
    "masoy.no": true,
    "xn--msy-ula0h.no": true,
    "muosat.no": true,
    "xn--muost-0qa.no": true,
    "mandal.no": true,
    "marker.no": true,
    "marnardal.no": true,
    "masfjorden.no": true,
    "meland.no": true,
    "meldal.no": true,
    "melhus.no": true,
    "meloy.no": true,
    "xn--mely-ira.no": true,
    "meraker.no": true,
    "xn--merker-kua.no": true,
    "moareke.no": true,
    "xn--moreke-jua.no": true,
    "midsund.no": true,
    "midtre-gauldal.no": true,
    "modalen.no": true,
    "modum.no": true,
    "molde.no": true,
    "moskenes.no": true,
    "moss.no": true,
    "mosvik.no": true,
    "malselv.no": true,
    "xn--mlselv-iua.no": true,
    "malatvuopmi.no": true,
    "xn--mlatvuopmi-s4a.no": true,
    "namdalseid.no": true,
    "aejrie.no": true,
    "namsos.no": true,
    "namsskogan.no": true,
    "naamesjevuemie.no": true,
    "xn--nmesjevuemie-tcba.no": true,
    "laakesvuemie.no": true,
    "nannestad.no": true,
    "narvik.no": true,
    "narviika.no": true,
    "naustdal.no": true,
    "nedre-eiker.no": true,
    "nes.akershus.no": true,
    "nes.buskerud.no": true,
    "nesna.no": true,
    "nesodden.no": true,
    "nesseby.no": true,
    "unjarga.no": true,
    "xn--unjrga-rta.no": true,
    "nesset.no": true,
    "nissedal.no": true,
    "nittedal.no": true,
    "nord-aurdal.no": true,
    "nord-fron.no": true,
    "nord-odal.no": true,
    "norddal.no": true,
    "nordkapp.no": true,
    "davvenjarga.no": true,
    "xn--davvenjrga-y4a.no": true,
    "nordre-land.no": true,
    "nordreisa.no": true,
    "raisa.no": true,
    "xn--risa-5na.no": true,
    "nore-og-uvdal.no": true,
    "notodden.no": true,
    "naroy.no": true,
    "xn--nry-yla5g.no": true,
    "notteroy.no": true,
    "xn--nttery-byae.no": true,
    "odda.no": true,
    "oksnes.no": true,
    "xn--ksnes-uua.no": true,
    "oppdal.no": true,
    "oppegard.no": true,
    "xn--oppegrd-ixa.no": true,
    "orkdal.no": true,
    "orland.no": true,
    "xn--rland-uua.no": true,
    "orskog.no": true,
    "xn--rskog-uua.no": true,
    "orsta.no": true,
    "xn--rsta-fra.no": true,
    "os.hedmark.no": true,
    "os.hordaland.no": true,
    "osen.no": true,
    "osteroy.no": true,
    "xn--ostery-fya.no": true,
    "ostre-toten.no": true,
    "xn--stre-toten-zcb.no": true,
    "overhalla.no": true,
    "ovre-eiker.no": true,
    "xn--vre-eiker-k8a.no": true,
    "oyer.no": true,
    "xn--yer-zna.no": true,
    "oygarden.no": true,
    "xn--ygarden-p1a.no": true,
    "oystre-slidre.no": true,
    "xn--ystre-slidre-ujb.no": true,
    "porsanger.no": true,
    "porsangu.no": true,
    "xn--porsgu-sta26f.no": true,
    "porsgrunn.no": true,
    "radoy.no": true,
    "xn--rady-ira.no": true,
    "rakkestad.no": true,
    "rana.no": true,
    "ruovat.no": true,
    "randaberg.no": true,
    "rauma.no": true,
    "rendalen.no": true,
    "rennebu.no": true,
    "rennesoy.no": true,
    "xn--rennesy-v1a.no": true,
    "rindal.no": true,
    "ringebu.no": true,
    "ringerike.no": true,
    "ringsaker.no": true,
    "rissa.no": true,
    "risor.no": true,
    "xn--risr-ira.no": true,
    "roan.no": true,
    "rollag.no": true,
    "rygge.no": true,
    "ralingen.no": true,
    "xn--rlingen-mxa.no": true,
    "rodoy.no": true,
    "xn--rdy-0nab.no": true,
    "romskog.no": true,
    "xn--rmskog-bya.no": true,
    "roros.no": true,
    "xn--rros-gra.no": true,
    "rost.no": true,
    "xn--rst-0na.no": true,
    "royken.no": true,
    "xn--ryken-vua.no": true,
    "royrvik.no": true,
    "xn--ryrvik-bya.no": true,
    "rade.no": true,
    "xn--rde-ula.no": true,
    "salangen.no": true,
    "siellak.no": true,
    "saltdal.no": true,
    "salat.no": true,
    "xn--slt-elab.no": true,
    "xn--slat-5na.no": true,
    "samnanger.no": true,
    "sande.more-og-romsdal.no": true,
    "sande.xn--mre-og-romsdal-qqb.no": true,
    "sande.vestfold.no": true,
    "sandefjord.no": true,
    "sandnes.no": true,
    "sandoy.no": true,
    "xn--sandy-yua.no": true,
    "sarpsborg.no": true,
    "sauda.no": true,
    "sauherad.no": true,
    "sel.no": true,
    "selbu.no": true,
    "selje.no": true,
    "seljord.no": true,
    "sigdal.no": true,
    "siljan.no": true,
    "sirdal.no": true,
    "skaun.no": true,
    "skedsmo.no": true,
    "ski.no": true,
    "skien.no": true,
    "skiptvet.no": true,
    "skjervoy.no": true,
    "xn--skjervy-v1a.no": true,
    "skierva.no": true,
    "xn--skierv-uta.no": true,
    "skjak.no": true,
    "xn--skjk-soa.no": true,
    "skodje.no": true,
    "skanland.no": true,
    "xn--sknland-fxa.no": true,
    "skanit.no": true,
    "xn--sknit-yqa.no": true,
    "smola.no": true,
    "xn--smla-hra.no": true,
    "snillfjord.no": true,
    "snasa.no": true,
    "xn--snsa-roa.no": true,
    "snoasa.no": true,
    "snaase.no": true,
    "xn--snase-nra.no": true,
    "sogndal.no": true,
    "sokndal.no": true,
    "sola.no": true,
    "solund.no": true,
    "songdalen.no": true,
    "sortland.no": true,
    "spydeberg.no": true,
    "stange.no": true,
    "stavanger.no": true,
    "steigen.no": true,
    "steinkjer.no": true,
    "stjordal.no": true,
    "xn--stjrdal-s1a.no": true,
    "stokke.no": true,
    "stor-elvdal.no": true,
    "stord.no": true,
    "stordal.no": true,
    "storfjord.no": true,
    "omasvuotna.no": true,
    "strand.no": true,
    "stranda.no": true,
    "stryn.no": true,
    "sula.no": true,
    "suldal.no": true,
    "sund.no": true,
    "sunndal.no": true,
    "surnadal.no": true,
    "sveio.no": true,
    "svelvik.no": true,
    "sykkylven.no": true,
    "sogne.no": true,
    "xn--sgne-gra.no": true,
    "somna.no": true,
    "xn--smna-gra.no": true,
    "sondre-land.no": true,
    "xn--sndre-land-0cb.no": true,
    "sor-aurdal.no": true,
    "xn--sr-aurdal-l8a.no": true,
    "sor-fron.no": true,
    "xn--sr-fron-q1a.no": true,
    "sor-odal.no": true,
    "xn--sr-odal-q1a.no": true,
    "sor-varanger.no": true,
    "xn--sr-varanger-ggb.no": true,
    "matta-varjjat.no": true,
    "xn--mtta-vrjjat-k7af.no": true,
    "sorfold.no": true,
    "xn--srfold-bya.no": true,
    "sorreisa.no": true,
    "xn--srreisa-q1a.no": true,
    "sorum.no": true,
    "xn--srum-gra.no": true,
    "tana.no": true,
    "deatnu.no": true,
    "time.no": true,
    "tingvoll.no": true,
    "tinn.no": true,
    "tjeldsund.no": true,
    "dielddanuorri.no": true,
    "tjome.no": true,
    "xn--tjme-hra.no": true,
    "tokke.no": true,
    "tolga.no": true,
    "torsken.no": true,
    "tranoy.no": true,
    "xn--trany-yua.no": true,
    "tromso.no": true,
    "xn--troms-zua.no": true,
    "tromsa.no": true,
    "romsa.no": true,
    "trondheim.no": true,
    "troandin.no": true,
    "trysil.no": true,
    "trana.no": true,
    "xn--trna-woa.no": true,
    "trogstad.no": true,
    "xn--trgstad-r1a.no": true,
    "tvedestrand.no": true,
    "tydal.no": true,
    "tynset.no": true,
    "tysfjord.no": true,
    "divtasvuodna.no": true,
    "divttasvuotna.no": true,
    "tysnes.no": true,
    "tysvar.no": true,
    "xn--tysvr-vra.no": true,
    "tonsberg.no": true,
    "xn--tnsberg-q1a.no": true,
    "ullensaker.no": true,
    "ullensvang.no": true,
    "ulvik.no": true,
    "utsira.no": true,
    "vadso.no": true,
    "xn--vads-jra.no": true,
    "cahcesuolo.no": true,
    "xn--hcesuolo-7ya35b.no": true,
    "vaksdal.no": true,
    "valle.no": true,
    "vang.no": true,
    "vanylven.no": true,
    "vardo.no": true,
    "xn--vard-jra.no": true,
    "varggat.no": true,
    "xn--vrggt-xqad.no": true,
    "vefsn.no": true,
    "vaapste.no": true,
    "vega.no": true,
    "vegarshei.no": true,
    "xn--vegrshei-c0a.no": true,
    "vennesla.no": true,
    "verdal.no": true,
    "verran.no": true,
    "vestby.no": true,
    "vestnes.no": true,
    "vestre-slidre.no": true,
    "vestre-toten.no": true,
    "vestvagoy.no": true,
    "xn--vestvgy-ixa6o.no": true,
    "vevelstad.no": true,
    "vik.no": true,
    "vikna.no": true,
    "vindafjord.no": true,
    "volda.no": true,
    "voss.no": true,
    "varoy.no": true,
    "xn--vry-yla5g.no": true,
    "vagan.no": true,
    "xn--vgan-qoa.no": true,
    "voagat.no": true,
    "vagsoy.no": true,
    "xn--vgsy-qoa0j.no": true,
    "vaga.no": true,
    "xn--vg-yiab.no": true,
    "valer.ostfold.no": true,
    "xn--vler-qoa.xn--stfold-9xa.no": true,
    "valer.hedmark.no": true,
    "xn--vler-qoa.hedmark.no": true,
    "*.np": true,
    "nr": true,
    "biz.nr": true,
    "info.nr": true,
    "gov.nr": true,
    "edu.nr": true,
    "org.nr": true,
    "net.nr": true,
    "com.nr": true,
    "nu": true,
    "nz": true,
    "ac.nz": true,
    "co.nz": true,
    "cri.nz": true,
    "geek.nz": true,
    "gen.nz": true,
    "govt.nz": true,
    "health.nz": true,
    "iwi.nz": true,
    "kiwi.nz": true,
    "maori.nz": true,
    "mil.nz": true,
    "xn--mori-qsa.nz": true,
    "net.nz": true,
    "org.nz": true,
    "parliament.nz": true,
    "school.nz": true,
    "om": true,
    "co.om": true,
    "com.om": true,
    "edu.om": true,
    "gov.om": true,
    "med.om": true,
    "museum.om": true,
    "net.om": true,
    "org.om": true,
    "pro.om": true,
    "org": true,
    "pa": true,
    "ac.pa": true,
    "gob.pa": true,
    "com.pa": true,
    "org.pa": true,
    "sld.pa": true,
    "edu.pa": true,
    "net.pa": true,
    "ing.pa": true,
    "abo.pa": true,
    "med.pa": true,
    "nom.pa": true,
    "pe": true,
    "edu.pe": true,
    "gob.pe": true,
    "nom.pe": true,
    "mil.pe": true,
    "org.pe": true,
    "com.pe": true,
    "net.pe": true,
    "pf": true,
    "com.pf": true,
    "org.pf": true,
    "edu.pf": true,
    "*.pg": true,
    "ph": true,
    "com.ph": true,
    "net.ph": true,
    "org.ph": true,
    "gov.ph": true,
    "edu.ph": true,
    "ngo.ph": true,
    "mil.ph": true,
    "i.ph": true,
    "pk": true,
    "com.pk": true,
    "net.pk": true,
    "edu.pk": true,
    "org.pk": true,
    "fam.pk": true,
    "biz.pk": true,
    "web.pk": true,
    "gov.pk": true,
    "gob.pk": true,
    "gok.pk": true,
    "gon.pk": true,
    "gop.pk": true,
    "gos.pk": true,
    "info.pk": true,
    "pl": true,
    "com.pl": true,
    "net.pl": true,
    "org.pl": true,
    "aid.pl": true,
    "agro.pl": true,
    "atm.pl": true,
    "auto.pl": true,
    "biz.pl": true,
    "edu.pl": true,
    "gmina.pl": true,
    "gsm.pl": true,
    "info.pl": true,
    "mail.pl": true,
    "miasta.pl": true,
    "media.pl": true,
    "mil.pl": true,
    "nieruchomosci.pl": true,
    "nom.pl": true,
    "pc.pl": true,
    "powiat.pl": true,
    "priv.pl": true,
    "realestate.pl": true,
    "rel.pl": true,
    "sex.pl": true,
    "shop.pl": true,
    "sklep.pl": true,
    "sos.pl": true,
    "szkola.pl": true,
    "targi.pl": true,
    "tm.pl": true,
    "tourism.pl": true,
    "travel.pl": true,
    "turystyka.pl": true,
    "gov.pl": true,
    "ap.gov.pl": true,
    "ic.gov.pl": true,
    "is.gov.pl": true,
    "us.gov.pl": true,
    "kmpsp.gov.pl": true,
    "kppsp.gov.pl": true,
    "kwpsp.gov.pl": true,
    "psp.gov.pl": true,
    "wskr.gov.pl": true,
    "kwp.gov.pl": true,
    "mw.gov.pl": true,
    "ug.gov.pl": true,
    "um.gov.pl": true,
    "umig.gov.pl": true,
    "ugim.gov.pl": true,
    "upow.gov.pl": true,
    "uw.gov.pl": true,
    "starostwo.gov.pl": true,
    "pa.gov.pl": true,
    "po.gov.pl": true,
    "psse.gov.pl": true,
    "pup.gov.pl": true,
    "rzgw.gov.pl": true,
    "sa.gov.pl": true,
    "so.gov.pl": true,
    "sr.gov.pl": true,
    "wsa.gov.pl": true,
    "sko.gov.pl": true,
    "uzs.gov.pl": true,
    "wiih.gov.pl": true,
    "winb.gov.pl": true,
    "pinb.gov.pl": true,
    "wios.gov.pl": true,
    "witd.gov.pl": true,
    "wzmiuw.gov.pl": true,
    "piw.gov.pl": true,
    "wiw.gov.pl": true,
    "griw.gov.pl": true,
    "wif.gov.pl": true,
    "oum.gov.pl": true,
    "sdn.gov.pl": true,
    "zp.gov.pl": true,
    "uppo.gov.pl": true,
    "mup.gov.pl": true,
    "wuoz.gov.pl": true,
    "konsulat.gov.pl": true,
    "oirm.gov.pl": true,
    "augustow.pl": true,
    "babia-gora.pl": true,
    "bedzin.pl": true,
    "beskidy.pl": true,
    "bialowieza.pl": true,
    "bialystok.pl": true,
    "bielawa.pl": true,
    "bieszczady.pl": true,
    "boleslawiec.pl": true,
    "bydgoszcz.pl": true,
    "bytom.pl": true,
    "cieszyn.pl": true,
    "czeladz.pl": true,
    "czest.pl": true,
    "dlugoleka.pl": true,
    "elblag.pl": true,
    "elk.pl": true,
    "glogow.pl": true,
    "gniezno.pl": true,
    "gorlice.pl": true,
    "grajewo.pl": true,
    "ilawa.pl": true,
    "jaworzno.pl": true,
    "jelenia-gora.pl": true,
    "jgora.pl": true,
    "kalisz.pl": true,
    "kazimierz-dolny.pl": true,
    "karpacz.pl": true,
    "kartuzy.pl": true,
    "kaszuby.pl": true,
    "katowice.pl": true,
    "kepno.pl": true,
    "ketrzyn.pl": true,
    "klodzko.pl": true,
    "kobierzyce.pl": true,
    "kolobrzeg.pl": true,
    "konin.pl": true,
    "konskowola.pl": true,
    "kutno.pl": true,
    "lapy.pl": true,
    "lebork.pl": true,
    "legnica.pl": true,
    "lezajsk.pl": true,
    "limanowa.pl": true,
    "lomza.pl": true,
    "lowicz.pl": true,
    "lubin.pl": true,
    "lukow.pl": true,
    "malbork.pl": true,
    "malopolska.pl": true,
    "mazowsze.pl": true,
    "mazury.pl": true,
    "mielec.pl": true,
    "mielno.pl": true,
    "mragowo.pl": true,
    "naklo.pl": true,
    "nowaruda.pl": true,
    "nysa.pl": true,
    "olawa.pl": true,
    "olecko.pl": true,
    "olkusz.pl": true,
    "olsztyn.pl": true,
    "opoczno.pl": true,
    "opole.pl": true,
    "ostroda.pl": true,
    "ostroleka.pl": true,
    "ostrowiec.pl": true,
    "ostrowwlkp.pl": true,
    "pila.pl": true,
    "pisz.pl": true,
    "podhale.pl": true,
    "podlasie.pl": true,
    "polkowice.pl": true,
    "pomorze.pl": true,
    "pomorskie.pl": true,
    "prochowice.pl": true,
    "pruszkow.pl": true,
    "przeworsk.pl": true,
    "pulawy.pl": true,
    "radom.pl": true,
    "rawa-maz.pl": true,
    "rybnik.pl": true,
    "rzeszow.pl": true,
    "sanok.pl": true,
    "sejny.pl": true,
    "slask.pl": true,
    "slupsk.pl": true,
    "sosnowiec.pl": true,
    "stalowa-wola.pl": true,
    "skoczow.pl": true,
    "starachowice.pl": true,
    "stargard.pl": true,
    "suwalki.pl": true,
    "swidnica.pl": true,
    "swiebodzin.pl": true,
    "swinoujscie.pl": true,
    "szczecin.pl": true,
    "szczytno.pl": true,
    "tarnobrzeg.pl": true,
    "tgory.pl": true,
    "turek.pl": true,
    "tychy.pl": true,
    "ustka.pl": true,
    "walbrzych.pl": true,
    "warmia.pl": true,
    "warszawa.pl": true,
    "waw.pl": true,
    "wegrow.pl": true,
    "wielun.pl": true,
    "wlocl.pl": true,
    "wloclawek.pl": true,
    "wodzislaw.pl": true,
    "wolomin.pl": true,
    "wroclaw.pl": true,
    "zachpomor.pl": true,
    "zagan.pl": true,
    "zarow.pl": true,
    "zgora.pl": true,
    "zgorzelec.pl": true,
    "pm": true,
    "pn": true,
    "gov.pn": true,
    "co.pn": true,
    "org.pn": true,
    "edu.pn": true,
    "net.pn": true,
    "post": true,
    "pr": true,
    "com.pr": true,
    "net.pr": true,
    "org.pr": true,
    "gov.pr": true,
    "edu.pr": true,
    "isla.pr": true,
    "pro.pr": true,
    "biz.pr": true,
    "info.pr": true,
    "name.pr": true,
    "est.pr": true,
    "prof.pr": true,
    "ac.pr": true,
    "pro": true,
    "aca.pro": true,
    "bar.pro": true,
    "cpa.pro": true,
    "jur.pro": true,
    "law.pro": true,
    "med.pro": true,
    "eng.pro": true,
    "ps": true,
    "edu.ps": true,
    "gov.ps": true,
    "sec.ps": true,
    "plo.ps": true,
    "com.ps": true,
    "org.ps": true,
    "net.ps": true,
    "pt": true,
    "net.pt": true,
    "gov.pt": true,
    "org.pt": true,
    "edu.pt": true,
    "int.pt": true,
    "publ.pt": true,
    "com.pt": true,
    "nome.pt": true,
    "pw": true,
    "co.pw": true,
    "ne.pw": true,
    "or.pw": true,
    "ed.pw": true,
    "go.pw": true,
    "belau.pw": true,
    "py": true,
    "com.py": true,
    "coop.py": true,
    "edu.py": true,
    "gov.py": true,
    "mil.py": true,
    "net.py": true,
    "org.py": true,
    "qa": true,
    "com.qa": true,
    "edu.qa": true,
    "gov.qa": true,
    "mil.qa": true,
    "name.qa": true,
    "net.qa": true,
    "org.qa": true,
    "sch.qa": true,
    "re": true,
    "com.re": true,
    "asso.re": true,
    "nom.re": true,
    "ro": true,
    "com.ro": true,
    "org.ro": true,
    "tm.ro": true,
    "nt.ro": true,
    "nom.ro": true,
    "info.ro": true,
    "rec.ro": true,
    "arts.ro": true,
    "firm.ro": true,
    "store.ro": true,
    "www.ro": true,
    "rs": true,
    "co.rs": true,
    "org.rs": true,
    "edu.rs": true,
    "ac.rs": true,
    "gov.rs": true,
    "in.rs": true,
    "ru": true,
    "ac.ru": true,
    "com.ru": true,
    "edu.ru": true,
    "int.ru": true,
    "net.ru": true,
    "org.ru": true,
    "pp.ru": true,
    "adygeya.ru": true,
    "altai.ru": true,
    "amur.ru": true,
    "arkhangelsk.ru": true,
    "astrakhan.ru": true,
    "bashkiria.ru": true,
    "belgorod.ru": true,
    "bir.ru": true,
    "bryansk.ru": true,
    "buryatia.ru": true,
    "cbg.ru": true,
    "chel.ru": true,
    "chelyabinsk.ru": true,
    "chita.ru": true,
    "chukotka.ru": true,
    "chuvashia.ru": true,
    "dagestan.ru": true,
    "dudinka.ru": true,
    "e-burg.ru": true,
    "grozny.ru": true,
    "irkutsk.ru": true,
    "ivanovo.ru": true,
    "izhevsk.ru": true,
    "jar.ru": true,
    "joshkar-ola.ru": true,
    "kalmykia.ru": true,
    "kaluga.ru": true,
    "kamchatka.ru": true,
    "karelia.ru": true,
    "kazan.ru": true,
    "kchr.ru": true,
    "kemerovo.ru": true,
    "khabarovsk.ru": true,
    "khakassia.ru": true,
    "khv.ru": true,
    "kirov.ru": true,
    "koenig.ru": true,
    "komi.ru": true,
    "kostroma.ru": true,
    "krasnoyarsk.ru": true,
    "kuban.ru": true,
    "kurgan.ru": true,
    "kursk.ru": true,
    "lipetsk.ru": true,
    "magadan.ru": true,
    "mari.ru": true,
    "mari-el.ru": true,
    "marine.ru": true,
    "mordovia.ru": true,
    "msk.ru": true,
    "murmansk.ru": true,
    "nalchik.ru": true,
    "nnov.ru": true,
    "nov.ru": true,
    "novosibirsk.ru": true,
    "nsk.ru": true,
    "omsk.ru": true,
    "orenburg.ru": true,
    "oryol.ru": true,
    "palana.ru": true,
    "penza.ru": true,
    "perm.ru": true,
    "ptz.ru": true,
    "rnd.ru": true,
    "ryazan.ru": true,
    "sakhalin.ru": true,
    "samara.ru": true,
    "saratov.ru": true,
    "simbirsk.ru": true,
    "smolensk.ru": true,
    "spb.ru": true,
    "stavropol.ru": true,
    "stv.ru": true,
    "surgut.ru": true,
    "tambov.ru": true,
    "tatarstan.ru": true,
    "tom.ru": true,
    "tomsk.ru": true,
    "tsaritsyn.ru": true,
    "tsk.ru": true,
    "tula.ru": true,
    "tuva.ru": true,
    "tver.ru": true,
    "tyumen.ru": true,
    "udm.ru": true,
    "udmurtia.ru": true,
    "ulan-ude.ru": true,
    "vladikavkaz.ru": true,
    "vladimir.ru": true,
    "vladivostok.ru": true,
    "volgograd.ru": true,
    "vologda.ru": true,
    "voronezh.ru": true,
    "vrn.ru": true,
    "vyatka.ru": true,
    "yakutia.ru": true,
    "yamal.ru": true,
    "yaroslavl.ru": true,
    "yekaterinburg.ru": true,
    "yuzhno-sakhalinsk.ru": true,
    "amursk.ru": true,
    "baikal.ru": true,
    "cmw.ru": true,
    "fareast.ru": true,
    "jamal.ru": true,
    "kms.ru": true,
    "k-uralsk.ru": true,
    "kustanai.ru": true,
    "kuzbass.ru": true,
    "magnitka.ru": true,
    "mytis.ru": true,
    "nakhodka.ru": true,
    "nkz.ru": true,
    "norilsk.ru": true,
    "oskol.ru": true,
    "pyatigorsk.ru": true,
    "rubtsovsk.ru": true,
    "snz.ru": true,
    "syzran.ru": true,
    "vdonsk.ru": true,
    "zgrad.ru": true,
    "gov.ru": true,
    "mil.ru": true,
    "test.ru": true,
    "rw": true,
    "gov.rw": true,
    "net.rw": true,
    "edu.rw": true,
    "ac.rw": true,
    "com.rw": true,
    "co.rw": true,
    "int.rw": true,
    "mil.rw": true,
    "gouv.rw": true,
    "sa": true,
    "com.sa": true,
    "net.sa": true,
    "org.sa": true,
    "gov.sa": true,
    "med.sa": true,
    "pub.sa": true,
    "edu.sa": true,
    "sch.sa": true,
    "sb": true,
    "com.sb": true,
    "edu.sb": true,
    "gov.sb": true,
    "net.sb": true,
    "org.sb": true,
    "sc": true,
    "com.sc": true,
    "gov.sc": true,
    "net.sc": true,
    "org.sc": true,
    "edu.sc": true,
    "sd": true,
    "com.sd": true,
    "net.sd": true,
    "org.sd": true,
    "edu.sd": true,
    "med.sd": true,
    "tv.sd": true,
    "gov.sd": true,
    "info.sd": true,
    "se": true,
    "a.se": true,
    "ac.se": true,
    "b.se": true,
    "bd.se": true,
    "brand.se": true,
    "c.se": true,
    "d.se": true,
    "e.se": true,
    "f.se": true,
    "fh.se": true,
    "fhsk.se": true,
    "fhv.se": true,
    "g.se": true,
    "h.se": true,
    "i.se": true,
    "k.se": true,
    "komforb.se": true,
    "kommunalforbund.se": true,
    "komvux.se": true,
    "l.se": true,
    "lanbib.se": true,
    "m.se": true,
    "n.se": true,
    "naturbruksgymn.se": true,
    "o.se": true,
    "org.se": true,
    "p.se": true,
    "parti.se": true,
    "pp.se": true,
    "press.se": true,
    "r.se": true,
    "s.se": true,
    "t.se": true,
    "tm.se": true,
    "u.se": true,
    "w.se": true,
    "x.se": true,
    "y.se": true,
    "z.se": true,
    "sg": true,
    "com.sg": true,
    "net.sg": true,
    "org.sg": true,
    "gov.sg": true,
    "edu.sg": true,
    "per.sg": true,
    "sh": true,
    "com.sh": true,
    "net.sh": true,
    "gov.sh": true,
    "org.sh": true,
    "mil.sh": true,
    "si": true,
    "sj": true,
    "sk": true,
    "sl": true,
    "com.sl": true,
    "net.sl": true,
    "edu.sl": true,
    "gov.sl": true,
    "org.sl": true,
    "sm": true,
    "sn": true,
    "art.sn": true,
    "com.sn": true,
    "edu.sn": true,
    "gouv.sn": true,
    "org.sn": true,
    "perso.sn": true,
    "univ.sn": true,
    "so": true,
    "com.so": true,
    "net.so": true,
    "org.so": true,
    "sr": true,
    "st": true,
    "co.st": true,
    "com.st": true,
    "consulado.st": true,
    "edu.st": true,
    "embaixada.st": true,
    "gov.st": true,
    "mil.st": true,
    "net.st": true,
    "org.st": true,
    "principe.st": true,
    "saotome.st": true,
    "store.st": true,
    "su": true,
    "adygeya.su": true,
    "arkhangelsk.su": true,
    "balashov.su": true,
    "bashkiria.su": true,
    "bryansk.su": true,
    "dagestan.su": true,
    "grozny.su": true,
    "ivanovo.su": true,
    "kalmykia.su": true,
    "kaluga.su": true,
    "karelia.su": true,
    "khakassia.su": true,
    "krasnodar.su": true,
    "kurgan.su": true,
    "lenug.su": true,
    "mordovia.su": true,
    "msk.su": true,
    "murmansk.su": true,
    "nalchik.su": true,
    "nov.su": true,
    "obninsk.su": true,
    "penza.su": true,
    "pokrovsk.su": true,
    "sochi.su": true,
    "spb.su": true,
    "togliatti.su": true,
    "troitsk.su": true,
    "tula.su": true,
    "tuva.su": true,
    "vladikavkaz.su": true,
    "vladimir.su": true,
    "vologda.su": true,
    "sv": true,
    "com.sv": true,
    "edu.sv": true,
    "gob.sv": true,
    "org.sv": true,
    "red.sv": true,
    "sx": true,
    "gov.sx": true,
    "sy": true,
    "edu.sy": true,
    "gov.sy": true,
    "net.sy": true,
    "mil.sy": true,
    "com.sy": true,
    "org.sy": true,
    "sz": true,
    "co.sz": true,
    "ac.sz": true,
    "org.sz": true,
    "tc": true,
    "td": true,
    "tel": true,
    "tf": true,
    "tg": true,
    "th": true,
    "ac.th": true,
    "co.th": true,
    "go.th": true,
    "in.th": true,
    "mi.th": true,
    "net.th": true,
    "or.th": true,
    "tj": true,
    "ac.tj": true,
    "biz.tj": true,
    "co.tj": true,
    "com.tj": true,
    "edu.tj": true,
    "go.tj": true,
    "gov.tj": true,
    "int.tj": true,
    "mil.tj": true,
    "name.tj": true,
    "net.tj": true,
    "nic.tj": true,
    "org.tj": true,
    "test.tj": true,
    "web.tj": true,
    "tk": true,
    "tl": true,
    "gov.tl": true,
    "tm": true,
    "com.tm": true,
    "co.tm": true,
    "org.tm": true,
    "net.tm": true,
    "nom.tm": true,
    "gov.tm": true,
    "mil.tm": true,
    "edu.tm": true,
    "tn": true,
    "com.tn": true,
    "ens.tn": true,
    "fin.tn": true,
    "gov.tn": true,
    "ind.tn": true,
    "intl.tn": true,
    "nat.tn": true,
    "net.tn": true,
    "org.tn": true,
    "info.tn": true,
    "perso.tn": true,
    "tourism.tn": true,
    "edunet.tn": true,
    "rnrt.tn": true,
    "rns.tn": true,
    "rnu.tn": true,
    "mincom.tn": true,
    "agrinet.tn": true,
    "defense.tn": true,
    "turen.tn": true,
    "to": true,
    "com.to": true,
    "gov.to": true,
    "net.to": true,
    "org.to": true,
    "edu.to": true,
    "mil.to": true,
    "tp": true,
    "tr": true,
    "com.tr": true,
    "info.tr": true,
    "biz.tr": true,
    "net.tr": true,
    "org.tr": true,
    "web.tr": true,
    "gen.tr": true,
    "tv.tr": true,
    "av.tr": true,
    "dr.tr": true,
    "bbs.tr": true,
    "name.tr": true,
    "tel.tr": true,
    "gov.tr": true,
    "bel.tr": true,
    "pol.tr": true,
    "mil.tr": true,
    "k12.tr": true,
    "edu.tr": true,
    "kep.tr": true,
    "nc.tr": true,
    "gov.nc.tr": true,
    "travel": true,
    "tt": true,
    "co.tt": true,
    "com.tt": true,
    "org.tt": true,
    "net.tt": true,
    "biz.tt": true,
    "info.tt": true,
    "pro.tt": true,
    "int.tt": true,
    "coop.tt": true,
    "jobs.tt": true,
    "mobi.tt": true,
    "travel.tt": true,
    "museum.tt": true,
    "aero.tt": true,
    "name.tt": true,
    "gov.tt": true,
    "edu.tt": true,
    "tv": true,
    "tw": true,
    "edu.tw": true,
    "gov.tw": true,
    "mil.tw": true,
    "com.tw": true,
    "net.tw": true,
    "org.tw": true,
    "idv.tw": true,
    "game.tw": true,
    "ebiz.tw": true,
    "club.tw": true,
    "xn--zf0ao64a.tw": true,
    "xn--uc0atv.tw": true,
    "xn--czrw28b.tw": true,
    "tz": true,
    "ac.tz": true,
    "co.tz": true,
    "go.tz": true,
    "hotel.tz": true,
    "info.tz": true,
    "me.tz": true,
    "mil.tz": true,
    "mobi.tz": true,
    "ne.tz": true,
    "or.tz": true,
    "sc.tz": true,
    "tv.tz": true,
    "ua": true,
    "com.ua": true,
    "edu.ua": true,
    "gov.ua": true,
    "in.ua": true,
    "net.ua": true,
    "org.ua": true,
    "cherkassy.ua": true,
    "cherkasy.ua": true,
    "chernigov.ua": true,
    "chernihiv.ua": true,
    "chernivtsi.ua": true,
    "chernovtsy.ua": true,
    "ck.ua": true,
    "cn.ua": true,
    "cr.ua": true,
    "crimea.ua": true,
    "cv.ua": true,
    "dn.ua": true,
    "dnepropetrovsk.ua": true,
    "dnipropetrovsk.ua": true,
    "dominic.ua": true,
    "donetsk.ua": true,
    "dp.ua": true,
    "if.ua": true,
    "ivano-frankivsk.ua": true,
    "kh.ua": true,
    "kharkiv.ua": true,
    "kharkov.ua": true,
    "kherson.ua": true,
    "khmelnitskiy.ua": true,
    "khmelnytskyi.ua": true,
    "kiev.ua": true,
    "kirovograd.ua": true,
    "km.ua": true,
    "kr.ua": true,
    "krym.ua": true,
    "ks.ua": true,
    "kv.ua": true,
    "kyiv.ua": true,
    "lg.ua": true,
    "lt.ua": true,
    "lugansk.ua": true,
    "lutsk.ua": true,
    "lv.ua": true,
    "lviv.ua": true,
    "mk.ua": true,
    "mykolaiv.ua": true,
    "nikolaev.ua": true,
    "od.ua": true,
    "odesa.ua": true,
    "odessa.ua": true,
    "pl.ua": true,
    "poltava.ua": true,
    "rivne.ua": true,
    "rovno.ua": true,
    "rv.ua": true,
    "sb.ua": true,
    "sebastopol.ua": true,
    "sevastopol.ua": true,
    "sm.ua": true,
    "sumy.ua": true,
    "te.ua": true,
    "ternopil.ua": true,
    "uz.ua": true,
    "uzhgorod.ua": true,
    "vinnica.ua": true,
    "vinnytsia.ua": true,
    "vn.ua": true,
    "volyn.ua": true,
    "yalta.ua": true,
    "zaporizhzhe.ua": true,
    "zaporizhzhia.ua": true,
    "zhitomir.ua": true,
    "zhytomyr.ua": true,
    "zp.ua": true,
    "zt.ua": true,
    "ug": true,
    "co.ug": true,
    "or.ug": true,
    "ac.ug": true,
    "sc.ug": true,
    "go.ug": true,
    "ne.ug": true,
    "com.ug": true,
    "org.ug": true,
    "uk": true,
    "ac.uk": true,
    "co.uk": true,
    "gov.uk": true,
    "ltd.uk": true,
    "me.uk": true,
    "net.uk": true,
    "nhs.uk": true,
    "org.uk": true,
    "plc.uk": true,
    "police.uk": true,
    "*.sch.uk": true,
    "us": true,
    "dni.us": true,
    "fed.us": true,
    "isa.us": true,
    "kids.us": true,
    "nsn.us": true,
    "ak.us": true,
    "al.us": true,
    "ar.us": true,
    "as.us": true,
    "az.us": true,
    "ca.us": true,
    "co.us": true,
    "ct.us": true,
    "dc.us": true,
    "de.us": true,
    "fl.us": true,
    "ga.us": true,
    "gu.us": true,
    "hi.us": true,
    "ia.us": true,
    "id.us": true,
    "il.us": true,
    "in.us": true,
    "ks.us": true,
    "ky.us": true,
    "la.us": true,
    "ma.us": true,
    "md.us": true,
    "me.us": true,
    "mi.us": true,
    "mn.us": true,
    "mo.us": true,
    "ms.us": true,
    "mt.us": true,
    "nc.us": true,
    "nd.us": true,
    "ne.us": true,
    "nh.us": true,
    "nj.us": true,
    "nm.us": true,
    "nv.us": true,
    "ny.us": true,
    "oh.us": true,
    "ok.us": true,
    "or.us": true,
    "pa.us": true,
    "pr.us": true,
    "ri.us": true,
    "sc.us": true,
    "sd.us": true,
    "tn.us": true,
    "tx.us": true,
    "ut.us": true,
    "vi.us": true,
    "vt.us": true,
    "va.us": true,
    "wa.us": true,
    "wi.us": true,
    "wv.us": true,
    "wy.us": true,
    "k12.ak.us": true,
    "k12.al.us": true,
    "k12.ar.us": true,
    "k12.as.us": true,
    "k12.az.us": true,
    "k12.ca.us": true,
    "k12.co.us": true,
    "k12.ct.us": true,
    "k12.dc.us": true,
    "k12.de.us": true,
    "k12.fl.us": true,
    "k12.ga.us": true,
    "k12.gu.us": true,
    "k12.ia.us": true,
    "k12.id.us": true,
    "k12.il.us": true,
    "k12.in.us": true,
    "k12.ks.us": true,
    "k12.ky.us": true,
    "k12.la.us": true,
    "k12.ma.us": true,
    "k12.md.us": true,
    "k12.me.us": true,
    "k12.mi.us": true,
    "k12.mn.us": true,
    "k12.mo.us": true,
    "k12.ms.us": true,
    "k12.mt.us": true,
    "k12.nc.us": true,
    "k12.ne.us": true,
    "k12.nh.us": true,
    "k12.nj.us": true,
    "k12.nm.us": true,
    "k12.nv.us": true,
    "k12.ny.us": true,
    "k12.oh.us": true,
    "k12.ok.us": true,
    "k12.or.us": true,
    "k12.pa.us": true,
    "k12.pr.us": true,
    "k12.ri.us": true,
    "k12.sc.us": true,
    "k12.tn.us": true,
    "k12.tx.us": true,
    "k12.ut.us": true,
    "k12.vi.us": true,
    "k12.vt.us": true,
    "k12.va.us": true,
    "k12.wa.us": true,
    "k12.wi.us": true,
    "k12.wy.us": true,
    "cc.ak.us": true,
    "cc.al.us": true,
    "cc.ar.us": true,
    "cc.as.us": true,
    "cc.az.us": true,
    "cc.ca.us": true,
    "cc.co.us": true,
    "cc.ct.us": true,
    "cc.dc.us": true,
    "cc.de.us": true,
    "cc.fl.us": true,
    "cc.ga.us": true,
    "cc.gu.us": true,
    "cc.hi.us": true,
    "cc.ia.us": true,
    "cc.id.us": true,
    "cc.il.us": true,
    "cc.in.us": true,
    "cc.ks.us": true,
    "cc.ky.us": true,
    "cc.la.us": true,
    "cc.ma.us": true,
    "cc.md.us": true,
    "cc.me.us": true,
    "cc.mi.us": true,
    "cc.mn.us": true,
    "cc.mo.us": true,
    "cc.ms.us": true,
    "cc.mt.us": true,
    "cc.nc.us": true,
    "cc.nd.us": true,
    "cc.ne.us": true,
    "cc.nh.us": true,
    "cc.nj.us": true,
    "cc.nm.us": true,
    "cc.nv.us": true,
    "cc.ny.us": true,
    "cc.oh.us": true,
    "cc.ok.us": true,
    "cc.or.us": true,
    "cc.pa.us": true,
    "cc.pr.us": true,
    "cc.ri.us": true,
    "cc.sc.us": true,
    "cc.sd.us": true,
    "cc.tn.us": true,
    "cc.tx.us": true,
    "cc.ut.us": true,
    "cc.vi.us": true,
    "cc.vt.us": true,
    "cc.va.us": true,
    "cc.wa.us": true,
    "cc.wi.us": true,
    "cc.wv.us": true,
    "cc.wy.us": true,
    "lib.ak.us": true,
    "lib.al.us": true,
    "lib.ar.us": true,
    "lib.as.us": true,
    "lib.az.us": true,
    "lib.ca.us": true,
    "lib.co.us": true,
    "lib.ct.us": true,
    "lib.dc.us": true,
    "lib.de.us": true,
    "lib.fl.us": true,
    "lib.ga.us": true,
    "lib.gu.us": true,
    "lib.hi.us": true,
    "lib.ia.us": true,
    "lib.id.us": true,
    "lib.il.us": true,
    "lib.in.us": true,
    "lib.ks.us": true,
    "lib.ky.us": true,
    "lib.la.us": true,
    "lib.ma.us": true,
    "lib.md.us": true,
    "lib.me.us": true,
    "lib.mi.us": true,
    "lib.mn.us": true,
    "lib.mo.us": true,
    "lib.ms.us": true,
    "lib.mt.us": true,
    "lib.nc.us": true,
    "lib.nd.us": true,
    "lib.ne.us": true,
    "lib.nh.us": true,
    "lib.nj.us": true,
    "lib.nm.us": true,
    "lib.nv.us": true,
    "lib.ny.us": true,
    "lib.oh.us": true,
    "lib.ok.us": true,
    "lib.or.us": true,
    "lib.pa.us": true,
    "lib.pr.us": true,
    "lib.ri.us": true,
    "lib.sc.us": true,
    "lib.sd.us": true,
    "lib.tn.us": true,
    "lib.tx.us": true,
    "lib.ut.us": true,
    "lib.vi.us": true,
    "lib.vt.us": true,
    "lib.va.us": true,
    "lib.wa.us": true,
    "lib.wi.us": true,
    "lib.wy.us": true,
    "pvt.k12.ma.us": true,
    "chtr.k12.ma.us": true,
    "paroch.k12.ma.us": true,
    "uy": true,
    "com.uy": true,
    "edu.uy": true,
    "gub.uy": true,
    "mil.uy": true,
    "net.uy": true,
    "org.uy": true,
    "uz": true,
    "co.uz": true,
    "com.uz": true,
    "net.uz": true,
    "org.uz": true,
    "va": true,
    "vc": true,
    "com.vc": true,
    "net.vc": true,
    "org.vc": true,
    "gov.vc": true,
    "mil.vc": true,
    "edu.vc": true,
    "ve": true,
    "arts.ve": true,
    "co.ve": true,
    "com.ve": true,
    "e12.ve": true,
    "edu.ve": true,
    "firm.ve": true,
    "gob.ve": true,
    "gov.ve": true,
    "info.ve": true,
    "int.ve": true,
    "mil.ve": true,
    "net.ve": true,
    "org.ve": true,
    "rec.ve": true,
    "store.ve": true,
    "tec.ve": true,
    "web.ve": true,
    "vg": true,
    "vi": true,
    "co.vi": true,
    "com.vi": true,
    "k12.vi": true,
    "net.vi": true,
    "org.vi": true,
    "vn": true,
    "com.vn": true,
    "net.vn": true,
    "org.vn": true,
    "edu.vn": true,
    "gov.vn": true,
    "int.vn": true,
    "ac.vn": true,
    "biz.vn": true,
    "info.vn": true,
    "name.vn": true,
    "pro.vn": true,
    "health.vn": true,
    "vu": true,
    "com.vu": true,
    "edu.vu": true,
    "net.vu": true,
    "org.vu": true,
    "wf": true,
    "ws": true,
    "com.ws": true,
    "net.ws": true,
    "org.ws": true,
    "gov.ws": true,
    "edu.ws": true,
    "yt": true,
    "xn--mgbaam7a8h": true,
    "xn--y9a3aq": true,
    "xn--54b7fta0cc": true,
    "xn--90ais": true,
    "xn--fiqs8s": true,
    "xn--fiqz9s": true,
    "xn--lgbbat1ad8j": true,
    "xn--wgbh1c": true,
    "xn--node": true,
    "xn--qxam": true,
    "xn--j6w193g": true,
    "xn--h2brj9c": true,
    "xn--mgbbh1a71e": true,
    "xn--fpcrj9c3d": true,
    "xn--gecrj9c": true,
    "xn--s9brj9c": true,
    "xn--45brj9c": true,
    "xn--xkc2dl3a5ee0h": true,
    "xn--mgba3a4f16a": true,
    "xn--mgba3a4fra": true,
    "xn--mgbtx2b": true,
    "xn--mgbayh7gpa": true,
    "xn--3e0b707e": true,
    "xn--80ao21a": true,
    "xn--fzc2c9e2c": true,
    "xn--xkc2al3hye2a": true,
    "xn--mgbc0a9azcg": true,
    "xn--d1alf": true,
    "xn--l1acc": true,
    "xn--mix891f": true,
    "xn--mix082f": true,
    "xn--mgbx4cd0ab": true,
    "xn--mgb9awbf": true,
    "xn--mgbai9azgqp6j": true,
    "xn--mgbai9a5eva00b": true,
    "xn--ygbi2ammx": true,
    "xn--90a3ac": true,
    "xn--o1ac.xn--90a3ac": true,
    "xn--c1avg.xn--90a3ac": true,
    "xn--90azh.xn--90a3ac": true,
    "xn--d1at.xn--90a3ac": true,
    "xn--o1ach.xn--90a3ac": true,
    "xn--80au.xn--90a3ac": true,
    "xn--p1ai": true,
    "xn--wgbl6a": true,
    "xn--mgberp4a5d4ar": true,
    "xn--mgberp4a5d4a87g": true,
    "xn--mgbqly7c0a67fbc": true,
    "xn--mgbqly7cvafr": true,
    "xn--mgbpl2fh": true,
    "xn--yfro4i67o": true,
    "xn--clchc0ea0b2g2a9gcd": true,
    "xn--ogbpf8fl": true,
    "xn--mgbtf8fl": true,
    "xn--o3cw4h": true,
    "xn--pgbs0dh": true,
    "xn--kpry57d": true,
    "xn--kprw13d": true,
    "xn--nnx388a": true,
    "xn--j1amh": true,
    "xn--mgb2ddes": true,
    "xxx": true,
    "*.ye": true,
    "ac.za": true,
    "agrica.za": true,
    "alt.za": true,
    "co.za": true,
    "edu.za": true,
    "gov.za": true,
    "grondar.za": true,
    "law.za": true,
    "mil.za": true,
    "net.za": true,
    "ngo.za": true,
    "nis.za": true,
    "nom.za": true,
    "org.za": true,
    "school.za": true,
    "tm.za": true,
    "web.za": true,
    "*.zm": true,
    "*.zw": true,
    "aaa": true,
    "aarp": true,
    "abarth": true,
    "abb": true,
    "abbott": true,
    "abbvie": true,
    "abc": true,
    "able": true,
    "abogado": true,
    "abudhabi": true,
    "academy": true,
    "accenture": true,
    "accountant": true,
    "accountants": true,
    "aco": true,
    "active": true,
    "actor": true,
    "adac": true,
    "ads": true,
    "adult": true,
    "aeg": true,
    "aetna": true,
    "afamilycompany": true,
    "afl": true,
    "africa": true,
    "africamagic": true,
    "agakhan": true,
    "agency": true,
    "aig": true,
    "aigo": true,
    "airbus": true,
    "airforce": true,
    "airtel": true,
    "akdn": true,
    "alfaromeo": true,
    "alibaba": true,
    "alipay": true,
    "allfinanz": true,
    "allstate": true,
    "ally": true,
    "alsace": true,
    "alstom": true,
    "americanexpress": true,
    "americanfamily": true,
    "amex": true,
    "amfam": true,
    "amica": true,
    "amsterdam": true,
    "analytics": true,
    "android": true,
    "anquan": true,
    "anz": true,
    "aol": true,
    "apartments": true,
    "app": true,
    "apple": true,
    "aquarelle": true,
    "aramco": true,
    "archi": true,
    "army": true,
    "arte": true,
    "asda": true,
    "associates": true,
    "athleta": true,
    "attorney": true,
    "auction": true,
    "audi": true,
    "audible": true,
    "audio": true,
    "auspost": true,
    "author": true,
    "auto": true,
    "autos": true,
    "avianca": true,
    "aws": true,
    "axa": true,
    "azure": true,
    "baby": true,
    "baidu": true,
    "banamex": true,
    "bananarepublic": true,
    "band": true,
    "bank": true,
    "bar": true,
    "barcelona": true,
    "barclaycard": true,
    "barclays": true,
    "barefoot": true,
    "bargains": true,
    "basketball": true,
    "bauhaus": true,
    "bayern": true,
    "bbc": true,
    "bbt": true,
    "bbva": true,
    "bcg": true,
    "bcn": true,
    "beats": true,
    "beer": true,
    "bentley": true,
    "berlin": true,
    "best": true,
    "bestbuy": true,
    "bet": true,
    "bharti": true,
    "bible": true,
    "bid": true,
    "bike": true,
    "bing": true,
    "bingo": true,
    "bio": true,
    "black": true,
    "blackfriday": true,
    "blanco": true,
    "blockbuster": true,
    "blog": true,
    "bloomberg": true,
    "blue": true,
    "bms": true,
    "bmw": true,
    "bnl": true,
    "bnpparibas": true,
    "boats": true,
    "boehringer": true,
    "bofa": true,
    "bom": true,
    "bond": true,
    "boo": true,
    "book": true,
    "booking": true,
    "boots": true,
    "bosch": true,
    "bostik": true,
    "bot": true,
    "boutique": true,
    "bradesco": true,
    "bridgestone": true,
    "broadway": true,
    "broker": true,
    "brother": true,
    "brussels": true,
    "budapest": true,
    "bugatti": true,
    "build": true,
    "builders": true,
    "business": true,
    "buy": true,
    "buzz": true,
    "bzh": true,
    "cab": true,
    "cafe": true,
    "cal": true,
    "call": true,
    "calvinklein": true,
    "camera": true,
    "camp": true,
    "cancerresearch": true,
    "canon": true,
    "capetown": true,
    "capital": true,
    "capitalone": true,
    "car": true,
    "caravan": true,
    "cards": true,
    "care": true,
    "career": true,
    "careers": true,
    "cars": true,
    "cartier": true,
    "casa": true,
    "case": true,
    "caseih": true,
    "cash": true,
    "casino": true,
    "catering": true,
    "cba": true,
    "cbn": true,
    "cbre": true,
    "cbs": true,
    "ceb": true,
    "center": true,
    "ceo": true,
    "cern": true,
    "cfa": true,
    "cfd": true,
    "chanel": true,
    "channel": true,
    "chase": true,
    "chat": true,
    "cheap": true,
    "chintai": true,
    "chloe": true,
    "christmas": true,
    "chrome": true,
    "chrysler": true,
    "church": true,
    "cipriani": true,
    "circle": true,
    "cisco": true,
    "citadel": true,
    "citi": true,
    "citic": true,
    "city": true,
    "cityeats": true,
    "claims": true,
    "cleaning": true,
    "click": true,
    "clinic": true,
    "clothing": true,
    "cloud": true,
    "club": true,
    "clubmed": true,
    "coach": true,
    "codes": true,
    "coffee": true,
    "college": true,
    "cologne": true,
    "comcast": true,
    "commbank": true,
    "community": true,
    "company": true,
    "computer": true,
    "comsec": true,
    "condos": true,
    "construction": true,
    "consulting": true,
    "contact": true,
    "contractors": true,
    "cooking": true,
    "cookingchannel": true,
    "cool": true,
    "corsica": true,
    "country": true,
    "coupon": true,
    "coupons": true,
    "courses": true,
    "credit": true,
    "creditcard": true,
    "creditunion": true,
    "cricket": true,
    "crown": true,
    "crs": true,
    "cruises": true,
    "csc": true,
    "cuisinella": true,
    "cymru": true,
    "cyou": true,
    "dabur": true,
    "dad": true,
    "dance": true,
    "date": true,
    "dating": true,
    "datsun": true,
    "day": true,
    "dclk": true,
    "dds": true,
    "deal": true,
    "dealer": true,
    "deals": true,
    "degree": true,
    "delivery": true,
    "dell": true,
    "deloitte": true,
    "delta": true,
    "democrat": true,
    "dental": true,
    "dentist": true,
    "desi": true,
    "design": true,
    "dev": true,
    "dhl": true,
    "diamonds": true,
    "diet": true,
    "digital": true,
    "direct": true,
    "directory": true,
    "discount": true,
    "discover": true,
    "dish": true,
    "dnp": true,
    "docs": true,
    "dodge": true,
    "dog": true,
    "doha": true,
    "domains": true,
    "doosan": true,
    "dot": true,
    "download": true,
    "drive": true,
    "dstv": true,
    "dtv": true,
    "dubai": true,
    "duck": true,
    "dunlop": true,
    "duns": true,
    "dupont": true,
    "durban": true,
    "dvag": true,
    "dwg": true,
    "earth": true,
    "eat": true,
    "edeka": true,
    "education": true,
    "email": true,
    "emerck": true,
    "emerson": true,
    "energy": true,
    "engineer": true,
    "engineering": true,
    "enterprises": true,
    "epost": true,
    "epson": true,
    "equipment": true,
    "ericsson": true,
    "erni": true,
    "esq": true,
    "estate": true,
    "esurance": true,
    "etisalat": true,
    "eurovision": true,
    "eus": true,
    "events": true,
    "everbank": true,
    "exchange": true,
    "expert": true,
    "exposed": true,
    "express": true,
    "extraspace": true,
    "fage": true,
    "fail": true,
    "fairwinds": true,
    "faith": true,
    "family": true,
    "fan": true,
    "fans": true,
    "farm": true,
    "farmers": true,
    "fashion": true,
    "fast": true,
    "fedex": true,
    "feedback": true,
    "ferrari": true,
    "ferrero": true,
    "fiat": true,
    "fidelity": true,
    "fido": true,
    "film": true,
    "final": true,
    "finance": true,
    "financial": true,
    "fire": true,
    "firestone": true,
    "firmdale": true,
    "fish": true,
    "fishing": true,
    "fit": true,
    "fitness": true,
    "flickr": true,
    "flights": true,
    "flir": true,
    "florist": true,
    "flowers": true,
    "flsmidth": true,
    "fly": true,
    "foo": true,
    "foodnetwork": true,
    "football": true,
    "ford": true,
    "forex": true,
    "forsale": true,
    "forum": true,
    "foundation": true,
    "fox": true,
    "fresenius": true,
    "frl": true,
    "frogans": true,
    "frontdoor": true,
    "frontier": true,
    "ftr": true,
    "fujitsu": true,
    "fujixerox": true,
    "fund": true,
    "furniture": true,
    "futbol": true,
    "fyi": true,
    "gal": true,
    "gallery": true,
    "gallo": true,
    "gallup": true,
    "game": true,
    "games": true,
    "gap": true,
    "garden": true,
    "gbiz": true,
    "gdn": true,
    "gea": true,
    "gent": true,
    "genting": true,
    "george": true,
    "ggee": true,
    "gift": true,
    "gifts": true,
    "gives": true,
    "giving": true,
    "glade": true,
    "glass": true,
    "gle": true,
    "global": true,
    "globo": true,
    "gmail": true,
    "gmo": true,
    "gmx": true,
    "godaddy": true,
    "gold": true,
    "goldpoint": true,
    "golf": true,
    "goo": true,
    "goodhands": true,
    "goodyear": true,
    "goog": true,
    "google": true,
    "gop": true,
    "got": true,
    "gotv": true,
    "grainger": true,
    "graphics": true,
    "gratis": true,
    "green": true,
    "gripe": true,
    "group": true,
    "guardian": true,
    "gucci": true,
    "guge": true,
    "guide": true,
    "guitars": true,
    "guru": true,
    "hamburg": true,
    "hangout": true,
    "haus": true,
    "hbo": true,
    "hdfc": true,
    "hdfcbank": true,
    "health": true,
    "healthcare": true,
    "help": true,
    "helsinki": true,
    "here": true,
    "hermes": true,
    "hgtv": true,
    "hiphop": true,
    "hisamitsu": true,
    "hitachi": true,
    "hiv": true,
    "hkt": true,
    "hockey": true,
    "holdings": true,
    "holiday": true,
    "homedepot": true,
    "homegoods": true,
    "homes": true,
    "homesense": true,
    "honda": true,
    "honeywell": true,
    "horse": true,
    "host": true,
    "hosting": true,
    "hot": true,
    "hoteles": true,
    "hotmail": true,
    "house": true,
    "how": true,
    "hsbc": true,
    "htc": true,
    "hughes": true,
    "hyatt": true,
    "hyundai": true,
    "ibm": true,
    "icbc": true,
    "ice": true,
    "icu": true,
    "ieee": true,
    "ifm": true,
    "iinet": true,
    "ikano": true,
    "imamat": true,
    "imdb": true,
    "immo": true,
    "immobilien": true,
    "industries": true,
    "infiniti": true,
    "ing": true,
    "ink": true,
    "institute": true,
    "insurance": true,
    "insure": true,
    "intel": true,
    "international": true,
    "intuit": true,
    "investments": true,
    "ipiranga": true,
    "irish": true,
    "iselect": true,
    "ismaili": true,
    "ist": true,
    "istanbul": true,
    "itau": true,
    "itv": true,
    "iveco": true,
    "iwc": true,
    "jaguar": true,
    "java": true,
    "jcb": true,
    "jcp": true,
    "jeep": true,
    "jetzt": true,
    "jewelry": true,
    "jio": true,
    "jlc": true,
    "jll": true,
    "jmp": true,
    "jnj": true,
    "joburg": true,
    "jot": true,
    "joy": true,
    "jpmorgan": true,
    "jprs": true,
    "juegos": true,
    "juniper": true,
    "kaufen": true,
    "kddi": true,
    "kerryhotels": true,
    "kerrylogistics": true,
    "kerryproperties": true,
    "kfh": true,
    "kia": true,
    "kim": true,
    "kinder": true,
    "kindle": true,
    "kitchen": true,
    "kiwi": true,
    "koeln": true,
    "komatsu": true,
    "kosher": true,
    "kpmg": true,
    "kpn": true,
    "krd": true,
    "kred": true,
    "kuokgroup": true,
    "kyknet": true,
    "kyoto": true,
    "lacaixa": true,
    "ladbrokes": true,
    "lamborghini": true,
    "lancaster": true,
    "lancia": true,
    "lancome": true,
    "land": true,
    "landrover": true,
    "lanxess": true,
    "lasalle": true,
    "lat": true,
    "latino": true,
    "latrobe": true,
    "law": true,
    "lawyer": true,
    "lds": true,
    "lease": true,
    "leclerc": true,
    "lefrak": true,
    "legal": true,
    "lego": true,
    "lexus": true,
    "lgbt": true,
    "liaison": true,
    "lidl": true,
    "life": true,
    "lifeinsurance": true,
    "lifestyle": true,
    "lighting": true,
    "like": true,
    "lilly": true,
    "limited": true,
    "limo": true,
    "lincoln": true,
    "linde": true,
    "link": true,
    "lipsy": true,
    "live": true,
    "living": true,
    "lixil": true,
    "loan": true,
    "loans": true,
    "locker": true,
    "locus": true,
    "loft": true,
    "lol": true,
    "london": true,
    "lotte": true,
    "lotto": true,
    "love": true,
    "lpl": true,
    "lplfinancial": true,
    "ltd": true,
    "ltda": true,
    "lundbeck": true,
    "lupin": true,
    "luxe": true,
    "luxury": true,
    "macys": true,
    "madrid": true,
    "maif": true,
    "maison": true,
    "makeup": true,
    "man": true,
    "management": true,
    "mango": true,
    "market": true,
    "marketing": true,
    "markets": true,
    "marriott": true,
    "marshalls": true,
    "maserati": true,
    "mattel": true,
    "mba": true,
    "mcd": true,
    "mcdonalds": true,
    "mckinsey": true,
    "med": true,
    "media": true,
    "meet": true,
    "melbourne": true,
    "meme": true,
    "memorial": true,
    "men": true,
    "menu": true,
    "meo": true,
    "metlife": true,
    "miami": true,
    "microsoft": true,
    "mini": true,
    "mint": true,
    "mit": true,
    "mitsubishi": true,
    "mlb": true,
    "mls": true,
    "mma": true,
    "mnet": true,
    "mobily": true,
    "moda": true,
    "moe": true,
    "moi": true,
    "mom": true,
    "monash": true,
    "money": true,
    "monster": true,
    "montblanc": true,
    "mopar": true,
    "mormon": true,
    "mortgage": true,
    "moscow": true,
    "moto": true,
    "motorcycles": true,
    "mov": true,
    "movie": true,
    "movistar": true,
    "msd": true,
    "mtn": true,
    "mtpc": true,
    "mtr": true,
    "multichoice": true,
    "mutual": true,
    "mutuelle": true,
    "mzansimagic": true,
    "nab": true,
    "nadex": true,
    "nagoya": true,
    "naspers": true,
    "nationwide": true,
    "natura": true,
    "navy": true,
    "nba": true,
    "nec": true,
    "netbank": true,
    "netflix": true,
    "network": true,
    "neustar": true,
    "new": true,
    "newholland": true,
    "news": true,
    "next": true,
    "nextdirect": true,
    "nexus": true,
    "nfl": true,
    "ngo": true,
    "nhk": true,
    "nico": true,
    "nike": true,
    "nikon": true,
    "ninja": true,
    "nissan": true,
    "nokia": true,
    "northwesternmutual": true,
    "norton": true,
    "now": true,
    "nowruz": true,
    "nowtv": true,
    "nra": true,
    "nrw": true,
    "ntt": true,
    "nyc": true,
    "obi": true,
    "observer": true,
    "off": true,
    "office": true,
    "okinawa": true,
    "olayan": true,
    "olayangroup": true,
    "oldnavy": true,
    "ollo": true,
    "omega": true,
    "one": true,
    "ong": true,
    "onl": true,
    "online": true,
    "onyourside": true,
    "ooo": true,
    "open": true,
    "oracle": true,
    "orange": true,
    "organic": true,
    "orientexpress": true,
    "osaka": true,
    "otsuka": true,
    "ott": true,
    "ovh": true,
    "page": true,
    "pamperedchef": true,
    "panasonic": true,
    "panerai": true,
    "paris": true,
    "pars": true,
    "partners": true,
    "parts": true,
    "party": true,
    "passagens": true,
    "pay": true,
    "payu": true,
    "pccw": true,
    "pet": true,
    "pfizer": true,
    "pharmacy": true,
    "philips": true,
    "photo": true,
    "photography": true,
    "photos": true,
    "physio": true,
    "piaget": true,
    "pics": true,
    "pictet": true,
    "pictures": true,
    "pid": true,
    "pin": true,
    "ping": true,
    "pink": true,
    "pioneer": true,
    "pizza": true,
    "place": true,
    "play": true,
    "playstation": true,
    "plumbing": true,
    "plus": true,
    "pnc": true,
    "pohl": true,
    "poker": true,
    "politie": true,
    "porn": true,
    "pramerica": true,
    "praxi": true,
    "press": true,
    "prime": true,
    "prod": true,
    "productions": true,
    "prof": true,
    "progressive": true,
    "promo": true,
    "properties": true,
    "property": true,
    "protection": true,
    "pru": true,
    "prudential": true,
    "pub": true,
    "qpon": true,
    "quebec": true,
    "quest": true,
    "qvc": true,
    "racing": true,
    "raid": true,
    "read": true,
    "realestate": true,
    "realtor": true,
    "realty": true,
    "recipes": true,
    "red": true,
    "redstone": true,
    "redumbrella": true,
    "rehab": true,
    "reise": true,
    "reisen": true,
    "reit": true,
    "reliance": true,
    "ren": true,
    "rent": true,
    "rentals": true,
    "repair": true,
    "report": true,
    "republican": true,
    "rest": true,
    "restaurant": true,
    "review": true,
    "reviews": true,
    "rexroth": true,
    "rich": true,
    "richardli": true,
    "ricoh": true,
    "rightathome": true,
    "ril": true,
    "rio": true,
    "rip": true,
    "rocher": true,
    "rocks": true,
    "rodeo": true,
    "rogers": true,
    "room": true,
    "rsvp": true,
    "ruhr": true,
    "run": true,
    "rwe": true,
    "ryukyu": true,
    "saarland": true,
    "safe": true,
    "safety": true,
    "sakura": true,
    "sale": true,
    "salon": true,
    "samsclub": true,
    "samsung": true,
    "sandvik": true,
    "sandvikcoromant": true,
    "sanofi": true,
    "sap": true,
    "sapo": true,
    "sarl": true,
    "sas": true,
    "save": true,
    "saxo": true,
    "sbi": true,
    "sbs": true,
    "sca": true,
    "scb": true,
    "schaeffler": true,
    "schmidt": true,
    "scholarships": true,
    "school": true,
    "schule": true,
    "schwarz": true,
    "science": true,
    "scjohnson": true,
    "scor": true,
    "scot": true,
    "seat": true,
    "secure": true,
    "security": true,
    "seek": true,
    "sener": true,
    "services": true,
    "ses": true,
    "seven": true,
    "sew": true,
    "sex": true,
    "sexy": true,
    "sfr": true,
    "shangrila": true,
    "sharp": true,
    "shaw": true,
    "shell": true,
    "shia": true,
    "shiksha": true,
    "shoes": true,
    "shouji": true,
    "show": true,
    "showtime": true,
    "shriram": true,
    "silk": true,
    "sina": true,
    "singles": true,
    "site": true,
    "ski": true,
    "skin": true,
    "sky": true,
    "skype": true,
    "sling": true,
    "smart": true,
    "smile": true,
    "sncf": true,
    "soccer": true,
    "social": true,
    "softbank": true,
    "software": true,
    "sohu": true,
    "solar": true,
    "solutions": true,
    "song": true,
    "sony": true,
    "soy": true,
    "space": true,
    "spiegel": true,
    "spot": true,
    "spreadbetting": true,
    "srl": true,
    "srt": true,
    "stada": true,
    "staples": true,
    "star": true,
    "starhub": true,
    "statebank": true,
    "statefarm": true,
    "statoil": true,
    "stc": true,
    "stcgroup": true,
    "stockholm": true,
    "storage": true,
    "store": true,
    "studio": true,
    "study": true,
    "style": true,
    "sucks": true,
    "supersport": true,
    "supplies": true,
    "supply": true,
    "support": true,
    "surf": true,
    "surgery": true,
    "suzuki": true,
    "swatch": true,
    "swiftcover": true,
    "swiss": true,
    "sydney": true,
    "symantec": true,
    "systems": true,
    "tab": true,
    "taipei": true,
    "talk": true,
    "taobao": true,
    "target": true,
    "tatamotors": true,
    "tatar": true,
    "tattoo": true,
    "tax": true,
    "taxi": true,
    "tci": true,
    "tdk": true,
    "team": true,
    "tech": true,
    "technology": true,
    "telecity": true,
    "telefonica": true,
    "temasek": true,
    "tennis": true,
    "teva": true,
    "thd": true,
    "theater": true,
    "theatre": true,
    "theguardian": true,
    "tiaa": true,
    "tickets": true,
    "tienda": true,
    "tiffany": true,
    "tips": true,
    "tires": true,
    "tirol": true,
    "tjmaxx": true,
    "tjx": true,
    "tkmaxx": true,
    "tmall": true,
    "today": true,
    "tokyo": true,
    "tools": true,
    "top": true,
    "toray": true,
    "toshiba": true,
    "total": true,
    "tours": true,
    "town": true,
    "toyota": true,
    "toys": true,
    "trade": true,
    "trading": true,
    "training": true,
    "travelchannel": true,
    "travelers": true,
    "travelersinsurance": true,
    "trust": true,
    "trv": true,
    "tube": true,
    "tui": true,
    "tunes": true,
    "tushu": true,
    "tvs": true,
    "ubank": true,
    "ubs": true,
    "uconnect": true,
    "university": true,
    "uno": true,
    "uol": true,
    "ups": true,
    "vacations": true,
    "vana": true,
    "vanguard": true,
    "vegas": true,
    "ventures": true,
    "verisign": true,
    "versicherung": true,
    "vet": true,
    "viajes": true,
    "video": true,
    "vig": true,
    "viking": true,
    "villas": true,
    "vin": true,
    "vip": true,
    "virgin": true,
    "visa": true,
    "vision": true,
    "vista": true,
    "vistaprint": true,
    "viva": true,
    "vivo": true,
    "vlaanderen": true,
    "vodka": true,
    "volkswagen": true,
    "vote": true,
    "voting": true,
    "voto": true,
    "voyage": true,
    "vuelos": true,
    "wales": true,
    "walmart": true,
    "walter": true,
    "wang": true,
    "wanggou": true,
    "warman": true,
    "watch": true,
    "watches": true,
    "weather": true,
    "weatherchannel": true,
    "webcam": true,
    "weber": true,
    "website": true,
    "wed": true,
    "wedding": true,
    "weibo": true,
    "weir": true,
    "whoswho": true,
    "wien": true,
    "wiki": true,
    "williamhill": true,
    "win": true,
    "windows": true,
    "wine": true,
    "winners": true,
    "wme": true,
    "wolterskluwer": true,
    "woodside": true,
    "work": true,
    "works": true,
    "world": true,
    "wtc": true,
    "wtf": true,
    "xbox": true,
    "xerox": true,
    "xfinity": true,
    "xihuan": true,
    "xin": true,
    "xn--11b4c3d": true,
    "xn--1ck2e1b": true,
    "xn--1qqw23a": true,
    "xn--30rr7y": true,
    "xn--3bst00m": true,
    "xn--3ds443g": true,
    "xn--3oq18vl8pn36a": true,
    "xn--3pxu8k": true,
    "xn--42c2d9a": true,
    "xn--45q11c": true,
    "xn--4gbrim": true,
    "xn--4gq48lf9j": true,
    "xn--55qw42g": true,
    "xn--55qx5d": true,
    "xn--5su34j936bgsg": true,
    "xn--5tzm5g": true,
    "xn--6frz82g": true,
    "xn--6qq986b3xl": true,
    "xn--80adxhks": true,
    "xn--80asehdb": true,
    "xn--80aswg": true,
    "xn--8y0a063a": true,
    "xn--9dbq2a": true,
    "xn--9et52u": true,
    "xn--9krt00a": true,
    "xn--b4w605ferd": true,
    "xn--bck1b9a5dre4c": true,
    "xn--c1avg": true,
    "xn--c2br7g": true,
    "xn--cck2b3b": true,
    "xn--cg4bki": true,
    "xn--czr694b": true,
    "xn--czrs0t": true,
    "xn--czru2d": true,
    "xn--d1acj3b": true,
    "xn--eckvdtc9d": true,
    "xn--efvy88h": true,
    "xn--estv75g": true,
    "xn--fct429k": true,
    "xn--fhbei": true,
    "xn--fiq228c5hs": true,
    "xn--fiq64b": true,
    "xn--fjq720a": true,
    "xn--flw351e": true,
    "xn--fzys8d69uvgm": true,
    "xn--g2xx48c": true,
    "xn--gckr3f0f": true,
    "xn--hxt814e": true,
    "xn--i1b6b1a6a2e": true,
    "xn--imr513n": true,
    "xn--io0a7i": true,
    "xn--j1aef": true,
    "xn--jlq61u9w7b": true,
    "xn--jvr189m": true,
    "xn--kcrx77d1x4a": true,
    "xn--kpu716f": true,
    "xn--kput3i": true,
    "xn--mgba3a3ejt": true,
    "xn--mgba7c0bbn0a": true,
    "xn--mgbaakc7dvf": true,
    "xn--mgbab2bd": true,
    "xn--mgbb9fbpob": true,
    "xn--mgbca7dzdo": true,
    "xn--mgbt3dhd": true,
    "xn--mk1bu44c": true,
    "xn--mxtq1m": true,
    "xn--ngbc5azd": true,
    "xn--ngbe9e0a": true,
    "xn--nqv7f": true,
    "xn--nqv7fs00ema": true,
    "xn--nyqy26a": true,
    "xn--p1acf": true,
    "xn--pbt977c": true,
    "xn--pssy2u": true,
    "xn--q9jyb4c": true,
    "xn--qcka1pmc": true,
    "xn--rhqv96g": true,
    "xn--rovu88b": true,
    "xn--ses554g": true,
    "xn--t60b56a": true,
    "xn--tckwe": true,
    "xn--unup4y": true,
    "xn--vermgensberater-ctb": true,
    "xn--vermgensberatung-pwb": true,
    "xn--vhquv": true,
    "xn--vuq861b": true,
    "xn--w4r85el8fhu5dnra": true,
    "xn--w4rs40l": true,
    "xn--xhq521b": true,
    "xn--zfr164b": true,
    "xperia": true,
    "xyz": true,
    "yachts": true,
    "yahoo": true,
    "yamaxun": true,
    "yandex": true,
    "yodobashi": true,
    "yoga": true,
    "yokohama": true,
    "you": true,
    "youtube": true,
    "yun": true,
    "zappos": true,
    "zara": true,
    "zero": true,
    "zip": true,
    "zippo": true,
    "zone": true,
    "zuerich": true,
    "cloudfront.net": true,
    "ap-northeast-1.compute.amazonaws.com": true,
    "ap-southeast-1.compute.amazonaws.com": true,
    "ap-southeast-2.compute.amazonaws.com": true,
    "cn-north-1.compute.amazonaws.cn": true,
    "compute.amazonaws.cn": true,
    "compute.amazonaws.com": true,
    "compute-1.amazonaws.com": true,
    "eu-west-1.compute.amazonaws.com": true,
    "eu-central-1.compute.amazonaws.com": true,
    "sa-east-1.compute.amazonaws.com": true,
    "us-east-1.amazonaws.com": true,
    "us-gov-west-1.compute.amazonaws.com": true,
    "us-west-1.compute.amazonaws.com": true,
    "us-west-2.compute.amazonaws.com": true,
    "z-1.compute-1.amazonaws.com": true,
    "z-2.compute-1.amazonaws.com": true,
    "elasticbeanstalk.com": true,
    "elb.amazonaws.com": true,
    "s3.amazonaws.com": true,
    "s3-ap-northeast-1.amazonaws.com": true,
    "s3-ap-southeast-1.amazonaws.com": true,
    "s3-ap-southeast-2.amazonaws.com": true,
    "s3-external-1.amazonaws.com": true,
    "s3-external-2.amazonaws.com": true,
    "s3-fips-us-gov-west-1.amazonaws.com": true,
    "s3-eu-central-1.amazonaws.com": true,
    "s3-eu-west-1.amazonaws.com": true,
    "s3-sa-east-1.amazonaws.com": true,
    "s3-us-gov-west-1.amazonaws.com": true,
    "s3-us-west-1.amazonaws.com": true,
    "s3-us-west-2.amazonaws.com": true,
    "s3.cn-north-1.amazonaws.com.cn": true,
    "s3.eu-central-1.amazonaws.com": true,
    "betainabox.com": true,
    "ae.org": true,
    "ar.com": true,
    "br.com": true,
    "cn.com": true,
    "com.de": true,
    "com.se": true,
    "de.com": true,
    "eu.com": true,
    "gb.com": true,
    "gb.net": true,
    "hu.com": true,
    "hu.net": true,
    "jp.net": true,
    "jpn.com": true,
    "kr.com": true,
    "mex.com": true,
    "no.com": true,
    "qc.com": true,
    "ru.com": true,
    "sa.com": true,
    "se.com": true,
    "se.net": true,
    "uk.com": true,
    "uk.net": true,
    "us.com": true,
    "uy.com": true,
    "za.bz": true,
    "za.com": true,
    "africa.com": true,
    "gr.com": true,
    "in.net": true,
    "us.org": true,
    "co.com": true,
    "c.la": true,
    "cloudcontrolled.com": true,
    "cloudcontrolapp.com": true,
    "co.ca": true,
    "c.cdn77.org": true,
    "cdn77-ssl.net": true,
    "r.cdn77.net": true,
    "rsc.cdn77.org": true,
    "ssl.origin.cdn77-secure.org": true,
    "co.nl": true,
    "co.no": true,
    "*.platform.sh": true,
    "cupcake.is": true,
    "dreamhosters.com": true,
    "duckdns.org": true,
    "dyndns-at-home.com": true,
    "dyndns-at-work.com": true,
    "dyndns-blog.com": true,
    "dyndns-free.com": true,
    "dyndns-home.com": true,
    "dyndns-ip.com": true,
    "dyndns-mail.com": true,
    "dyndns-office.com": true,
    "dyndns-pics.com": true,
    "dyndns-remote.com": true,
    "dyndns-server.com": true,
    "dyndns-web.com": true,
    "dyndns-wiki.com": true,
    "dyndns-work.com": true,
    "dyndns.biz": true,
    "dyndns.info": true,
    "dyndns.org": true,
    "dyndns.tv": true,
    "at-band-camp.net": true,
    "ath.cx": true,
    "barrel-of-knowledge.info": true,
    "barrell-of-knowledge.info": true,
    "better-than.tv": true,
    "blogdns.com": true,
    "blogdns.net": true,
    "blogdns.org": true,
    "blogsite.org": true,
    "boldlygoingnowhere.org": true,
    "broke-it.net": true,
    "buyshouses.net": true,
    "cechire.com": true,
    "dnsalias.com": true,
    "dnsalias.net": true,
    "dnsalias.org": true,
    "dnsdojo.com": true,
    "dnsdojo.net": true,
    "dnsdojo.org": true,
    "does-it.net": true,
    "doesntexist.com": true,
    "doesntexist.org": true,
    "dontexist.com": true,
    "dontexist.net": true,
    "dontexist.org": true,
    "doomdns.com": true,
    "doomdns.org": true,
    "dvrdns.org": true,
    "dyn-o-saur.com": true,
    "dynalias.com": true,
    "dynalias.net": true,
    "dynalias.org": true,
    "dynathome.net": true,
    "dyndns.ws": true,
    "endofinternet.net": true,
    "endofinternet.org": true,
    "endoftheinternet.org": true,
    "est-a-la-maison.com": true,
    "est-a-la-masion.com": true,
    "est-le-patron.com": true,
    "est-mon-blogueur.com": true,
    "for-better.biz": true,
    "for-more.biz": true,
    "for-our.info": true,
    "for-some.biz": true,
    "for-the.biz": true,
    "forgot.her.name": true,
    "forgot.his.name": true,
    "from-ak.com": true,
    "from-al.com": true,
    "from-ar.com": true,
    "from-az.net": true,
    "from-ca.com": true,
    "from-co.net": true,
    "from-ct.com": true,
    "from-dc.com": true,
    "from-de.com": true,
    "from-fl.com": true,
    "from-ga.com": true,
    "from-hi.com": true,
    "from-ia.com": true,
    "from-id.com": true,
    "from-il.com": true,
    "from-in.com": true,
    "from-ks.com": true,
    "from-ky.com": true,
    "from-la.net": true,
    "from-ma.com": true,
    "from-md.com": true,
    "from-me.org": true,
    "from-mi.com": true,
    "from-mn.com": true,
    "from-mo.com": true,
    "from-ms.com": true,
    "from-mt.com": true,
    "from-nc.com": true,
    "from-nd.com": true,
    "from-ne.com": true,
    "from-nh.com": true,
    "from-nj.com": true,
    "from-nm.com": true,
    "from-nv.com": true,
    "from-ny.net": true,
    "from-oh.com": true,
    "from-ok.com": true,
    "from-or.com": true,
    "from-pa.com": true,
    "from-pr.com": true,
    "from-ri.com": true,
    "from-sc.com": true,
    "from-sd.com": true,
    "from-tn.com": true,
    "from-tx.com": true,
    "from-ut.com": true,
    "from-va.com": true,
    "from-vt.com": true,
    "from-wa.com": true,
    "from-wi.com": true,
    "from-wv.com": true,
    "from-wy.com": true,
    "ftpaccess.cc": true,
    "fuettertdasnetz.de": true,
    "game-host.org": true,
    "game-server.cc": true,
    "getmyip.com": true,
    "gets-it.net": true,
    "go.dyndns.org": true,
    "gotdns.com": true,
    "gotdns.org": true,
    "groks-the.info": true,
    "groks-this.info": true,
    "ham-radio-op.net": true,
    "here-for-more.info": true,
    "hobby-site.com": true,
    "hobby-site.org": true,
    "home.dyndns.org": true,
    "homedns.org": true,
    "homeftp.net": true,
    "homeftp.org": true,
    "homeip.net": true,
    "homelinux.com": true,
    "homelinux.net": true,
    "homelinux.org": true,
    "homeunix.com": true,
    "homeunix.net": true,
    "homeunix.org": true,
    "iamallama.com": true,
    "in-the-band.net": true,
    "is-a-anarchist.com": true,
    "is-a-blogger.com": true,
    "is-a-bookkeeper.com": true,
    "is-a-bruinsfan.org": true,
    "is-a-bulls-fan.com": true,
    "is-a-candidate.org": true,
    "is-a-caterer.com": true,
    "is-a-celticsfan.org": true,
    "is-a-chef.com": true,
    "is-a-chef.net": true,
    "is-a-chef.org": true,
    "is-a-conservative.com": true,
    "is-a-cpa.com": true,
    "is-a-cubicle-slave.com": true,
    "is-a-democrat.com": true,
    "is-a-designer.com": true,
    "is-a-doctor.com": true,
    "is-a-financialadvisor.com": true,
    "is-a-geek.com": true,
    "is-a-geek.net": true,
    "is-a-geek.org": true,
    "is-a-green.com": true,
    "is-a-guru.com": true,
    "is-a-hard-worker.com": true,
    "is-a-hunter.com": true,
    "is-a-knight.org": true,
    "is-a-landscaper.com": true,
    "is-a-lawyer.com": true,
    "is-a-liberal.com": true,
    "is-a-libertarian.com": true,
    "is-a-linux-user.org": true,
    "is-a-llama.com": true,
    "is-a-musician.com": true,
    "is-a-nascarfan.com": true,
    "is-a-nurse.com": true,
    "is-a-painter.com": true,
    "is-a-patsfan.org": true,
    "is-a-personaltrainer.com": true,
    "is-a-photographer.com": true,
    "is-a-player.com": true,
    "is-a-republican.com": true,
    "is-a-rockstar.com": true,
    "is-a-socialist.com": true,
    "is-a-soxfan.org": true,
    "is-a-student.com": true,
    "is-a-teacher.com": true,
    "is-a-techie.com": true,
    "is-a-therapist.com": true,
    "is-an-accountant.com": true,
    "is-an-actor.com": true,
    "is-an-actress.com": true,
    "is-an-anarchist.com": true,
    "is-an-artist.com": true,
    "is-an-engineer.com": true,
    "is-an-entertainer.com": true,
    "is-by.us": true,
    "is-certified.com": true,
    "is-found.org": true,
    "is-gone.com": true,
    "is-into-anime.com": true,
    "is-into-cars.com": true,
    "is-into-cartoons.com": true,
    "is-into-games.com": true,
    "is-leet.com": true,
    "is-lost.org": true,
    "is-not-certified.com": true,
    "is-saved.org": true,
    "is-slick.com": true,
    "is-uberleet.com": true,
    "is-very-bad.org": true,
    "is-very-evil.org": true,
    "is-very-good.org": true,
    "is-very-nice.org": true,
    "is-very-sweet.org": true,
    "is-with-theband.com": true,
    "isa-geek.com": true,
    "isa-geek.net": true,
    "isa-geek.org": true,
    "isa-hockeynut.com": true,
    "issmarterthanyou.com": true,
    "isteingeek.de": true,
    "istmein.de": true,
    "kicks-ass.net": true,
    "kicks-ass.org": true,
    "knowsitall.info": true,
    "land-4-sale.us": true,
    "lebtimnetz.de": true,
    "leitungsen.de": true,
    "likes-pie.com": true,
    "likescandy.com": true,
    "merseine.nu": true,
    "mine.nu": true,
    "misconfused.org": true,
    "mypets.ws": true,
    "myphotos.cc": true,
    "neat-url.com": true,
    "office-on-the.net": true,
    "on-the-web.tv": true,
    "podzone.net": true,
    "podzone.org": true,
    "readmyblog.org": true,
    "saves-the-whales.com": true,
    "scrapper-site.net": true,
    "scrapping.cc": true,
    "selfip.biz": true,
    "selfip.com": true,
    "selfip.info": true,
    "selfip.net": true,
    "selfip.org": true,
    "sells-for-less.com": true,
    "sells-for-u.com": true,
    "sells-it.net": true,
    "sellsyourhome.org": true,
    "servebbs.com": true,
    "servebbs.net": true,
    "servebbs.org": true,
    "serveftp.net": true,
    "serveftp.org": true,
    "servegame.org": true,
    "shacknet.nu": true,
    "simple-url.com": true,
    "space-to-rent.com": true,
    "stuff-4-sale.org": true,
    "stuff-4-sale.us": true,
    "teaches-yoga.com": true,
    "thruhere.net": true,
    "traeumtgerade.de": true,
    "webhop.biz": true,
    "webhop.info": true,
    "webhop.net": true,
    "webhop.org": true,
    "worse-than.tv": true,
    "writesthisblog.com": true,
    "eu.org": true,
    "al.eu.org": true,
    "asso.eu.org": true,
    "at.eu.org": true,
    "au.eu.org": true,
    "be.eu.org": true,
    "bg.eu.org": true,
    "ca.eu.org": true,
    "cd.eu.org": true,
    "ch.eu.org": true,
    "cn.eu.org": true,
    "cy.eu.org": true,
    "cz.eu.org": true,
    "de.eu.org": true,
    "dk.eu.org": true,
    "edu.eu.org": true,
    "ee.eu.org": true,
    "es.eu.org": true,
    "fi.eu.org": true,
    "fr.eu.org": true,
    "gr.eu.org": true,
    "hr.eu.org": true,
    "hu.eu.org": true,
    "ie.eu.org": true,
    "il.eu.org": true,
    "in.eu.org": true,
    "int.eu.org": true,
    "is.eu.org": true,
    "it.eu.org": true,
    "jp.eu.org": true,
    "kr.eu.org": true,
    "lt.eu.org": true,
    "lu.eu.org": true,
    "lv.eu.org": true,
    "mc.eu.org": true,
    "me.eu.org": true,
    "mk.eu.org": true,
    "mt.eu.org": true,
    "my.eu.org": true,
    "net.eu.org": true,
    "ng.eu.org": true,
    "nl.eu.org": true,
    "no.eu.org": true,
    "nz.eu.org": true,
    "paris.eu.org": true,
    "pl.eu.org": true,
    "pt.eu.org": true,
    "q-a.eu.org": true,
    "ro.eu.org": true,
    "ru.eu.org": true,
    "se.eu.org": true,
    "si.eu.org": true,
    "sk.eu.org": true,
    "tr.eu.org": true,
    "uk.eu.org": true,
    "us.eu.org": true,
    "a.ssl.fastly.net": true,
    "b.ssl.fastly.net": true,
    "global.ssl.fastly.net": true,
    "a.prod.fastly.net": true,
    "global.prod.fastly.net": true,
    "firebaseapp.com": true,
    "flynnhub.com": true,
    "service.gov.uk": true,
    "github.io": true,
    "githubusercontent.com": true,
    "ro.com": true,
    "appspot.com": true,
    "blogspot.ae": true,
    "blogspot.al": true,
    "blogspot.am": true,
    "blogspot.ba": true,
    "blogspot.be": true,
    "blogspot.bg": true,
    "blogspot.bj": true,
    "blogspot.ca": true,
    "blogspot.cf": true,
    "blogspot.ch": true,
    "blogspot.cl": true,
    "blogspot.co.at": true,
    "blogspot.co.id": true,
    "blogspot.co.il": true,
    "blogspot.co.ke": true,
    "blogspot.co.nz": true,
    "blogspot.co.uk": true,
    "blogspot.co.za": true,
    "blogspot.com": true,
    "blogspot.com.ar": true,
    "blogspot.com.au": true,
    "blogspot.com.br": true,
    "blogspot.com.by": true,
    "blogspot.com.co": true,
    "blogspot.com.cy": true,
    "blogspot.com.ee": true,
    "blogspot.com.eg": true,
    "blogspot.com.es": true,
    "blogspot.com.mt": true,
    "blogspot.com.ng": true,
    "blogspot.com.tr": true,
    "blogspot.com.uy": true,
    "blogspot.cv": true,
    "blogspot.cz": true,
    "blogspot.de": true,
    "blogspot.dk": true,
    "blogspot.fi": true,
    "blogspot.fr": true,
    "blogspot.gr": true,
    "blogspot.hk": true,
    "blogspot.hr": true,
    "blogspot.hu": true,
    "blogspot.ie": true,
    "blogspot.in": true,
    "blogspot.is": true,
    "blogspot.it": true,
    "blogspot.jp": true,
    "blogspot.kr": true,
    "blogspot.li": true,
    "blogspot.lt": true,
    "blogspot.lu": true,
    "blogspot.md": true,
    "blogspot.mk": true,
    "blogspot.mr": true,
    "blogspot.mx": true,
    "blogspot.my": true,
    "blogspot.nl": true,
    "blogspot.no": true,
    "blogspot.pe": true,
    "blogspot.pt": true,
    "blogspot.qa": true,
    "blogspot.re": true,
    "blogspot.ro": true,
    "blogspot.rs": true,
    "blogspot.ru": true,
    "blogspot.se": true,
    "blogspot.sg": true,
    "blogspot.si": true,
    "blogspot.sk": true,
    "blogspot.sn": true,
    "blogspot.td": true,
    "blogspot.tw": true,
    "blogspot.ug": true,
    "blogspot.vn": true,
    "codespot.com": true,
    "googleapis.com": true,
    "googlecode.com": true,
    "pagespeedmobilizer.com": true,
    "withgoogle.com": true,
    "withyoutube.com": true,
    "herokuapp.com": true,
    "herokussl.com": true,
    "iki.fi": true,
    "biz.at": true,
    "info.at": true,
    "co.pl": true,
    "azurewebsites.net": true,
    "azure-mobile.net": true,
    "cloudapp.net": true,
    "bmoattachments.org": true,
    "4u.com": true,
    "nfshost.com": true,
    "nyc.mn": true,
    "nid.io": true,
    "operaunite.com": true,
    "outsystemscloud.com": true,
    "art.pl": true,
    "gliwice.pl": true,
    "krakow.pl": true,
    "poznan.pl": true,
    "wroc.pl": true,
    "zakopane.pl": true,
    "pantheon.io": true,
    "gotpantheon.com": true,
    "priv.at": true,
    "qa2.com": true,
    "rhcloud.com": true,
    "sandcats.io": true,
    "biz.ua": true,
    "co.ua": true,
    "pp.ua": true,
    "sinaapp.com": true,
    "vipsinaapp.com": true,
    "1kapp.com": true,
    "gda.pl": true,
    "gdansk.pl": true,
    "gdynia.pl": true,
    "med.pl": true,
    "sopot.pl": true,
    "hk.com": true,
    "hk.org": true,
    "ltd.hk": true,
    "inc.hk": true,
    "yolasite.com": true,
    "za.net": true,
    "za.org": true
  });
  return module.exports;
});

$__System.registerDynamic("npm:tough-cookie@2.2.2/lib/permuteDomain.js", ["npm:tough-cookie@2.2.2/lib/pubsuffix.js"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var pubsuffix = $__require('npm:tough-cookie@2.2.2/lib/pubsuffix.js');
  function permuteDomain(domain) {
    var pubSuf = pubsuffix.getPublicSuffix(domain);
    if (!pubSuf) {
      return null;
    }
    if (pubSuf == domain) {
      return [domain];
    }
    var prefix = domain.slice(0, -(pubSuf.length + 1));
    var parts = prefix.split('.').reverse();
    var cur = pubSuf;
    var permutations = [cur];
    while (parts.length) {
      cur = parts.shift() + '.' + cur;
      permutations.push(cur);
    }
    return permutations;
  }
  exports.permuteDomain = permuteDomain;
  return module.exports;
});

$__System.registerDynamic("npm:tough-cookie@2.2.2/lib/cookie.js", ["@node/net", "@node/url", "npm:tough-cookie@2.2.2/lib/pubsuffix.js", "npm:tough-cookie@2.2.2/lib/store.js", "npm:tough-cookie@2.2.2/lib/memstore.js", "npm:tough-cookie@2.2.2/lib/pathMatch.js", "npm:tough-cookie@2.2.2/package.json", "@node/punycode", "npm:tough-cookie@2.2.2/lib/permuteDomain.js"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var net = $__require('@node/net');
  var urlParse = $__require('@node/url').parse;
  var pubsuffix = $__require('npm:tough-cookie@2.2.2/lib/pubsuffix.js');
  var Store = $__require('npm:tough-cookie@2.2.2/lib/store.js').Store;
  var MemoryCookieStore = $__require('npm:tough-cookie@2.2.2/lib/memstore.js').MemoryCookieStore;
  var pathMatch = $__require('npm:tough-cookie@2.2.2/lib/pathMatch.js').pathMatch;
  var VERSION = $__require('npm:tough-cookie@2.2.2/package.json').version;
  var punycode;
  try {
    punycode = $__require('@node/punycode');
  } catch (e) {
    console.warn("cookie: can't load punycode; won't use punycode for domain normalization");
  }
  var DATE_DELIM = /[\x09\x20-\x2F\x3B-\x40\x5B-\x60\x7B-\x7E]/;
  var COOKIE_OCTET = /[\x21\x23-\x2B\x2D-\x3A\x3C-\x5B\x5D-\x7E]/;
  var COOKIE_OCTETS = new RegExp('^' + COOKIE_OCTET.source + '+$');
  var CONTROL_CHARS = /[\x00-\x1F]/;
  var COOKIE_PAIR = /^(([^=;]+))\s*=\s*([^\n\r\0]*)/;
  var LOOSE_COOKIE_PAIR = /^((?:=)?([^=;]*)\s*=\s*)?([^\n\r\0]*)/;
  var PATH_VALUE = /[\x20-\x3A\x3C-\x7E]+/;
  var TRAILING_SEMICOLON = /;+$/;
  var DAY_OF_MONTH = /^(\d{1,2})[^\d]*$/;
  var TIME = /^(\d{1,2})[^\d]*:(\d{1,2})[^\d]*:(\d{1,2})[^\d]*$/;
  var MONTH = /^(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)/i;
  var MONTH_TO_NUM = {
    jan: 0,
    feb: 1,
    mar: 2,
    apr: 3,
    may: 4,
    jun: 5,
    jul: 6,
    aug: 7,
    sep: 8,
    oct: 9,
    nov: 10,
    dec: 11
  };
  var NUM_TO_MONTH = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  var NUM_TO_DAY = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
  var YEAR = /^(\d{2}|\d{4})$/;
  var MAX_TIME = 2147483647000;
  var MIN_TIME = 0;
  function parseDate(str) {
    if (!str) {
      return;
    }
    var tokens = str.split(DATE_DELIM);
    if (!tokens) {
      return;
    }
    var hour = null;
    var minutes = null;
    var seconds = null;
    var day = null;
    var month = null;
    var year = null;
    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i].trim();
      if (!token.length) {
        continue;
      }
      var result;
      if (seconds === null) {
        result = TIME.exec(token);
        if (result) {
          hour = parseInt(result[1], 10);
          minutes = parseInt(result[2], 10);
          seconds = parseInt(result[3], 10);
          if (hour > 23 || minutes > 59 || seconds > 59) {
            return;
          }
          continue;
        }
      }
      if (day === null) {
        result = DAY_OF_MONTH.exec(token);
        if (result) {
          day = parseInt(result, 10);
          if (day < 1 || day > 31) {
            return;
          }
          continue;
        }
      }
      if (month === null) {
        result = MONTH.exec(token);
        if (result) {
          month = MONTH_TO_NUM[result[1].toLowerCase()];
          continue;
        }
      }
      if (year === null) {
        result = YEAR.exec(token);
        if (result) {
          year = parseInt(result[0], 10);
          if (70 <= year && year <= 99) {
            year += 1900;
          } else if (0 <= year && year <= 69) {
            year += 2000;
          }
          if (year < 1601) {
            return;
          }
        }
      }
    }
    if (seconds === null || day === null || month === null || year === null) {
      return;
    }
    return new Date(Date.UTC(year, month, day, hour, minutes, seconds));
  }
  function formatDate(date) {
    var d = date.getUTCDate();
    d = d >= 10 ? d : '0' + d;
    var h = date.getUTCHours();
    h = h >= 10 ? h : '0' + h;
    var m = date.getUTCMinutes();
    m = m >= 10 ? m : '0' + m;
    var s = date.getUTCSeconds();
    s = s >= 10 ? s : '0' + s;
    return NUM_TO_DAY[date.getUTCDay()] + ', ' + d + ' ' + NUM_TO_MONTH[date.getUTCMonth()] + ' ' + date.getUTCFullYear() + ' ' + h + ':' + m + ':' + s + ' GMT';
  }
  function canonicalDomain(str) {
    if (str == null) {
      return null;
    }
    str = str.trim().replace(/^\./, '');
    if (punycode && /[^\u0001-\u007f]/.test(str)) {
      str = punycode.toASCII(str);
    }
    return str.toLowerCase();
  }
  function domainMatch(str, domStr, canonicalize) {
    if (str == null || domStr == null) {
      return null;
    }
    if (canonicalize !== false) {
      str = canonicalDomain(str);
      domStr = canonicalDomain(domStr);
    }
    if (str == domStr) {
      return true;
    }
    if (net.isIP(str)) {
      return false;
    }
    var idx = str.indexOf(domStr);
    if (idx <= 0) {
      return false;
    }
    if (str.length !== domStr.length + idx) {
      return false;
    }
    if (str.substr(idx - 1, 1) !== '.') {
      return false;
    }
    return true;
  }
  function defaultPath(path) {
    if (!path || path.substr(0, 1) !== "/") {
      return "/";
    }
    if (path === "/") {
      return path;
    }
    var rightSlash = path.lastIndexOf("/");
    if (rightSlash === 0) {
      return "/";
    }
    return path.slice(0, rightSlash);
  }
  function parse(str, options) {
    if (!options || typeof options !== 'object') {
      options = {};
    }
    str = str.trim();
    var semiColonCheck = TRAILING_SEMICOLON.exec(str);
    if (semiColonCheck) {
      str = str.slice(0, semiColonCheck.index);
    }
    var firstSemi = str.indexOf(';');
    var pairRe = options.loose ? LOOSE_COOKIE_PAIR : COOKIE_PAIR;
    var result = pairRe.exec(firstSemi === -1 ? str : str.substr(0, firstSemi));
    if (!result) {
      return;
    }
    var c = new Cookie();
    if (result[1]) {
      c.key = result[2].trim();
    } else {
      c.key = '';
    }
    c.value = result[3].trim();
    if (CONTROL_CHARS.test(c.key) || CONTROL_CHARS.test(c.value)) {
      return;
    }
    if (firstSemi === -1) {
      return c;
    }
    var unparsed = str.slice(firstSemi).replace(/^\s*;\s*/, '').trim();
    if (unparsed.length === 0) {
      return c;
    }
    var cookie_avs = unparsed.split(/\s*;\s*/);
    while (cookie_avs.length) {
      var av = cookie_avs.shift();
      var av_sep = av.indexOf('=');
      var av_key,
          av_value;
      if (av_sep === -1) {
        av_key = av;
        av_value = null;
      } else {
        av_key = av.substr(0, av_sep);
        av_value = av.substr(av_sep + 1);
      }
      av_key = av_key.trim().toLowerCase();
      if (av_value) {
        av_value = av_value.trim();
      }
      switch (av_key) {
        case 'expires':
          if (av_value) {
            var exp = parseDate(av_value);
            if (exp) {
              c.expires = exp;
            }
          }
          break;
        case 'max-age':
          if (av_value) {
            if (/^-?[0-9]+$/.test(av_value)) {
              var delta = parseInt(av_value, 10);
              c.setMaxAge(delta);
            }
          }
          break;
        case 'domain':
          if (av_value) {
            var domain = av_value.trim().replace(/^\./, '');
            if (domain) {
              c.domain = domain.toLowerCase();
            }
          }
          break;
        case 'path':
          c.path = av_value && av_value[0] === "/" ? av_value : null;
          break;
        case 'secure':
          c.secure = true;
          break;
        case 'httponly':
          c.httpOnly = true;
          break;
        default:
          c.extensions = c.extensions || [];
          c.extensions.push(av);
          break;
      }
    }
    return c;
  }
  function jsonParse(str) {
    var obj;
    try {
      obj = JSON.parse(str);
    } catch (e) {
      return e;
    }
    return obj;
  }
  function fromJSON(str) {
    if (!str) {
      return null;
    }
    var obj;
    if (typeof str === 'string') {
      obj = jsonParse(str);
      if (obj instanceof Error) {
        return null;
      }
    } else {
      obj = str;
    }
    var c = new Cookie();
    for (var i = 0; i < Cookie.serializableProperties.length; i++) {
      var prop = Cookie.serializableProperties[i];
      if (obj[prop] === undefined || obj[prop] === Cookie.prototype[prop]) {
        continue;
      }
      if (prop === 'expires' || prop === 'creation' || prop === 'lastAccessed') {
        if (obj[prop] === null) {
          c[prop] = null;
        } else {
          c[prop] = obj[prop] == "Infinity" ? "Infinity" : new Date(obj[prop]);
        }
      } else {
        c[prop] = obj[prop];
      }
    }
    return c;
  }
  function cookieCompare(a, b) {
    var cmp = 0;
    var aPathLen = a.path ? a.path.length : 0;
    var bPathLen = b.path ? b.path.length : 0;
    cmp = bPathLen - aPathLen;
    if (cmp !== 0) {
      return cmp;
    }
    var aTime = a.creation ? a.creation.getTime() : MAX_TIME;
    var bTime = b.creation ? b.creation.getTime() : MAX_TIME;
    cmp = aTime - bTime;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = a.creationIndex - b.creationIndex;
    return cmp;
  }
  function permutePath(path) {
    if (path === '/') {
      return ['/'];
    }
    if (path.lastIndexOf('/') === path.length - 1) {
      path = path.substr(0, path.length - 1);
    }
    var permutations = [path];
    while (path.length > 1) {
      var lindex = path.lastIndexOf('/');
      if (lindex === 0) {
        break;
      }
      path = path.substr(0, lindex);
      permutations.push(path);
    }
    permutations.push('/');
    return permutations;
  }
  function getCookieContext(url) {
    if (url instanceof Object) {
      return url;
    }
    try {
      url = decodeURI(url);
    } catch (err) {}
    return urlParse(url);
  }
  function Cookie(options) {
    options = options || {};
    Object.keys(options).forEach(function(prop) {
      if (Cookie.prototype.hasOwnProperty(prop) && Cookie.prototype[prop] !== options[prop] && prop.substr(0, 1) !== '_') {
        this[prop] = options[prop];
      }
    }, this);
    this.creation = this.creation || new Date();
    Object.defineProperty(this, 'creationIndex', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: ++Cookie.cookiesCreated
    });
  }
  Cookie.cookiesCreated = 0;
  Cookie.parse = parse;
  Cookie.fromJSON = fromJSON;
  Cookie.prototype.key = "";
  Cookie.prototype.value = "";
  Cookie.prototype.expires = "Infinity";
  Cookie.prototype.maxAge = null;
  Cookie.prototype.domain = null;
  Cookie.prototype.path = null;
  Cookie.prototype.secure = false;
  Cookie.prototype.httpOnly = false;
  Cookie.prototype.extensions = null;
  Cookie.prototype.hostOnly = null;
  Cookie.prototype.pathIsDefault = null;
  Cookie.prototype.creation = null;
  Cookie.prototype.lastAccessed = null;
  Object.defineProperty(Cookie.prototype, 'creationIndex', {
    configurable: true,
    enumerable: false,
    writable: true,
    value: 0
  });
  Cookie.serializableProperties = Object.keys(Cookie.prototype).filter(function(prop) {
    return !(Cookie.prototype[prop] instanceof Function || prop === 'creationIndex' || prop.substr(0, 1) === '_');
  });
  Cookie.prototype.inspect = function inspect() {
    var now = Date.now();
    return 'Cookie="' + this.toString() + '; hostOnly=' + (this.hostOnly != null ? this.hostOnly : '?') + '; aAge=' + (this.lastAccessed ? (now - this.lastAccessed.getTime()) + 'ms' : '?') + '; cAge=' + (this.creation ? (now - this.creation.getTime()) + 'ms' : '?') + '"';
  };
  Cookie.prototype.toJSON = function() {
    var obj = {};
    var props = Cookie.serializableProperties;
    for (var i = 0; i < props.length; i++) {
      var prop = props[i];
      if (this[prop] === Cookie.prototype[prop]) {
        continue;
      }
      if (prop === 'expires' || prop === 'creation' || prop === 'lastAccessed') {
        if (this[prop] === null) {
          obj[prop] = null;
        } else {
          obj[prop] = this[prop] == "Infinity" ? "Infinity" : this[prop].toISOString();
        }
      } else if (prop === 'maxAge') {
        if (this[prop] !== null) {
          obj[prop] = (this[prop] == Infinity || this[prop] == -Infinity) ? this[prop].toString() : this[prop];
        }
      } else {
        if (this[prop] !== Cookie.prototype[prop]) {
          obj[prop] = this[prop];
        }
      }
    }
    return obj;
  };
  Cookie.prototype.clone = function() {
    return fromJSON(this.toJSON());
  };
  Cookie.prototype.validate = function validate() {
    if (!COOKIE_OCTETS.test(this.value)) {
      return false;
    }
    if (this.expires != Infinity && !(this.expires instanceof Date) && !parseDate(this.expires)) {
      return false;
    }
    if (this.maxAge != null && this.maxAge <= 0) {
      return false;
    }
    if (this.path != null && !PATH_VALUE.test(this.path)) {
      return false;
    }
    var cdomain = this.cdomain();
    if (cdomain) {
      if (cdomain.match(/\.$/)) {
        return false;
      }
      var suffix = pubsuffix.getPublicSuffix(cdomain);
      if (suffix == null) {
        return false;
      }
    }
    return true;
  };
  Cookie.prototype.setExpires = function setExpires(exp) {
    if (exp instanceof Date) {
      this.expires = exp;
    } else {
      this.expires = parseDate(exp) || "Infinity";
    }
  };
  Cookie.prototype.setMaxAge = function setMaxAge(age) {
    if (age === Infinity || age === -Infinity) {
      this.maxAge = age.toString();
    } else {
      this.maxAge = age;
    }
  };
  Cookie.prototype.cookieString = function cookieString() {
    var val = this.value;
    if (val == null) {
      val = '';
    }
    if (this.key === '') {
      return val;
    }
    return this.key + '=' + val;
  };
  Cookie.prototype.toString = function toString() {
    var str = this.cookieString();
    if (this.expires != Infinity) {
      if (this.expires instanceof Date) {
        str += '; Expires=' + formatDate(this.expires);
      } else {
        str += '; Expires=' + this.expires;
      }
    }
    if (this.maxAge != null && this.maxAge != Infinity) {
      str += '; Max-Age=' + this.maxAge;
    }
    if (this.domain && !this.hostOnly) {
      str += '; Domain=' + this.domain;
    }
    if (this.path) {
      str += '; Path=' + this.path;
    }
    if (this.secure) {
      str += '; Secure';
    }
    if (this.httpOnly) {
      str += '; HttpOnly';
    }
    if (this.extensions) {
      this.extensions.forEach(function(ext) {
        str += '; ' + ext;
      });
    }
    return str;
  };
  Cookie.prototype.TTL = function TTL(now) {
    if (this.maxAge != null) {
      return this.maxAge <= 0 ? 0 : this.maxAge * 1000;
    }
    var expires = this.expires;
    if (expires != Infinity) {
      if (!(expires instanceof Date)) {
        expires = parseDate(expires) || Infinity;
      }
      if (expires == Infinity) {
        return Infinity;
      }
      return expires.getTime() - (now || Date.now());
    }
    return Infinity;
  };
  Cookie.prototype.expiryTime = function expiryTime(now) {
    if (this.maxAge != null) {
      var relativeTo = now || this.creation || new Date();
      var age = (this.maxAge <= 0) ? -Infinity : this.maxAge * 1000;
      return relativeTo.getTime() + age;
    }
    if (this.expires == Infinity) {
      return Infinity;
    }
    return this.expires.getTime();
  };
  Cookie.prototype.expiryDate = function expiryDate(now) {
    var millisec = this.expiryTime(now);
    if (millisec == Infinity) {
      return new Date(MAX_TIME);
    } else if (millisec == -Infinity) {
      return new Date(MIN_TIME);
    } else {
      return new Date(millisec);
    }
  };
  Cookie.prototype.isPersistent = function isPersistent() {
    return (this.maxAge != null || this.expires != Infinity);
  };
  Cookie.prototype.cdomain = Cookie.prototype.canonicalizedDomain = function canonicalizedDomain() {
    if (this.domain == null) {
      return null;
    }
    return canonicalDomain(this.domain);
  };
  function CookieJar(store, options) {
    if (typeof options === "boolean") {
      options = {rejectPublicSuffixes: options};
    } else if (options == null) {
      options = {};
    }
    if (options.rejectPublicSuffixes != null) {
      this.rejectPublicSuffixes = options.rejectPublicSuffixes;
    }
    if (options.looseMode != null) {
      this.enableLooseMode = options.looseMode;
    }
    if (!store) {
      store = new MemoryCookieStore();
    }
    this.store = store;
  }
  CookieJar.prototype.store = null;
  CookieJar.prototype.rejectPublicSuffixes = true;
  CookieJar.prototype.enableLooseMode = false;
  var CAN_BE_SYNC = [];
  CAN_BE_SYNC.push('setCookie');
  CookieJar.prototype.setCookie = function(cookie, url, options, cb) {
    var err;
    var context = getCookieContext(url);
    if (options instanceof Function) {
      cb = options;
      options = {};
    }
    var host = canonicalDomain(context.hostname);
    var loose = this.enableLooseMode;
    if (options.loose != null) {
      loose = options.loose;
    }
    if (!(cookie instanceof Cookie)) {
      cookie = Cookie.parse(cookie, {loose: loose});
    }
    if (!cookie) {
      err = new Error("Cookie failed to parse");
      return cb(options.ignoreError ? null : err);
    }
    var now = options.now || new Date();
    if (this.rejectPublicSuffixes && cookie.domain) {
      var suffix = pubsuffix.getPublicSuffix(cookie.cdomain());
      if (suffix == null) {
        err = new Error("Cookie has domain set to a public suffix");
        return cb(options.ignoreError ? null : err);
      }
    }
    if (cookie.domain) {
      if (!domainMatch(host, cookie.cdomain(), false)) {
        err = new Error("Cookie not in this host's domain. Cookie:" + cookie.cdomain() + " Request:" + host);
        return cb(options.ignoreError ? null : err);
      }
      if (cookie.hostOnly == null) {
        cookie.hostOnly = false;
      }
    } else {
      cookie.hostOnly = true;
      cookie.domain = host;
    }
    if (!cookie.path || cookie.path[0] !== '/') {
      cookie.path = defaultPath(context.pathname);
      cookie.pathIsDefault = true;
    }
    if (options.http === false && cookie.httpOnly) {
      err = new Error("Cookie is HttpOnly and this isn't an HTTP API");
      return cb(options.ignoreError ? null : err);
    }
    var store = this.store;
    if (!store.updateCookie) {
      store.updateCookie = function(oldCookie, newCookie, cb) {
        this.putCookie(newCookie, cb);
      };
    }
    function withCookie(err, oldCookie) {
      if (err) {
        return cb(err);
      }
      var next = function(err) {
        if (err) {
          return cb(err);
        } else {
          cb(null, cookie);
        }
      };
      if (oldCookie) {
        if (options.http === false && oldCookie.httpOnly) {
          err = new Error("old Cookie is HttpOnly and this isn't an HTTP API");
          return cb(options.ignoreError ? null : err);
        }
        cookie.creation = oldCookie.creation;
        cookie.creationIndex = oldCookie.creationIndex;
        cookie.lastAccessed = now;
        store.updateCookie(oldCookie, cookie, next);
      } else {
        cookie.creation = cookie.lastAccessed = now;
        store.putCookie(cookie, next);
      }
    }
    store.findCookie(cookie.domain, cookie.path, cookie.key, withCookie);
  };
  CAN_BE_SYNC.push('getCookies');
  CookieJar.prototype.getCookies = function(url, options, cb) {
    var context = getCookieContext(url);
    if (options instanceof Function) {
      cb = options;
      options = {};
    }
    var host = canonicalDomain(context.hostname);
    var path = context.pathname || '/';
    var secure = options.secure;
    if (secure == null && context.protocol && (context.protocol == 'https:' || context.protocol == 'wss:')) {
      secure = true;
    }
    var http = options.http;
    if (http == null) {
      http = true;
    }
    var now = options.now || Date.now();
    var expireCheck = options.expire !== false;
    var allPaths = !!options.allPaths;
    var store = this.store;
    function matchingCookie(c) {
      if (c.hostOnly) {
        if (c.domain != host) {
          return false;
        }
      } else {
        if (!domainMatch(host, c.domain, false)) {
          return false;
        }
      }
      if (!allPaths && !pathMatch(path, c.path)) {
        return false;
      }
      if (c.secure && !secure) {
        return false;
      }
      if (c.httpOnly && !http) {
        return false;
      }
      if (expireCheck && c.expiryTime() <= now) {
        store.removeCookie(c.domain, c.path, c.key, function() {});
        return false;
      }
      return true;
    }
    store.findCookies(host, allPaths ? null : path, function(err, cookies) {
      if (err) {
        return cb(err);
      }
      cookies = cookies.filter(matchingCookie);
      if (options.sort !== false) {
        cookies = cookies.sort(cookieCompare);
      }
      var now = new Date();
      cookies.forEach(function(c) {
        c.lastAccessed = now;
      });
      cb(null, cookies);
    });
  };
  CAN_BE_SYNC.push('getCookieString');
  CookieJar.prototype.getCookieString = function() {
    var args = Array.prototype.slice.call(arguments, 0);
    var cb = args.pop();
    var next = function(err, cookies) {
      if (err) {
        cb(err);
      } else {
        cb(null, cookies.sort(cookieCompare).map(function(c) {
          return c.cookieString();
        }).join('; '));
      }
    };
    args.push(next);
    this.getCookies.apply(this, args);
  };
  CAN_BE_SYNC.push('getSetCookieStrings');
  CookieJar.prototype.getSetCookieStrings = function() {
    var args = Array.prototype.slice.call(arguments, 0);
    var cb = args.pop();
    var next = function(err, cookies) {
      if (err) {
        cb(err);
      } else {
        cb(null, cookies.map(function(c) {
          return c.toString();
        }));
      }
    };
    args.push(next);
    this.getCookies.apply(this, args);
  };
  CAN_BE_SYNC.push('serialize');
  CookieJar.prototype.serialize = function(cb) {
    var type = this.store.constructor.name;
    if (type === 'Object') {
      type = null;
    }
    var serialized = {
      version: 'tough-cookie@' + VERSION,
      storeType: type,
      rejectPublicSuffixes: !!this.rejectPublicSuffixes,
      cookies: []
    };
    if (!(this.store.getAllCookies && typeof this.store.getAllCookies === 'function')) {
      return cb(new Error('store does not support getAllCookies and cannot be serialized'));
    }
    this.store.getAllCookies(function(err, cookies) {
      if (err) {
        return cb(err);
      }
      serialized.cookies = cookies.map(function(cookie) {
        cookie = (cookie instanceof Cookie) ? cookie.toJSON() : cookie;
        delete cookie.creationIndex;
        return cookie;
      });
      return cb(null, serialized);
    });
  };
  CookieJar.prototype.toJSON = function() {
    return this.serializeSync();
  };
  CAN_BE_SYNC.push('_importCookies');
  CookieJar.prototype._importCookies = function(serialized, cb) {
    var jar = this;
    var cookies = serialized.cookies;
    if (!cookies || !Array.isArray(cookies)) {
      return cb(new Error('serialized jar has no cookies array'));
    }
    function putNext(err) {
      if (err) {
        return cb(err);
      }
      if (!cookies.length) {
        return cb(err, jar);
      }
      var cookie;
      try {
        cookie = fromJSON(cookies.shift());
      } catch (e) {
        return cb(e);
      }
      if (cookie === null) {
        return putNext(null);
      }
      jar.store.putCookie(cookie, putNext);
    }
    putNext();
  };
  CookieJar.deserialize = function(strOrObj, store, cb) {
    if (arguments.length !== 3) {
      cb = store;
      store = null;
    }
    var serialized;
    if (typeof strOrObj === 'string') {
      serialized = jsonParse(strOrObj);
      if (serialized instanceof Error) {
        return cb(serialized);
      }
    } else {
      serialized = strOrObj;
    }
    var jar = new CookieJar(store, serialized.rejectPublicSuffixes);
    jar._importCookies(serialized, function(err) {
      if (err) {
        return cb(err);
      }
      cb(null, jar);
    });
  };
  CookieJar.deserializeSync = function(strOrObj, store) {
    var serialized = typeof strOrObj === 'string' ? JSON.parse(strOrObj) : strOrObj;
    var jar = new CookieJar(store, serialized.rejectPublicSuffixes);
    if (!jar.store.synchronous) {
      throw new Error('CookieJar store is not synchronous; use async API instead.');
    }
    jar._importCookiesSync(serialized);
    return jar;
  };
  CookieJar.fromJSON = CookieJar.deserializeSync;
  CAN_BE_SYNC.push('clone');
  CookieJar.prototype.clone = function(newStore, cb) {
    if (arguments.length === 1) {
      cb = newStore;
      newStore = null;
    }
    this.serialize(function(err, serialized) {
      if (err) {
        return cb(err);
      }
      CookieJar.deserialize(newStore, serialized, cb);
    });
  };
  function syncWrap(method) {
    return function() {
      if (!this.store.synchronous) {
        throw new Error('CookieJar store is not synchronous; use async API instead.');
      }
      var args = Array.prototype.slice.call(arguments);
      var syncErr,
          syncResult;
      args.push(function syncCb(err, result) {
        syncErr = err;
        syncResult = result;
      });
      this[method].apply(this, args);
      if (syncErr) {
        throw syncErr;
      }
      return syncResult;
    };
  }
  CAN_BE_SYNC.forEach(function(method) {
    CookieJar.prototype[method + 'Sync'] = syncWrap(method);
  });
  module.exports = {
    CookieJar: CookieJar,
    Cookie: Cookie,
    Store: Store,
    MemoryCookieStore: MemoryCookieStore,
    parseDate: parseDate,
    formatDate: formatDate,
    parse: parse,
    fromJSON: fromJSON,
    domainMatch: domainMatch,
    defaultPath: defaultPath,
    pathMatch: pathMatch,
    getPublicSuffix: pubsuffix.getPublicSuffix,
    cookieCompare: cookieCompare,
    permuteDomain: $__require('npm:tough-cookie@2.2.2/lib/permuteDomain.js').permuteDomain,
    permutePath: permutePath,
    canonicalDomain: canonicalDomain
  };
  return module.exports;
});

$__System.registerDynamic("npm:request@2.72.0/lib/cookies.js", ["npm:tough-cookie@2.2.2/lib/cookie.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var tough = $__require('npm:tough-cookie@2.2.2/lib/cookie.js');
  var Cookie = tough.Cookie,
      CookieJar = tough.CookieJar;
  exports.parse = function(str) {
    if (str && str.uri) {
      str = str.uri;
    }
    if (typeof str !== 'string') {
      throw new Error('The cookie function only accepts STRING as param');
    }
    return Cookie.parse(str, {loose: true});
  };
  function RequestJar(store) {
    var self = this;
    self._jar = new CookieJar(store, {looseMode: true});
  }
  RequestJar.prototype.setCookie = function(cookieOrStr, uri, options) {
    var self = this;
    return self._jar.setCookieSync(cookieOrStr, uri, options || {});
  };
  RequestJar.prototype.getCookieString = function(uri) {
    var self = this;
    return self._jar.getCookieStringSync(uri);
  };
  RequestJar.prototype.getCookies = function(uri) {
    var self = this;
    return self._jar.getCookiesSync(uri);
  };
  exports.jar = function(store) {
    return new RequestJar(store);
  };
  return module.exports;
});

$__System.registerDynamic("npm:request@2.72.0/lib/getProxyFromURI.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  function formatHostname(hostname) {
    return hostname.replace(/^\.*/, '.').toLowerCase();
  }
  function parseNoProxyZone(zone) {
    zone = zone.trim().toLowerCase();
    var zoneParts = zone.split(':', 2),
        zoneHost = formatHostname(zoneParts[0]),
        zonePort = zoneParts[1],
        hasPort = zone.indexOf(':') > -1;
    return {
      hostname: zoneHost,
      port: zonePort,
      hasPort: hasPort
    };
  }
  function uriInNoProxy(uri, noProxy) {
    var port = uri.port || (uri.protocol === 'https:' ? '443' : '80'),
        hostname = formatHostname(uri.hostname),
        noProxyList = noProxy.split(',');
    return noProxyList.map(parseNoProxyZone).some(function(noProxyZone) {
      var isMatchedAt = hostname.indexOf(noProxyZone.hostname),
          hostnameMatched = (isMatchedAt > -1 && (isMatchedAt === hostname.length - noProxyZone.hostname.length));
      if (noProxyZone.hasPort) {
        return (port === noProxyZone.port) && hostnameMatched;
      }
      return hostnameMatched;
    });
  }
  function getProxyFromURI(uri) {
    var noProxy = process.env.NO_PROXY || process.env.no_proxy || '';
    if (noProxy === '*') {
      return null;
    }
    if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {
      return null;
    }
    if (uri.protocol === 'http:') {
      return process.env.HTTP_PROXY || process.env.http_proxy || null;
    }
    if (uri.protocol === 'https:') {
      return process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy || null;
    }
    return null;
  }
  module.exports = getProxyFromURI;
  return module.exports;
});

$__System.registerDynamic("npm:request@2.72.0/lib/querystring.js", ["npm:qs@6.1.0/lib/index.js", "@node/querystring", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var qs = $__require('npm:qs@6.1.0/lib/index.js'),
      querystring = $__require('@node/querystring');
  function Querystring(request) {
    this.request = request;
    this.lib = null;
    this.useQuerystring = null;
    this.parseOptions = null;
    this.stringifyOptions = null;
  }
  Querystring.prototype.init = function(options) {
    if (this.lib) {
      return;
    }
    this.useQuerystring = options.useQuerystring;
    this.lib = (this.useQuerystring ? querystring : qs);
    this.parseOptions = options.qsParseOptions || {};
    this.stringifyOptions = options.qsStringifyOptions || {};
  };
  Querystring.prototype.stringify = function(obj) {
    return (this.useQuerystring) ? this.rfc3986(this.lib.stringify(obj, this.stringifyOptions.sep || null, this.stringifyOptions.eq || null, this.stringifyOptions)) : this.lib.stringify(obj, this.stringifyOptions);
  };
  Querystring.prototype.parse = function(str) {
    return (this.useQuerystring) ? this.lib.parse(str, this.parseOptions.sep || null, this.parseOptions.eq || null, this.parseOptions) : this.lib.parse(str, this.parseOptions);
  };
  Querystring.prototype.rfc3986 = function(str) {
    return str.replace(/[!'()*]/g, function(c) {
      return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
  };
  Querystring.prototype.unescape = querystring.unescape;
  exports.Querystring = Querystring;
  return module.exports;
});

$__System.registerDynamic("npm:pinkie@2.0.4/index.js", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var PENDING = 'pending';
  var SETTLED = 'settled';
  var FULFILLED = 'fulfilled';
  var REJECTED = 'rejected';
  var NOOP = function() {};
  var isNode = typeof global !== 'undefined' && typeof global.process !== 'undefined' && typeof global.process.emit === 'function';
  var asyncSetTimer = typeof setImmediate === 'undefined' ? setTimeout : setImmediate;
  var asyncQueue = [];
  var asyncTimer;
  function asyncFlush() {
    for (var i = 0; i < asyncQueue.length; i++) {
      asyncQueue[i][0](asyncQueue[i][1]);
    }
    asyncQueue = [];
    asyncTimer = false;
  }
  function asyncCall(callback, arg) {
    asyncQueue.push([callback, arg]);
    if (!asyncTimer) {
      asyncTimer = true;
      asyncSetTimer(asyncFlush, 0);
    }
  }
  function invokeResolver(resolver, promise) {
    function resolvePromise(value) {
      resolve(promise, value);
    }
    function rejectPromise(reason) {
      reject(promise, reason);
    }
    try {
      resolver(resolvePromise, rejectPromise);
    } catch (e) {
      rejectPromise(e);
    }
  }
  function invokeCallback(subscriber) {
    var owner = subscriber.owner;
    var settled = owner._state;
    var value = owner._data;
    var callback = subscriber[settled];
    var promise = subscriber.then;
    if (typeof callback === 'function') {
      settled = FULFILLED;
      try {
        value = callback(value);
      } catch (e) {
        reject(promise, e);
      }
    }
    if (!handleThenable(promise, value)) {
      if (settled === FULFILLED) {
        resolve(promise, value);
      }
      if (settled === REJECTED) {
        reject(promise, value);
      }
    }
  }
  function handleThenable(promise, value) {
    var resolved;
    try {
      if (promise === value) {
        throw new TypeError('A promises callback cannot return that same promise.');
      }
      if (value && (typeof value === 'function' || typeof value === 'object')) {
        var then = value.then;
        if (typeof then === 'function') {
          then.call(value, function(val) {
            if (!resolved) {
              resolved = true;
              if (value === val) {
                fulfill(promise, val);
              } else {
                resolve(promise, val);
              }
            }
          }, function(reason) {
            if (!resolved) {
              resolved = true;
              reject(promise, reason);
            }
          });
          return true;
        }
      }
    } catch (e) {
      if (!resolved) {
        reject(promise, e);
      }
      return true;
    }
    return false;
  }
  function resolve(promise, value) {
    if (promise === value || !handleThenable(promise, value)) {
      fulfill(promise, value);
    }
  }
  function fulfill(promise, value) {
    if (promise._state === PENDING) {
      promise._state = SETTLED;
      promise._data = value;
      asyncCall(publishFulfillment, promise);
    }
  }
  function reject(promise, reason) {
    if (promise._state === PENDING) {
      promise._state = SETTLED;
      promise._data = reason;
      asyncCall(publishRejection, promise);
    }
  }
  function publish(promise) {
    promise._then = promise._then.forEach(invokeCallback);
  }
  function publishFulfillment(promise) {
    promise._state = FULFILLED;
    publish(promise);
  }
  function publishRejection(promise) {
    promise._state = REJECTED;
    publish(promise);
    if (!promise._handled && isNode) {
      global.process.emit('unhandledRejection', promise._data, promise);
    }
  }
  function notifyRejectionHandled(promise) {
    global.process.emit('rejectionHandled', promise);
  }
  function Promise(resolver) {
    if (typeof resolver !== 'function') {
      throw new TypeError('Promise resolver ' + resolver + ' is not a function');
    }
    if (this instanceof Promise === false) {
      throw new TypeError('Failed to construct \'Promise\': Please use the \'new\' operator, this object constructor cannot be called as a function.');
    }
    this._then = [];
    invokeResolver(resolver, this);
  }
  Promise.prototype = {
    constructor: Promise,
    _state: PENDING,
    _then: null,
    _data: undefined,
    _handled: false,
    then: function(onFulfillment, onRejection) {
      var subscriber = {
        owner: this,
        then: new this.constructor(NOOP),
        fulfilled: onFulfillment,
        rejected: onRejection
      };
      if ((onRejection || onFulfillment) && !this._handled) {
        this._handled = true;
        if (this._state === REJECTED && isNode) {
          asyncCall(notifyRejectionHandled, this);
        }
      }
      if (this._state === FULFILLED || this._state === REJECTED) {
        asyncCall(invokeCallback, subscriber);
      } else {
        this._then.push(subscriber);
      }
      return subscriber.then;
    },
    catch: function(onRejection) {
      return this.then(null, onRejection);
    }
  };
  Promise.all = function(promises) {
    if (!Array.isArray(promises)) {
      throw new TypeError('You must pass an array to Promise.all().');
    }
    return new Promise(function(resolve, reject) {
      var results = [];
      var remaining = 0;
      function resolver(index) {
        remaining++;
        return function(value) {
          results[index] = value;
          if (!--remaining) {
            resolve(results);
          }
        };
      }
      for (var i = 0,
          promise; i < promises.length; i++) {
        promise = promises[i];
        if (promise && typeof promise.then === 'function') {
          promise.then(resolver(i), reject);
        } else {
          results[i] = promise;
        }
      }
      if (!remaining) {
        resolve(results);
      }
    });
  };
  Promise.race = function(promises) {
    if (!Array.isArray(promises)) {
      throw new TypeError('You must pass an array to Promise.race().');
    }
    return new Promise(function(resolve, reject) {
      for (var i = 0,
          promise; i < promises.length; i++) {
        promise = promises[i];
        if (promise && typeof promise.then === 'function') {
          promise.then(resolve, reject);
        } else {
          resolve(promise);
        }
      }
    });
  };
  Promise.resolve = function(value) {
    if (value && typeof value === 'object' && value.constructor === Promise) {
      return value;
    }
    return new Promise(function(resolve) {
      resolve(value);
    });
  };
  Promise.reject = function(reason) {
    return new Promise(function(resolve, reject) {
      reject(reason);
    });
  };
  module.exports = Promise;
  return module.exports;
});

$__System.registerDynamic("npm:pinkie-promise@2.0.1/index.js", ["npm:pinkie@2.0.4/index.js"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = typeof Promise === 'function' ? Promise : $__require('npm:pinkie@2.0.4/index.js');
  return module.exports;
});

$__System.registerDynamic("npm:har-validator@2.0.6/lib/error.js", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  function ValidationError(errors) {
    this.name = 'ValidationError';
    this.errors = errors;
  }
  ValidationError.prototype = Error.prototype;
  module.exports = ValidationError;
  return module.exports;
});

$__System.registerDynamic("npm:is-property@1.0.2/is-property.js", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  function isProperty(str) {
    return /^[$A-Z\_a-z\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc][$A-Z\_a-z\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc0-9\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f]*$/.test(str);
  }
  module.exports = isProperty;
  return module.exports;
});

$__System.registerDynamic("npm:generate-object-property@1.2.0/index.js", ["npm:is-property@1.0.2/is-property.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var isProperty = $__require('npm:is-property@1.0.2/is-property.js');
  var gen = function(obj, prop) {
    return isProperty(prop) ? obj + '.' + prop : obj + '[' + JSON.stringify(prop) + ']';
  };
  gen.valid = isProperty;
  gen.property = function(prop) {
    return isProperty(prop) ? prop : JSON.stringify(prop);
  };
  module.exports = gen;
  return module.exports;
});

$__System.registerDynamic("npm:generate-function@2.0.0/index.js", ["@node/util"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var util = $__require('@node/util');
  var INDENT_START = /[\{\[]/;
  var INDENT_END = /[\}\]]/;
  module.exports = function() {
    var lines = [];
    var indent = 0;
    var push = function(str) {
      var spaces = '';
      while (spaces.length < indent * 2)
        spaces += '  ';
      lines.push(spaces + str);
    };
    var line = function(fmt) {
      if (!fmt)
        return line;
      if (INDENT_END.test(fmt.trim()[0]) && INDENT_START.test(fmt[fmt.length - 1])) {
        indent--;
        push(util.format.apply(util, arguments));
        indent++;
        return line;
      }
      if (INDENT_START.test(fmt[fmt.length - 1])) {
        push(util.format.apply(util, arguments));
        indent++;
        return line;
      }
      if (INDENT_END.test(fmt.trim()[0])) {
        indent--;
        push(util.format.apply(util, arguments));
        return line;
      }
      push(util.format.apply(util, arguments));
      return line;
    };
    line.toString = function() {
      return lines.join('\n');
    };
    line.toFunction = function(scope) {
      var src = 'return (' + line.toString() + ')';
      var keys = Object.keys(scope || {}).map(function(key) {
        return key;
      });
      var vals = keys.map(function(key) {
        return scope[key];
      });
      return Function.apply(null, keys.concat(src)).apply(null, vals);
    };
    if (arguments.length)
      line.apply(null, arguments);
    return line;
  };
  return module.exports;
});

$__System.registerDynamic("npm:jsonpointer@2.0.0/jsonpointer.js", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var untilde = function(str) {
    return str.replace(/~./g, function(m) {
      switch (m) {
        case "~0":
          return "~";
        case "~1":
          return "/";
      }
      throw new Error("Invalid tilde escape: " + m);
    });
  };
  var traverse = function(obj, pointer, value) {
    var part = untilde(pointer.shift());
    if (!obj.hasOwnProperty(part)) {
      return null;
    }
    if (pointer.length !== 0) {
      return traverse(obj[part], pointer, value);
    }
    if (typeof value === "undefined") {
      return obj[part];
    }
    var old_value = obj[part];
    if (value === null) {
      delete obj[part];
    } else {
      obj[part] = value;
    }
    return old_value;
  };
  var validate_input = function(obj, pointer) {
    if (typeof obj !== "object") {
      throw new Error("Invalid input object.");
    }
    if (pointer === "") {
      return [];
    }
    if (!pointer) {
      throw new Error("Invalid JSON pointer.");
    }
    pointer = pointer.split("/");
    var first = pointer.shift();
    if (first !== "") {
      throw new Error("Invalid JSON pointer.");
    }
    return pointer;
  };
  var get = function(obj, pointer) {
    pointer = validate_input(obj, pointer);
    if (pointer.length === 0) {
      return obj;
    }
    return traverse(obj, pointer);
  };
  var set = function(obj, pointer, value) {
    pointer = validate_input(obj, pointer);
    if (pointer.length === 0) {
      throw new Error("Invalid JSON pointer for set.");
    }
    return traverse(obj, pointer, value);
  };
  exports.get = get;
  exports.set = set;
  return module.exports;
});

$__System.registerDynamic("npm:xtend@4.0.1/immutable.js", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = extend;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  function extend() {
    var target = {};
    for (var i = 0; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  }
  return module.exports;
});

$__System.registerDynamic("npm:is-my-json-valid@2.13.1/formats.js", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports['date-time'] = /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-[0-9]{2}[tT ]\d{2}:\d{2}:\d{2}(\.\d+)?([zZ]|[+-]\d{2}:\d{2})$/;
  exports['date'] = /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-[0-9]{2}$/;
  exports['time'] = /^\d{2}:\d{2}:\d{2}$/;
  exports['email'] = /^\S+@\S+$/;
  exports['ip-address'] = exports['ipv4'] = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
  exports['ipv6'] = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
  exports['uri'] = /^[a-zA-Z][a-zA-Z0-9+-.]*:[^\s]*$/;
  exports['color'] = /(#?([0-9A-Fa-f]{3,6})\b)|(aqua)|(black)|(blue)|(fuchsia)|(gray)|(green)|(lime)|(maroon)|(navy)|(olive)|(orange)|(purple)|(red)|(silver)|(teal)|(white)|(yellow)|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\))/;
  exports['hostname'] = /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*$/;
  exports['alpha'] = /^[a-zA-Z]+$/;
  exports['alphanumeric'] = /^[a-zA-Z0-9]+$/;
  exports['style'] = /\s*(.+?):\s*([^;]+);?/g;
  exports['phone'] = /^\+(?:[0-9] ?){6,14}[0-9]$/;
  exports['utc-millisec'] = /^[0-9]{1,15}\.?[0-9]{0,15}$/;
  return module.exports;
});

$__System.registerDynamic("npm:is-my-json-valid@2.13.1/index.js", ["npm:generate-object-property@1.2.0/index.js", "npm:generate-function@2.0.0/index.js", "npm:jsonpointer@2.0.0/jsonpointer.js", "npm:xtend@4.0.1/immutable.js", "npm:is-my-json-valid@2.13.1/formats.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var genobj = $__require('npm:generate-object-property@1.2.0/index.js');
  var genfun = $__require('npm:generate-function@2.0.0/index.js');
  var jsonpointer = $__require('npm:jsonpointer@2.0.0/jsonpointer.js');
  var xtend = $__require('npm:xtend@4.0.1/immutable.js');
  var formats = $__require('npm:is-my-json-valid@2.13.1/formats.js');
  var get = function(obj, additionalSchemas, ptr) {
    var visit = function(sub) {
      if (sub && sub.id === ptr)
        return sub;
      if (typeof sub !== 'object' || !sub)
        return null;
      return Object.keys(sub).reduce(function(res, k) {
        return res || visit(sub[k]);
      }, null);
    };
    var res = visit(obj);
    if (res)
      return res;
    ptr = ptr.replace(/^#/, '');
    ptr = ptr.replace(/\/$/, '');
    try {
      return jsonpointer.get(obj, decodeURI(ptr));
    } catch (err) {
      var end = ptr.indexOf('#');
      var other;
      if (end !== 0) {
        if (end === -1) {
          other = additionalSchemas[ptr];
        } else {
          var ext = ptr.slice(0, end);
          other = additionalSchemas[ext];
          var fragment = ptr.slice(end).replace(/^#/, '');
          try {
            return jsonpointer.get(other, fragment);
          } catch (err) {}
        }
      } else {
        other = additionalSchemas[ptr];
      }
      return other || null;
    }
  };
  var formatName = function(field) {
    field = JSON.stringify(field);
    var pattern = /\[([^\[\]"]+)\]/;
    while (pattern.test(field))
      field = field.replace(pattern, '."+$1+"');
    return field;
  };
  var types = {};
  types.any = function() {
    return 'true';
  };
  types.null = function(name) {
    return name + ' === null';
  };
  types.boolean = function(name) {
    return 'typeof ' + name + ' === "boolean"';
  };
  types.array = function(name) {
    return 'Array.isArray(' + name + ')';
  };
  types.object = function(name) {
    return 'typeof ' + name + ' === "object" && ' + name + ' && !Array.isArray(' + name + ')';
  };
  types.number = function(name) {
    return 'typeof ' + name + ' === "number"';
  };
  types.integer = function(name) {
    return 'typeof ' + name + ' === "number" && (Math.floor(' + name + ') === ' + name + ' || ' + name + ' > 9007199254740992 || ' + name + ' < -9007199254740992)';
  };
  types.string = function(name) {
    return 'typeof ' + name + ' === "string"';
  };
  var unique = function(array) {
    var list = [];
    for (var i = 0; i < array.length; i++) {
      list.push(typeof array[i] === 'object' ? JSON.stringify(array[i]) : array[i]);
    }
    for (var i = 1; i < list.length; i++) {
      if (list.indexOf(list[i]) !== i)
        return false;
    }
    return true;
  };
  var isMultipleOf = function(name, multipleOf) {
    var res;
    var factor = ((multipleOf | 0) !== multipleOf) ? Math.pow(10, multipleOf.toString().split('.').pop().length) : 1;
    if (factor > 1) {
      var factorName = ((name | 0) !== name) ? Math.pow(10, name.toString().split('.').pop().length) : 1;
      if (factorName > factor)
        res = true;
      else
        res = Math.round(factor * name) % (factor * multipleOf);
    } else
      res = name % multipleOf;
    return !res;
  };
  var toType = function(node) {
    return node.type;
  };
  var compile = function(schema, cache, root, reporter, opts) {
    var fmts = opts ? xtend(formats, opts.formats) : formats;
    var scope = {
      unique: unique,
      formats: fmts,
      isMultipleOf: isMultipleOf
    };
    var verbose = opts ? !!opts.verbose : false;
    var greedy = opts && opts.greedy !== undefined ? opts.greedy : false;
    var syms = {};
    var gensym = function(name) {
      return name + (syms[name] = (syms[name] || 0) + 1);
    };
    var reversePatterns = {};
    var patterns = function(p) {
      if (reversePatterns[p])
        return reversePatterns[p];
      var n = gensym('pattern');
      scope[n] = new RegExp(p);
      reversePatterns[p] = n;
      return n;
    };
    var vars = ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'x', 'y', 'z'];
    var genloop = function() {
      var v = vars.shift();
      vars.push(v + v[0]);
      return v;
    };
    var visit = function(name, node, reporter, filter) {
      var properties = node.properties;
      var type = node.type;
      var tuple = false;
      if (Array.isArray(node.items)) {
        properties = {};
        node.items.forEach(function(item, i) {
          properties[i] = item;
        });
        type = 'array';
        tuple = true;
      }
      var indent = 0;
      var error = function(msg, prop, value) {
        validate('errors++');
        if (reporter === true) {
          validate('if (validate.errors === null) validate.errors = []');
          if (verbose) {
            validate('validate.errors.push({field:%s,message:%s,value:%s,type:%s})', formatName(prop || name), JSON.stringify(msg), value || name, JSON.stringify(type));
          } else {
            validate('validate.errors.push({field:%s,message:%s})', formatName(prop || name), JSON.stringify(msg));
          }
        }
      };
      if (node.required === true) {
        indent++;
        validate('if (%s === undefined) {', name);
        error('is required');
        validate('} else {');
      } else {
        indent++;
        validate('if (%s !== undefined) {', name);
      }
      var valid = [].concat(type).map(function(t) {
        return types[t || 'any'](name);
      }).join(' || ') || 'true';
      if (valid !== 'true') {
        indent++;
        validate('if (!(%s)) {', valid);
        error('is the wrong type');
        validate('} else {');
      }
      if (tuple) {
        if (node.additionalItems === false) {
          validate('if (%s.length > %d) {', name, node.items.length);
          error('has additional items');
          validate('}');
        } else if (node.additionalItems) {
          var i = genloop();
          validate('for (var %s = %d; %s < %s.length; %s++) {', i, node.items.length, i, name, i);
          visit(name + '[' + i + ']', node.additionalItems, reporter, filter);
          validate('}');
        }
      }
      if (node.format && fmts[node.format]) {
        if (type !== 'string' && formats[node.format])
          validate('if (%s) {', types.string(name));
        var n = gensym('format');
        scope[n] = fmts[node.format];
        if (typeof scope[n] === 'function')
          validate('if (!%s(%s)) {', n, name);
        else
          validate('if (!%s.test(%s)) {', n, name);
        error('must be ' + node.format + ' format');
        validate('}');
        if (type !== 'string' && formats[node.format])
          validate('}');
      }
      if (Array.isArray(node.required)) {
        var isUndefined = function(req) {
          return genobj(name, req) + ' === undefined';
        };
        var checkRequired = function(req) {
          var prop = genobj(name, req);
          validate('if (%s === undefined) {', prop);
          error('is required', prop);
          validate('missing++');
          validate('}');
        };
        validate('if ((%s)) {', type !== 'object' ? types.object(name) : 'true');
        validate('var missing = 0');
        node.required.map(checkRequired);
        validate('}');
        if (!greedy) {
          validate('if (missing === 0) {');
          indent++;
        }
      }
      if (node.uniqueItems) {
        if (type !== 'array')
          validate('if (%s) {', types.array(name));
        validate('if (!(unique(%s))) {', name);
        error('must be unique');
        validate('}');
        if (type !== 'array')
          validate('}');
      }
      if (node.enum) {
        var complex = node.enum.some(function(e) {
          return typeof e === 'object';
        });
        var compare = complex ? function(e) {
          return 'JSON.stringify(' + name + ')' + ' !== JSON.stringify(' + JSON.stringify(e) + ')';
        } : function(e) {
          return name + ' !== ' + JSON.stringify(e);
        };
        validate('if (%s) {', node.enum.map(compare).join(' && ') || 'false');
        error('must be an enum value');
        validate('}');
      }
      if (node.dependencies) {
        if (type !== 'object')
          validate('if (%s) {', types.object(name));
        Object.keys(node.dependencies).forEach(function(key) {
          var deps = node.dependencies[key];
          if (typeof deps === 'string')
            deps = [deps];
          var exists = function(k) {
            return genobj(name, k) + ' !== undefined';
          };
          if (Array.isArray(deps)) {
            validate('if (%s !== undefined && !(%s)) {', genobj(name, key), deps.map(exists).join(' && ') || 'true');
            error('dependencies not set');
            validate('}');
          }
          if (typeof deps === 'object') {
            validate('if (%s !== undefined) {', genobj(name, key));
            visit(name, deps, reporter, filter);
            validate('}');
          }
        });
        if (type !== 'object')
          validate('}');
      }
      if (node.additionalProperties || node.additionalProperties === false) {
        if (type !== 'object')
          validate('if (%s) {', types.object(name));
        var i = genloop();
        var keys = gensym('keys');
        var toCompare = function(p) {
          return keys + '[' + i + '] !== ' + JSON.stringify(p);
        };
        var toTest = function(p) {
          return '!' + patterns(p) + '.test(' + keys + '[' + i + '])';
        };
        var additionalProp = Object.keys(properties || {}).map(toCompare).concat(Object.keys(node.patternProperties || {}).map(toTest)).join(' && ') || 'true';
        validate('var %s = Object.keys(%s)', keys, name)('for (var %s = 0; %s < %s.length; %s++) {', i, i, keys, i)('if (%s) {', additionalProp);
        if (node.additionalProperties === false) {
          if (filter)
            validate('delete %s', name + '[' + keys + '[' + i + ']]');
          error('has additional properties', null, JSON.stringify(name + '.') + ' + ' + keys + '[' + i + ']');
        } else {
          visit(name + '[' + keys + '[' + i + ']]', node.additionalProperties, reporter, filter);
        }
        validate('}')('}');
        if (type !== 'object')
          validate('}');
      }
      if (node.$ref) {
        var sub = get(root, opts && opts.schemas || {}, node.$ref);
        if (sub) {
          var fn = cache[node.$ref];
          if (!fn) {
            cache[node.$ref] = function proxy(data) {
              return fn(data);
            };
            fn = compile(sub, cache, root, false, opts);
          }
          var n = gensym('ref');
          scope[n] = fn;
          validate('if (!(%s(%s))) {', n, name);
          error('referenced schema does not match');
          validate('}');
        }
      }
      if (node.not) {
        var prev = gensym('prev');
        validate('var %s = errors', prev);
        visit(name, node.not, false, filter);
        validate('if (%s === errors) {', prev);
        error('negative schema matches');
        validate('} else {')('errors = %s', prev)('}');
      }
      if (node.items && !tuple) {
        if (type !== 'array')
          validate('if (%s) {', types.array(name));
        var i = genloop();
        validate('for (var %s = 0; %s < %s.length; %s++) {', i, i, name, i);
        visit(name + '[' + i + ']', node.items, reporter, filter);
        validate('}');
        if (type !== 'array')
          validate('}');
      }
      if (node.patternProperties) {
        if (type !== 'object')
          validate('if (%s) {', types.object(name));
        var keys = gensym('keys');
        var i = genloop();
        validate('var %s = Object.keys(%s)', keys, name)('for (var %s = 0; %s < %s.length; %s++) {', i, i, keys, i);
        Object.keys(node.patternProperties).forEach(function(key) {
          var p = patterns(key);
          validate('if (%s.test(%s)) {', p, keys + '[' + i + ']');
          visit(name + '[' + keys + '[' + i + ']]', node.patternProperties[key], reporter, filter);
          validate('}');
        });
        validate('}');
        if (type !== 'object')
          validate('}');
      }
      if (node.pattern) {
        var p = patterns(node.pattern);
        if (type !== 'string')
          validate('if (%s) {', types.string(name));
        validate('if (!(%s.test(%s))) {', p, name);
        error('pattern mismatch');
        validate('}');
        if (type !== 'string')
          validate('}');
      }
      if (node.allOf) {
        node.allOf.forEach(function(sch) {
          visit(name, sch, reporter, filter);
        });
      }
      if (node.anyOf && node.anyOf.length) {
        var prev = gensym('prev');
        node.anyOf.forEach(function(sch, i) {
          if (i === 0) {
            validate('var %s = errors', prev);
          } else {
            validate('if (errors !== %s) {', prev)('errors = %s', prev);
          }
          visit(name, sch, false, false);
        });
        node.anyOf.forEach(function(sch, i) {
          if (i)
            validate('}');
        });
        validate('if (%s !== errors) {', prev);
        error('no schemas match');
        validate('}');
      }
      if (node.oneOf && node.oneOf.length) {
        var prev = gensym('prev');
        var passes = gensym('passes');
        validate('var %s = errors', prev)('var %s = 0', passes);
        node.oneOf.forEach(function(sch, i) {
          visit(name, sch, false, false);
          validate('if (%s === errors) {', prev)('%s++', passes)('} else {')('errors = %s', prev)('}');
        });
        validate('if (%s !== 1) {', passes);
        error('no (or more than one) schemas match');
        validate('}');
      }
      if (node.multipleOf !== undefined) {
        if (type !== 'number' && type !== 'integer')
          validate('if (%s) {', types.number(name));
        validate('if (!isMultipleOf(%s, %d)) {', name, node.multipleOf);
        error('has a remainder');
        validate('}');
        if (type !== 'number' && type !== 'integer')
          validate('}');
      }
      if (node.maxProperties !== undefined) {
        if (type !== 'object')
          validate('if (%s) {', types.object(name));
        validate('if (Object.keys(%s).length > %d) {', name, node.maxProperties);
        error('has more properties than allowed');
        validate('}');
        if (type !== 'object')
          validate('}');
      }
      if (node.minProperties !== undefined) {
        if (type !== 'object')
          validate('if (%s) {', types.object(name));
        validate('if (Object.keys(%s).length < %d) {', name, node.minProperties);
        error('has less properties than allowed');
        validate('}');
        if (type !== 'object')
          validate('}');
      }
      if (node.maxItems !== undefined) {
        if (type !== 'array')
          validate('if (%s) {', types.array(name));
        validate('if (%s.length > %d) {', name, node.maxItems);
        error('has more items than allowed');
        validate('}');
        if (type !== 'array')
          validate('}');
      }
      if (node.minItems !== undefined) {
        if (type !== 'array')
          validate('if (%s) {', types.array(name));
        validate('if (%s.length < %d) {', name, node.minItems);
        error('has less items than allowed');
        validate('}');
        if (type !== 'array')
          validate('}');
      }
      if (node.maxLength !== undefined) {
        if (type !== 'string')
          validate('if (%s) {', types.string(name));
        validate('if (%s.length > %d) {', name, node.maxLength);
        error('has longer length than allowed');
        validate('}');
        if (type !== 'string')
          validate('}');
      }
      if (node.minLength !== undefined) {
        if (type !== 'string')
          validate('if (%s) {', types.string(name));
        validate('if (%s.length < %d) {', name, node.minLength);
        error('has less length than allowed');
        validate('}');
        if (type !== 'string')
          validate('}');
      }
      if (node.minimum !== undefined) {
        validate('if (%s %s %d) {', name, node.exclusiveMinimum ? '<=' : '<', node.minimum);
        error('is less than minimum');
        validate('}');
      }
      if (node.maximum !== undefined) {
        validate('if (%s %s %d) {', name, node.exclusiveMaximum ? '>=' : '>', node.maximum);
        error('is more than maximum');
        validate('}');
      }
      if (properties) {
        Object.keys(properties).forEach(function(p) {
          if (Array.isArray(type) && type.indexOf('null') !== -1)
            validate('if (%s !== null) {', name);
          visit(genobj(name, p), properties[p], reporter, filter);
          if (Array.isArray(type) && type.indexOf('null') !== -1)
            validate('}');
        });
      }
      while (indent--)
        validate('}');
    };
    var validate = genfun('function validate(data) {')('validate.errors = null')('var errors = 0');
    visit('data', schema, reporter, opts && opts.filter);
    validate('return errors === 0')('}');
    validate = validate.toFunction(scope);
    validate.errors = null;
    if (Object.defineProperty) {
      Object.defineProperty(validate, 'error', {get: function() {
          if (!validate.errors)
            return '';
          return validate.errors.map(function(err) {
            return err.field + ' ' + err.message;
          }).join('\n');
        }});
    }
    validate.toJSON = function() {
      return schema;
    };
    return validate;
  };
  module.exports = function(schema, opts) {
    if (typeof schema === 'string')
      schema = JSON.parse(schema);
    return compile(schema, {}, schema, true, opts);
  };
  module.exports.filter = function(schema, opts) {
    var validate = module.exports(schema, xtend(opts, {filter: true}));
    return function(sch) {
      validate(sch);
      return sch;
    };
  };
  return module.exports;
});

$__System.registerDynamic("npm:har-validator@2.0.6/lib/runner.js", ["npm:har-validator@2.0.6/lib/schemas/index.js", "npm:har-validator@2.0.6/lib/error.js", "npm:is-my-json-valid@2.13.1/index.js"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var schemas = $__require('npm:har-validator@2.0.6/lib/schemas/index.js');
  var ValidationError = $__require('npm:har-validator@2.0.6/lib/error.js');
  var validator = $__require('npm:is-my-json-valid@2.13.1/index.js');
  module.exports = function(schema, data, cb) {
    var valid = false;
    var validate = validator(schema, {
      greedy: true,
      verbose: true,
      schemas: schemas
    });
    if (data !== undefined) {
      valid = validate(data);
    }
    if (typeof cb === 'function') {
      return cb(validate.errors ? new ValidationError(validate.errors) : null, valid);
    }
    return valid;
  };
  return module.exports;
});

$__System.registerDynamic("npm:har-validator@2.0.6/lib/schemas/cache.json", [], false, function() {
  return {
    "properties": {
      "beforeRequest": {
        "$ref": "#cacheEntry"
      },
      "afterRequest": {
        "$ref": "#cacheEntry"
      },
      "comment": {
        "type": "string"
      }
    }
  };
});

$__System.registerDynamic("npm:har-validator@2.0.6/lib/schemas/cacheEntry.json", [], false, function() {
  return {
    "oneOf": [
      {
        "type": "object",
        "optional": true,
        "required": [
          "lastAccess",
          "eTag",
          "hitCount"
        ],
        "properties": {
          "expires": {
            "type": "string"
          },
          "lastAccess": {
            "type": "string"
          },
          "eTag": {
            "type": "string"
          },
          "hitCount": {
            "type": "integer"
          },
          "comment": {
            "type": "string"
          }
        }
      },
      {
        "type": null,
        "additionalProperties": false
      }
    ]
  };
});

$__System.registerDynamic("npm:har-validator@2.0.6/lib/schemas/content.json", [], false, function() {
  return {
    "type": "object",
    "required": [
      "size",
      "mimeType"
    ],
    "properties": {
      "size": {
        "type": "integer"
      },
      "compression": {
        "type": "integer"
      },
      "mimeType": {
        "type": "string"
      },
      "text": {
        "type": "string"
      },
      "encoding": {
        "type": "string"
      },
      "comment": {
        "type": "string"
      }
    }
  };
});

$__System.registerDynamic("npm:har-validator@2.0.6/lib/schemas/cookie.json", [], false, function() {
  return {
    "type": "object",
    "required": [
      "name",
      "value"
    ],
    "properties": {
      "name": {
        "type": "string"
      },
      "value": {
        "type": "string"
      },
      "path": {
        "type": "string"
      },
      "domain": {
        "type": "string"
      },
      "expires": {
        "type": [
          "string",
          "null"
        ],
        "format": "date-time"
      },
      "httpOnly": {
        "type": "boolean"
      },
      "secure": {
        "type": "boolean"
      },
      "comment": {
        "type": "string"
      }
    }
  };
});

$__System.registerDynamic("npm:har-validator@2.0.6/lib/schemas/creator.json", [], false, function() {
  return {
    "type": "object",
    "required": [
      "name",
      "version"
    ],
    "properties": {
      "name": {
        "type": "string"
      },
      "version": {
        "type": "string"
      },
      "comment": {
        "type": "string"
      }
    }
  };
});

$__System.registerDynamic("npm:har-validator@2.0.6/lib/schemas/entry.json", [], false, function() {
  return {
    "type": "object",
    "optional": true,
    "required": [
      "startedDateTime",
      "time",
      "request",
      "response",
      "cache",
      "timings"
    ],
    "properties": {
      "pageref": {
        "type": "string"
      },
      "startedDateTime": {
        "type": "string",
        "format": "date-time",
        "pattern": "^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))"
      },
      "time": {
        "type": "number",
        "min": 0
      },
      "request": {
        "$ref": "#request"
      },
      "response": {
        "$ref": "#response"
      },
      "cache": {
        "$ref": "#cache"
      },
      "timings": {
        "$ref": "#timings"
      },
      "serverIPAddress": {
        "type": "string",
        "oneOf": [
          {
            "format": "ipv4"
          },
          {
            "format": "ipv6"
          }
        ]
      },
      "connection": {
        "type": "string"
      },
      "comment": {
        "type": "string"
      }
    }
  };
});

$__System.registerDynamic("npm:har-validator@2.0.6/lib/schemas/har.json", [], false, function() {
  return {
    "type": "object",
    "required": [
      "log"
    ],
    "properties": {
      "log": {
        "$ref": "#log"
      }
    }
  };
});

$__System.registerDynamic("npm:har-validator@2.0.6/lib/schemas/log.json", [], false, function() {
  return {
    "type": "object",
    "required": [
      "version",
      "creator",
      "entries"
    ],
    "properties": {
      "version": {
        "type": "string"
      },
      "creator": {
        "$ref": "#creator"
      },
      "browser": {
        "$ref": "#creator"
      },
      "pages": {
        "type": "array",
        "items": {
          "$ref": "#page"
        }
      },
      "entries": {
        "type": "array",
        "items": {
          "$ref": "#entry"
        }
      },
      "comment": {
        "type": "string"
      }
    }
  };
});

$__System.registerDynamic("npm:har-validator@2.0.6/lib/schemas/page.json", [], false, function() {
  return {
    "type": "object",
    "optional": true,
    "required": [
      "startedDateTime",
      "id",
      "title",
      "pageTimings"
    ],
    "properties": {
      "startedDateTime": {
        "type": "string",
        "format": "date-time",
        "pattern": "^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))"
      },
      "id": {
        "type": "string",
        "unique": true
      },
      "title": {
        "type": "string"
      },
      "pageTimings": {
        "$ref": "#pageTimings"
      },
      "comment": {
        "type": "string"
      }
    }
  };
});

$__System.registerDynamic("npm:har-validator@2.0.6/lib/schemas/pageTimings.json", [], false, function() {
  return {
    "type": "object",
    "properties": {
      "onContentLoad": {
        "type": "number",
        "min": -1
      },
      "onLoad": {
        "type": "number",
        "min": -1
      },
      "comment": {
        "type": "string"
      }
    }
  };
});

$__System.registerDynamic("npm:har-validator@2.0.6/lib/schemas/postData.json", [], false, function() {
  return {
    "type": "object",
    "optional": true,
    "required": [
      "mimeType"
    ],
    "properties": {
      "mimeType": {
        "type": "string"
      },
      "text": {
        "type": "string"
      },
      "params": {
        "type": "array",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          }
        }
      },
      "comment": {
        "type": "string"
      }
    }
  };
});

$__System.registerDynamic("npm:har-validator@2.0.6/lib/schemas/record.json", [], false, function() {
  return {
    "type": "object",
    "required": [
      "name",
      "value"
    ],
    "properties": {
      "name": {
        "type": "string"
      },
      "value": {
        "type": "string"
      },
      "comment": {
        "type": "string"
      }
    }
  };
});

$__System.registerDynamic("npm:har-validator@2.0.6/lib/schemas/request.json", [], false, function() {
  return {
    "type": "object",
    "required": [
      "method",
      "url",
      "httpVersion",
      "cookies",
      "headers",
      "queryString",
      "headersSize",
      "bodySize"
    ],
    "properties": {
      "method": {
        "type": "string"
      },
      "url": {
        "type": "string",
        "format": "uri"
      },
      "httpVersion": {
        "type": "string"
      },
      "cookies": {
        "type": "array",
        "items": {
          "$ref": "#cookie"
        }
      },
      "headers": {
        "type": "array",
        "items": {
          "$ref": "#record"
        }
      },
      "queryString": {
        "type": "array",
        "items": {
          "$ref": "#record"
        }
      },
      "postData": {
        "$ref": "#postData"
      },
      "headersSize": {
        "type": "integer"
      },
      "bodySize": {
        "type": "integer"
      },
      "comment": {
        "type": "string"
      }
    }
  };
});

$__System.registerDynamic("npm:har-validator@2.0.6/lib/schemas/response.json", [], false, function() {
  return {
    "type": "object",
    "required": [
      "status",
      "statusText",
      "httpVersion",
      "cookies",
      "headers",
      "content",
      "redirectURL",
      "headersSize",
      "bodySize"
    ],
    "properties": {
      "status": {
        "type": "integer"
      },
      "statusText": {
        "type": "string"
      },
      "httpVersion": {
        "type": "string"
      },
      "cookies": {
        "type": "array",
        "items": {
          "$ref": "#cookie"
        }
      },
      "headers": {
        "type": "array",
        "items": {
          "$ref": "#record"
        }
      },
      "content": {
        "$ref": "#content"
      },
      "redirectURL": {
        "type": "string"
      },
      "headersSize": {
        "type": "integer"
      },
      "bodySize": {
        "type": "integer"
      },
      "comment": {
        "type": "string"
      }
    }
  };
});

$__System.registerDynamic("npm:har-validator@2.0.6/lib/schemas/timings.json", [], false, function() {
  return {
    "required": [
      "send",
      "wait",
      "receive"
    ],
    "properties": {
      "dns": {
        "type": "number",
        "min": -1
      },
      "connect": {
        "type": "number",
        "min": -1
      },
      "blocked": {
        "type": "number",
        "min": -1
      },
      "send": {
        "type": "number",
        "min": -1
      },
      "wait": {
        "type": "number",
        "min": -1
      },
      "receive": {
        "type": "number",
        "min": -1
      },
      "ssl": {
        "type": "number",
        "min": -1
      },
      "comment": {
        "type": "string"
      }
    }
  };
});

$__System.registerDynamic("npm:har-validator@2.0.6/lib/schemas/index.js", ["npm:har-validator@2.0.6/lib/schemas/cache.json", "npm:har-validator@2.0.6/lib/schemas/cacheEntry.json", "npm:har-validator@2.0.6/lib/schemas/content.json", "npm:har-validator@2.0.6/lib/schemas/cookie.json", "npm:har-validator@2.0.6/lib/schemas/creator.json", "npm:har-validator@2.0.6/lib/schemas/entry.json", "npm:har-validator@2.0.6/lib/schemas/har.json", "npm:har-validator@2.0.6/lib/schemas/log.json", "npm:har-validator@2.0.6/lib/schemas/page.json", "npm:har-validator@2.0.6/lib/schemas/pageTimings.json", "npm:har-validator@2.0.6/lib/schemas/postData.json", "npm:har-validator@2.0.6/lib/schemas/record.json", "npm:har-validator@2.0.6/lib/schemas/request.json", "npm:har-validator@2.0.6/lib/schemas/response.json", "npm:har-validator@2.0.6/lib/schemas/timings.json"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var schemas = {
    cache: $__require('npm:har-validator@2.0.6/lib/schemas/cache.json'),
    cacheEntry: $__require('npm:har-validator@2.0.6/lib/schemas/cacheEntry.json'),
    content: $__require('npm:har-validator@2.0.6/lib/schemas/content.json'),
    cookie: $__require('npm:har-validator@2.0.6/lib/schemas/cookie.json'),
    creator: $__require('npm:har-validator@2.0.6/lib/schemas/creator.json'),
    entry: $__require('npm:har-validator@2.0.6/lib/schemas/entry.json'),
    har: $__require('npm:har-validator@2.0.6/lib/schemas/har.json'),
    log: $__require('npm:har-validator@2.0.6/lib/schemas/log.json'),
    page: $__require('npm:har-validator@2.0.6/lib/schemas/page.json'),
    pageTimings: $__require('npm:har-validator@2.0.6/lib/schemas/pageTimings.json'),
    postData: $__require('npm:har-validator@2.0.6/lib/schemas/postData.json'),
    record: $__require('npm:har-validator@2.0.6/lib/schemas/record.json'),
    request: $__require('npm:har-validator@2.0.6/lib/schemas/request.json'),
    response: $__require('npm:har-validator@2.0.6/lib/schemas/response.json'),
    timings: $__require('npm:har-validator@2.0.6/lib/schemas/timings.json')
  };
  schemas.cache.properties.beforeRequest = schemas.cacheEntry;
  schemas.cache.properties.afterRequest = schemas.cacheEntry;
  schemas.page.properties.pageTimings = schemas.pageTimings;
  schemas.request.properties.cookies.items = schemas.cookie;
  schemas.request.properties.headers.items = schemas.record;
  schemas.request.properties.queryString.items = schemas.record;
  schemas.request.properties.postData = schemas.postData;
  schemas.response.properties.cookies.items = schemas.cookie;
  schemas.response.properties.headers.items = schemas.record;
  schemas.response.properties.content = schemas.content;
  schemas.entry.properties.request = schemas.request;
  schemas.entry.properties.response = schemas.response;
  schemas.entry.properties.cache = schemas.cache;
  schemas.entry.properties.timings = schemas.timings;
  schemas.log.properties.creator = schemas.creator;
  schemas.log.properties.browser = schemas.creator;
  schemas.log.properties.pages.items = schemas.page;
  schemas.log.properties.entries.items = schemas.entry;
  schemas.har.properties.log = schemas.log;
  module.exports = schemas;
  return module.exports;
});

$__System.registerDynamic("npm:har-validator@2.0.6/lib/index.js", ["npm:pinkie-promise@2.0.1/index.js", "npm:har-validator@2.0.6/lib/runner.js", "npm:har-validator@2.0.6/lib/schemas/index.js"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Promise = $__require('npm:pinkie-promise@2.0.1/index.js');
  var runner = $__require('npm:har-validator@2.0.6/lib/runner.js');
  var schemas = $__require('npm:har-validator@2.0.6/lib/schemas/index.js');
  var promisify = function(schema) {
    return function(data) {
      return new Promise(function(resolve, reject) {
        runner(schema, data, function(err, valid) {
          return err === null ? resolve(data) : reject(err);
        });
      });
    };
  };
  module.exports = promisify(schemas.har);
  Object.keys(schemas).map(function(name) {
    module.exports[name] = promisify(schemas[name]);
  });
  return module.exports;
});

$__System.registerDynamic("npm:extend@3.0.0/index.js", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var hasOwn = Object.prototype.hasOwnProperty;
  var toStr = Object.prototype.toString;
  var isArray = function isArray(arr) {
    if (typeof Array.isArray === 'function') {
      return Array.isArray(arr);
    }
    return toStr.call(arr) === '[object Array]';
  };
  var isPlainObject = function isPlainObject(obj) {
    if (!obj || toStr.call(obj) !== '[object Object]') {
      return false;
    }
    var hasOwnConstructor = hasOwn.call(obj, 'constructor');
    var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
    if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
      return false;
    }
    var key;
    for (key in obj) {}
    return typeof key === 'undefined' || hasOwn.call(obj, key);
  };
  module.exports = function extend() {
    var options,
        name,
        src,
        copy,
        copyIsArray,
        clone,
        target = arguments[0],
        i = 1,
        length = arguments.length,
        deep = false;
    if (typeof target === 'boolean') {
      deep = target;
      target = arguments[1] || {};
      i = 2;
    } else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {
      target = {};
    }
    for (; i < length; ++i) {
      options = arguments[i];
      if (options != null) {
        for (name in options) {
          src = target[name];
          copy = options[name];
          if (target !== copy) {
            if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
              if (copyIsArray) {
                copyIsArray = false;
                clone = src && isArray(src) ? src : [];
              } else {
                clone = src && isPlainObject(src) ? src : {};
              }
              target[name] = extend(deep, clone, copy);
            } else if (typeof copy !== 'undefined') {
              target[name] = copy;
            }
          }
        }
      }
    }
    return target;
  };
  return module.exports;
});

$__System.registerDynamic("npm:request@2.72.0/lib/har.js", ["@node/fs", "@node/querystring", "npm:har-validator@2.0.6/lib/index.js", "npm:extend@3.0.0/index.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var fs = $__require('@node/fs');
  var qs = $__require('@node/querystring');
  var validate = $__require('npm:har-validator@2.0.6/lib/index.js');
  var extend = $__require('npm:extend@3.0.0/index.js');
  function Har(request) {
    this.request = request;
  }
  Har.prototype.reducer = function(obj, pair) {
    if (obj[pair.name] === undefined) {
      obj[pair.name] = pair.value;
      return obj;
    }
    var arr = [obj[pair.name], pair.value];
    obj[pair.name] = arr;
    return obj;
  };
  Har.prototype.prep = function(data) {
    data.queryObj = {};
    data.headersObj = {};
    data.postData.jsonObj = false;
    data.postData.paramsObj = false;
    if (data.queryString && data.queryString.length) {
      data.queryObj = data.queryString.reduce(this.reducer, {});
    }
    if (data.headers && data.headers.length) {
      data.headersObj = data.headers.reduceRight(function(headers, header) {
        headers[header.name] = header.value;
        return headers;
      }, {});
    }
    if (data.cookies && data.cookies.length) {
      var cookies = data.cookies.map(function(cookie) {
        return cookie.name + '=' + cookie.value;
      });
      if (cookies.length) {
        data.headersObj.cookie = cookies.join('; ');
      }
    }
    function some(arr) {
      return arr.some(function(type) {
        return data.postData.mimeType.indexOf(type) === 0;
      });
    }
    if (some(['multipart/mixed', 'multipart/related', 'multipart/form-data', 'multipart/alternative'])) {
      data.postData.mimeType = 'multipart/form-data';
    } else if (some(['application/x-www-form-urlencoded'])) {
      if (!data.postData.params) {
        data.postData.text = '';
      } else {
        data.postData.paramsObj = data.postData.params.reduce(this.reducer, {});
        data.postData.text = qs.stringify(data.postData.paramsObj);
      }
    } else if (some(['text/json', 'text/x-json', 'application/json', 'application/x-json'])) {
      data.postData.mimeType = 'application/json';
      if (data.postData.text) {
        try {
          data.postData.jsonObj = JSON.parse(data.postData.text);
        } catch (e) {
          this.request.debug(e);
          data.postData.mimeType = 'text/plain';
        }
      }
    }
    return data;
  };
  Har.prototype.options = function(options) {
    if (!options.har) {
      return options;
    }
    var har = {};
    extend(har, options.har);
    if (har.log && har.log.entries) {
      har = har.log.entries[0];
    }
    har.url = har.url || options.url || options.uri || options.baseUrl || '/';
    har.httpVersion = har.httpVersion || 'HTTP/1.1';
    har.queryString = har.queryString || [];
    har.headers = har.headers || [];
    har.cookies = har.cookies || [];
    har.postData = har.postData || {};
    har.postData.mimeType = har.postData.mimeType || 'application/octet-stream';
    har.bodySize = 0;
    har.headersSize = 0;
    har.postData.size = 0;
    if (!validate.request(har)) {
      return options;
    }
    var req = this.prep(har);
    if (req.url) {
      options.url = req.url;
    }
    if (req.method) {
      options.method = req.method;
    }
    if (Object.keys(req.queryObj).length) {
      options.qs = req.queryObj;
    }
    if (Object.keys(req.headersObj).length) {
      options.headers = req.headersObj;
    }
    function test(type) {
      return req.postData.mimeType.indexOf(type) === 0;
    }
    if (test('application/x-www-form-urlencoded')) {
      options.form = req.postData.paramsObj;
    } else if (test('application/json')) {
      if (req.postData.jsonObj) {
        options.body = req.postData.jsonObj;
        options.json = true;
      }
    } else if (test('multipart/form-data')) {
      options.formData = {};
      req.postData.params.forEach(function(param) {
        var attachment = {};
        if (!param.fileName && !param.fileName && !param.contentType) {
          options.formData[param.name] = param.value;
          return;
        }
        if (param.fileName && !param.value) {
          attachment.value = fs.createReadStream(param.fileName);
        } else if (param.value) {
          attachment.value = param.value;
        }
        if (param.fileName) {
          attachment.options = {
            filename: param.fileName,
            contentType: param.contentType ? param.contentType : null
          };
        }
        options.formData[param.name] = attachment;
      });
    } else {
      if (req.postData.text) {
        options.body = req.postData.text;
      }
    }
    return options;
  };
  exports.Har = Har;
  return module.exports;
});

$__System.registerDynamic("npm:json-stringify-safe@5.0.1/stringify.js", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  exports = module.exports = stringify;
  exports.getSerialize = serializer;
  function stringify(obj, replacer, spaces, cycleReplacer) {
    return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces);
  }
  function serializer(replacer, cycleReplacer) {
    var stack = [],
        keys = [];
    if (cycleReplacer == null)
      cycleReplacer = function(key, value) {
        if (stack[0] === value)
          return "[Circular ~]";
        return "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]";
      };
    return function(key, value) {
      if (stack.length > 0) {
        var thisPos = stack.indexOf(this);
        ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
        ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);
        if (~stack.indexOf(value))
          value = cycleReplacer.call(this, key, value);
      } else
        stack.push(value);
      return replacer == null ? value : replacer.call(this, key, value);
    };
  }
  return module.exports;
});

$__System.registerDynamic("npm:request@2.72.0/lib/helpers.js", ["npm:json-stringify-safe@5.0.1/stringify.js", "@node/crypto", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"),
      Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var jsonSafeStringify = $__require('npm:json-stringify-safe@5.0.1/stringify.js'),
      crypto = $__require('@node/crypto');
  function deferMethod() {
    if (typeof setImmediate === 'undefined') {
      return process.nextTick;
    }
    return setImmediate;
  }
  function isFunction(value) {
    return typeof value === 'function';
  }
  function paramsHaveRequestBody(params) {
    return (params.body || params.requestBodyStream || (params.json && typeof params.json !== 'boolean') || params.multipart);
  }
  function safeStringify(obj, replacer) {
    var ret;
    try {
      ret = JSON.stringify(obj, replacer);
    } catch (e) {
      ret = jsonSafeStringify(obj, replacer);
    }
    return ret;
  }
  function md5(str) {
    return crypto.createHash('md5').update(str).digest('hex');
  }
  function isReadStream(rs) {
    return rs.readable && rs.path && rs.mode;
  }
  function toBase64(str) {
    return (new Buffer(str || '', 'utf8')).toString('base64');
  }
  function copy(obj) {
    var o = {};
    Object.keys(obj).forEach(function(i) {
      o[i] = obj[i];
    });
    return o;
  }
  function version() {
    var numbers = process.version.replace('v', '').split('.');
    return {
      major: parseInt(numbers[0], 10),
      minor: parseInt(numbers[1], 10),
      patch: parseInt(numbers[2], 10)
    };
  }
  exports.isFunction = isFunction;
  exports.paramsHaveRequestBody = paramsHaveRequestBody;
  exports.safeStringify = safeStringify;
  exports.md5 = md5;
  exports.isReadStream = isReadStream;
  exports.toBase64 = toBase64;
  exports.copy = copy;
  exports.version = version;
  exports.defer = deferMethod();
  return module.exports;
});

$__System.registerDynamic("npm:request@2.72.0/lib/auth.js", ["npm:caseless@0.11.0/index.js", "npm:node-uuid@1.4.7/uuid.js", "npm:request@2.72.0/lib/helpers.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var caseless = $__require('npm:caseless@0.11.0/index.js'),
      uuid = $__require('npm:node-uuid@1.4.7/uuid.js'),
      helpers = $__require('npm:request@2.72.0/lib/helpers.js');
  var md5 = helpers.md5,
      toBase64 = helpers.toBase64;
  function Auth(request) {
    this.request = request;
    this.hasAuth = false;
    this.sentAuth = false;
    this.bearerToken = null;
    this.user = null;
    this.pass = null;
  }
  Auth.prototype.basic = function(user, pass, sendImmediately) {
    var self = this;
    if (typeof user !== 'string' || (pass !== undefined && typeof pass !== 'string')) {
      self.request.emit('error', new Error('auth() received invalid user or password'));
    }
    self.user = user;
    self.pass = pass;
    self.hasAuth = true;
    var header = user + ':' + (pass || '');
    if (sendImmediately || typeof sendImmediately === 'undefined') {
      var authHeader = 'Basic ' + toBase64(header);
      self.sentAuth = true;
      return authHeader;
    }
  };
  Auth.prototype.bearer = function(bearer, sendImmediately) {
    var self = this;
    self.bearerToken = bearer;
    self.hasAuth = true;
    if (sendImmediately || typeof sendImmediately === 'undefined') {
      if (typeof bearer === 'function') {
        bearer = bearer();
      }
      var authHeader = 'Bearer ' + (bearer || '');
      self.sentAuth = true;
      return authHeader;
    }
  };
  Auth.prototype.digest = function(method, path, authHeader) {
    var self = this;
    var challenge = {};
    var re = /([a-z0-9_-]+)=(?:"([^"]+)"|([a-z0-9_-]+))/gi;
    for (; ; ) {
      var match = re.exec(authHeader);
      if (!match) {
        break;
      }
      challenge[match[1]] = match[2] || match[3];
    }
    var ha1Compute = function(algorithm, user, realm, pass, nonce, cnonce) {
      var ha1 = md5(user + ':' + realm + ':' + pass);
      if (algorithm && algorithm.toLowerCase() === 'md5-sess') {
        return md5(ha1 + ':' + nonce + ':' + cnonce);
      } else {
        return ha1;
      }
    };
    var qop = /(^|,)\s*auth\s*($|,)/.test(challenge.qop) && 'auth';
    var nc = qop && '00000001';
    var cnonce = qop && uuid().replace(/-/g, '');
    var ha1 = ha1Compute(challenge.algorithm, self.user, challenge.realm, self.pass, challenge.nonce, cnonce);
    var ha2 = md5(method + ':' + path);
    var digestResponse = qop ? md5(ha1 + ':' + challenge.nonce + ':' + nc + ':' + cnonce + ':' + qop + ':' + ha2) : md5(ha1 + ':' + challenge.nonce + ':' + ha2);
    var authValues = {
      username: self.user,
      realm: challenge.realm,
      nonce: challenge.nonce,
      uri: path,
      qop: qop,
      response: digestResponse,
      nc: nc,
      cnonce: cnonce,
      algorithm: challenge.algorithm,
      opaque: challenge.opaque
    };
    authHeader = [];
    for (var k in authValues) {
      if (authValues[k]) {
        if (k === 'qop' || k === 'nc' || k === 'algorithm') {
          authHeader.push(k + '=' + authValues[k]);
        } else {
          authHeader.push(k + '="' + authValues[k] + '"');
        }
      }
    }
    authHeader = 'Digest ' + authHeader.join(', ');
    self.sentAuth = true;
    return authHeader;
  };
  Auth.prototype.onRequest = function(user, pass, sendImmediately, bearer) {
    var self = this,
        request = self.request;
    var authHeader;
    if (bearer === undefined && user === undefined) {
      self.request.emit('error', new Error('no auth mechanism defined'));
    } else if (bearer !== undefined) {
      authHeader = self.bearer(bearer, sendImmediately);
    } else {
      authHeader = self.basic(user, pass, sendImmediately);
    }
    if (authHeader) {
      request.setHeader('authorization', authHeader);
    }
  };
  Auth.prototype.onResponse = function(response) {
    var self = this,
        request = self.request;
    if (!self.hasAuth || self.sentAuth) {
      return null;
    }
    var c = caseless(response.headers);
    var authHeader = c.get('www-authenticate');
    var authVerb = authHeader && authHeader.split(' ')[0].toLowerCase();
    request.debug('reauth', authVerb);
    switch (authVerb) {
      case 'basic':
        return self.basic(self.user, self.pass, true);
      case 'bearer':
        return self.bearer(self.bearerToken, true);
      case 'digest':
        return self.digest(request.method, request.path, authHeader);
    }
  };
  exports.Auth = Auth;
  return module.exports;
});

$__System.registerDynamic("npm:qs@6.1.0/lib/stringify.js", ["npm:qs@6.1.0/lib/utils.js"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Utils = $__require('npm:qs@6.1.0/lib/utils.js');
  var internals = {
    delimiter: '&',
    arrayPrefixGenerators: {
      brackets: function(prefix) {
        return prefix + '[]';
      },
      indices: function(prefix, key) {
        return prefix + '[' + key + ']';
      },
      repeat: function(prefix) {
        return prefix;
      }
    },
    strictNullHandling: false,
    skipNulls: false,
    encode: true
  };
  internals.stringify = function(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encode, filter, sort, allowDots) {
    var obj = object;
    if (typeof filter === 'function') {
      obj = filter(prefix, obj);
    } else if (Utils.isBuffer(obj)) {
      obj = String(obj);
    } else if (obj instanceof Date) {
      obj = obj.toISOString();
    } else if (obj === null) {
      if (strictNullHandling) {
        return encode ? Utils.encode(prefix) : prefix;
      }
      obj = '';
    }
    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {
      if (encode) {
        return [Utils.encode(prefix) + '=' + Utils.encode(obj)];
      }
      return [prefix + '=' + obj];
    }
    var values = [];
    if (typeof obj === 'undefined') {
      return values;
    }
    var objKeys;
    if (Array.isArray(filter)) {
      objKeys = filter;
    } else {
      var keys = Object.keys(obj);
      objKeys = sort ? keys.sort(sort) : keys;
    }
    for (var i = 0; i < objKeys.length; ++i) {
      var key = objKeys[i];
      if (skipNulls && obj[key] === null) {
        continue;
      }
      if (Array.isArray(obj)) {
        values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, skipNulls, encode, filter, sort, allowDots));
      } else {
        values = values.concat(internals.stringify(obj[key], prefix + (allowDots ? '.' + key : '[' + key + ']'), generateArrayPrefix, strictNullHandling, skipNulls, encode, filter, sort, allowDots));
      }
    }
    return values;
  };
  module.exports = function(object, opts) {
    var obj = object;
    var options = opts || {};
    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;
    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;
    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : internals.skipNulls;
    var encode = typeof options.encode === 'boolean' ? options.encode : internals.encode;
    var sort = typeof options.sort === 'function' ? options.sort : null;
    var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
    var objKeys;
    var filter;
    if (typeof options.filter === 'function') {
      filter = options.filter;
      obj = filter('', obj);
    } else if (Array.isArray(options.filter)) {
      objKeys = filter = options.filter;
    }
    var keys = [];
    if (typeof obj !== 'object' || obj === null) {
      return '';
    }
    var arrayFormat;
    if (options.arrayFormat in internals.arrayPrefixGenerators) {
      arrayFormat = options.arrayFormat;
    } else if ('indices' in options) {
      arrayFormat = options.indices ? 'indices' : 'repeat';
    } else {
      arrayFormat = 'indices';
    }
    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];
    if (!objKeys) {
      objKeys = Object.keys(obj);
    }
    if (sort) {
      objKeys.sort(sort);
    }
    for (var i = 0; i < objKeys.length; ++i) {
      var key = objKeys[i];
      if (skipNulls && obj[key] === null) {
        continue;
      }
      keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix, strictNullHandling, skipNulls, encode, filter, sort, allowDots));
    }
    return keys.join(delimiter);
  };
  return module.exports;
});

$__System.registerDynamic("npm:qs@6.1.0/lib/utils.js", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var hexTable = (function() {
    var array = new Array(256);
    for (var i = 0; i < 256; ++i) {
      array[i] = '%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase();
    }
    return array;
  }());
  exports.arrayToObject = function(source, options) {
    var obj = options.plainObjects ? Object.create(null) : {};
    for (var i = 0; i < source.length; ++i) {
      if (typeof source[i] !== 'undefined') {
        obj[i] = source[i];
      }
    }
    return obj;
  };
  exports.merge = function(target, source, options) {
    if (!source) {
      return target;
    }
    if (typeof source !== 'object') {
      if (Array.isArray(target)) {
        target.push(source);
      } else if (typeof target === 'object') {
        target[source] = true;
      } else {
        return [target, source];
      }
      return target;
    }
    if (typeof target !== 'object') {
      return [target].concat(source);
    }
    var mergeTarget = target;
    if (Array.isArray(target) && !Array.isArray(source)) {
      mergeTarget = exports.arrayToObject(target, options);
    }
    return Object.keys(source).reduce(function(acc, key) {
      var value = source[key];
      if (Object.prototype.hasOwnProperty.call(acc, key)) {
        acc[key] = exports.merge(acc[key], value, options);
      } else {
        acc[key] = value;
      }
      return acc;
    }, mergeTarget);
  };
  exports.decode = function(str) {
    try {
      return decodeURIComponent(str.replace(/\+/g, ' '));
    } catch (e) {
      return str;
    }
  };
  exports.encode = function(str) {
    if (str.length === 0) {
      return str;
    }
    var string = typeof str === 'string' ? str : String(str);
    var out = '';
    for (var i = 0; i < string.length; ++i) {
      var c = string.charCodeAt(i);
      if (c === 0x2D || c === 0x2E || c === 0x5F || c === 0x7E || (c >= 0x30 && c <= 0x39) || (c >= 0x41 && c <= 0x5A) || (c >= 0x61 && c <= 0x7A)) {
        out += string.charAt(i);
        continue;
      }
      if (c < 0x80) {
        out = out + hexTable[c];
        continue;
      }
      if (c < 0x800) {
        out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
        continue;
      }
      if (c < 0xD800 || c >= 0xE000) {
        out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
        continue;
      }
      i += 1;
      c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
      out += (hexTable[0xF0 | (c >> 18)] + hexTable[0x80 | ((c >> 12) & 0x3F)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
    }
    return out;
  };
  exports.compact = function(obj, references) {
    if (typeof obj !== 'object' || obj === null) {
      return obj;
    }
    var refs = references || [];
    var lookup = refs.indexOf(obj);
    if (lookup !== -1) {
      return refs[lookup];
    }
    refs.push(obj);
    if (Array.isArray(obj)) {
      var compacted = [];
      for (var i = 0; i < obj.length; ++i) {
        if (typeof obj[i] !== 'undefined') {
          compacted.push(obj[i]);
        }
      }
      return compacted;
    }
    var keys = Object.keys(obj);
    for (var j = 0; j < keys.length; ++j) {
      var key = keys[j];
      obj[key] = exports.compact(obj[key], refs);
    }
    return obj;
  };
  exports.isRegExp = function(obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
  };
  exports.isBuffer = function(obj) {
    if (obj === null || typeof obj === 'undefined') {
      return false;
    }
    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
  };
  return module.exports;
});

$__System.registerDynamic("npm:qs@6.1.0/lib/parse.js", ["npm:qs@6.1.0/lib/utils.js"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Utils = $__require('npm:qs@6.1.0/lib/utils.js');
  var internals = {
    delimiter: '&',
    depth: 5,
    arrayLimit: 20,
    parameterLimit: 1000,
    strictNullHandling: false,
    plainObjects: false,
    allowPrototypes: false,
    allowDots: false
  };
  internals.parseValues = function(str, options) {
    var obj = {};
    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);
    for (var i = 0; i < parts.length; ++i) {
      var part = parts[i];
      var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;
      if (pos === -1) {
        obj[Utils.decode(part)] = '';
        if (options.strictNullHandling) {
          obj[Utils.decode(part)] = null;
        }
      } else {
        var key = Utils.decode(part.slice(0, pos));
        var val = Utils.decode(part.slice(pos + 1));
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          obj[key] = [].concat(obj[key]).concat(val);
        } else {
          obj[key] = val;
        }
      }
    }
    return obj;
  };
  internals.parseObject = function(chain, val, options) {
    if (!chain.length) {
      return val;
    }
    var root = chain.shift();
    var obj;
    if (root === '[]') {
      obj = [];
      obj = obj.concat(internals.parseObject(chain, val, options));
    } else {
      obj = options.plainObjects ? Object.create(null) : {};
      var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
      var index = parseInt(cleanRoot, 10);
      if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
        obj = [];
        obj[index] = internals.parseObject(chain, val, options);
      } else {
        obj[cleanRoot] = internals.parseObject(chain, val, options);
      }
    }
    return obj;
  };
  internals.parseKeys = function(givenKey, val, options) {
    if (!givenKey) {
      return;
    }
    var key = options.allowDots ? givenKey.replace(/\.([^\.\[]+)/g, '[$1]') : givenKey;
    var parent = /^([^\[\]]*)/;
    var child = /(\[[^\[\]]*\])/g;
    var segment = parent.exec(key);
    var keys = [];
    if (segment[1]) {
      if (!options.plainObjects && Object.prototype.hasOwnProperty(segment[1])) {
        if (!options.allowPrototypes) {
          return;
        }
      }
      keys.push(segment[1]);
    }
    var i = 0;
    while ((segment = child.exec(key)) !== null && i < options.depth) {
      i += 1;
      if (!options.plainObjects && Object.prototype.hasOwnProperty(segment[1].replace(/\[|\]/g, ''))) {
        if (!options.allowPrototypes) {
          continue;
        }
      }
      keys.push(segment[1]);
    }
    if (segment) {
      keys.push('[' + key.slice(segment.index) + ']');
    }
    return internals.parseObject(keys, val, options);
  };
  module.exports = function(str, opts) {
    var options = opts || {};
    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;
    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;
    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;
    options.parseArrays = options.parseArrays !== false;
    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : internals.allowDots;
    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : internals.plainObjects;
    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : internals.allowPrototypes;
    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;
    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : internals.strictNullHandling;
    if (str === '' || str === null || typeof str === 'undefined') {
      return options.plainObjects ? Object.create(null) : {};
    }
    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};
    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];
      var newObj = internals.parseKeys(key, tempObj[key], options);
      obj = Utils.merge(obj, newObj, options);
    }
    return Utils.compact(obj);
  };
  return module.exports;
});

$__System.registerDynamic("npm:qs@6.1.0/lib/index.js", ["npm:qs@6.1.0/lib/stringify.js", "npm:qs@6.1.0/lib/parse.js"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Stringify = $__require('npm:qs@6.1.0/lib/stringify.js');
  var Parse = $__require('npm:qs@6.1.0/lib/parse.js');
  module.exports = {
    stringify: Stringify,
    parse: Parse
  };
  return module.exports;
});

$__System.registerDynamic("npm:caseless@0.11.0/index.js", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  function Caseless(dict) {
    this.dict = dict || {};
  }
  Caseless.prototype.set = function(name, value, clobber) {
    if (typeof name === 'object') {
      for (var i in name) {
        this.set(i, name[i], value);
      }
    } else {
      if (typeof clobber === 'undefined')
        clobber = true;
      var has = this.has(name);
      if (!clobber && has)
        this.dict[has] = this.dict[has] + ',' + value;
      else
        this.dict[has || name] = value;
      return has;
    }
  };
  Caseless.prototype.has = function(name) {
    var keys = Object.keys(this.dict),
        name = name.toLowerCase();
    ;
    for (var i = 0; i < keys.length; i++) {
      if (keys[i].toLowerCase() === name)
        return keys[i];
    }
    return false;
  };
  Caseless.prototype.get = function(name) {
    name = name.toLowerCase();
    var result,
        _key;
    var headers = this.dict;
    Object.keys(headers).forEach(function(key) {
      _key = key.toLowerCase();
      if (name === _key)
        result = headers[key];
    });
    return result;
  };
  Caseless.prototype.swap = function(name) {
    var has = this.has(name);
    if (!has)
      throw new Error('There is no header than matches "' + name + '"');
    this.dict[name] = this.dict[has];
    delete this.dict[has];
  };
  Caseless.prototype.del = function(name) {
    var has = this.has(name);
    return delete this.dict[has || name];
  };
  module.exports = function(dict) {
    return new Caseless(dict);
  };
  module.exports.httpify = function(resp, headers) {
    var c = new Caseless(headers);
    resp.setHeader = function(key, value, clobber) {
      if (typeof value === 'undefined')
        return;
      return c.set(key, value, clobber);
    };
    resp.hasHeader = function(key) {
      return c.has(key);
    };
    resp.getHeader = function(key) {
      return c.get(key);
    };
    resp.removeHeader = function(key) {
      return c.del(key);
    };
    resp.headers = c.dict;
    return c;
  };
  return module.exports;
});

$__System.registerDynamic("npm:oauth-sign@0.8.1/index.js", ["@node/crypto", "@node/querystring"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var crypto = $__require('@node/crypto'),
      qs = $__require('@node/querystring');
  ;
  function sha1(key, body) {
    return crypto.createHmac('sha1', key).update(body).digest('base64');
  }
  function rsa(key, body) {
    return crypto.createSign("RSA-SHA1").update(body).sign(key, 'base64');
  }
  function rfc3986(str) {
    return encodeURIComponent(str).replace(/!/g, '%21').replace(/\*/g, '%2A').replace(/\(/g, '%28').replace(/\)/g, '%29').replace(/'/g, '%27');
    ;
  }
  function map(obj) {
    var key,
        val,
        arr = [];
    for (key in obj) {
      val = obj[key];
      if (Array.isArray(val))
        for (var i = 0; i < val.length; i++)
          arr.push([key, val[i]]);
      else if (typeof val === "object")
        for (var prop in val)
          arr.push([key + '[' + prop + ']', val[prop]]);
      else
        arr.push([key, val]);
    }
    return arr;
  }
  function compare(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }
  function generateBase(httpMethod, base_uri, params) {
    var normalized = map(params).map(function(p) {
      return [rfc3986(p[0]), rfc3986(p[1] || '')];
    }).sort(function(a, b) {
      return compare(a[0], b[0]) || compare(a[1], b[1]);
    }).map(function(p) {
      return p.join('=');
    }).join('&');
    var base = [rfc3986(httpMethod ? httpMethod.toUpperCase() : 'GET'), rfc3986(base_uri), rfc3986(normalized)].join('&');
    return base;
  }
  function hmacsign(httpMethod, base_uri, params, consumer_secret, token_secret) {
    var base = generateBase(httpMethod, base_uri, params);
    var key = [consumer_secret || '', token_secret || ''].map(rfc3986).join('&');
    return sha1(key, base);
  }
  function rsasign(httpMethod, base_uri, params, private_key, token_secret) {
    var base = generateBase(httpMethod, base_uri, params);
    var key = private_key || '';
    return rsa(key, base);
  }
  function plaintext(consumer_secret, token_secret) {
    var key = [consumer_secret || '', token_secret || ''].map(rfc3986).join('&');
    return key;
  }
  function sign(signMethod, httpMethod, base_uri, params, consumer_secret, token_secret) {
    var method;
    var skipArgs = 1;
    switch (signMethod) {
      case 'RSA-SHA1':
        method = rsasign;
        break;
      case 'HMAC-SHA1':
        method = hmacsign;
        break;
      case 'PLAINTEXT':
        method = plaintext;
        skipArgs = 4;
        break;
      default:
        throw new Error("Signature method not supported: " + signMethod);
    }
    return method.apply(null, [].slice.call(arguments, skipArgs));
  }
  exports.hmacsign = hmacsign;
  exports.rsasign = rsasign;
  exports.plaintext = plaintext;
  exports.sign = sign;
  exports.rfc3986 = rfc3986;
  exports.generateBase = generateBase;
  return module.exports;
});

$__System.registerDynamic("npm:request@2.72.0/lib/oauth.js", ["@node/url", "npm:qs@6.1.0/lib/index.js", "npm:caseless@0.11.0/index.js", "npm:node-uuid@1.4.7/uuid.js", "npm:oauth-sign@0.8.1/index.js", "@node/crypto", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"),
      Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var url = $__require('@node/url'),
      qs = $__require('npm:qs@6.1.0/lib/index.js'),
      caseless = $__require('npm:caseless@0.11.0/index.js'),
      uuid = $__require('npm:node-uuid@1.4.7/uuid.js'),
      oauth = $__require('npm:oauth-sign@0.8.1/index.js'),
      crypto = $__require('@node/crypto');
  function OAuth(request) {
    this.request = request;
    this.params = null;
  }
  OAuth.prototype.buildParams = function(_oauth, uri, method, query, form, qsLib) {
    var oa = {};
    for (var i in _oauth) {
      oa['oauth_' + i] = _oauth[i];
    }
    if (!oa.oauth_version) {
      oa.oauth_version = '1.0';
    }
    if (!oa.oauth_timestamp) {
      oa.oauth_timestamp = Math.floor(Date.now() / 1000).toString();
    }
    if (!oa.oauth_nonce) {
      oa.oauth_nonce = uuid().replace(/-/g, '');
    }
    if (!oa.oauth_signature_method) {
      oa.oauth_signature_method = 'HMAC-SHA1';
    }
    var consumer_secret_or_private_key = oa.oauth_consumer_secret || oa.oauth_private_key;
    delete oa.oauth_consumer_secret;
    delete oa.oauth_private_key;
    var token_secret = oa.oauth_token_secret;
    delete oa.oauth_token_secret;
    var realm = oa.oauth_realm;
    delete oa.oauth_realm;
    delete oa.oauth_transport_method;
    var baseurl = uri.protocol + '//' + uri.host + uri.pathname;
    var params = qsLib.parse([].concat(query, form, qsLib.stringify(oa)).join('&'));
    oa.oauth_signature = oauth.sign(oa.oauth_signature_method, method, baseurl, params, consumer_secret_or_private_key, token_secret);
    if (realm) {
      oa.realm = realm;
    }
    return oa;
  };
  OAuth.prototype.buildBodyHash = function(_oauth, body) {
    if (['HMAC-SHA1', 'RSA-SHA1'].indexOf(_oauth.signature_method || 'HMAC-SHA1') < 0) {
      this.request.emit('error', new Error('oauth: ' + _oauth.signature_method + ' signature_method not supported with body_hash signing.'));
    }
    var shasum = crypto.createHash('sha1');
    shasum.update(body || '');
    var sha1 = shasum.digest('hex');
    return new Buffer(sha1).toString('base64');
  };
  OAuth.prototype.concatParams = function(oa, sep, wrap) {
    wrap = wrap || '';
    var params = Object.keys(oa).filter(function(i) {
      return i !== 'realm' && i !== 'oauth_signature';
    }).sort();
    if (oa.realm) {
      params.splice(0, 0, 'realm');
    }
    params.push('oauth_signature');
    return params.map(function(i) {
      return i + '=' + wrap + oauth.rfc3986(oa[i]) + wrap;
    }).join(sep);
  };
  OAuth.prototype.onRequest = function(_oauth) {
    var self = this;
    self.params = _oauth;
    var uri = self.request.uri || {},
        method = self.request.method || '',
        headers = caseless(self.request.headers),
        body = self.request.body || '',
        qsLib = self.request.qsLib || qs;
    var form,
        query,
        contentType = headers.get('content-type') || '',
        formContentType = 'application/x-www-form-urlencoded',
        transport = _oauth.transport_method || 'header';
    if (contentType.slice(0, formContentType.length) === formContentType) {
      contentType = formContentType;
      form = body;
    }
    if (uri.query) {
      query = uri.query;
    }
    if (transport === 'body' && (method !== 'POST' || contentType !== formContentType)) {
      self.request.emit('error', new Error('oauth: transport_method of body requires POST ' + 'and content-type ' + formContentType));
    }
    if (!form && typeof _oauth.body_hash === 'boolean') {
      _oauth.body_hash = self.buildBodyHash(_oauth, self.request.body.toString());
    }
    var oa = self.buildParams(_oauth, uri, method, query, form, qsLib);
    switch (transport) {
      case 'header':
        self.request.setHeader('Authorization', 'OAuth ' + self.concatParams(oa, ',', '"'));
        break;
      case 'query':
        var href = self.request.uri.href += (query ? '&' : '?') + self.concatParams(oa, '&');
        self.request.uri = url.parse(href);
        self.request.path = self.request.uri.path;
        break;
      case 'body':
        self.request.body = (form ? form + '&' : '') + self.concatParams(oa, '&');
        break;
      default:
        self.request.emit('error', new Error('oauth: transport_method invalid'));
    }
  };
  exports.OAuth = OAuth;
  return module.exports;
});

$__System.registerDynamic("npm:node-uuid@1.4.7/uuid.js", ["@node/crypto", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  (function(_window) {
    'use strict';
    var _rng,
        _mathRNG,
        _nodeRNG,
        _whatwgRNG,
        _previousRoot;
    function setupBrowser() {
      var _crypto = _window.crypto || _window.msCrypto;
      if (!_rng && _crypto && _crypto.getRandomValues) {
        try {
          var _rnds8 = new Uint8Array(16);
          _whatwgRNG = _rng = function whatwgRNG() {
            _crypto.getRandomValues(_rnds8);
            return _rnds8;
          };
          _rng();
        } catch (e) {}
      }
      if (!_rng) {
        var _rnds = new Array(16);
        _mathRNG = _rng = function() {
          for (var i = 0,
              r; i < 16; i++) {
            if ((i & 0x03) === 0) {
              r = Math.random() * 0x100000000;
            }
            _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
          }
          return _rnds;
        };
        if ('undefined' !== typeof console && console.warn) {
          console.warn("[SECURITY] node-uuid: crypto not usable, falling back to insecure Math.random()");
        }
      }
    }
    function setupNode() {
      if ('function' === typeof $__require) {
        try {
          var _rb = $__require('@node/crypto').randomBytes;
          _nodeRNG = _rng = _rb && function() {
            return _rb(16);
          };
          _rng();
        } catch (e) {}
      }
    }
    if (_window) {
      setupBrowser();
    } else {
      setupNode();
    }
    var BufferClass = ('function' === typeof Buffer) ? Buffer : Array;
    var _byteToHex = [];
    var _hexToByte = {};
    for (var i = 0; i < 256; i++) {
      _byteToHex[i] = (i + 0x100).toString(16).substr(1);
      _hexToByte[_byteToHex[i]] = i;
    }
    function parse(s, buf, offset) {
      var i = (buf && offset) || 0,
          ii = 0;
      buf = buf || [];
      s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
        if (ii < 16) {
          buf[i + ii++] = _hexToByte[oct];
        }
      });
      while (ii < 16) {
        buf[i + ii++] = 0;
      }
      return buf;
    }
    function unparse(buf, offset) {
      var i = offset || 0,
          bth = _byteToHex;
      return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];
    }
    var _seedBytes = _rng();
    var _nodeId = [_seedBytes[0] | 0x01, _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]];
    var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;
    var _lastMSecs = 0,
        _lastNSecs = 0;
    function v1(options, buf, offset) {
      var i = buf && offset || 0;
      var b = buf || [];
      options = options || {};
      var clockseq = (options.clockseq != null) ? options.clockseq : _clockseq;
      var msecs = (options.msecs != null) ? options.msecs : new Date().getTime();
      var nsecs = (options.nsecs != null) ? options.nsecs : _lastNSecs + 1;
      var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs) / 10000;
      if (dt < 0 && options.clockseq == null) {
        clockseq = clockseq + 1 & 0x3fff;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs == null) {
        nsecs = 0;
      }
      if (nsecs >= 10000) {
        throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 12219292800000;
      var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
      b[i++] = tl >>> 24 & 0xff;
      b[i++] = tl >>> 16 & 0xff;
      b[i++] = tl >>> 8 & 0xff;
      b[i++] = tl & 0xff;
      var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
      b[i++] = tmh >>> 8 & 0xff;
      b[i++] = tmh & 0xff;
      b[i++] = tmh >>> 24 & 0xf | 0x10;
      b[i++] = tmh >>> 16 & 0xff;
      b[i++] = clockseq >>> 8 | 0x80;
      b[i++] = clockseq & 0xff;
      var node = options.node || _nodeId;
      for (var n = 0; n < 6; n++) {
        b[i + n] = node[n];
      }
      return buf ? buf : unparse(b);
    }
    function v4(options, buf, offset) {
      var i = buf && offset || 0;
      if (typeof(options) === 'string') {
        buf = (options === 'binary') ? new BufferClass(16) : null;
        options = null;
      }
      options = options || {};
      var rnds = options.random || (options.rng || _rng)();
      rnds[6] = (rnds[6] & 0x0f) | 0x40;
      rnds[8] = (rnds[8] & 0x3f) | 0x80;
      if (buf) {
        for (var ii = 0; ii < 16; ii++) {
          buf[i + ii] = rnds[ii];
        }
      }
      return buf || unparse(rnds);
    }
    var uuid = v4;
    uuid.v1 = v1;
    uuid.v4 = v4;
    uuid.parse = parse;
    uuid.unparse = unparse;
    uuid.BufferClass = BufferClass;
    uuid._rng = _rng;
    uuid._mathRNG = _mathRNG;
    uuid._nodeRNG = _nodeRNG;
    uuid._whatwgRNG = _whatwgRNG;
    if (('undefined' !== typeof module) && module.exports) {
      module.exports = uuid;
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return uuid;
      });
    } else {
      _previousRoot = _window.uuid;
      uuid.noConflict = function() {
        _window.uuid = _previousRoot;
        return uuid;
      };
      _window.uuid = uuid;
    }
  })('undefined' !== typeof window ? window : null);
  return module.exports;
});

$__System.registerDynamic("npm:delayed-stream@1.0.0/lib/delayed_stream.js", ["@node/stream", "@node/util"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Stream = $__require('@node/stream').Stream;
  var util = $__require('@node/util');
  module.exports = DelayedStream;
  function DelayedStream() {
    this.source = null;
    this.dataSize = 0;
    this.maxDataSize = 1024 * 1024;
    this.pauseStream = true;
    this._maxDataSizeExceeded = false;
    this._released = false;
    this._bufferedEvents = [];
  }
  util.inherits(DelayedStream, Stream);
  DelayedStream.create = function(source, options) {
    var delayedStream = new this();
    options = options || {};
    for (var option in options) {
      delayedStream[option] = options[option];
    }
    delayedStream.source = source;
    var realEmit = source.emit;
    source.emit = function() {
      delayedStream._handleEmit(arguments);
      return realEmit.apply(source, arguments);
    };
    source.on('error', function() {});
    if (delayedStream.pauseStream) {
      source.pause();
    }
    return delayedStream;
  };
  Object.defineProperty(DelayedStream.prototype, 'readable', {
    configurable: true,
    enumerable: true,
    get: function() {
      return this.source.readable;
    }
  });
  DelayedStream.prototype.setEncoding = function() {
    return this.source.setEncoding.apply(this.source, arguments);
  };
  DelayedStream.prototype.resume = function() {
    if (!this._released) {
      this.release();
    }
    this.source.resume();
  };
  DelayedStream.prototype.pause = function() {
    this.source.pause();
  };
  DelayedStream.prototype.release = function() {
    this._released = true;
    this._bufferedEvents.forEach(function(args) {
      this.emit.apply(this, args);
    }.bind(this));
    this._bufferedEvents = [];
  };
  DelayedStream.prototype.pipe = function() {
    var r = Stream.prototype.pipe.apply(this, arguments);
    this.resume();
    return r;
  };
  DelayedStream.prototype._handleEmit = function(args) {
    if (this._released) {
      this.emit.apply(this, args);
      return;
    }
    if (args[0] === 'data') {
      this.dataSize += args[1].length;
      this._checkIfMaxDataSizeExceeded();
    }
    this._bufferedEvents.push(args);
  };
  DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
    if (this._maxDataSizeExceeded) {
      return;
    }
    if (this.dataSize <= this.maxDataSize) {
      return;
    }
    this._maxDataSizeExceeded = true;
    var message = 'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
    this.emit('error', new Error(message));
  };
  return module.exports;
});

$__System.registerDynamic("npm:combined-stream@1.0.5/lib/combined_stream.js", ["@node/util", "@node/stream", "npm:delayed-stream@1.0.0/lib/delayed_stream.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var util = $__require('@node/util');
  var Stream = $__require('@node/stream').Stream;
  var DelayedStream = $__require('npm:delayed-stream@1.0.0/lib/delayed_stream.js');
  module.exports = CombinedStream;
  function CombinedStream() {
    this.writable = false;
    this.readable = true;
    this.dataSize = 0;
    this.maxDataSize = 2 * 1024 * 1024;
    this.pauseStreams = true;
    this._released = false;
    this._streams = [];
    this._currentStream = null;
  }
  util.inherits(CombinedStream, Stream);
  CombinedStream.create = function(options) {
    var combinedStream = new this();
    options = options || {};
    for (var option in options) {
      combinedStream[option] = options[option];
    }
    return combinedStream;
  };
  CombinedStream.isStreamLike = function(stream) {
    return (typeof stream !== 'function') && (typeof stream !== 'string') && (typeof stream !== 'boolean') && (typeof stream !== 'number') && (!Buffer.isBuffer(stream));
  };
  CombinedStream.prototype.append = function(stream) {
    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) {
      if (!(stream instanceof DelayedStream)) {
        var newStream = DelayedStream.create(stream, {
          maxDataSize: Infinity,
          pauseStream: this.pauseStreams
        });
        stream.on('data', this._checkDataSize.bind(this));
        stream = newStream;
      }
      this._handleErrors(stream);
      if (this.pauseStreams) {
        stream.pause();
      }
    }
    this._streams.push(stream);
    return this;
  };
  CombinedStream.prototype.pipe = function(dest, options) {
    Stream.prototype.pipe.call(this, dest, options);
    this.resume();
    return dest;
  };
  CombinedStream.prototype._getNext = function() {
    this._currentStream = null;
    var stream = this._streams.shift();
    if (typeof stream == 'undefined') {
      this.end();
      return;
    }
    if (typeof stream !== 'function') {
      this._pipeNext(stream);
      return;
    }
    var getStream = stream;
    getStream(function(stream) {
      var isStreamLike = CombinedStream.isStreamLike(stream);
      if (isStreamLike) {
        stream.on('data', this._checkDataSize.bind(this));
        this._handleErrors(stream);
      }
      this._pipeNext(stream);
    }.bind(this));
  };
  CombinedStream.prototype._pipeNext = function(stream) {
    this._currentStream = stream;
    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) {
      stream.on('end', this._getNext.bind(this));
      stream.pipe(this, {end: false});
      return;
    }
    var value = stream;
    this.write(value);
    this._getNext();
  };
  CombinedStream.prototype._handleErrors = function(stream) {
    var self = this;
    stream.on('error', function(err) {
      self._emitError(err);
    });
  };
  CombinedStream.prototype.write = function(data) {
    this.emit('data', data);
  };
  CombinedStream.prototype.pause = function() {
    if (!this.pauseStreams) {
      return;
    }
    if (this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function')
      this._currentStream.pause();
    this.emit('pause');
  };
  CombinedStream.prototype.resume = function() {
    if (!this._released) {
      this._released = true;
      this.writable = true;
      this._getNext();
    }
    if (this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function')
      this._currentStream.resume();
    this.emit('resume');
  };
  CombinedStream.prototype.end = function() {
    this._reset();
    this.emit('end');
  };
  CombinedStream.prototype.destroy = function() {
    this._reset();
    this.emit('close');
  };
  CombinedStream.prototype._reset = function() {
    this.writable = false;
    this._streams = [];
    this._currentStream = null;
  };
  CombinedStream.prototype._checkDataSize = function() {
    this._updateDataSize();
    if (this.dataSize <= this.maxDataSize) {
      return;
    }
    var message = 'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
    this._emitError(new Error(message));
  };
  CombinedStream.prototype._updateDataSize = function() {
    this.dataSize = 0;
    var self = this;
    this._streams.forEach(function(stream) {
      if (!stream.dataSize) {
        return;
      }
      self.dataSize += stream.dataSize;
    });
    if (this._currentStream && this._currentStream.dataSize) {
      this.dataSize += this._currentStream.dataSize;
    }
  };
  CombinedStream.prototype._emitError = function(err) {
    this._reset();
    this.emit('error', err);
  };
  return module.exports;
});

$__System.registerDynamic("npm:isstream@0.1.2/isstream.js", ["@node/stream"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var stream = $__require('@node/stream');
  function isStream(obj) {
    return obj instanceof stream.Stream;
  }
  function isReadable(obj) {
    return isStream(obj) && typeof obj._read == 'function' && typeof obj._readableState == 'object';
  }
  function isWritable(obj) {
    return isStream(obj) && typeof obj._write == 'function' && typeof obj._writableState == 'object';
  }
  function isDuplex(obj) {
    return isReadable(obj) && isWritable(obj);
  }
  module.exports = isStream;
  module.exports.isReadable = isReadable;
  module.exports.isWritable = isWritable;
  module.exports.isDuplex = isDuplex;
  return module.exports;
});

$__System.registerDynamic("npm:request@2.72.0/lib/multipart.js", ["npm:node-uuid@1.4.7/uuid.js", "npm:combined-stream@1.0.5/lib/combined_stream.js", "npm:isstream@0.1.2/isstream.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"),
      Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var uuid = $__require('npm:node-uuid@1.4.7/uuid.js'),
      CombinedStream = $__require('npm:combined-stream@1.0.5/lib/combined_stream.js'),
      isstream = $__require('npm:isstream@0.1.2/isstream.js');
  function Multipart(request) {
    this.request = request;
    this.boundary = uuid();
    this.chunked = false;
    this.body = null;
  }
  Multipart.prototype.isChunked = function(options) {
    var self = this,
        chunked = false,
        parts = options.data || options;
    if (!parts.forEach) {
      self.request.emit('error', new Error('Argument error, options.multipart.'));
    }
    if (options.chunked !== undefined) {
      chunked = options.chunked;
    }
    if (self.request.getHeader('transfer-encoding') === 'chunked') {
      chunked = true;
    }
    if (!chunked) {
      parts.forEach(function(part) {
        if (typeof part.body === 'undefined') {
          self.request.emit('error', new Error('Body attribute missing in multipart.'));
        }
        if (isstream(part.body)) {
          chunked = true;
        }
      });
    }
    return chunked;
  };
  Multipart.prototype.setHeaders = function(chunked) {
    var self = this;
    if (chunked && !self.request.hasHeader('transfer-encoding')) {
      self.request.setHeader('transfer-encoding', 'chunked');
    }
    var header = self.request.getHeader('content-type');
    if (!header || header.indexOf('multipart') === -1) {
      self.request.setHeader('content-type', 'multipart/related; boundary=' + self.boundary);
    } else {
      if (header.indexOf('boundary') !== -1) {
        self.boundary = header.replace(/.*boundary=([^\s;]+).*/, '$1');
      } else {
        self.request.setHeader('content-type', header + '; boundary=' + self.boundary);
      }
    }
  };
  Multipart.prototype.build = function(parts, chunked) {
    var self = this;
    var body = chunked ? new CombinedStream() : [];
    function add(part) {
      if (typeof part === 'number') {
        part = part.toString();
      }
      return chunked ? body.append(part) : body.push(new Buffer(part));
    }
    if (self.request.preambleCRLF) {
      add('\r\n');
    }
    parts.forEach(function(part) {
      var preamble = '--' + self.boundary + '\r\n';
      Object.keys(part).forEach(function(key) {
        if (key === 'body') {
          return;
        }
        preamble += key + ': ' + part[key] + '\r\n';
      });
      preamble += '\r\n';
      add(preamble);
      add(part.body);
      add('\r\n');
    });
    add('--' + self.boundary + '--');
    if (self.request.postambleCRLF) {
      add('\r\n');
    }
    return body;
  };
  Multipart.prototype.onRequest = function(options) {
    var self = this;
    var chunked = self.isChunked(options),
        parts = options.data || options;
    self.setHeaders(chunked);
    self.chunked = chunked;
    self.body = self.build(parts, chunked);
  };
  exports.Multipart = Multipart;
  return module.exports;
});

$__System.registerDynamic("npm:request@2.72.0/lib/redirect.js", ["@node/url", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var url = $__require('@node/url');
  var isUrl = /^https?:/;
  function Redirect(request) {
    this.request = request;
    this.followRedirect = true;
    this.followRedirects = true;
    this.followAllRedirects = false;
    this.allowRedirect = function() {
      return true;
    };
    this.maxRedirects = 10;
    this.redirects = [];
    this.redirectsFollowed = 0;
    this.removeRefererHeader = false;
  }
  Redirect.prototype.onRequest = function(options) {
    var self = this;
    if (options.maxRedirects !== undefined) {
      self.maxRedirects = options.maxRedirects;
    }
    if (typeof options.followRedirect === 'function') {
      self.allowRedirect = options.followRedirect;
    }
    if (options.followRedirect !== undefined) {
      self.followRedirects = !!options.followRedirect;
    }
    if (options.followAllRedirects !== undefined) {
      self.followAllRedirects = options.followAllRedirects;
    }
    if (self.followRedirects || self.followAllRedirects) {
      self.redirects = self.redirects || [];
    }
    if (options.removeRefererHeader !== undefined) {
      self.removeRefererHeader = options.removeRefererHeader;
    }
  };
  Redirect.prototype.redirectTo = function(response) {
    var self = this,
        request = self.request;
    var redirectTo = null;
    if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has('location')) {
      var location = response.caseless.get('location');
      request.debug('redirect', location);
      if (self.followAllRedirects) {
        redirectTo = location;
      } else if (self.followRedirects) {
        switch (request.method) {
          case 'PATCH':
          case 'PUT':
          case 'POST':
          case 'DELETE':
            break;
          default:
            redirectTo = location;
            break;
        }
      }
    } else if (response.statusCode === 401) {
      var authHeader = request._auth.onResponse(response);
      if (authHeader) {
        request.setHeader('authorization', authHeader);
        redirectTo = request.uri;
      }
    }
    return redirectTo;
  };
  Redirect.prototype.onResponse = function(response) {
    var self = this,
        request = self.request;
    var redirectTo = self.redirectTo(response);
    if (!redirectTo || !self.allowRedirect.call(request, response)) {
      return false;
    }
    request.debug('redirect to', redirectTo);
    if (response.resume) {
      response.resume();
    }
    if (self.redirectsFollowed >= self.maxRedirects) {
      request.emit('error', new Error('Exceeded maxRedirects. Probably stuck in a redirect loop ' + request.uri.href));
      return false;
    }
    self.redirectsFollowed += 1;
    if (!isUrl.test(redirectTo)) {
      redirectTo = url.resolve(request.uri.href, redirectTo);
    }
    var uriPrev = request.uri;
    request.uri = url.parse(redirectTo);
    if (request.uri.protocol !== uriPrev.protocol) {
      delete request.agent;
    }
    self.redirects.push({
      statusCode: response.statusCode,
      redirectUri: redirectTo
    });
    if (self.followAllRedirects && request.method !== 'HEAD' && response.statusCode !== 401 && response.statusCode !== 307) {
      request.method = 'GET';
    }
    delete request.src;
    delete request.req;
    delete request._started;
    if (response.statusCode !== 401 && response.statusCode !== 307) {
      delete request.body;
      delete request._form;
      if (request.headers) {
        request.removeHeader('host');
        request.removeHeader('content-type');
        request.removeHeader('content-length');
        if (request.uri.hostname !== request.originalHost.split(':')[0]) {
          request.removeHeader('authorization');
        }
      }
    }
    if (!self.removeRefererHeader) {
      request.setHeader('referer', uriPrev.href);
    }
    request.emit('redirect');
    request.init();
    return true;
  };
  exports.Redirect = Redirect;
  return module.exports;
});

$__System.registerDynamic("npm:tunnel-agent@0.4.2/index.js", ["@node/net", "@node/tls", "@node/http", "@node/https", "@node/events", "@node/assert", "@node/util", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"),
      Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var net = $__require('@node/net'),
      tls = $__require('@node/tls'),
      http = $__require('@node/http'),
      https = $__require('@node/https'),
      events = $__require('@node/events'),
      assert = $__require('@node/assert'),
      util = $__require('@node/util');
  ;
  exports.httpOverHttp = httpOverHttp;
  exports.httpsOverHttp = httpsOverHttp;
  exports.httpOverHttps = httpOverHttps;
  exports.httpsOverHttps = httpsOverHttps;
  function httpOverHttp(options) {
    var agent = new TunnelingAgent(options);
    agent.request = http.request;
    return agent;
  }
  function httpsOverHttp(options) {
    var agent = new TunnelingAgent(options);
    agent.request = http.request;
    agent.createSocket = createSecureSocket;
    agent.defaultPort = 443;
    return agent;
  }
  function httpOverHttps(options) {
    var agent = new TunnelingAgent(options);
    agent.request = https.request;
    return agent;
  }
  function httpsOverHttps(options) {
    var agent = new TunnelingAgent(options);
    agent.request = https.request;
    agent.createSocket = createSecureSocket;
    agent.defaultPort = 443;
    return agent;
  }
  function TunnelingAgent(options) {
    var self = this;
    self.options = options || {};
    self.proxyOptions = self.options.proxy || {};
    self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
    self.requests = [];
    self.sockets = [];
    self.on('free', function onFree(socket, host, port) {
      for (var i = 0,
          len = self.requests.length; i < len; ++i) {
        var pending = self.requests[i];
        if (pending.host === host && pending.port === port) {
          self.requests.splice(i, 1);
          pending.request.onSocket(socket);
          return;
        }
      }
      socket.destroy();
      self.removeSocket(socket);
    });
  }
  util.inherits(TunnelingAgent, events.EventEmitter);
  TunnelingAgent.prototype.addRequest = function addRequest(req, options) {
    var self = this;
    if (typeof options === 'string') {
      options = {
        host: options,
        port: arguments[2],
        path: arguments[3]
      };
    }
    if (self.sockets.length >= this.maxSockets) {
      self.requests.push({
        host: options.host,
        port: options.port,
        request: req
      });
      return;
    }
    self.createConnection({
      host: options.host,
      port: options.port,
      request: req
    });
  };
  TunnelingAgent.prototype.createConnection = function createConnection(pending) {
    var self = this;
    self.createSocket(pending, function(socket) {
      socket.on('free', onFree);
      socket.on('close', onCloseOrRemove);
      socket.on('agentRemove', onCloseOrRemove);
      pending.request.onSocket(socket);
      function onFree() {
        self.emit('free', socket, pending.host, pending.port);
      }
      function onCloseOrRemove(err) {
        self.removeSocket(socket);
        socket.removeListener('free', onFree);
        socket.removeListener('close', onCloseOrRemove);
        socket.removeListener('agentRemove', onCloseOrRemove);
      }
    });
  };
  TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
    var self = this;
    var placeholder = {};
    self.sockets.push(placeholder);
    var connectOptions = mergeOptions({}, self.proxyOptions, {
      method: 'CONNECT',
      path: options.host + ':' + options.port,
      agent: false
    });
    if (connectOptions.proxyAuth) {
      connectOptions.headers = connectOptions.headers || {};
      connectOptions.headers['Proxy-Authorization'] = 'Basic ' + new Buffer(connectOptions.proxyAuth).toString('base64');
    }
    debug('making CONNECT request');
    var connectReq = self.request(connectOptions);
    connectReq.useChunkedEncodingByDefault = false;
    connectReq.once('response', onResponse);
    connectReq.once('upgrade', onUpgrade);
    connectReq.once('connect', onConnect);
    connectReq.once('error', onError);
    connectReq.end();
    function onResponse(res) {
      res.upgrade = true;
    }
    function onUpgrade(res, socket, head) {
      process.nextTick(function() {
        onConnect(res, socket, head);
      });
    }
    function onConnect(res, socket, head) {
      connectReq.removeAllListeners();
      socket.removeAllListeners();
      if (res.statusCode === 200) {
        assert.equal(head.length, 0);
        debug('tunneling connection has established');
        self.sockets[self.sockets.indexOf(placeholder)] = socket;
        cb(socket);
      } else {
        debug('tunneling socket could not be established, statusCode=%d', res.statusCode);
        var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode);
        error.code = 'ECONNRESET';
        options.request.emit('error', error);
        self.removeSocket(placeholder);
      }
    }
    function onError(cause) {
      connectReq.removeAllListeners();
      debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack);
      var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message);
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
    }
  };
  TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
    var pos = this.sockets.indexOf(socket);
    if (pos === -1)
      return;
    this.sockets.splice(pos, 1);
    var pending = this.requests.shift();
    if (pending) {
      this.createConnection(pending);
    }
  };
  function createSecureSocket(options, cb) {
    var self = this;
    TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
      var secureSocket = tls.connect(0, mergeOptions({}, self.options, {
        servername: options.host,
        socket: socket
      }));
      self.sockets[self.sockets.indexOf(socket)] = secureSocket;
      cb(secureSocket);
    });
  }
  function mergeOptions(target) {
    for (var i = 1,
        len = arguments.length; i < len; ++i) {
      var overrides = arguments[i];
      if (typeof overrides === 'object') {
        var keys = Object.keys(overrides);
        for (var j = 0,
            keyLen = keys.length; j < keyLen; ++j) {
          var k = keys[j];
          if (overrides[k] !== undefined) {
            target[k] = overrides[k];
          }
        }
      }
    }
    return target;
  }
  var debug;
  if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
    debug = function() {
      var args = Array.prototype.slice.call(arguments);
      if (typeof args[0] === 'string') {
        args[0] = 'TUNNEL: ' + args[0];
      } else {
        args.unshift('TUNNEL:');
      }
      console.error.apply(console, args);
    };
  } else {
    debug = function() {};
  }
  exports.debug = debug;
  return module.exports;
});

$__System.registerDynamic("npm:request@2.72.0/lib/tunnel.js", ["@node/url", "npm:tunnel-agent@0.4.2/index.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var url = $__require('@node/url'),
      tunnel = $__require('npm:tunnel-agent@0.4.2/index.js');
  var defaultProxyHeaderWhiteList = ['accept', 'accept-charset', 'accept-encoding', 'accept-language', 'accept-ranges', 'cache-control', 'content-encoding', 'content-language', 'content-location', 'content-md5', 'content-range', 'content-type', 'connection', 'date', 'expect', 'max-forwards', 'pragma', 'referer', 'te', 'user-agent', 'via'];
  var defaultProxyHeaderExclusiveList = ['proxy-authorization'];
  function constructProxyHost(uriObject) {
    var port = uriObject.port,
        protocol = uriObject.protocol,
        proxyHost = uriObject.hostname + ':';
    if (port) {
      proxyHost += port;
    } else if (protocol === 'https:') {
      proxyHost += '443';
    } else {
      proxyHost += '80';
    }
    return proxyHost;
  }
  function constructProxyHeaderWhiteList(headers, proxyHeaderWhiteList) {
    var whiteList = proxyHeaderWhiteList.reduce(function(set, header) {
      set[header.toLowerCase()] = true;
      return set;
    }, {});
    return Object.keys(headers).filter(function(header) {
      return whiteList[header.toLowerCase()];
    }).reduce(function(set, header) {
      set[header] = headers[header];
      return set;
    }, {});
  }
  function constructTunnelOptions(request, proxyHeaders) {
    var proxy = request.proxy;
    var tunnelOptions = {
      proxy: {
        host: proxy.hostname,
        port: +proxy.port,
        proxyAuth: proxy.auth,
        headers: proxyHeaders
      },
      headers: request.headers,
      ca: request.ca,
      cert: request.cert,
      key: request.key,
      passphrase: request.passphrase,
      pfx: request.pfx,
      ciphers: request.ciphers,
      rejectUnauthorized: request.rejectUnauthorized,
      secureOptions: request.secureOptions,
      secureProtocol: request.secureProtocol
    };
    return tunnelOptions;
  }
  function constructTunnelFnName(uri, proxy) {
    var uriProtocol = (uri.protocol === 'https:' ? 'https' : 'http');
    var proxyProtocol = (proxy.protocol === 'https:' ? 'Https' : 'Http');
    return [uriProtocol, proxyProtocol].join('Over');
  }
  function getTunnelFn(request) {
    var uri = request.uri;
    var proxy = request.proxy;
    var tunnelFnName = constructTunnelFnName(uri, proxy);
    return tunnel[tunnelFnName];
  }
  function Tunnel(request) {
    this.request = request;
    this.proxyHeaderWhiteList = defaultProxyHeaderWhiteList;
    this.proxyHeaderExclusiveList = [];
    if (typeof request.tunnel !== 'undefined') {
      this.tunnelOverride = request.tunnel;
    }
  }
  Tunnel.prototype.isEnabled = function() {
    var self = this,
        request = self.request;
    if (typeof self.tunnelOverride !== 'undefined') {
      return self.tunnelOverride;
    }
    if (request.uri.protocol === 'https:') {
      return true;
    }
    return false;
  };
  Tunnel.prototype.setup = function(options) {
    var self = this,
        request = self.request;
    options = options || {};
    if (typeof request.proxy === 'string') {
      request.proxy = url.parse(request.proxy);
    }
    if (!request.proxy || !request.tunnel) {
      return false;
    }
    if (options.proxyHeaderWhiteList) {
      self.proxyHeaderWhiteList = options.proxyHeaderWhiteList;
    }
    if (options.proxyHeaderExclusiveList) {
      self.proxyHeaderExclusiveList = options.proxyHeaderExclusiveList;
    }
    var proxyHeaderExclusiveList = self.proxyHeaderExclusiveList.concat(defaultProxyHeaderExclusiveList);
    var proxyHeaderWhiteList = self.proxyHeaderWhiteList.concat(proxyHeaderExclusiveList);
    var proxyHeaders = constructProxyHeaderWhiteList(request.headers, proxyHeaderWhiteList);
    proxyHeaders.host = constructProxyHost(request.uri);
    proxyHeaderExclusiveList.forEach(request.removeHeader, request);
    var tunnelFn = getTunnelFn(request);
    var tunnelOptions = constructTunnelOptions(request, proxyHeaders);
    request.agent = tunnelFn(tunnelOptions);
    return true;
  };
  Tunnel.defaultProxyHeaderWhiteList = defaultProxyHeaderWhiteList;
  Tunnel.defaultProxyHeaderExclusiveList = defaultProxyHeaderExclusiveList;
  exports.Tunnel = Tunnel;
  return module.exports;
});

$__System.registerDynamic("npm:pseudomap@1.0.2/pseudomap.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  module.exports = PseudoMap;
  function PseudoMap(set) {
    if (!(this instanceof PseudoMap))
      throw new TypeError("Constructor PseudoMap requires 'new'");
    this.clear();
    if (set) {
      if ((set instanceof PseudoMap) || (typeof Map === 'function' && set instanceof Map))
        set.forEach(function(value, key) {
          this.set(key, value);
        }, this);
      else if (Array.isArray(set))
        set.forEach(function(kv) {
          this.set(kv[0], kv[1]);
        }, this);
      else
        throw new TypeError('invalid argument');
    }
  }
  PseudoMap.prototype.forEach = function(fn, thisp) {
    thisp = thisp || this;
    Object.keys(this._data).forEach(function(k) {
      if (k !== 'size')
        fn.call(thisp, this._data[k].value, this._data[k].key);
    }, this);
  };
  PseudoMap.prototype.has = function(k) {
    return !!find(this._data, k);
  };
  PseudoMap.prototype.get = function(k) {
    var res = find(this._data, k);
    return res && res.value;
  };
  PseudoMap.prototype.set = function(k, v) {
    set(this._data, k, v);
  };
  PseudoMap.prototype.delete = function(k) {
    var res = find(this._data, k);
    if (res) {
      delete this._data[res._index];
      this._data.size--;
    }
  };
  PseudoMap.prototype.clear = function() {
    var data = Object.create(null);
    data.size = 0;
    Object.defineProperty(this, '_data', {
      value: data,
      enumerable: false,
      configurable: true,
      writable: false
    });
  };
  Object.defineProperty(PseudoMap.prototype, 'size', {
    get: function() {
      return this._data.size;
    },
    set: function(n) {},
    enumerable: true,
    configurable: true
  });
  PseudoMap.prototype.values = PseudoMap.prototype.keys = PseudoMap.prototype.entries = function() {
    throw new Error('iterators are not implemented in this version');
  };
  function same(a, b) {
    return a === b || a !== a && b !== b;
  }
  function Entry(k, v, i) {
    this.key = k;
    this.value = v;
    this._index = i;
  }
  function find(data, k) {
    for (var i = 0,
        s = '_' + k,
        key = s; hasOwnProperty.call(data, key); key = s + i++) {
      if (same(data[key].key, k))
        return data[key];
    }
  }
  function set(data, k, v) {
    for (var i = 0,
        s = '_' + k,
        key = s; hasOwnProperty.call(data, key); key = s + i++) {
      if (same(data[key].key, k)) {
        data[key].value = v;
        return;
      }
    }
    data.size++;
    data[key] = new Entry(k, v, key);
  }
  return module.exports;
});

$__System.registerDynamic("npm:pseudomap@1.0.2/map.js", ["npm:pseudomap@1.0.2/pseudomap.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  if (process.env.npm_package_name === 'pseudomap' && process.env.npm_lifecycle_script === 'test')
    process.env.TEST_PSEUDOMAP = 'true';
  if (typeof Map === 'function' && !process.env.TEST_PSEUDOMAP) {
    module.exports = Map;
  } else {
    module.exports = $__require('npm:pseudomap@1.0.2/pseudomap.js');
  }
  return module.exports;
});

$__System.registerDynamic("npm:yallist@2.0.0/yallist.js", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = Yallist;
  Yallist.Node = Node;
  Yallist.create = Yallist;
  function Yallist(list) {
    var self = this;
    if (!(self instanceof Yallist)) {
      self = new Yallist();
    }
    self.tail = null;
    self.head = null;
    self.length = 0;
    if (list && typeof list.forEach === 'function') {
      list.forEach(function(item) {
        self.push(item);
      });
    } else if (arguments.length > 0) {
      for (var i = 0,
          l = arguments.length; i < l; i++) {
        self.push(arguments[i]);
      }
    }
    return self;
  }
  Yallist.prototype.removeNode = function(node) {
    if (node.list !== this) {
      throw new Error('removing node which does not belong to this list');
    }
    var next = node.next;
    var prev = node.prev;
    if (next) {
      next.prev = prev;
    }
    if (prev) {
      prev.next = next;
    }
    if (node === this.head) {
      this.head = next;
    }
    if (node === this.tail) {
      this.tail = prev;
    }
    node.list.length--;
    node.next = null;
    node.prev = null;
    node.list = null;
  };
  Yallist.prototype.unshiftNode = function(node) {
    if (node === this.head) {
      return;
    }
    if (node.list) {
      node.list.removeNode(node);
    }
    var head = this.head;
    node.list = this;
    node.next = head;
    if (head) {
      head.prev = node;
    }
    this.head = node;
    if (!this.tail) {
      this.tail = node;
    }
    this.length++;
  };
  Yallist.prototype.pushNode = function(node) {
    if (node === this.tail) {
      return;
    }
    if (node.list) {
      node.list.removeNode(node);
    }
    var tail = this.tail;
    node.list = this;
    node.prev = tail;
    if (tail) {
      tail.next = node;
    }
    this.tail = node;
    if (!this.head) {
      this.head = node;
    }
    this.length++;
  };
  Yallist.prototype.push = function() {
    for (var i = 0,
        l = arguments.length; i < l; i++) {
      push(this, arguments[i]);
    }
    return this.length;
  };
  Yallist.prototype.unshift = function() {
    for (var i = 0,
        l = arguments.length; i < l; i++) {
      unshift(this, arguments[i]);
    }
    return this.length;
  };
  Yallist.prototype.pop = function() {
    if (!this.tail)
      return undefined;
    var res = this.tail.value;
    this.tail = this.tail.prev;
    this.tail.next = null;
    this.length--;
    return res;
  };
  Yallist.prototype.shift = function() {
    if (!this.head)
      return undefined;
    var res = this.head.value;
    this.head = this.head.next;
    this.head.prev = null;
    this.length--;
    return res;
  };
  Yallist.prototype.forEach = function(fn, thisp) {
    thisp = thisp || this;
    for (var walker = this.head,
        i = 0; walker !== null; i++) {
      fn.call(thisp, walker.value, i, this);
      walker = walker.next;
    }
  };
  Yallist.prototype.forEachReverse = function(fn, thisp) {
    thisp = thisp || this;
    for (var walker = this.tail,
        i = this.length - 1; walker !== null; i--) {
      fn.call(thisp, walker.value, i, this);
      walker = walker.prev;
    }
  };
  Yallist.prototype.get = function(n) {
    for (var i = 0,
        walker = this.head; walker !== null && i < n; i++) {
      walker = walker.next;
    }
    if (i === n && walker !== null) {
      return walker.value;
    }
  };
  Yallist.prototype.getReverse = function(n) {
    for (var i = 0,
        walker = this.tail; walker !== null && i < n; i++) {
      walker = walker.prev;
    }
    if (i === n && walker !== null) {
      return walker.value;
    }
  };
  Yallist.prototype.map = function(fn, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for (var walker = this.head; walker !== null; ) {
      res.push(fn.call(thisp, walker.value, this));
      walker = walker.next;
    }
    return res;
  };
  Yallist.prototype.mapReverse = function(fn, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for (var walker = this.tail; walker !== null; ) {
      res.push(fn.call(thisp, walker.value, this));
      walker = walker.prev;
    }
    return res;
  };
  Yallist.prototype.reduce = function(fn, initial) {
    var acc;
    var walker = this.head;
    if (arguments.length > 1) {
      acc = initial;
    } else if (this.head) {
      walker = this.head.next;
      acc = this.head.value;
    } else {
      throw new TypeError('Reduce of empty list with no initial value');
    }
    for (var i = 0; walker !== null; i++) {
      acc = fn(acc, walker.value, i);
      walker = walker.next;
    }
    return acc;
  };
  Yallist.prototype.reduceReverse = function(fn, initial) {
    var acc;
    var walker = this.tail;
    if (arguments.length > 1) {
      acc = initial;
    } else if (this.tail) {
      walker = this.tail.prev;
      acc = this.tail.value;
    } else {
      throw new TypeError('Reduce of empty list with no initial value');
    }
    for (var i = this.length - 1; walker !== null; i--) {
      acc = fn(acc, walker.value, i);
      walker = walker.prev;
    }
    return acc;
  };
  Yallist.prototype.toArray = function() {
    var arr = new Array(this.length);
    for (var i = 0,
        walker = this.head; walker !== null; i++) {
      arr[i] = walker.value;
      walker = walker.next;
    }
    return arr;
  };
  Yallist.prototype.toArrayReverse = function() {
    var arr = new Array(this.length);
    for (var i = 0,
        walker = this.tail; walker !== null; i++) {
      arr[i] = walker.value;
      walker = walker.prev;
    }
    return arr;
  };
  Yallist.prototype.slice = function(from, to) {
    to = to || this.length;
    if (to < 0) {
      to += this.length;
    }
    from = from || 0;
    if (from < 0) {
      from += this.length;
    }
    var ret = new Yallist();
    if (to < from || to < 0) {
      return ret;
    }
    if (from < 0) {
      from = 0;
    }
    if (to > this.length) {
      to = this.length;
    }
    for (var i = 0,
        walker = this.head; walker !== null && i < from; i++) {
      walker = walker.next;
    }
    for (; walker !== null && i < to; i++, walker = walker.next) {
      ret.push(walker.value);
    }
    return ret;
  };
  Yallist.prototype.sliceReverse = function(from, to) {
    to = to || this.length;
    if (to < 0) {
      to += this.length;
    }
    from = from || 0;
    if (from < 0) {
      from += this.length;
    }
    var ret = new Yallist();
    if (to < from || to < 0) {
      return ret;
    }
    if (from < 0) {
      from = 0;
    }
    if (to > this.length) {
      to = this.length;
    }
    for (var i = this.length,
        walker = this.tail; walker !== null && i > to; i--) {
      walker = walker.prev;
    }
    for (; walker !== null && i > from; i--, walker = walker.prev) {
      ret.push(walker.value);
    }
    return ret;
  };
  Yallist.prototype.reverse = function() {
    var head = this.head;
    var tail = this.tail;
    for (var walker = head; walker !== null; walker = walker.prev) {
      var p = walker.prev;
      walker.prev = walker.next;
      walker.next = p;
    }
    this.head = tail;
    this.tail = head;
    return this;
  };
  function push(self, item) {
    self.tail = new Node(item, self.tail, null, self);
    if (!self.head) {
      self.head = self.tail;
    }
    self.length++;
  }
  function unshift(self, item) {
    self.head = new Node(item, null, self.head, self);
    if (!self.tail) {
      self.tail = self.head;
    }
    self.length++;
  }
  function Node(value, prev, next, list) {
    if (!(this instanceof Node)) {
      return new Node(value, prev, next, list);
    }
    this.list = list;
    this.value = value;
    if (prev) {
      prev.next = this;
      this.prev = prev;
    } else {
      this.prev = null;
    }
    if (next) {
      next.prev = this;
      this.next = next;
    } else {
      this.next = null;
    }
  }
  return module.exports;
});

$__System.registerDynamic("npm:lru-cache@4.0.1/lib/lru-cache.js", ["npm:pseudomap@1.0.2/map.js", "@node/util", "npm:yallist@2.0.0/yallist.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = LRUCache;
  var Map = $__require('npm:pseudomap@1.0.2/map.js');
  var util = $__require('@node/util');
  var Yallist = $__require('npm:yallist@2.0.0/yallist.js');
  var symbols = {};
  var hasSymbol = typeof Symbol === 'function';
  var makeSymbol;
  if (hasSymbol) {
    makeSymbol = function(key) {
      return Symbol.for(key);
    };
  } else {
    makeSymbol = function(key) {
      return '_' + key;
    };
  }
  function priv(obj, key, val) {
    var sym;
    if (symbols[key]) {
      sym = symbols[key];
    } else {
      sym = makeSymbol(key);
      symbols[key] = sym;
    }
    if (arguments.length === 2) {
      return obj[sym];
    } else {
      obj[sym] = val;
      return val;
    }
  }
  function naiveLength() {
    return 1;
  }
  function LRUCache(options) {
    if (!(this instanceof LRUCache)) {
      return new LRUCache(options);
    }
    if (typeof options === 'number') {
      options = {max: options};
    }
    if (!options) {
      options = {};
    }
    var max = priv(this, 'max', options.max);
    if (!max || !(typeof max === 'number') || max <= 0) {
      priv(this, 'max', Infinity);
    }
    var lc = options.length || naiveLength;
    if (typeof lc !== 'function') {
      lc = naiveLength;
    }
    priv(this, 'lengthCalculator', lc);
    priv(this, 'allowStale', options.stale || false);
    priv(this, 'maxAge', options.maxAge || 0);
    priv(this, 'dispose', options.dispose);
    this.reset();
  }
  Object.defineProperty(LRUCache.prototype, 'max', {
    set: function(mL) {
      if (!mL || !(typeof mL === 'number') || mL <= 0) {
        mL = Infinity;
      }
      priv(this, 'max', mL);
      trim(this);
    },
    get: function() {
      return priv(this, 'max');
    },
    enumerable: true
  });
  Object.defineProperty(LRUCache.prototype, 'allowStale', {
    set: function(allowStale) {
      priv(this, 'allowStale', !!allowStale);
    },
    get: function() {
      return priv(this, 'allowStale');
    },
    enumerable: true
  });
  Object.defineProperty(LRUCache.prototype, 'maxAge', {
    set: function(mA) {
      if (!mA || !(typeof mA === 'number') || mA < 0) {
        mA = 0;
      }
      priv(this, 'maxAge', mA);
      trim(this);
    },
    get: function() {
      return priv(this, 'maxAge');
    },
    enumerable: true
  });
  Object.defineProperty(LRUCache.prototype, 'lengthCalculator', {
    set: function(lC) {
      if (typeof lC !== 'function') {
        lC = naiveLength;
      }
      if (lC !== priv(this, 'lengthCalculator')) {
        priv(this, 'lengthCalculator', lC);
        priv(this, 'length', 0);
        priv(this, 'lruList').forEach(function(hit) {
          hit.length = priv(this, 'lengthCalculator').call(this, hit.value, hit.key);
          priv(this, 'length', priv(this, 'length') + hit.length);
        }, this);
      }
      trim(this);
    },
    get: function() {
      return priv(this, 'lengthCalculator');
    },
    enumerable: true
  });
  Object.defineProperty(LRUCache.prototype, 'length', {
    get: function() {
      return priv(this, 'length');
    },
    enumerable: true
  });
  Object.defineProperty(LRUCache.prototype, 'itemCount', {
    get: function() {
      return priv(this, 'lruList').length;
    },
    enumerable: true
  });
  LRUCache.prototype.rforEach = function(fn, thisp) {
    thisp = thisp || this;
    for (var walker = priv(this, 'lruList').tail; walker !== null; ) {
      var prev = walker.prev;
      forEachStep(this, fn, walker, thisp);
      walker = prev;
    }
  };
  function forEachStep(self, fn, node, thisp) {
    var hit = node.value;
    if (isStale(self, hit)) {
      del(self, node);
      if (!priv(self, 'allowStale')) {
        hit = undefined;
      }
    }
    if (hit) {
      fn.call(thisp, hit.value, hit.key, self);
    }
  }
  LRUCache.prototype.forEach = function(fn, thisp) {
    thisp = thisp || this;
    for (var walker = priv(this, 'lruList').head; walker !== null; ) {
      var next = walker.next;
      forEachStep(this, fn, walker, thisp);
      walker = next;
    }
  };
  LRUCache.prototype.keys = function() {
    return priv(this, 'lruList').toArray().map(function(k) {
      return k.key;
    }, this);
  };
  LRUCache.prototype.values = function() {
    return priv(this, 'lruList').toArray().map(function(k) {
      return k.value;
    }, this);
  };
  LRUCache.prototype.reset = function() {
    if (priv(this, 'dispose') && priv(this, 'lruList') && priv(this, 'lruList').length) {
      priv(this, 'lruList').forEach(function(hit) {
        priv(this, 'dispose').call(this, hit.key, hit.value);
      }, this);
    }
    priv(this, 'cache', new Map());
    priv(this, 'lruList', new Yallist());
    priv(this, 'length', 0);
  };
  LRUCache.prototype.dump = function() {
    return priv(this, 'lruList').map(function(hit) {
      if (!isStale(this, hit)) {
        return {
          k: hit.key,
          v: hit.value,
          e: hit.now + (hit.maxAge || 0)
        };
      }
    }, this).toArray().filter(function(h) {
      return h;
    });
  };
  LRUCache.prototype.dumpLru = function() {
    return priv(this, 'lruList');
  };
  LRUCache.prototype.inspect = function(n, opts) {
    var str = 'LRUCache {';
    var extras = false;
    var as = priv(this, 'allowStale');
    if (as) {
      str += '\n  allowStale: true';
      extras = true;
    }
    var max = priv(this, 'max');
    if (max && max !== Infinity) {
      if (extras) {
        str += ',';
      }
      str += '\n  max: ' + util.inspect(max, opts);
      extras = true;
    }
    var maxAge = priv(this, 'maxAge');
    if (maxAge) {
      if (extras) {
        str += ',';
      }
      str += '\n  maxAge: ' + util.inspect(maxAge, opts);
      extras = true;
    }
    var lc = priv(this, 'lengthCalculator');
    if (lc && lc !== naiveLength) {
      if (extras) {
        str += ',';
      }
      str += '\n  length: ' + util.inspect(priv(this, 'length'), opts);
      extras = true;
    }
    var didFirst = false;
    priv(this, 'lruList').forEach(function(item) {
      if (didFirst) {
        str += ',\n  ';
      } else {
        if (extras) {
          str += ',\n';
        }
        didFirst = true;
        str += '\n  ';
      }
      var key = util.inspect(item.key).split('\n').join('\n  ');
      var val = {value: item.value};
      if (item.maxAge !== maxAge) {
        val.maxAge = item.maxAge;
      }
      if (lc !== naiveLength) {
        val.length = item.length;
      }
      if (isStale(this, item)) {
        val.stale = true;
      }
      val = util.inspect(val, opts).split('\n').join('\n  ');
      str += key + ' => ' + val;
    });
    if (didFirst || extras) {
      str += '\n';
    }
    str += '}';
    return str;
  };
  LRUCache.prototype.set = function(key, value, maxAge) {
    maxAge = maxAge || priv(this, 'maxAge');
    var now = maxAge ? Date.now() : 0;
    var len = priv(this, 'lengthCalculator').call(this, value, key);
    if (priv(this, 'cache').has(key)) {
      if (len > priv(this, 'max')) {
        del(this, priv(this, 'cache').get(key));
        return false;
      }
      var node = priv(this, 'cache').get(key);
      var item = node.value;
      if (priv(this, 'dispose')) {
        priv(this, 'dispose').call(this, key, item.value);
      }
      item.now = now;
      item.maxAge = maxAge;
      item.value = value;
      priv(this, 'length', priv(this, 'length') + (len - item.length));
      item.length = len;
      this.get(key);
      trim(this);
      return true;
    }
    var hit = new Entry(key, value, len, now, maxAge);
    if (hit.length > priv(this, 'max')) {
      if (priv(this, 'dispose')) {
        priv(this, 'dispose').call(this, key, value);
      }
      return false;
    }
    priv(this, 'length', priv(this, 'length') + hit.length);
    priv(this, 'lruList').unshift(hit);
    priv(this, 'cache').set(key, priv(this, 'lruList').head);
    trim(this);
    return true;
  };
  LRUCache.prototype.has = function(key) {
    if (!priv(this, 'cache').has(key))
      return false;
    var hit = priv(this, 'cache').get(key).value;
    if (isStale(this, hit)) {
      return false;
    }
    return true;
  };
  LRUCache.prototype.get = function(key) {
    return get(this, key, true);
  };
  LRUCache.prototype.peek = function(key) {
    return get(this, key, false);
  };
  LRUCache.prototype.pop = function() {
    var node = priv(this, 'lruList').tail;
    if (!node)
      return null;
    del(this, node);
    return node.value;
  };
  LRUCache.prototype.del = function(key) {
    del(this, priv(this, 'cache').get(key));
  };
  LRUCache.prototype.load = function(arr) {
    this.reset();
    var now = Date.now();
    for (var l = arr.length - 1; l >= 0; l--) {
      var hit = arr[l];
      var expiresAt = hit.e || 0;
      if (expiresAt === 0) {
        this.set(hit.k, hit.v);
      } else {
        var maxAge = expiresAt - now;
        if (maxAge > 0) {
          this.set(hit.k, hit.v, maxAge);
        }
      }
    }
  };
  LRUCache.prototype.prune = function() {
    var self = this;
    priv(this, 'cache').forEach(function(value, key) {
      get(self, key, false);
    });
  };
  function get(self, key, doUse) {
    var node = priv(self, 'cache').get(key);
    if (node) {
      var hit = node.value;
      if (isStale(self, hit)) {
        del(self, node);
        if (!priv(self, 'allowStale'))
          hit = undefined;
      } else {
        if (doUse) {
          priv(self, 'lruList').unshiftNode(node);
        }
      }
      if (hit)
        hit = hit.value;
    }
    return hit;
  }
  function isStale(self, hit) {
    if (!hit || (!hit.maxAge && !priv(self, 'maxAge'))) {
      return false;
    }
    var stale = false;
    var diff = Date.now() - hit.now;
    if (hit.maxAge) {
      stale = diff > hit.maxAge;
    } else {
      stale = priv(self, 'maxAge') && (diff > priv(self, 'maxAge'));
    }
    return stale;
  }
  function trim(self) {
    if (priv(self, 'length') > priv(self, 'max')) {
      for (var walker = priv(self, 'lruList').tail; priv(self, 'length') > priv(self, 'max') && walker !== null; ) {
        var prev = walker.prev;
        del(self, walker);
        walker = prev;
      }
    }
  }
  function del(self, node) {
    if (node) {
      var hit = node.value;
      if (priv(self, 'dispose')) {
        priv(self, 'dispose').call(this, hit.key, hit.value);
      }
      priv(self, 'length', priv(self, 'length') - hit.length);
      priv(self, 'cache').delete(hit.key);
      priv(self, 'lruList').removeNode(node);
    }
  }
  function Entry(key, value, length, now, maxAge) {
    this.key = key;
    this.value = value;
    this.length = length;
    this.now = now;
    this.maxAge = maxAge || 0;
  }
  return module.exports;
});

$__System.registerDynamic("npm:aws4@1.3.2/aws4.js", ["@node/url", "@node/querystring", "@node/crypto", "npm:lru-cache@4.0.1/lib/lru-cache.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"),
      Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var aws4 = exports,
      url = $__require('@node/url'),
      querystring = $__require('@node/querystring'),
      crypto = $__require('@node/crypto'),
      lru = $__require('npm:lru-cache@4.0.1/lib/lru-cache.js'),
      credentialsCache = lru(1000);
  function hmac(key, string, encoding) {
    return crypto.createHmac('sha256', key).update(string, 'utf8').digest(encoding);
  }
  function hash(string, encoding) {
    return crypto.createHash('sha256').update(string, 'utf8').digest(encoding);
  }
  function encodeRfc3986(urlEncodedString) {
    return urlEncodedString.replace(/[!'()*]/g, function(c) {
      return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
  }
  function RequestSigner(request, credentials) {
    if (typeof request === 'string')
      request = url.parse(request);
    var headers = request.headers = (request.headers || {}),
        hostParts = this.matchHost(request.hostname || request.host || headers.Host || headers.host);
    this.request = request;
    this.credentials = credentials || this.defaultCredentials();
    this.service = request.service || hostParts[0] || '';
    this.region = request.region || hostParts[1] || 'us-east-1';
    if (this.service === 'email')
      this.service = 'ses';
    if (!request.method && request.body)
      request.method = 'POST';
    if (!headers.Host && !headers.host) {
      headers.Host = request.hostname || request.host || this.createHost();
      if (request.port)
        headers.Host += ':' + request.port;
    }
    if (!request.hostname && !request.host)
      request.hostname = headers.Host || headers.host;
  }
  RequestSigner.prototype.matchHost = function(host) {
    var match = (host || '').match(/([^\.]+)\.(?:([^\.]*)\.)?amazonaws\.com$/);
    var hostParts = (match || []).slice(1, 3);
    if (hostParts[1] === 'es')
      hostParts = hostParts.reverse();
    return hostParts;
  };
  RequestSigner.prototype.isSingleRegion = function() {
    if (['s3', 'sdb'].indexOf(this.service) >= 0 && this.region === 'us-east-1')
      return true;
    return ['cloudfront', 'ls', 'route53', 'iam', 'importexport', 'sts'].indexOf(this.service) >= 0;
  };
  RequestSigner.prototype.createHost = function() {
    var region = this.isSingleRegion() ? '' : (this.service === 's3' && this.region !== 'us-east-1' ? '-' : '.') + this.region,
        service = this.service === 'ses' ? 'email' : this.service;
    return service + region + '.amazonaws.com';
  };
  RequestSigner.prototype.prepareRequest = function() {
    this.parsePath();
    var request = this.request,
        headers = request.headers,
        query;
    if (request.signQuery) {
      this.parsedPath.query = query = this.parsedPath.query || {};
      if (this.credentials.sessionToken)
        query['X-Amz-Security-Token'] = this.credentials.sessionToken;
      if (this.service === 's3' && !query['X-Amz-Expires'])
        query['X-Amz-Expires'] = 86400;
      if (query['X-Amz-Date'])
        this.datetime = query['X-Amz-Date'];
      else
        query['X-Amz-Date'] = this.getDateTime();
      query['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256';
      query['X-Amz-Credential'] = this.credentials.accessKeyId + '/' + this.credentialString();
      query['X-Amz-SignedHeaders'] = this.signedHeaders();
    } else {
      if (!request.doNotModifyHeaders) {
        if (request.body && !headers['Content-Type'] && !headers['content-type'])
          headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';
        if (request.body && !headers['Content-Length'] && !headers['content-length'])
          headers['Content-Length'] = Buffer.byteLength(request.body);
        if (this.credentials.sessionToken)
          headers['X-Amz-Security-Token'] = this.credentials.sessionToken;
        if (this.service === 's3')
          headers['X-Amz-Content-Sha256'] = hash(this.request.body || '', 'hex');
        if (headers['X-Amz-Date'])
          this.datetime = headers['X-Amz-Date'];
        else
          headers['X-Amz-Date'] = this.getDateTime();
      }
      delete headers.Authorization;
      delete headers.authorization;
    }
  };
  RequestSigner.prototype.sign = function() {
    if (!this.parsedPath)
      this.prepareRequest();
    if (this.request.signQuery) {
      this.parsedPath.query['X-Amz-Signature'] = this.signature();
    } else {
      this.request.headers.Authorization = this.authHeader();
    }
    this.request.path = this.formatPath();
    return this.request;
  };
  RequestSigner.prototype.getDateTime = function() {
    if (!this.datetime) {
      var headers = this.request.headers,
          date = new Date(headers.Date || headers.date || new Date);
      this.datetime = date.toISOString().replace(/[:\-]|\.\d{3}/g, '');
    }
    return this.datetime;
  };
  RequestSigner.prototype.getDate = function() {
    return this.getDateTime().substr(0, 8);
  };
  RequestSigner.prototype.authHeader = function() {
    return ['AWS4-HMAC-SHA256 Credential=' + this.credentials.accessKeyId + '/' + this.credentialString(), 'SignedHeaders=' + this.signedHeaders(), 'Signature=' + this.signature()].join(', ');
  };
  RequestSigner.prototype.signature = function() {
    var date = this.getDate(),
        cacheKey = [this.credentials.secretAccessKey, date, this.region, this.service].join(),
        kDate,
        kRegion,
        kService,
        kCredentials = credentialsCache.get(cacheKey);
    if (!kCredentials) {
      kDate = hmac('AWS4' + this.credentials.secretAccessKey, date);
      kRegion = hmac(kDate, this.region);
      kService = hmac(kRegion, this.service);
      kCredentials = hmac(kService, 'aws4_request');
      credentialsCache.set(cacheKey, kCredentials);
    }
    return hmac(kCredentials, this.stringToSign(), 'hex');
  };
  RequestSigner.prototype.stringToSign = function() {
    return ['AWS4-HMAC-SHA256', this.getDateTime(), this.credentialString(), hash(this.canonicalString(), 'hex')].join('\n');
  };
  RequestSigner.prototype.canonicalString = function() {
    if (!this.parsedPath)
      this.prepareRequest();
    var pathStr = this.parsedPath.path,
        query = this.parsedPath.query,
        queryStr = '',
        normalizePath = this.service !== 's3',
        decodePath = this.service === 's3' || this.request.doNotEncodePath,
        decodeSlashesInPath = this.service === 's3',
        firstValOnly = this.service === 's3',
        bodyHash = this.service === 's3' && this.request.signQuery ? 'UNSIGNED-PAYLOAD' : hash(this.request.body || '', 'hex');
    if (query) {
      queryStr = encodeRfc3986(querystring.stringify(Object.keys(query).sort().reduce(function(obj, key) {
        if (!key)
          return obj;
        obj[key] = !Array.isArray(query[key]) ? query[key] : (firstValOnly ? query[key][0] : query[key].slice().sort());
        return obj;
      }, {})));
    }
    if (pathStr !== '/') {
      if (normalizePath)
        pathStr = pathStr.replace(/\/{2,}/g, '/');
      pathStr = pathStr.split('/').reduce(function(path, piece) {
        if (normalizePath && piece === '..') {
          path.pop();
        } else if (!normalizePath || piece !== '.') {
          if (decodePath)
            piece = querystring.unescape(piece);
          path.push(encodeRfc3986(querystring.escape(piece)));
        }
        return path;
      }, []).join('/');
      if (pathStr[0] !== '/')
        pathStr = '/' + pathStr;
      if (decodeSlashesInPath)
        pathStr = pathStr.replace(/%2F/g, '/');
    }
    return [this.request.method || 'GET', pathStr, queryStr, this.canonicalHeaders() + '\n', this.signedHeaders(), bodyHash].join('\n');
  };
  RequestSigner.prototype.canonicalHeaders = function() {
    var headers = this.request.headers;
    function trimAll(header) {
      return header.toString().trim().replace(/\s+/g, ' ');
    }
    return Object.keys(headers).sort(function(a, b) {
      return a.toLowerCase() < b.toLowerCase() ? -1 : 1;
    }).map(function(key) {
      return key.toLowerCase() + ':' + trimAll(headers[key]);
    }).join('\n');
  };
  RequestSigner.prototype.signedHeaders = function() {
    return Object.keys(this.request.headers).map(function(key) {
      return key.toLowerCase();
    }).sort().join(';');
  };
  RequestSigner.prototype.credentialString = function() {
    return [this.getDate(), this.region, this.service, 'aws4_request'].join('/');
  };
  RequestSigner.prototype.defaultCredentials = function() {
    var env = process.env;
    return {
      accessKeyId: env.AWS_ACCESS_KEY_ID || env.AWS_ACCESS_KEY,
      secretAccessKey: env.AWS_SECRET_ACCESS_KEY || env.AWS_SECRET_KEY,
      sessionToken: env.AWS_SESSION_TOKEN
    };
  };
  RequestSigner.prototype.parsePath = function() {
    var path = this.request.path || '/',
        queryIx = path.indexOf('?'),
        query = null;
    if (queryIx >= 0) {
      query = querystring.parse(path.slice(queryIx + 1));
      path = path.slice(0, queryIx);
    }
    if (/[^0-9A-Za-z!'()*\-._~%/]/.test(path)) {
      path = path.split('/').map(function(piece) {
        return querystring.escape(querystring.unescape(piece));
      }).join('/');
    }
    this.parsedPath = {
      path: path,
      query: query
    };
  };
  RequestSigner.prototype.formatPath = function() {
    var path = this.parsedPath.path,
        query = this.parsedPath.query;
    if (!query)
      return path;
    if (query[''] != null)
      delete query[''];
    return path + '?' + encodeRfc3986(querystring.stringify(query));
  };
  aws4.RequestSigner = RequestSigner;
  aws4.sign = function(request, credentials) {
    return new RequestSigner(request, credentials).sign();
  };
  return module.exports;
});

$__System.registerDynamic("npm:request@2.72.0/request.js", ["@node/http", "@node/https", "@node/url", "@node/util", "@node/stream", "@node/zlib", "npm:bl@1.1.2/bl.js", "npm:hawk@3.1.3/lib/index.js", "npm:aws-sign2@0.6.0/index.js", "npm:http-signature@1.1.1/lib/index.js", "npm:mime-types@2.1.10/index.js", "npm:stringstream@0.0.5/stringstream.js", "npm:caseless@0.11.0/index.js", "npm:forever-agent@0.6.1/index.js", "npm:form-data@1.0.0-rc4/lib/form_data.js", "npm:extend@3.0.0/index.js", "npm:isstream@0.1.2/isstream.js", "npm:is-typedarray@1.0.0/index.js", "npm:request@2.72.0/lib/helpers.js", "npm:request@2.72.0/lib/cookies.js", "npm:request@2.72.0/lib/getProxyFromURI.js", "npm:request@2.72.0/lib/querystring.js", "npm:request@2.72.0/lib/har.js", "npm:request@2.72.0/lib/auth.js", "npm:request@2.72.0/lib/oauth.js", "npm:request@2.72.0/lib/multipart.js", "npm:request@2.72.0/lib/redirect.js", "npm:request@2.72.0/lib/tunnel.js", "npm:aws4@1.3.2/aws4.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"),
      Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var http = $__require('@node/http'),
      https = $__require('@node/https'),
      url = $__require('@node/url'),
      util = $__require('@node/util'),
      stream = $__require('@node/stream'),
      zlib = $__require('@node/zlib'),
      bl = $__require('npm:bl@1.1.2/bl.js'),
      hawk = $__require('npm:hawk@3.1.3/lib/index.js'),
      aws2 = $__require('npm:aws-sign2@0.6.0/index.js'),
      httpSignature = $__require('npm:http-signature@1.1.1/lib/index.js'),
      mime = $__require('npm:mime-types@2.1.10/index.js'),
      stringstream = $__require('npm:stringstream@0.0.5/stringstream.js'),
      caseless = $__require('npm:caseless@0.11.0/index.js'),
      ForeverAgent = $__require('npm:forever-agent@0.6.1/index.js'),
      FormData = $__require('npm:form-data@1.0.0-rc4/lib/form_data.js'),
      extend = $__require('npm:extend@3.0.0/index.js'),
      isstream = $__require('npm:isstream@0.1.2/isstream.js'),
      isTypedArray = $__require('npm:is-typedarray@1.0.0/index.js').strict,
      helpers = $__require('npm:request@2.72.0/lib/helpers.js'),
      cookies = $__require('npm:request@2.72.0/lib/cookies.js'),
      getProxyFromURI = $__require('npm:request@2.72.0/lib/getProxyFromURI.js'),
      Querystring = $__require('npm:request@2.72.0/lib/querystring.js').Querystring,
      Har = $__require('npm:request@2.72.0/lib/har.js').Har,
      Auth = $__require('npm:request@2.72.0/lib/auth.js').Auth,
      OAuth = $__require('npm:request@2.72.0/lib/oauth.js').OAuth,
      Multipart = $__require('npm:request@2.72.0/lib/multipart.js').Multipart,
      Redirect = $__require('npm:request@2.72.0/lib/redirect.js').Redirect,
      Tunnel = $__require('npm:request@2.72.0/lib/tunnel.js').Tunnel;
  var safeStringify = helpers.safeStringify,
      isReadStream = helpers.isReadStream,
      toBase64 = helpers.toBase64,
      defer = helpers.defer,
      copy = helpers.copy,
      version = helpers.version,
      globalCookieJar = cookies.jar();
  var globalPool = {};
  function filterForNonReserved(reserved, options) {
    var object = {};
    for (var i in options) {
      var notReserved = (reserved.indexOf(i) === -1);
      if (notReserved) {
        object[i] = options[i];
      }
    }
    return object;
  }
  function filterOutReservedFunctions(reserved, options) {
    var object = {};
    for (var i in options) {
      var isReserved = !(reserved.indexOf(i) === -1);
      var isFunction = (typeof options[i] === 'function');
      if (!(isReserved && isFunction)) {
        object[i] = options[i];
      }
    }
    return object;
  }
  function connectionErrorHandler(error) {
    var socket = this;
    if (socket.res) {
      if (socket.res.request) {
        socket.res.request.emit('error', error);
      } else {
        socket.res.emit('error', error);
      }
    } else {
      socket._httpMessage.emit('error', error);
    }
  }
  function requestToJSON() {
    var self = this;
    return {
      uri: self.uri,
      method: self.method,
      headers: self.headers
    };
  }
  function responseToJSON() {
    var self = this;
    return {
      statusCode: self.statusCode,
      body: self.body,
      headers: self.headers,
      request: requestToJSON.call(self.request)
    };
  }
  function Request(options) {
    var self = this;
    if (options.har) {
      self._har = new Har(self);
      options = self._har.options(options);
    }
    stream.Stream.call(self);
    var reserved = Object.keys(Request.prototype);
    var nonReserved = filterForNonReserved(reserved, options);
    extend(self, nonReserved);
    options = filterOutReservedFunctions(reserved, options);
    self.readable = true;
    self.writable = true;
    if (options.method) {
      self.explicitMethod = true;
    }
    self._qs = new Querystring(self);
    self._auth = new Auth(self);
    self._oauth = new OAuth(self);
    self._multipart = new Multipart(self);
    self._redirect = new Redirect(self);
    self._tunnel = new Tunnel(self);
    self.init(options);
  }
  util.inherits(Request, stream.Stream);
  Request.debug = process.env.NODE_DEBUG && /\brequest\b/.test(process.env.NODE_DEBUG);
  function debug() {
    if (Request.debug) {
      console.error('REQUEST %s', util.format.apply(util, arguments));
    }
  }
  Request.prototype.debug = debug;
  Request.prototype.init = function(options) {
    var self = this;
    if (!options) {
      options = {};
    }
    self.headers = self.headers ? copy(self.headers) : {};
    for (var headerName in self.headers) {
      if (typeof self.headers[headerName] === 'undefined') {
        delete self.headers[headerName];
      }
    }
    caseless.httpify(self, self.headers);
    if (!self.method) {
      self.method = options.method || 'GET';
    }
    if (!self.localAddress) {
      self.localAddress = options.localAddress;
    }
    self._qs.init(options);
    debug(options);
    if (!self.pool && self.pool !== false) {
      self.pool = globalPool;
    }
    self.dests = self.dests || [];
    self.__isRequestRequest = true;
    if (!self._callback && self.callback) {
      self._callback = self.callback;
      self.callback = function() {
        if (self._callbackCalled) {
          return;
        }
        self._callbackCalled = true;
        self._callback.apply(self, arguments);
      };
      self.on('error', self.callback.bind());
      self.on('complete', self.callback.bind(self, null));
    }
    if (!self.uri && self.url) {
      self.uri = self.url;
      delete self.url;
    }
    if (self.baseUrl) {
      if (typeof self.baseUrl !== 'string') {
        return self.emit('error', new Error('options.baseUrl must be a string'));
      }
      if (typeof self.uri !== 'string') {
        return self.emit('error', new Error('options.uri must be a string when using options.baseUrl'));
      }
      if (self.uri.indexOf('//') === 0 || self.uri.indexOf('://') !== -1) {
        return self.emit('error', new Error('options.uri must be a path when using options.baseUrl'));
      }
      var baseUrlEndsWithSlash = self.baseUrl.lastIndexOf('/') === self.baseUrl.length - 1;
      var uriStartsWithSlash = self.uri.indexOf('/') === 0;
      if (baseUrlEndsWithSlash && uriStartsWithSlash) {
        self.uri = self.baseUrl + self.uri.slice(1);
      } else if (baseUrlEndsWithSlash || uriStartsWithSlash) {
        self.uri = self.baseUrl + self.uri;
      } else if (self.uri === '') {
        self.uri = self.baseUrl;
      } else {
        self.uri = self.baseUrl + '/' + self.uri;
      }
      delete self.baseUrl;
    }
    if (!self.uri) {
      return self.emit('error', new Error('options.uri is a required argument'));
    }
    if (typeof self.uri === 'string') {
      self.uri = url.parse(self.uri);
    }
    if (!self.uri.href) {
      self.uri.href = url.format(self.uri);
    }
    if (self.uri.protocol === 'unix:') {
      return self.emit('error', new Error('`unix://` URL scheme is no longer supported. Please use the format `http://unix:SOCKET:PATH`'));
    }
    if (self.uri.host === 'unix') {
      self.enableUnixSocket();
    }
    if (self.strictSSL === false) {
      self.rejectUnauthorized = false;
    }
    if (!self.uri.pathname) {
      self.uri.pathname = '/';
    }
    if (!(self.uri.host || (self.uri.hostname && self.uri.port)) && !self.uri.isUnix) {
      var faultyUri = url.format(self.uri);
      var message = 'Invalid URI "' + faultyUri + '"';
      if (Object.keys(options).length === 0) {
        message += '. This can be caused by a crappy redirection.';
      }
      self.abort();
      return self.emit('error', new Error(message));
    }
    if (!self.hasOwnProperty('proxy')) {
      self.proxy = getProxyFromURI(self.uri);
    }
    self.tunnel = self._tunnel.isEnabled();
    if (self.proxy) {
      self._tunnel.setup(options);
    }
    self._redirect.onRequest(options);
    self.setHost = false;
    if (!self.hasHeader('host')) {
      var hostHeaderName = self.originalHostHeaderName || 'host';
      self.setHeader(hostHeaderName, self.uri.hostname);
      if (self.uri.port) {
        if (!(self.uri.port === 80 && self.uri.protocol === 'http:') && !(self.uri.port === 443 && self.uri.protocol === 'https:')) {
          self.setHeader(hostHeaderName, self.getHeader('host') + (':' + self.uri.port));
        }
      }
      self.setHost = true;
    }
    self.jar(self._jar || options.jar);
    if (!self.uri.port) {
      if (self.uri.protocol === 'http:') {
        self.uri.port = 80;
      } else if (self.uri.protocol === 'https:') {
        self.uri.port = 443;
      }
    }
    if (self.proxy && !self.tunnel) {
      self.port = self.proxy.port;
      self.host = self.proxy.hostname;
    } else {
      self.port = self.uri.port;
      self.host = self.uri.hostname;
    }
    if (options.form) {
      self.form(options.form);
    }
    if (options.formData) {
      var formData = options.formData;
      var requestForm = self.form();
      var appendFormValue = function(key, value) {
        if (value.hasOwnProperty('value') && value.hasOwnProperty('options')) {
          requestForm.append(key, value.value, value.options);
        } else {
          requestForm.append(key, value);
        }
      };
      for (var formKey in formData) {
        if (formData.hasOwnProperty(formKey)) {
          var formValue = formData[formKey];
          if (formValue instanceof Array) {
            for (var j = 0; j < formValue.length; j++) {
              appendFormValue(formKey, formValue[j]);
            }
          } else {
            appendFormValue(formKey, formValue);
          }
        }
      }
    }
    if (options.qs) {
      self.qs(options.qs);
    }
    if (self.uri.path) {
      self.path = self.uri.path;
    } else {
      self.path = self.uri.pathname + (self.uri.search || '');
    }
    if (self.path.length === 0) {
      self.path = '/';
    }
    if (options.aws) {
      self.aws(options.aws);
    }
    if (options.hawk) {
      self.hawk(options.hawk);
    }
    if (options.httpSignature) {
      self.httpSignature(options.httpSignature);
    }
    if (options.auth) {
      if (Object.prototype.hasOwnProperty.call(options.auth, 'username')) {
        options.auth.user = options.auth.username;
      }
      if (Object.prototype.hasOwnProperty.call(options.auth, 'password')) {
        options.auth.pass = options.auth.password;
      }
      self.auth(options.auth.user, options.auth.pass, options.auth.sendImmediately, options.auth.bearer);
    }
    if (self.gzip && !self.hasHeader('accept-encoding')) {
      self.setHeader('accept-encoding', 'gzip, deflate');
    }
    if (self.uri.auth && !self.hasHeader('authorization')) {
      var uriAuthPieces = self.uri.auth.split(':').map(function(item) {
        return self._qs.unescape(item);
      });
      self.auth(uriAuthPieces[0], uriAuthPieces.slice(1).join(':'), true);
    }
    if (!self.tunnel && self.proxy && self.proxy.auth && !self.hasHeader('proxy-authorization')) {
      var proxyAuthPieces = self.proxy.auth.split(':').map(function(item) {
        return self._qs.unescape(item);
      });
      var authHeader = 'Basic ' + toBase64(proxyAuthPieces.join(':'));
      self.setHeader('proxy-authorization', authHeader);
    }
    if (self.proxy && !self.tunnel) {
      self.path = (self.uri.protocol + '//' + self.uri.host + self.path);
    }
    if (options.json) {
      self.json(options.json);
    }
    if (options.multipart) {
      self.multipart(options.multipart);
    }
    if (options.time) {
      self.timing = true;
      self.elapsedTime = self.elapsedTime || 0;
    }
    function setContentLength() {
      if (isTypedArray(self.body)) {
        self.body = new Buffer(self.body);
      }
      if (!self.hasHeader('content-length')) {
        var length;
        if (typeof self.body === 'string') {
          length = Buffer.byteLength(self.body);
        } else if (Array.isArray(self.body)) {
          length = self.body.reduce(function(a, b) {
            return a + b.length;
          }, 0);
        } else {
          length = self.body.length;
        }
        if (length) {
          self.setHeader('content-length', length);
        } else {
          self.emit('error', new Error('Argument error, options.body.'));
        }
      }
    }
    if (self.body && !isstream(self.body)) {
      setContentLength();
    }
    if (options.oauth) {
      self.oauth(options.oauth);
    } else if (self._oauth.params && self.hasHeader('authorization')) {
      self.oauth(self._oauth.params);
    }
    var protocol = self.proxy && !self.tunnel ? self.proxy.protocol : self.uri.protocol,
        defaultModules = {
          'http:': http,
          'https:': https
        },
        httpModules = self.httpModules || {};
    self.httpModule = httpModules[protocol] || defaultModules[protocol];
    if (!self.httpModule) {
      return self.emit('error', new Error('Invalid protocol: ' + protocol));
    }
    if (options.ca) {
      self.ca = options.ca;
    }
    if (!self.agent) {
      if (options.agentOptions) {
        self.agentOptions = options.agentOptions;
      }
      if (options.agentClass) {
        self.agentClass = options.agentClass;
      } else if (options.forever) {
        var v = version();
        if (v.major === 0 && v.minor <= 10) {
          self.agentClass = protocol === 'http:' ? ForeverAgent : ForeverAgent.SSL;
        } else {
          self.agentClass = self.httpModule.Agent;
          self.agentOptions = self.agentOptions || {};
          self.agentOptions.keepAlive = true;
        }
      } else {
        self.agentClass = self.httpModule.Agent;
      }
    }
    if (self.pool === false) {
      self.agent = false;
    } else {
      self.agent = self.agent || self.getNewAgent();
    }
    self.on('pipe', function(src) {
      if (self.ntick && self._started) {
        self.emit('error', new Error('You cannot pipe to this stream after the outbound request has started.'));
      }
      self.src = src;
      if (isReadStream(src)) {
        if (!self.hasHeader('content-type')) {
          self.setHeader('content-type', mime.lookup(src.path));
        }
      } else {
        if (src.headers) {
          for (var i in src.headers) {
            if (!self.hasHeader(i)) {
              self.setHeader(i, src.headers[i]);
            }
          }
        }
        if (self._json && !self.hasHeader('content-type')) {
          self.setHeader('content-type', 'application/json');
        }
        if (src.method && !self.explicitMethod) {
          self.method = src.method;
        }
      }
    });
    defer(function() {
      if (self._aborted) {
        return;
      }
      var end = function() {
        if (self._form) {
          if (!self._auth.hasAuth) {
            self._form.pipe(self);
          } else if (self._auth.hasAuth && self._auth.sentAuth) {
            self._form.pipe(self);
          }
        }
        if (self._multipart && self._multipart.chunked) {
          self._multipart.body.pipe(self);
        }
        if (self.body) {
          if (isstream(self.body)) {
            self.body.pipe(self);
          } else {
            setContentLength();
            if (Array.isArray(self.body)) {
              self.body.forEach(function(part) {
                self.write(part);
              });
            } else {
              self.write(self.body);
            }
            self.end();
          }
        } else if (self.requestBodyStream) {
          console.warn('options.requestBodyStream is deprecated, please pass the request object to stream.pipe.');
          self.requestBodyStream.pipe(self);
        } else if (!self.src) {
          if (self._auth.hasAuth && !self._auth.sentAuth) {
            self.end();
            return;
          }
          if (self.method !== 'GET' && typeof self.method !== 'undefined') {
            self.setHeader('content-length', 0);
          }
          self.end();
        }
      };
      if (self._form && !self.hasHeader('content-length')) {
        self.setHeader(self._form.getHeaders(), true);
        self._form.getLength(function(err, length) {
          if (!err && !isNaN(length)) {
            self.setHeader('content-length', length);
          }
          end();
        });
      } else {
        end();
      }
      self.ntick = true;
    });
  };
  Request.prototype.getNewAgent = function() {
    var self = this;
    var Agent = self.agentClass;
    var options = {};
    if (self.agentOptions) {
      for (var i in self.agentOptions) {
        options[i] = self.agentOptions[i];
      }
    }
    if (self.ca) {
      options.ca = self.ca;
    }
    if (self.ciphers) {
      options.ciphers = self.ciphers;
    }
    if (self.secureProtocol) {
      options.secureProtocol = self.secureProtocol;
    }
    if (self.secureOptions) {
      options.secureOptions = self.secureOptions;
    }
    if (typeof self.rejectUnauthorized !== 'undefined') {
      options.rejectUnauthorized = self.rejectUnauthorized;
    }
    if (self.cert && self.key) {
      options.key = self.key;
      options.cert = self.cert;
    }
    if (self.pfx) {
      options.pfx = self.pfx;
    }
    if (self.passphrase) {
      options.passphrase = self.passphrase;
    }
    var poolKey = '';
    if (Agent !== self.httpModule.Agent) {
      poolKey += Agent.name;
    }
    var proxy = self.proxy;
    if (typeof proxy === 'string') {
      proxy = url.parse(proxy);
    }
    var isHttps = (proxy && proxy.protocol === 'https:') || this.uri.protocol === 'https:';
    if (isHttps) {
      if (options.ca) {
        if (poolKey) {
          poolKey += ':';
        }
        poolKey += options.ca;
      }
      if (typeof options.rejectUnauthorized !== 'undefined') {
        if (poolKey) {
          poolKey += ':';
        }
        poolKey += options.rejectUnauthorized;
      }
      if (options.cert) {
        if (poolKey) {
          poolKey += ':';
        }
        poolKey += options.cert.toString('ascii') + options.key.toString('ascii');
      }
      if (options.pfx) {
        if (poolKey) {
          poolKey += ':';
        }
        poolKey += options.pfx.toString('ascii');
      }
      if (options.ciphers) {
        if (poolKey) {
          poolKey += ':';
        }
        poolKey += options.ciphers;
      }
      if (options.secureProtocol) {
        if (poolKey) {
          poolKey += ':';
        }
        poolKey += options.secureProtocol;
      }
      if (options.secureOptions) {
        if (poolKey) {
          poolKey += ':';
        }
        poolKey += options.secureOptions;
      }
    }
    if (self.pool === globalPool && !poolKey && Object.keys(options).length === 0 && self.httpModule.globalAgent) {
      return self.httpModule.globalAgent;
    }
    poolKey = self.uri.protocol + poolKey;
    if (!self.pool[poolKey]) {
      self.pool[poolKey] = new Agent(options);
      if (self.pool.maxSockets) {
        self.pool[poolKey].maxSockets = self.pool.maxSockets;
      }
    }
    return self.pool[poolKey];
  };
  Request.prototype.start = function() {
    var self = this;
    if (self._aborted) {
      return;
    }
    self._started = true;
    self.method = self.method || 'GET';
    self.href = self.uri.href;
    if (self.src && self.src.stat && self.src.stat.size && !self.hasHeader('content-length')) {
      self.setHeader('content-length', self.src.stat.size);
    }
    if (self._aws) {
      self.aws(self._aws, true);
    }
    var reqOptions = copy(self);
    delete reqOptions.auth;
    debug('make request', self.uri.href);
    try {
      self.req = self.httpModule.request(reqOptions);
    } catch (err) {
      self.emit('error', err);
      return;
    }
    if (self.timing) {
      self.startTime = new Date().getTime();
    }
    if (self.timeout && !self.timeoutTimer) {
      var timeout = self.timeout < 0 ? 0 : self.timeout;
      self.timeoutTimer = setTimeout(function() {
        var connectTimeout = self.req.socket && self.req.socket.readable === false;
        self.abort();
        var e = new Error('ETIMEDOUT');
        e.code = 'ETIMEDOUT';
        e.connect = connectTimeout;
        self.emit('error', e);
      }, timeout);
      if (self.req.setTimeout) {
        self.req.setTimeout(timeout, function() {
          if (self.req) {
            self.req.abort();
            var e = new Error('ESOCKETTIMEDOUT');
            e.code = 'ESOCKETTIMEDOUT';
            e.connect = false;
            self.emit('error', e);
          }
        });
      }
    }
    self.req.on('response', self.onRequestResponse.bind(self));
    self.req.on('error', self.onRequestError.bind(self));
    self.req.on('drain', function() {
      self.emit('drain');
    });
    self.req.on('socket', function(socket) {
      self.emit('socket', socket);
    });
    self.on('end', function() {
      if (self.req.connection) {
        self.req.connection.removeListener('error', connectionErrorHandler);
      }
    });
    self.emit('request', self.req);
  };
  Request.prototype.onRequestError = function(error) {
    var self = this;
    if (self._aborted) {
      return;
    }
    if (self.req && self.req._reusedSocket && error.code === 'ECONNRESET' && self.agent.addRequestNoreuse) {
      self.agent = {addRequest: self.agent.addRequestNoreuse.bind(self.agent)};
      self.start();
      self.req.end();
      return;
    }
    if (self.timeout && self.timeoutTimer) {
      clearTimeout(self.timeoutTimer);
      self.timeoutTimer = null;
    }
    self.emit('error', error);
  };
  Request.prototype.onRequestResponse = function(response) {
    var self = this;
    debug('onRequestResponse', self.uri.href, response.statusCode, response.headers);
    response.on('end', function() {
      if (self.timing) {
        self.elapsedTime += (new Date().getTime() - self.startTime);
        debug('elapsed time', self.elapsedTime);
        response.elapsedTime = self.elapsedTime;
      }
      debug('response end', self.uri.href, response.statusCode, response.headers);
    });
    if (response.connection && response.connection.listeners('error').indexOf(connectionErrorHandler) === -1) {
      response.connection.setMaxListeners(0);
      response.connection.once('error', connectionErrorHandler);
    }
    if (self._aborted) {
      debug('aborted', self.uri.href);
      response.resume();
      return;
    }
    self.response = response;
    response.request = self;
    response.toJSON = responseToJSON;
    if (self.httpModule === https && self.strictSSL && (!response.hasOwnProperty('socket') || !response.socket.authorized)) {
      debug('strict ssl error', self.uri.href);
      var sslErr = response.hasOwnProperty('socket') ? response.socket.authorizationError : self.uri.href + ' does not support SSL';
      self.emit('error', new Error('SSL Error: ' + sslErr));
      return;
    }
    self.originalHost = self.getHeader('host');
    if (!self.originalHostHeaderName) {
      self.originalHostHeaderName = self.hasHeader('host');
    }
    if (self.setHost) {
      self.removeHeader('host');
    }
    if (self.timeout && self.timeoutTimer) {
      clearTimeout(self.timeoutTimer);
      self.timeoutTimer = null;
    }
    var targetCookieJar = (self._jar && self._jar.setCookie) ? self._jar : globalCookieJar;
    var addCookie = function(cookie) {
      try {
        targetCookieJar.setCookie(cookie, self.uri.href, {ignoreError: true});
      } catch (e) {
        self.emit('error', e);
      }
    };
    response.caseless = caseless(response.headers);
    if (response.caseless.has('set-cookie') && (!self._disableCookies)) {
      var headerName = response.caseless.has('set-cookie');
      if (Array.isArray(response.headers[headerName])) {
        response.headers[headerName].forEach(addCookie);
      } else {
        addCookie(response.headers[headerName]);
      }
    }
    if (self._redirect.onResponse(response)) {
      return;
    } else {
      response.on('close', function() {
        if (!self._ended) {
          self.response.emit('end');
        }
      });
      response.on('end', function() {
        self._ended = true;
      });
      var noBody = function(code) {
        return (self.method === 'HEAD' || (code >= 100 && code < 200) || code === 204 || code === 304);
      };
      var responseContent;
      if (self.gzip && !noBody(response.statusCode)) {
        var contentEncoding = response.headers['content-encoding'] || 'identity';
        contentEncoding = contentEncoding.trim().toLowerCase();
        if (contentEncoding === 'gzip') {
          responseContent = zlib.createGunzip();
          response.pipe(responseContent);
        } else if (contentEncoding === 'deflate') {
          responseContent = zlib.createInflate();
          response.pipe(responseContent);
        } else {
          if (contentEncoding !== 'identity') {
            debug('ignoring unrecognized Content-Encoding ' + contentEncoding);
          }
          responseContent = response;
        }
      } else {
        responseContent = response;
      }
      if (self.encoding) {
        if (self.dests.length !== 0) {
          console.error('Ignoring encoding parameter as this stream is being piped to another stream which makes the encoding option invalid.');
        } else if (responseContent.setEncoding) {
          responseContent.setEncoding(self.encoding);
        } else {
          responseContent = responseContent.pipe(stringstream(self.encoding));
        }
      }
      if (self._paused) {
        responseContent.pause();
      }
      self.responseContent = responseContent;
      self.emit('response', response);
      self.dests.forEach(function(dest) {
        self.pipeDest(dest);
      });
      responseContent.on('data', function(chunk) {
        self._destdata = true;
        self.emit('data', chunk);
      });
      responseContent.on('end', function(chunk) {
        self.emit('end', chunk);
      });
      responseContent.on('error', function(error) {
        self.emit('error', error);
      });
      responseContent.on('close', function() {
        self.emit('close');
      });
      if (self.callback) {
        self.readResponseBody(response);
      } else {
        self.on('end', function() {
          if (self._aborted) {
            debug('aborted', self.uri.href);
            return;
          }
          self.emit('complete', response);
        });
      }
    }
    debug('finish init function', self.uri.href);
  };
  Request.prototype.readResponseBody = function(response) {
    var self = this;
    debug('reading response\'s body');
    var buffer = bl(),
        strings = [];
    self.on('data', function(chunk) {
      if (Buffer.isBuffer(chunk)) {
        buffer.append(chunk);
      } else {
        strings.push(chunk);
      }
    });
    self.on('end', function() {
      debug('end event', self.uri.href);
      if (self._aborted) {
        debug('aborted', self.uri.href);
        buffer.destroy();
        return;
      }
      if (buffer.length) {
        debug('has body', self.uri.href, buffer.length);
        if (self.encoding === null) {
          response.body = buffer.slice();
        } else {
          response.body = buffer.toString(self.encoding);
        }
        buffer.destroy();
      } else if (strings.length) {
        if (self.encoding === 'utf8' && strings[0].length > 0 && strings[0][0] === '\uFEFF') {
          strings[0] = strings[0].substring(1);
        }
        response.body = strings.join('');
      }
      if (self._json) {
        try {
          response.body = JSON.parse(response.body, self._jsonReviver);
        } catch (e) {
          debug('invalid JSON received', self.uri.href);
        }
      }
      debug('emitting complete', self.uri.href);
      if (typeof response.body === 'undefined' && !self._json) {
        response.body = self.encoding === null ? new Buffer(0) : '';
      }
      self.emit('complete', response, response.body);
    });
  };
  Request.prototype.abort = function() {
    var self = this;
    self._aborted = true;
    if (self.req) {
      self.req.abort();
    } else if (self.response) {
      self.response.destroy();
    }
    self.emit('abort');
  };
  Request.prototype.pipeDest = function(dest) {
    var self = this;
    var response = self.response;
    if (dest.headers && !dest.headersSent) {
      if (response.caseless.has('content-type')) {
        var ctname = response.caseless.has('content-type');
        if (dest.setHeader) {
          dest.setHeader(ctname, response.headers[ctname]);
        } else {
          dest.headers[ctname] = response.headers[ctname];
        }
      }
      if (response.caseless.has('content-length')) {
        var clname = response.caseless.has('content-length');
        if (dest.setHeader) {
          dest.setHeader(clname, response.headers[clname]);
        } else {
          dest.headers[clname] = response.headers[clname];
        }
      }
    }
    if (dest.setHeader && !dest.headersSent) {
      for (var i in response.headers) {
        if (!self.gzip || i !== 'content-encoding') {
          dest.setHeader(i, response.headers[i]);
        }
      }
      dest.statusCode = response.statusCode;
    }
    if (self.pipefilter) {
      self.pipefilter(response, dest);
    }
  };
  Request.prototype.qs = function(q, clobber) {
    var self = this;
    var base;
    if (!clobber && self.uri.query) {
      base = self._qs.parse(self.uri.query);
    } else {
      base = {};
    }
    for (var i in q) {
      base[i] = q[i];
    }
    var qs = self._qs.stringify(base);
    if (qs === '') {
      return self;
    }
    self.uri = url.parse(self.uri.href.split('?')[0] + '?' + qs);
    self.url = self.uri;
    self.path = self.uri.path;
    if (self.uri.host === 'unix') {
      self.enableUnixSocket();
    }
    return self;
  };
  Request.prototype.form = function(form) {
    var self = this;
    if (form) {
      if (!/^application\/x-www-form-urlencoded\b/.test(self.getHeader('content-type'))) {
        self.setHeader('content-type', 'application/x-www-form-urlencoded');
      }
      self.body = (typeof form === 'string') ? self._qs.rfc3986(form.toString('utf8')) : self._qs.stringify(form).toString('utf8');
      return self;
    }
    self._form = new FormData();
    self._form.on('error', function(err) {
      err.message = 'form-data: ' + err.message;
      self.emit('error', err);
      self.abort();
    });
    return self._form;
  };
  Request.prototype.multipart = function(multipart) {
    var self = this;
    self._multipart.onRequest(multipart);
    if (!self._multipart.chunked) {
      self.body = self._multipart.body;
    }
    return self;
  };
  Request.prototype.json = function(val) {
    var self = this;
    if (!self.hasHeader('accept')) {
      self.setHeader('accept', 'application/json');
    }
    if (typeof self.jsonReplacer === 'function') {
      self._jsonReplacer = self.jsonReplacer;
    }
    self._json = true;
    if (typeof val === 'boolean') {
      if (self.body !== undefined) {
        if (!/^application\/x-www-form-urlencoded\b/.test(self.getHeader('content-type'))) {
          self.body = safeStringify(self.body, self._jsonReplacer);
        } else {
          self.body = self._qs.rfc3986(self.body);
        }
        if (!self.hasHeader('content-type')) {
          self.setHeader('content-type', 'application/json');
        }
      }
    } else {
      self.body = safeStringify(val, self._jsonReplacer);
      if (!self.hasHeader('content-type')) {
        self.setHeader('content-type', 'application/json');
      }
    }
    if (typeof self.jsonReviver === 'function') {
      self._jsonReviver = self.jsonReviver;
    }
    return self;
  };
  Request.prototype.getHeader = function(name, headers) {
    var self = this;
    var result,
        re,
        match;
    if (!headers) {
      headers = self.headers;
    }
    Object.keys(headers).forEach(function(key) {
      if (key.length !== name.length) {
        return;
      }
      re = new RegExp(name, 'i');
      match = key.match(re);
      if (match) {
        result = headers[key];
      }
    });
    return result;
  };
  Request.prototype.enableUnixSocket = function() {
    var unixParts = this.uri.path.split(':'),
        host = unixParts[0],
        path = unixParts[1];
    this.socketPath = host;
    this.uri.pathname = path;
    this.uri.path = path;
    this.uri.host = host;
    this.uri.hostname = host;
    this.uri.isUnix = true;
  };
  Request.prototype.auth = function(user, pass, sendImmediately, bearer) {
    var self = this;
    self._auth.onRequest(user, pass, sendImmediately, bearer);
    return self;
  };
  Request.prototype.aws = function(opts, now) {
    var self = this;
    if (!now) {
      self._aws = opts;
      return self;
    }
    if (opts.sign_version == 4 || opts.sign_version == '4') {
      var aws4 = $__require('npm:aws4@1.3.2/aws4.js');
      var options = {
        host: self.uri.host,
        path: self.uri.path,
        method: self.method,
        headers: {'content-type': self.getHeader('content-type') || ''},
        body: self.body
      };
      var signRes = aws4.sign(options, {
        accessKeyId: opts.key,
        secretAccessKey: opts.secret
      });
      self.setHeader('authorization', signRes.headers.Authorization);
      self.setHeader('x-amz-date', signRes.headers['X-Amz-Date']);
    } else {
      var date = new Date();
      self.setHeader('date', date.toUTCString());
      var auth = {
        key: opts.key,
        secret: opts.secret,
        verb: self.method.toUpperCase(),
        date: date,
        contentType: self.getHeader('content-type') || '',
        md5: self.getHeader('content-md5') || '',
        amazonHeaders: aws2.canonicalizeHeaders(self.headers)
      };
      var path = self.uri.path;
      if (opts.bucket && path) {
        auth.resource = '/' + opts.bucket + path;
      } else if (opts.bucket && !path) {
        auth.resource = '/' + opts.bucket;
      } else if (!opts.bucket && path) {
        auth.resource = path;
      } else if (!opts.bucket && !path) {
        auth.resource = '/';
      }
      auth.resource = aws2.canonicalizeResource(auth.resource);
      self.setHeader('authorization', aws2.authorization(auth));
    }
    return self;
  };
  Request.prototype.httpSignature = function(opts) {
    var self = this;
    httpSignature.signRequest({
      getHeader: function(header) {
        return self.getHeader(header, self.headers);
      },
      setHeader: function(header, value) {
        self.setHeader(header, value);
      },
      method: self.method,
      path: self.path
    }, opts);
    debug('httpSignature authorization', self.getHeader('authorization'));
    return self;
  };
  Request.prototype.hawk = function(opts) {
    var self = this;
    self.setHeader('Authorization', hawk.client.header(self.uri, self.method, opts).field);
  };
  Request.prototype.oauth = function(_oauth) {
    var self = this;
    self._oauth.onRequest(_oauth);
    return self;
  };
  Request.prototype.jar = function(jar) {
    var self = this;
    var cookies;
    if (self._redirect.redirectsFollowed === 0) {
      self.originalCookieHeader = self.getHeader('cookie');
    }
    if (!jar) {
      cookies = false;
      self._disableCookies = true;
    } else {
      var targetCookieJar = (jar && jar.getCookieString) ? jar : globalCookieJar;
      var urihref = self.uri.href;
      if (targetCookieJar) {
        cookies = targetCookieJar.getCookieString(urihref);
      }
    }
    if (cookies && cookies.length) {
      if (self.originalCookieHeader) {
        self.setHeader('cookie', self.originalCookieHeader + '; ' + cookies);
      } else {
        self.setHeader('cookie', cookies);
      }
    }
    self._jar = jar;
    return self;
  };
  Request.prototype.pipe = function(dest, opts) {
    var self = this;
    if (self.response) {
      if (self._destdata) {
        self.emit('error', new Error('You cannot pipe after data has been emitted from the response.'));
      } else if (self._ended) {
        self.emit('error', new Error('You cannot pipe after the response has been ended.'));
      } else {
        stream.Stream.prototype.pipe.call(self, dest, opts);
        self.pipeDest(dest);
        return dest;
      }
    } else {
      self.dests.push(dest);
      stream.Stream.prototype.pipe.call(self, dest, opts);
      return dest;
    }
  };
  Request.prototype.write = function() {
    var self = this;
    if (self._aborted) {
      return;
    }
    if (!self._started) {
      self.start();
    }
    if (self.req) {
      return self.req.write.apply(self.req, arguments);
    }
  };
  Request.prototype.end = function(chunk) {
    var self = this;
    if (self._aborted) {
      return;
    }
    if (chunk) {
      self.write(chunk);
    }
    if (!self._started) {
      self.start();
    }
    if (self.req) {
      self.req.end();
    }
  };
  Request.prototype.pause = function() {
    var self = this;
    if (!self.responseContent) {
      self._paused = true;
    } else {
      self.responseContent.pause.apply(self.responseContent, arguments);
    }
  };
  Request.prototype.resume = function() {
    var self = this;
    if (!self.responseContent) {
      self._paused = false;
    } else {
      self.responseContent.resume.apply(self.responseContent, arguments);
    }
  };
  Request.prototype.destroy = function() {
    var self = this;
    if (!self._ended) {
      self.end();
    } else if (self.response) {
      self.response.destroy();
    }
  };
  Request.defaultProxyHeaderWhiteList = Tunnel.defaultProxyHeaderWhiteList.slice();
  Request.defaultProxyHeaderExclusiveList = Tunnel.defaultProxyHeaderExclusiveList.slice();
  Request.prototype.toJSON = requestToJSON;
  module.exports = Request;
  return module.exports;
});

$__System.registerDynamic("npm:request@2.72.0/index.js", ["npm:extend@3.0.0/index.js", "npm:request@2.72.0/lib/cookies.js", "npm:request@2.72.0/lib/helpers.js", "npm:request@2.72.0/request.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var extend = $__require('npm:extend@3.0.0/index.js'),
      cookies = $__require('npm:request@2.72.0/lib/cookies.js'),
      helpers = $__require('npm:request@2.72.0/lib/helpers.js');
  var isFunction = helpers.isFunction,
      paramsHaveRequestBody = helpers.paramsHaveRequestBody;
  function initParams(uri, options, callback) {
    if (typeof options === 'function') {
      callback = options;
    }
    var params = {};
    if (typeof options === 'object') {
      extend(params, options, {uri: uri});
    } else if (typeof uri === 'string') {
      extend(params, {uri: uri});
    } else {
      extend(params, uri);
    }
    params.callback = callback || params.callback;
    return params;
  }
  function request(uri, options, callback) {
    if (typeof uri === 'undefined') {
      throw new Error('undefined is not a valid uri or options object.');
    }
    var params = initParams(uri, options, callback);
    if (params.method === 'HEAD' && paramsHaveRequestBody(params)) {
      throw new Error('HTTP HEAD requests MUST NOT include a request body.');
    }
    return new request.Request(params);
  }
  function verbFunc(verb) {
    var method = verb.toUpperCase();
    return function(uri, options, callback) {
      var params = initParams(uri, options, callback);
      params.method = method;
      return request(params, params.callback);
    };
  }
  request.get = verbFunc('get');
  request.head = verbFunc('head');
  request.post = verbFunc('post');
  request.put = verbFunc('put');
  request.patch = verbFunc('patch');
  request.del = verbFunc('delete');
  request['delete'] = verbFunc('delete');
  request.jar = function(store) {
    return cookies.jar(store);
  };
  request.cookie = function(str) {
    return cookies.parse(str);
  };
  function wrapRequestMethod(method, options, requester, verb) {
    return function(uri, opts, callback) {
      var params = initParams(uri, opts, callback);
      var target = {};
      extend(true, target, options, params);
      target.pool = params.pool || options.pool;
      if (verb) {
        target.method = verb.toUpperCase();
      }
      if (isFunction(requester)) {
        method = requester;
      }
      return method(target, target.callback);
    };
  }
  request.defaults = function(options, requester) {
    var self = this;
    options = options || {};
    if (typeof options === 'function') {
      requester = options;
      options = {};
    }
    var defaults = wrapRequestMethod(self, options, requester);
    var verbs = ['get', 'head', 'post', 'put', 'patch', 'del', 'delete'];
    verbs.forEach(function(verb) {
      defaults[verb] = wrapRequestMethod(self[verb], options, requester, verb);
    });
    defaults.cookie = wrapRequestMethod(self.cookie, options, requester);
    defaults.jar = self.jar;
    defaults.defaults = self.defaults;
    return defaults;
  };
  request.forever = function(agentOptions, optionsArg) {
    var options = {};
    if (optionsArg) {
      extend(options, optionsArg);
    }
    if (agentOptions) {
      options.agentOptions = agentOptions;
    }
    options.forever = true;
    return request.defaults(options);
  };
  module.exports = request;
  request.Request = $__require('npm:request@2.72.0/request.js');
  request.initParams = initParams;
  Object.defineProperty(request, 'debug', {
    enumerable: true,
    get: function() {
      return request.Request.debug;
    },
    set: function(debug) {
      request.Request.debug = debug;
    }
  });
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less-node/url-file-manager.js", ["@node/url", "npm:less@2.6.1/lib/less/environment/abstract-file-manager.js", "npm:less@2.6.1/lib/less/logger.js", "npm:promise@7.1.1/index.js", "npm:request@2.72.0/index.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var isUrlRe = /^(?:https?:)?\/\//i,
      url = $__require('@node/url'),
      request,
      PromiseConstructor,
      AbstractFileManager = $__require('npm:less@2.6.1/lib/less/environment/abstract-file-manager.js'),
      logger = $__require('npm:less@2.6.1/lib/less/logger.js');
  var UrlFileManager = function() {};
  UrlFileManager.prototype = new AbstractFileManager();
  UrlFileManager.prototype.supports = function(filename, currentDirectory, options, environment) {
    return isUrlRe.test(filename) || isUrlRe.test(currentDirectory);
  };
  UrlFileManager.prototype.loadFile = function(filename, currentDirectory, options, environment) {
    if (!PromiseConstructor) {
      PromiseConstructor = typeof Promise === 'undefined' ? $__require('npm:promise@7.1.1/index.js') : Promise;
    }
    return new PromiseConstructor(function(fulfill, reject) {
      if (request === undefined) {
        try {
          request = $__require('npm:request@2.72.0/index.js');
        } catch (e) {
          request = null;
        }
      }
      if (!request) {
        reject({
          type: 'File',
          message: "optional dependency 'request' required to import over http(s)\n"
        });
        return;
      }
      var urlStr = isUrlRe.test(filename) ? filename : url.resolve(currentDirectory, filename),
          urlObj = url.parse(urlStr);
      if (!urlObj.protocol) {
        urlObj.protocol = "http";
        urlStr = urlObj.format();
      }
      request.get({
        uri: urlStr,
        strictSSL: !options.insecure
      }, function(error, res, body) {
        if (error) {
          reject({
            type: 'File',
            message: "resource '" + urlStr + "' gave this Error:\n  " + error + "\n"
          });
          return;
        }
        if (res && res.statusCode === 404) {
          reject({
            type: 'File',
            message: "resource '" + urlStr + "' was not found\n"
          });
          return;
        }
        if (!body) {
          logger.warn('Warning: Empty body (HTTP ' + res.statusCode + ') returned by "' + urlStr + '"');
        }
        fulfill({
          contents: body,
          filename: urlStr
        });
      });
    });
  };
  module.exports = UrlFileManager;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/data/index.js", ["npm:less@2.6.1/lib/less/data/colors.js", "npm:less@2.6.1/lib/less/data/unit-conversions.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    colors: $__require('npm:less@2.6.1/lib/less/data/colors.js'),
    unitConversions: $__require('npm:less@2.6.1/lib/less/data/unit-conversions.js')
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/environment/environment.js", ["npm:less@2.6.1/lib/less/logger.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var logger = $__require('npm:less@2.6.1/lib/less/logger.js');
  var environment = function(externalEnvironment, fileManagers) {
    this.fileManagers = fileManagers || [];
    externalEnvironment = externalEnvironment || {};
    var optionalFunctions = ["encodeBase64", "mimeLookup", "charsetLookup", "getSourceMapGenerator"],
        requiredFunctions = [],
        functions = requiredFunctions.concat(optionalFunctions);
    for (var i = 0; i < functions.length; i++) {
      var propName = functions[i],
          environmentFunc = externalEnvironment[propName];
      if (environmentFunc) {
        this[propName] = environmentFunc.bind(externalEnvironment);
      } else if (i < requiredFunctions.length) {
        this.warn("missing required function in environment - " + propName);
      }
    }
  };
  environment.prototype.getFileManager = function(filename, currentDirectory, options, environment, isSync) {
    if (!filename) {
      logger.warn("getFileManager called with no filename.. Please report this issue. continuing.");
    }
    if (currentDirectory == null) {
      logger.warn("getFileManager called with null directory.. Please report this issue. continuing.");
    }
    var fileManagers = this.fileManagers;
    if (options.pluginManager) {
      fileManagers = [].concat(fileManagers).concat(options.pluginManager.getFileManagers());
    }
    for (var i = fileManagers.length - 1; i >= 0; i--) {
      var fileManager = fileManagers[i];
      if (fileManager[isSync ? "supportsSync" : "supports"](filename, currentDirectory, options, environment)) {
        return fileManager;
      }
    }
    return null;
  };
  environment.prototype.addFileManager = function(fileManager) {
    this.fileManagers.push(fileManager);
  };
  environment.prototype.clearFileManagers = function() {
    this.fileManagers = [];
  };
  module.exports = environment;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/environment/abstract-file-manager.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var abstractFileManager = function() {};
  abstractFileManager.prototype.getPath = function(filename) {
    var j = filename.lastIndexOf('?');
    if (j > 0) {
      filename = filename.slice(0, j);
    }
    j = filename.lastIndexOf('/');
    if (j < 0) {
      j = filename.lastIndexOf('\\');
    }
    if (j < 0) {
      return "";
    }
    return filename.slice(0, j + 1);
  };
  abstractFileManager.prototype.tryAppendExtension = function(path, ext) {
    return /(\.[a-z]*$)|([\?;].*)$/.test(path) ? path : path + ext;
  };
  abstractFileManager.prototype.tryAppendLessExtension = function(path) {
    return this.tryAppendExtension(path, '.less');
  };
  abstractFileManager.prototype.supportsSync = function() {
    return false;
  };
  abstractFileManager.prototype.alwaysMakePathsAbsolute = function() {
    return false;
  };
  abstractFileManager.prototype.isPathAbsolute = function(filename) {
    return (/^(?:[a-z-]+:|\/|\\|#)/i).test(filename);
  };
  abstractFileManager.prototype.join = function(basePath, laterPath) {
    if (!basePath) {
      return laterPath;
    }
    return basePath + laterPath;
  };
  abstractFileManager.prototype.pathDiff = function pathDiff(url, baseUrl) {
    var urlParts = this.extractUrlParts(url),
        baseUrlParts = this.extractUrlParts(baseUrl),
        i,
        max,
        urlDirectories,
        baseUrlDirectories,
        diff = "";
    if (urlParts.hostPart !== baseUrlParts.hostPart) {
      return "";
    }
    max = Math.max(baseUrlParts.directories.length, urlParts.directories.length);
    for (i = 0; i < max; i++) {
      if (baseUrlParts.directories[i] !== urlParts.directories[i]) {
        break;
      }
    }
    baseUrlDirectories = baseUrlParts.directories.slice(i);
    urlDirectories = urlParts.directories.slice(i);
    for (i = 0; i < baseUrlDirectories.length - 1; i++) {
      diff += "../";
    }
    for (i = 0; i < urlDirectories.length - 1; i++) {
      diff += urlDirectories[i] + "/";
    }
    return diff;
  };
  abstractFileManager.prototype.extractUrlParts = function extractUrlParts(url, baseUrl) {
    var urlPartsRegex = /^((?:[a-z-]+:)?\/+?(?:[^\/\?#]*\/)|([\/\\]))?((?:[^\/\\\?#]*[\/\\])*)([^\/\\\?#]*)([#\?].*)?$/i,
        urlParts = url.match(urlPartsRegex),
        returner = {},
        directories = [],
        i,
        baseUrlParts;
    if (!urlParts) {
      throw new Error("Could not parse sheet href - '" + url + "'");
    }
    if (baseUrl && (!urlParts[1] || urlParts[2])) {
      baseUrlParts = baseUrl.match(urlPartsRegex);
      if (!baseUrlParts) {
        throw new Error("Could not parse page url - '" + baseUrl + "'");
      }
      urlParts[1] = urlParts[1] || baseUrlParts[1] || "";
      if (!urlParts[2]) {
        urlParts[3] = baseUrlParts[3] + urlParts[3];
      }
    }
    if (urlParts[3]) {
      directories = urlParts[3].replace(/\\/g, "/").split("/");
      for (i = 0; i < directories.length; i++) {
        if (directories[i] === ".") {
          directories.splice(i, 1);
          i -= 1;
        }
      }
      for (i = 0; i < directories.length; i++) {
        if (directories[i] === ".." && i > 0) {
          directories.splice(i - 1, 2);
          i -= 2;
        }
      }
    }
    returner.hostPart = urlParts[1];
    returner.directories = directories;
    returner.path = (urlParts[1] || "") + directories.join("/");
    returner.fileUrl = returner.path + (urlParts[4] || "");
    returner.url = returner.fileUrl + (urlParts[5] || "");
    return returner;
  };
  module.exports = abstractFileManager;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/functions/color.js", ["npm:less@2.6.1/lib/less/tree/dimension.js", "npm:less@2.6.1/lib/less/tree/color.js", "npm:less@2.6.1/lib/less/tree/quoted.js", "npm:less@2.6.1/lib/less/tree/anonymous.js", "npm:less@2.6.1/lib/less/functions/function-registry.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Dimension = $__require('npm:less@2.6.1/lib/less/tree/dimension.js'),
      Color = $__require('npm:less@2.6.1/lib/less/tree/color.js'),
      Quoted = $__require('npm:less@2.6.1/lib/less/tree/quoted.js'),
      Anonymous = $__require('npm:less@2.6.1/lib/less/tree/anonymous.js'),
      functionRegistry = $__require('npm:less@2.6.1/lib/less/functions/function-registry.js'),
      colorFunctions;
  function clamp(val) {
    return Math.min(1, Math.max(0, val));
  }
  function hsla(color) {
    return colorFunctions.hsla(color.h, color.s, color.l, color.a);
  }
  function number(n) {
    if (n instanceof Dimension) {
      return parseFloat(n.unit.is('%') ? n.value / 100 : n.value);
    } else if (typeof n === 'number') {
      return n;
    } else {
      throw {
        type: "Argument",
        message: "color functions take numbers as parameters"
      };
    }
  }
  function scaled(n, size) {
    if (n instanceof Dimension && n.unit.is('%')) {
      return parseFloat(n.value * size / 100);
    } else {
      return number(n);
    }
  }
  colorFunctions = {
    rgb: function(r, g, b) {
      return colorFunctions.rgba(r, g, b, 1.0);
    },
    rgba: function(r, g, b, a) {
      var rgb = [r, g, b].map(function(c) {
        return scaled(c, 255);
      });
      a = number(a);
      return new Color(rgb, a);
    },
    hsl: function(h, s, l) {
      return colorFunctions.hsla(h, s, l, 1.0);
    },
    hsla: function(h, s, l, a) {
      var m1,
          m2;
      function hue(h) {
        h = h < 0 ? h + 1 : (h > 1 ? h - 1 : h);
        if (h * 6 < 1) {
          return m1 + (m2 - m1) * h * 6;
        } else if (h * 2 < 1) {
          return m2;
        } else if (h * 3 < 2) {
          return m1 + (m2 - m1) * (2 / 3 - h) * 6;
        } else {
          return m1;
        }
      }
      h = (number(h) % 360) / 360;
      s = clamp(number(s));
      l = clamp(number(l));
      a = clamp(number(a));
      m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
      m1 = l * 2 - m2;
      return colorFunctions.rgba(hue(h + 1 / 3) * 255, hue(h) * 255, hue(h - 1 / 3) * 255, a);
    },
    hsv: function(h, s, v) {
      return colorFunctions.hsva(h, s, v, 1.0);
    },
    hsva: function(h, s, v, a) {
      h = ((number(h) % 360) / 360) * 360;
      s = number(s);
      v = number(v);
      a = number(a);
      var i,
          f;
      i = Math.floor((h / 60) % 6);
      f = (h / 60) - i;
      var vs = [v, v * (1 - s), v * (1 - f * s), v * (1 - (1 - f) * s)];
      var perm = [[0, 3, 1], [2, 0, 1], [1, 0, 3], [1, 2, 0], [3, 1, 0], [0, 1, 2]];
      return colorFunctions.rgba(vs[perm[i][0]] * 255, vs[perm[i][1]] * 255, vs[perm[i][2]] * 255, a);
    },
    hue: function(color) {
      return new Dimension(color.toHSL().h);
    },
    saturation: function(color) {
      return new Dimension(color.toHSL().s * 100, '%');
    },
    lightness: function(color) {
      return new Dimension(color.toHSL().l * 100, '%');
    },
    hsvhue: function(color) {
      return new Dimension(color.toHSV().h);
    },
    hsvsaturation: function(color) {
      return new Dimension(color.toHSV().s * 100, '%');
    },
    hsvvalue: function(color) {
      return new Dimension(color.toHSV().v * 100, '%');
    },
    red: function(color) {
      return new Dimension(color.rgb[0]);
    },
    green: function(color) {
      return new Dimension(color.rgb[1]);
    },
    blue: function(color) {
      return new Dimension(color.rgb[2]);
    },
    alpha: function(color) {
      return new Dimension(color.toHSL().a);
    },
    luma: function(color) {
      return new Dimension(color.luma() * color.alpha * 100, '%');
    },
    luminance: function(color) {
      var luminance = (0.2126 * color.rgb[0] / 255) + (0.7152 * color.rgb[1] / 255) + (0.0722 * color.rgb[2] / 255);
      return new Dimension(luminance * color.alpha * 100, '%');
    },
    saturate: function(color, amount, method) {
      if (!color.rgb) {
        return null;
      }
      var hsl = color.toHSL();
      if (typeof method !== "undefined" && method.value === "relative") {
        hsl.s += hsl.s * amount.value / 100;
      } else {
        hsl.s += amount.value / 100;
      }
      hsl.s = clamp(hsl.s);
      return hsla(hsl);
    },
    desaturate: function(color, amount, method) {
      var hsl = color.toHSL();
      if (typeof method !== "undefined" && method.value === "relative") {
        hsl.s -= hsl.s * amount.value / 100;
      } else {
        hsl.s -= amount.value / 100;
      }
      hsl.s = clamp(hsl.s);
      return hsla(hsl);
    },
    lighten: function(color, amount, method) {
      var hsl = color.toHSL();
      if (typeof method !== "undefined" && method.value === "relative") {
        hsl.l += hsl.l * amount.value / 100;
      } else {
        hsl.l += amount.value / 100;
      }
      hsl.l = clamp(hsl.l);
      return hsla(hsl);
    },
    darken: function(color, amount, method) {
      var hsl = color.toHSL();
      if (typeof method !== "undefined" && method.value === "relative") {
        hsl.l -= hsl.l * amount.value / 100;
      } else {
        hsl.l -= amount.value / 100;
      }
      hsl.l = clamp(hsl.l);
      return hsla(hsl);
    },
    fadein: function(color, amount, method) {
      var hsl = color.toHSL();
      if (typeof method !== "undefined" && method.value === "relative") {
        hsl.a += hsl.a * amount.value / 100;
      } else {
        hsl.a += amount.value / 100;
      }
      hsl.a = clamp(hsl.a);
      return hsla(hsl);
    },
    fadeout: function(color, amount, method) {
      var hsl = color.toHSL();
      if (typeof method !== "undefined" && method.value === "relative") {
        hsl.a -= hsl.a * amount.value / 100;
      } else {
        hsl.a -= amount.value / 100;
      }
      hsl.a = clamp(hsl.a);
      return hsla(hsl);
    },
    fade: function(color, amount) {
      var hsl = color.toHSL();
      hsl.a = amount.value / 100;
      hsl.a = clamp(hsl.a);
      return hsla(hsl);
    },
    spin: function(color, amount) {
      var hsl = color.toHSL();
      var hue = (hsl.h + amount.value) % 360;
      hsl.h = hue < 0 ? 360 + hue : hue;
      return hsla(hsl);
    },
    mix: function(color1, color2, weight) {
      if (!color1.toHSL || !color2.toHSL) {
        console.log(color2.type);
        console.dir(color2);
      }
      if (!weight) {
        weight = new Dimension(50);
      }
      var p = weight.value / 100.0;
      var w = p * 2 - 1;
      var a = color1.toHSL().a - color2.toHSL().a;
      var w1 = (((w * a == -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
      var w2 = 1 - w1;
      var rgb = [color1.rgb[0] * w1 + color2.rgb[0] * w2, color1.rgb[1] * w1 + color2.rgb[1] * w2, color1.rgb[2] * w1 + color2.rgb[2] * w2];
      var alpha = color1.alpha * p + color2.alpha * (1 - p);
      return new Color(rgb, alpha);
    },
    greyscale: function(color) {
      return colorFunctions.desaturate(color, new Dimension(100));
    },
    contrast: function(color, dark, light, threshold) {
      if (!color.rgb) {
        return null;
      }
      if (typeof light === 'undefined') {
        light = colorFunctions.rgba(255, 255, 255, 1.0);
      }
      if (typeof dark === 'undefined') {
        dark = colorFunctions.rgba(0, 0, 0, 1.0);
      }
      if (dark.luma() > light.luma()) {
        var t = light;
        light = dark;
        dark = t;
      }
      if (typeof threshold === 'undefined') {
        threshold = 0.43;
      } else {
        threshold = number(threshold);
      }
      if (color.luma() < threshold) {
        return light;
      } else {
        return dark;
      }
    },
    argb: function(color) {
      return new Anonymous(color.toARGB());
    },
    color: function(c) {
      if ((c instanceof Quoted) && (/^#([a-f0-9]{6}|[a-f0-9]{3})$/i.test(c.value))) {
        return new Color(c.value.slice(1));
      }
      if ((c instanceof Color) || (c = Color.fromKeyword(c.value))) {
        c.value = undefined;
        return c;
      }
      throw {
        type: "Argument",
        message: "argument must be a color keyword or 3/6 digit hex e.g. #FFF"
      };
    },
    tint: function(color, amount) {
      return colorFunctions.mix(colorFunctions.rgb(255, 255, 255), color, amount);
    },
    shade: function(color, amount) {
      return colorFunctions.mix(colorFunctions.rgb(0, 0, 0), color, amount);
    }
  };
  functionRegistry.addMultiple(colorFunctions);
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/functions/color-blending.js", ["npm:less@2.6.1/lib/less/tree/color.js", "npm:less@2.6.1/lib/less/functions/function-registry.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Color = $__require('npm:less@2.6.1/lib/less/tree/color.js'),
      functionRegistry = $__require('npm:less@2.6.1/lib/less/functions/function-registry.js');
  function colorBlend(mode, color1, color2) {
    var ab = color1.alpha,
        cb,
        as = color2.alpha,
        cs,
        ar,
        cr,
        r = [];
    ar = as + ab * (1 - as);
    for (var i = 0; i < 3; i++) {
      cb = color1.rgb[i] / 255;
      cs = color2.rgb[i] / 255;
      cr = mode(cb, cs);
      if (ar) {
        cr = (as * cs + ab * (cb - as * (cb + cs - cr))) / ar;
      }
      r[i] = cr * 255;
    }
    return new Color(r, ar);
  }
  var colorBlendModeFunctions = {
    multiply: function(cb, cs) {
      return cb * cs;
    },
    screen: function(cb, cs) {
      return cb + cs - cb * cs;
    },
    overlay: function(cb, cs) {
      cb *= 2;
      return (cb <= 1) ? colorBlendModeFunctions.multiply(cb, cs) : colorBlendModeFunctions.screen(cb - 1, cs);
    },
    softlight: function(cb, cs) {
      var d = 1,
          e = cb;
      if (cs > 0.5) {
        e = 1;
        d = (cb > 0.25) ? Math.sqrt(cb) : ((16 * cb - 12) * cb + 4) * cb;
      }
      return cb - (1 - 2 * cs) * e * (d - cb);
    },
    hardlight: function(cb, cs) {
      return colorBlendModeFunctions.overlay(cs, cb);
    },
    difference: function(cb, cs) {
      return Math.abs(cb - cs);
    },
    exclusion: function(cb, cs) {
      return cb + cs - 2 * cb * cs;
    },
    average: function(cb, cs) {
      return (cb + cs) / 2;
    },
    negation: function(cb, cs) {
      return 1 - Math.abs(cb + cs - 1);
    }
  };
  for (var f in colorBlendModeFunctions) {
    if (colorBlendModeFunctions.hasOwnProperty(f)) {
      colorBlend[f] = colorBlend.bind(null, colorBlendModeFunctions[f]);
    }
  }
  functionRegistry.addMultiple(colorBlend);
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/functions/data-uri.js", ["npm:less@2.6.1/lib/less/tree/quoted.js", "npm:less@2.6.1/lib/less/tree/url.js", "npm:less@2.6.1/lib/less/functions/function-registry.js", "npm:less@2.6.1/lib/less/logger.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function(environment) {
    var Quoted = $__require('npm:less@2.6.1/lib/less/tree/quoted.js'),
        URL = $__require('npm:less@2.6.1/lib/less/tree/url.js'),
        functionRegistry = $__require('npm:less@2.6.1/lib/less/functions/function-registry.js'),
        fallback = function(functionThis, node) {
          return new URL(node, functionThis.index, functionThis.currentFileInfo).eval(functionThis.context);
        },
        logger = $__require('npm:less@2.6.1/lib/less/logger.js');
    functionRegistry.add("data-uri", function(mimetypeNode, filePathNode) {
      if (!filePathNode) {
        filePathNode = mimetypeNode;
        mimetypeNode = null;
      }
      var mimetype = mimetypeNode && mimetypeNode.value;
      var filePath = filePathNode.value;
      var currentFileInfo = this.currentFileInfo;
      var currentDirectory = currentFileInfo.relativeUrls ? currentFileInfo.currentDirectory : currentFileInfo.entryPath;
      var fragmentStart = filePath.indexOf('#');
      var fragment = '';
      if (fragmentStart !== -1) {
        fragment = filePath.slice(fragmentStart);
        filePath = filePath.slice(0, fragmentStart);
      }
      var fileManager = environment.getFileManager(filePath, currentDirectory, this.context, environment, true);
      if (!fileManager) {
        return fallback(this, filePathNode);
      }
      var useBase64 = false;
      if (!mimetypeNode) {
        mimetype = environment.mimeLookup(filePath);
        if (mimetype === "image/svg+xml") {
          useBase64 = false;
        } else {
          var charset = environment.charsetLookup(mimetype);
          useBase64 = ['US-ASCII', 'UTF-8'].indexOf(charset) < 0;
        }
        if (useBase64) {
          mimetype += ';base64';
        }
      } else {
        useBase64 = /;base64$/.test(mimetype);
      }
      var fileSync = fileManager.loadFileSync(filePath, currentDirectory, this.context, environment);
      if (!fileSync.contents) {
        logger.warn("Skipped data-uri embedding of " + filePath + " because file not found");
        return fallback(this, filePathNode || mimetypeNode);
      }
      var buf = fileSync.contents;
      if (useBase64 && !environment.encodeBase64) {
        return fallback(this, filePathNode);
      }
      buf = useBase64 ? environment.encodeBase64(buf) : encodeURIComponent(buf);
      var uri = "data:" + mimetype + ',' + buf + fragment;
      var DATA_URI_MAX = 32768;
      if (uri.length >= DATA_URI_MAX) {
        if (this.context.ieCompat !== false) {
          logger.warn("Skipped data-uri embedding of " + filePath + " because its size (" + uri.length + " characters) exceeds IE8-safe " + DATA_URI_MAX + " characters!");
          return fallback(this, filePathNode || mimetypeNode);
        }
      }
      return new URL(new Quoted('"' + uri + '"', uri, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);
    });
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/functions/math.js", ["npm:less@2.6.1/lib/less/functions/function-registry.js", "npm:less@2.6.1/lib/less/functions/math-helper.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var functionRegistry = $__require('npm:less@2.6.1/lib/less/functions/function-registry.js'),
      mathHelper = $__require('npm:less@2.6.1/lib/less/functions/math-helper.js');
  var mathFunctions = {
    ceil: null,
    floor: null,
    sqrt: null,
    abs: null,
    tan: "",
    sin: "",
    cos: "",
    atan: "rad",
    asin: "rad",
    acos: "rad"
  };
  for (var f in mathFunctions) {
    if (mathFunctions.hasOwnProperty(f)) {
      mathFunctions[f] = mathHelper._math.bind(null, Math[f], mathFunctions[f]);
    }
  }
  mathFunctions.round = function(n, f) {
    var fraction = typeof f === "undefined" ? 0 : f.value;
    return mathHelper._math(function(num) {
      return num.toFixed(fraction);
    }, null, n);
  };
  functionRegistry.addMultiple(mathFunctions);
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/functions/math-helper.js", ["npm:less@2.6.1/lib/less/tree/dimension.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Dimension = $__require('npm:less@2.6.1/lib/less/tree/dimension.js');
  var MathHelper = function() {};
  MathHelper._math = function(fn, unit, n) {
    if (!(n instanceof Dimension)) {
      throw {
        type: "Argument",
        message: "argument must be a number"
      };
    }
    if (unit == null) {
      unit = n.unit;
    } else {
      n = n.unify();
    }
    return new Dimension(fn(parseFloat(n.value)), unit);
  };
  module.exports = MathHelper;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/functions/number.js", ["npm:less@2.6.1/lib/less/tree/dimension.js", "npm:less@2.6.1/lib/less/tree/anonymous.js", "npm:less@2.6.1/lib/less/functions/function-registry.js", "npm:less@2.6.1/lib/less/functions/math-helper.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Dimension = $__require('npm:less@2.6.1/lib/less/tree/dimension.js'),
      Anonymous = $__require('npm:less@2.6.1/lib/less/tree/anonymous.js'),
      functionRegistry = $__require('npm:less@2.6.1/lib/less/functions/function-registry.js'),
      mathHelper = $__require('npm:less@2.6.1/lib/less/functions/math-helper.js');
  var minMax = function(isMin, args) {
    args = Array.prototype.slice.call(args);
    switch (args.length) {
      case 0:
        throw {
          type: "Argument",
          message: "one or more arguments required"
        };
    }
    var i,
        j,
        current,
        currentUnified,
        referenceUnified,
        unit,
        unitStatic,
        unitClone,
        order = [],
        values = {};
    for (i = 0; i < args.length; i++) {
      current = args[i];
      if (!(current instanceof Dimension)) {
        if (Array.isArray(args[i].value)) {
          Array.prototype.push.apply(args, Array.prototype.slice.call(args[i].value));
        }
        continue;
      }
      currentUnified = current.unit.toString() === "" && unitClone !== undefined ? new Dimension(current.value, unitClone).unify() : current.unify();
      unit = currentUnified.unit.toString() === "" && unitStatic !== undefined ? unitStatic : currentUnified.unit.toString();
      unitStatic = unit !== "" && unitStatic === undefined || unit !== "" && order[0].unify().unit.toString() === "" ? unit : unitStatic;
      unitClone = unit !== "" && unitClone === undefined ? current.unit.toString() : unitClone;
      j = values[""] !== undefined && unit !== "" && unit === unitStatic ? values[""] : values[unit];
      if (j === undefined) {
        if (unitStatic !== undefined && unit !== unitStatic) {
          throw {
            type: "Argument",
            message: "incompatible types"
          };
        }
        values[unit] = order.length;
        order.push(current);
        continue;
      }
      referenceUnified = order[j].unit.toString() === "" && unitClone !== undefined ? new Dimension(order[j].value, unitClone).unify() : order[j].unify();
      if (isMin && currentUnified.value < referenceUnified.value || !isMin && currentUnified.value > referenceUnified.value) {
        order[j] = current;
      }
    }
    if (order.length == 1) {
      return order[0];
    }
    args = order.map(function(a) {
      return a.toCSS(this.context);
    }).join(this.context.compress ? "," : ", ");
    return new Anonymous((isMin ? "min" : "max") + "(" + args + ")");
  };
  functionRegistry.addMultiple({
    min: function() {
      return minMax(true, arguments);
    },
    max: function() {
      return minMax(false, arguments);
    },
    convert: function(val, unit) {
      return val.convertTo(unit.value);
    },
    pi: function() {
      return new Dimension(Math.PI);
    },
    mod: function(a, b) {
      return new Dimension(a.value % b.value, a.unit);
    },
    pow: function(x, y) {
      if (typeof x === "number" && typeof y === "number") {
        x = new Dimension(x);
        y = new Dimension(y);
      } else if (!(x instanceof Dimension) || !(y instanceof Dimension)) {
        throw {
          type: "Argument",
          message: "arguments must be numbers"
        };
      }
      return new Dimension(Math.pow(x.value, y.value), x.unit);
    },
    percentage: function(n) {
      var result = mathHelper._math(function(num) {
        return num * 100;
      }, '%', n);
      return result;
    }
  });
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/functions/string.js", ["npm:less@2.6.1/lib/less/tree/quoted.js", "npm:less@2.6.1/lib/less/tree/anonymous.js", "npm:less@2.6.1/lib/less/tree/javascript.js", "npm:less@2.6.1/lib/less/functions/function-registry.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Quoted = $__require('npm:less@2.6.1/lib/less/tree/quoted.js'),
      Anonymous = $__require('npm:less@2.6.1/lib/less/tree/anonymous.js'),
      JavaScript = $__require('npm:less@2.6.1/lib/less/tree/javascript.js'),
      functionRegistry = $__require('npm:less@2.6.1/lib/less/functions/function-registry.js');
  functionRegistry.addMultiple({
    e: function(str) {
      return new Anonymous(str instanceof JavaScript ? str.evaluated : str.value);
    },
    escape: function(str) {
      return new Anonymous(encodeURI(str.value).replace(/=/g, "%3D").replace(/:/g, "%3A").replace(/#/g, "%23").replace(/;/g, "%3B").replace(/\(/g, "%28").replace(/\)/g, "%29"));
    },
    replace: function(string, pattern, replacement, flags) {
      var result = string.value;
      replacement = (replacement.type === "Quoted") ? replacement.value : replacement.toCSS();
      result = result.replace(new RegExp(pattern.value, flags ? flags.value : ''), replacement);
      return new Quoted(string.quote || '', result, string.escaped);
    },
    '%': function(string) {
      var args = Array.prototype.slice.call(arguments, 1),
          result = string.value;
      for (var i = 0; i < args.length; i++) {
        result = result.replace(/%[sda]/i, function(token) {
          var value = ((args[i].type === "Quoted") && token.match(/s/i)) ? args[i].value : args[i].toCSS();
          return token.match(/[A-Z]$/) ? encodeURIComponent(value) : value;
        });
      }
      result = result.replace(/%%/g, '%');
      return new Quoted(string.quote || '', result, string.escaped);
    }
  });
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/functions/svg.js", ["npm:less@2.6.1/lib/less/tree/dimension.js", "npm:less@2.6.1/lib/less/tree/color.js", "npm:less@2.6.1/lib/less/tree/expression.js", "npm:less@2.6.1/lib/less/tree/quoted.js", "npm:less@2.6.1/lib/less/tree/url.js", "npm:less@2.6.1/lib/less/functions/function-registry.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function(environment) {
    var Dimension = $__require('npm:less@2.6.1/lib/less/tree/dimension.js'),
        Color = $__require('npm:less@2.6.1/lib/less/tree/color.js'),
        Expression = $__require('npm:less@2.6.1/lib/less/tree/expression.js'),
        Quoted = $__require('npm:less@2.6.1/lib/less/tree/quoted.js'),
        URL = $__require('npm:less@2.6.1/lib/less/tree/url.js'),
        functionRegistry = $__require('npm:less@2.6.1/lib/less/functions/function-registry.js');
    functionRegistry.add("svg-gradient", function(direction) {
      var stops,
          gradientDirectionSvg,
          gradientType = "linear",
          rectangleDimension = 'x="0" y="0" width="1" height="1"',
          renderEnv = {compress: false},
          returner,
          directionValue = direction.toCSS(renderEnv),
          i,
          color,
          position,
          positionValue,
          alpha;
      function throwArgumentDescriptor() {
        throw {
          type: "Argument",
          message: "svg-gradient expects direction, start_color [start_position], [color position,]...," + " end_color [end_position] or direction, color list"
        };
      }
      if (arguments.length == 2) {
        if (arguments[1].value.length < 2) {
          throwArgumentDescriptor();
        }
        stops = arguments[1].value;
      } else if (arguments.length < 3) {
        throwArgumentDescriptor();
      } else {
        stops = Array.prototype.slice.call(arguments, 1);
      }
      switch (directionValue) {
        case "to bottom":
          gradientDirectionSvg = 'x1="0%" y1="0%" x2="0%" y2="100%"';
          break;
        case "to right":
          gradientDirectionSvg = 'x1="0%" y1="0%" x2="100%" y2="0%"';
          break;
        case "to bottom right":
          gradientDirectionSvg = 'x1="0%" y1="0%" x2="100%" y2="100%"';
          break;
        case "to top right":
          gradientDirectionSvg = 'x1="0%" y1="100%" x2="100%" y2="0%"';
          break;
        case "ellipse":
        case "ellipse at center":
          gradientType = "radial";
          gradientDirectionSvg = 'cx="50%" cy="50%" r="75%"';
          rectangleDimension = 'x="-50" y="-50" width="101" height="101"';
          break;
        default:
          throw {
            type: "Argument",
            message: "svg-gradient direction must be 'to bottom', 'to right'," + " 'to bottom right', 'to top right' or 'ellipse at center'"
          };
      }
      returner = '<?xml version="1.0" ?>' + '<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100%" height="100%" viewBox="0 0 1 1" preserveAspectRatio="none">' + '<' + gradientType + 'Gradient id="gradient" gradientUnits="userSpaceOnUse" ' + gradientDirectionSvg + '>';
      for (i = 0; i < stops.length; i += 1) {
        if (stops[i] instanceof Expression) {
          color = stops[i].value[0];
          position = stops[i].value[1];
        } else {
          color = stops[i];
          position = undefined;
        }
        if (!(color instanceof Color) || (!((i === 0 || i + 1 === stops.length) && position === undefined) && !(position instanceof Dimension))) {
          throwArgumentDescriptor();
        }
        positionValue = position ? position.toCSS(renderEnv) : i === 0 ? "0%" : "100%";
        alpha = color.alpha;
        returner += '<stop offset="' + positionValue + '" stop-color="' + color.toRGB() + '"' + (alpha < 1 ? ' stop-opacity="' + alpha + '"' : '') + '/>';
      }
      returner += '</' + gradientType + 'Gradient>' + '<rect ' + rectangleDimension + ' fill="url(#gradient)" /></svg>';
      returner = encodeURIComponent(returner);
      returner = "data:image/svg+xml," + returner;
      return new URL(new Quoted("'" + returner + "'", returner, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);
    });
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/functions/types.js", ["npm:less@2.6.1/lib/less/tree/keyword.js", "npm:less@2.6.1/lib/less/tree/detached-ruleset.js", "npm:less@2.6.1/lib/less/tree/dimension.js", "npm:less@2.6.1/lib/less/tree/color.js", "npm:less@2.6.1/lib/less/tree/quoted.js", "npm:less@2.6.1/lib/less/tree/anonymous.js", "npm:less@2.6.1/lib/less/tree/url.js", "npm:less@2.6.1/lib/less/tree/operation.js", "npm:less@2.6.1/lib/less/functions/function-registry.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Keyword = $__require('npm:less@2.6.1/lib/less/tree/keyword.js'),
      DetachedRuleset = $__require('npm:less@2.6.1/lib/less/tree/detached-ruleset.js'),
      Dimension = $__require('npm:less@2.6.1/lib/less/tree/dimension.js'),
      Color = $__require('npm:less@2.6.1/lib/less/tree/color.js'),
      Quoted = $__require('npm:less@2.6.1/lib/less/tree/quoted.js'),
      Anonymous = $__require('npm:less@2.6.1/lib/less/tree/anonymous.js'),
      URL = $__require('npm:less@2.6.1/lib/less/tree/url.js'),
      Operation = $__require('npm:less@2.6.1/lib/less/tree/operation.js'),
      functionRegistry = $__require('npm:less@2.6.1/lib/less/functions/function-registry.js');
  var isa = function(n, Type) {
    return (n instanceof Type) ? Keyword.True : Keyword.False;
  },
      isunit = function(n, unit) {
        if (unit === undefined) {
          throw {
            type: "Argument",
            message: "missing the required second argument to isunit."
          };
        }
        unit = typeof unit.value === "string" ? unit.value : unit;
        if (typeof unit !== "string") {
          throw {
            type: "Argument",
            message: "Second argument to isunit should be a unit or a string."
          };
        }
        return (n instanceof Dimension) && n.unit.is(unit) ? Keyword.True : Keyword.False;
      },
      getItemsFromNode = function(node) {
        var items = Array.isArray(node.value) ? node.value : Array(node);
        return items;
      };
  functionRegistry.addMultiple({
    isruleset: function(n) {
      return isa(n, DetachedRuleset);
    },
    iscolor: function(n) {
      return isa(n, Color);
    },
    isnumber: function(n) {
      return isa(n, Dimension);
    },
    isstring: function(n) {
      return isa(n, Quoted);
    },
    iskeyword: function(n) {
      return isa(n, Keyword);
    },
    isurl: function(n) {
      return isa(n, URL);
    },
    ispixel: function(n) {
      return isunit(n, 'px');
    },
    ispercentage: function(n) {
      return isunit(n, '%');
    },
    isem: function(n) {
      return isunit(n, 'em');
    },
    isunit: isunit,
    unit: function(val, unit) {
      if (!(val instanceof Dimension)) {
        throw {
          type: "Argument",
          message: "the first argument to unit must be a number" + (val instanceof Operation ? ". Have you forgotten parenthesis?" : "")
        };
      }
      if (unit) {
        if (unit instanceof Keyword) {
          unit = unit.value;
        } else {
          unit = unit.toCSS();
        }
      } else {
        unit = "";
      }
      return new Dimension(val.value, unit);
    },
    "get-unit": function(n) {
      return new Anonymous(n.unit);
    },
    extract: function(values, index) {
      index = index.value - 1;
      return getItemsFromNode(values)[index];
    },
    length: function(values) {
      return new Dimension(getItemsFromNode(values).length);
    }
  });
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/functions/index.js", ["npm:less@2.6.1/lib/less/functions/function-registry.js", "npm:less@2.6.1/lib/less/functions/function-caller.js", "npm:less@2.6.1/lib/less/functions/default.js", "npm:less@2.6.1/lib/less/functions/color.js", "npm:less@2.6.1/lib/less/functions/color-blending.js", "npm:less@2.6.1/lib/less/functions/data-uri.js", "npm:less@2.6.1/lib/less/functions/math.js", "npm:less@2.6.1/lib/less/functions/number.js", "npm:less@2.6.1/lib/less/functions/string.js", "npm:less@2.6.1/lib/less/functions/svg.js", "npm:less@2.6.1/lib/less/functions/types.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function(environment) {
    var functions = {
      functionRegistry: $__require('npm:less@2.6.1/lib/less/functions/function-registry.js'),
      functionCaller: $__require('npm:less@2.6.1/lib/less/functions/function-caller.js')
    };
    $__require('npm:less@2.6.1/lib/less/functions/default.js');
    $__require('npm:less@2.6.1/lib/less/functions/color.js');
    $__require('npm:less@2.6.1/lib/less/functions/color-blending.js');
    $__require('npm:less@2.6.1/lib/less/functions/data-uri.js')(environment);
    $__require('npm:less@2.6.1/lib/less/functions/math.js');
    $__require('npm:less@2.6.1/lib/less/functions/number.js');
    $__require('npm:less@2.6.1/lib/less/functions/string.js');
    $__require('npm:less@2.6.1/lib/less/functions/svg.js')(environment);
    $__require('npm:less@2.6.1/lib/less/functions/types.js');
    return functions;
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/source-map-output.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function(environment) {
    var SourceMapOutput = function(options) {
      this._css = [];
      this._rootNode = options.rootNode;
      this._contentsMap = options.contentsMap;
      this._contentsIgnoredCharsMap = options.contentsIgnoredCharsMap;
      if (options.sourceMapFilename) {
        this._sourceMapFilename = options.sourceMapFilename.replace(/\\/g, '/');
      }
      this._outputFilename = options.outputFilename;
      this.sourceMapURL = options.sourceMapURL;
      if (options.sourceMapBasepath) {
        this._sourceMapBasepath = options.sourceMapBasepath.replace(/\\/g, '/');
      }
      if (options.sourceMapRootpath) {
        this._sourceMapRootpath = options.sourceMapRootpath.replace(/\\/g, '/');
        if (this._sourceMapRootpath.charAt(this._sourceMapRootpath.length - 1) !== '/') {
          this._sourceMapRootpath += '/';
        }
      } else {
        this._sourceMapRootpath = "";
      }
      this._outputSourceFiles = options.outputSourceFiles;
      this._sourceMapGeneratorConstructor = environment.getSourceMapGenerator();
      this._lineNumber = 0;
      this._column = 0;
    };
    SourceMapOutput.prototype.normalizeFilename = function(filename) {
      filename = filename.replace(/\\/g, '/');
      if (this._sourceMapBasepath && filename.indexOf(this._sourceMapBasepath) === 0) {
        filename = filename.substring(this._sourceMapBasepath.length);
        if (filename.charAt(0) === '\\' || filename.charAt(0) === '/') {
          filename = filename.substring(1);
        }
      }
      return (this._sourceMapRootpath || "") + filename;
    };
    SourceMapOutput.prototype.add = function(chunk, fileInfo, index, mapLines) {
      if (!chunk) {
        return;
      }
      var lines,
          sourceLines,
          columns,
          sourceColumns,
          i;
      if (fileInfo) {
        var inputSource = this._contentsMap[fileInfo.filename];
        if (this._contentsIgnoredCharsMap[fileInfo.filename]) {
          index -= this._contentsIgnoredCharsMap[fileInfo.filename];
          if (index < 0) {
            index = 0;
          }
          inputSource = inputSource.slice(this._contentsIgnoredCharsMap[fileInfo.filename]);
        }
        inputSource = inputSource.substring(0, index);
        sourceLines = inputSource.split("\n");
        sourceColumns = sourceLines[sourceLines.length - 1];
      }
      lines = chunk.split("\n");
      columns = lines[lines.length - 1];
      if (fileInfo) {
        if (!mapLines) {
          this._sourceMapGenerator.addMapping({
            generated: {
              line: this._lineNumber + 1,
              column: this._column
            },
            original: {
              line: sourceLines.length,
              column: sourceColumns.length
            },
            source: this.normalizeFilename(fileInfo.filename)
          });
        } else {
          for (i = 0; i < lines.length; i++) {
            this._sourceMapGenerator.addMapping({
              generated: {
                line: this._lineNumber + i + 1,
                column: i === 0 ? this._column : 0
              },
              original: {
                line: sourceLines.length + i,
                column: i === 0 ? sourceColumns.length : 0
              },
              source: this.normalizeFilename(fileInfo.filename)
            });
          }
        }
      }
      if (lines.length === 1) {
        this._column += columns.length;
      } else {
        this._lineNumber += lines.length - 1;
        this._column = columns.length;
      }
      this._css.push(chunk);
    };
    SourceMapOutput.prototype.isEmpty = function() {
      return this._css.length === 0;
    };
    SourceMapOutput.prototype.toCSS = function(context) {
      this._sourceMapGenerator = new this._sourceMapGeneratorConstructor({
        file: this._outputFilename,
        sourceRoot: null
      });
      if (this._outputSourceFiles) {
        for (var filename in this._contentsMap) {
          if (this._contentsMap.hasOwnProperty(filename)) {
            var source = this._contentsMap[filename];
            if (this._contentsIgnoredCharsMap[filename]) {
              source = source.slice(this._contentsIgnoredCharsMap[filename]);
            }
            this._sourceMapGenerator.setSourceContent(this.normalizeFilename(filename), source);
          }
        }
      }
      this._rootNode.genCSS(context, this);
      if (this._css.length > 0) {
        var sourceMapURL,
            sourceMapContent = JSON.stringify(this._sourceMapGenerator.toJSON());
        if (this.sourceMapURL) {
          sourceMapURL = this.sourceMapURL;
        } else if (this._sourceMapFilename) {
          sourceMapURL = this._sourceMapFilename;
        }
        this.sourceMapURL = sourceMapURL;
        this.sourceMap = sourceMapContent;
      }
      return this._css.join('');
    };
    return SourceMapOutput;
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/source-map-builder.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function(SourceMapOutput, environment) {
    var SourceMapBuilder = function(options) {
      this.options = options;
    };
    SourceMapBuilder.prototype.toCSS = function(rootNode, options, imports) {
      var sourceMapOutput = new SourceMapOutput({
        contentsIgnoredCharsMap: imports.contentsIgnoredChars,
        rootNode: rootNode,
        contentsMap: imports.contents,
        sourceMapFilename: this.options.sourceMapFilename,
        sourceMapURL: this.options.sourceMapURL,
        outputFilename: this.options.sourceMapOutputFilename,
        sourceMapBasepath: this.options.sourceMapBasepath,
        sourceMapRootpath: this.options.sourceMapRootpath,
        outputSourceFiles: this.options.outputSourceFiles,
        sourceMapGenerator: this.options.sourceMapGenerator,
        sourceMapFileInline: this.options.sourceMapFileInline
      });
      var css = sourceMapOutput.toCSS(options);
      this.sourceMap = sourceMapOutput.sourceMap;
      this.sourceMapURL = sourceMapOutput.sourceMapURL;
      if (this.options.sourceMapInputFilename) {
        this.sourceMapInputFilename = sourceMapOutput.normalizeFilename(this.options.sourceMapInputFilename);
      }
      return css + this.getCSSAppendage();
    };
    SourceMapBuilder.prototype.getCSSAppendage = function() {
      var sourceMapURL = this.sourceMapURL;
      if (this.options.sourceMapFileInline) {
        if (this.sourceMap === undefined) {
          return "";
        }
        sourceMapURL = "data:application/json;base64," + environment.encodeBase64(this.sourceMap);
      }
      if (sourceMapURL) {
        return "/*# sourceMappingURL=" + sourceMapURL + " */";
      }
      return "";
    };
    SourceMapBuilder.prototype.getExternalSourceMap = function() {
      return this.sourceMap;
    };
    SourceMapBuilder.prototype.setExternalSourceMap = function(sourceMap) {
      this.sourceMap = sourceMap;
    };
    SourceMapBuilder.prototype.isInline = function() {
      return this.options.sourceMapFileInline;
    };
    SourceMapBuilder.prototype.getSourceMapURL = function() {
      return this.sourceMapURL;
    };
    SourceMapBuilder.prototype.getOutputFilename = function() {
      return this.options.sourceMapOutputFilename;
    };
    SourceMapBuilder.prototype.getInputFilename = function() {
      return this.sourceMapInputFilename;
    };
    return SourceMapBuilder;
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/parse-tree.js", ["npm:less@2.6.1/lib/less/less-error.js", "npm:less@2.6.1/lib/less/transform-tree.js", "npm:less@2.6.1/lib/less/logger.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var LessError = $__require('npm:less@2.6.1/lib/less/less-error.js'),
      transformTree = $__require('npm:less@2.6.1/lib/less/transform-tree.js'),
      logger = $__require('npm:less@2.6.1/lib/less/logger.js');
  module.exports = function(SourceMapBuilder) {
    var ParseTree = function(root, imports) {
      this.root = root;
      this.imports = imports;
    };
    ParseTree.prototype.toCSS = function(options) {
      var evaldRoot,
          result = {},
          sourceMapBuilder;
      try {
        evaldRoot = transformTree(this.root, options);
      } catch (e) {
        throw new LessError(e, this.imports);
      }
      try {
        var compress = Boolean(options.compress);
        if (compress) {
          logger.warn("The compress option has been deprecated. We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.");
        }
        var toCSSOptions = {
          compress: compress,
          dumpLineNumbers: options.dumpLineNumbers,
          strictUnits: Boolean(options.strictUnits),
          numPrecision: 8
        };
        if (options.sourceMap) {
          sourceMapBuilder = new SourceMapBuilder(options.sourceMap);
          result.css = sourceMapBuilder.toCSS(evaldRoot, toCSSOptions, this.imports);
        } else {
          result.css = evaldRoot.toCSS(toCSSOptions);
        }
      } catch (e) {
        throw new LessError(e, this.imports);
      }
      if (options.pluginManager) {
        var postProcessors = options.pluginManager.getPostProcessors();
        for (var i = 0; i < postProcessors.length; i++) {
          result.css = postProcessors[i].process(result.css, {
            sourceMap: sourceMapBuilder,
            options: options,
            imports: this.imports
          });
        }
      }
      if (options.sourceMap) {
        result.map = sourceMapBuilder.getExternalSourceMap();
      }
      result.imports = [];
      for (var file in this.imports.files) {
        if (this.imports.files.hasOwnProperty(file) && file !== this.imports.rootFilename) {
          result.imports.push(file);
        }
      }
      return result;
    };
    return ParseTree;
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/plugins/function-importer.js", ["npm:less@2.6.1/lib/less/less-error.js", "npm:less@2.6.1/lib/less/tree/index.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var LessError = $__require('npm:less@2.6.1/lib/less/less-error.js'),
      tree = $__require('npm:less@2.6.1/lib/less/tree/index.js');
  var FunctionImporter = module.exports = function FunctionImporter(context, fileInfo) {
    this.fileInfo = fileInfo;
  };
  FunctionImporter.prototype.eval = function(contents, callback) {
    var loaded = {},
        loader,
        registry;
    registry = {
      add: function(name, func) {
        loaded[name] = func;
      },
      addMultiple: function(functions) {
        Object.keys(functions).forEach(function(name) {
          loaded[name] = functions[name];
        });
      }
    };
    try {
      loader = new Function("functions", "tree", "fileInfo", contents);
      loader(registry, tree, this.fileInfo);
    } catch (e) {
      callback(new LessError({
        message: "Plugin evaluation error: '" + e.name + ': ' + e.message.replace(/["]/g, "'") + "'",
        filename: this.fileInfo.filename
      }), null);
    }
    callback(null, {functions: loaded});
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/import-manager.js", ["npm:less@2.6.1/lib/less/contexts.js", "npm:less@2.6.1/lib/less/parser/parser.js", "npm:less@2.6.1/lib/less/plugins/function-importer.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var contexts = $__require('npm:less@2.6.1/lib/less/contexts.js'),
      Parser = $__require('npm:less@2.6.1/lib/less/parser/parser.js'),
      FunctionImporter = $__require('npm:less@2.6.1/lib/less/plugins/function-importer.js');
  module.exports = function(environment) {
    var ImportManager = function(context, rootFileInfo) {
      this.rootFilename = rootFileInfo.filename;
      this.paths = context.paths || [];
      this.contents = {};
      this.contentsIgnoredChars = {};
      this.mime = context.mime;
      this.error = null;
      this.context = context;
      this.queue = [];
      this.files = {};
    };
    ImportManager.prototype.push = function(path, tryAppendLessExtension, currentFileInfo, importOptions, callback) {
      var importManager = this;
      this.queue.push(path);
      var fileParsedFunc = function(e, root, fullPath) {
        importManager.queue.splice(importManager.queue.indexOf(path), 1);
        var importedEqualsRoot = fullPath === importManager.rootFilename;
        if (importOptions.optional && e) {
          callback(null, {rules: []}, false, null);
        } else {
          importManager.files[fullPath] = root;
          if (e && !importManager.error) {
            importManager.error = e;
          }
          callback(e, root, importedEqualsRoot, fullPath);
        }
      };
      var newFileInfo = {
        relativeUrls: this.context.relativeUrls,
        entryPath: currentFileInfo.entryPath,
        rootpath: currentFileInfo.rootpath,
        rootFilename: currentFileInfo.rootFilename
      };
      var fileManager = environment.getFileManager(path, currentFileInfo.currentDirectory, this.context, environment);
      if (!fileManager) {
        fileParsedFunc({message: "Could not find a file-manager for " + path});
        return;
      }
      if (tryAppendLessExtension) {
        path = fileManager.tryAppendExtension(path, importOptions.plugin ? ".js" : ".less");
      }
      var loadFileCallback = function(loadedFile) {
        var resolvedFilename = loadedFile.filename,
            contents = loadedFile.contents.replace(/^\uFEFF/, '');
        newFileInfo.currentDirectory = fileManager.getPath(resolvedFilename);
        if (newFileInfo.relativeUrls) {
          newFileInfo.rootpath = fileManager.join((importManager.context.rootpath || ""), fileManager.pathDiff(newFileInfo.currentDirectory, newFileInfo.entryPath));
          if (!fileManager.isPathAbsolute(newFileInfo.rootpath) && fileManager.alwaysMakePathsAbsolute()) {
            newFileInfo.rootpath = fileManager.join(newFileInfo.entryPath, newFileInfo.rootpath);
          }
        }
        newFileInfo.filename = resolvedFilename;
        var newEnv = new contexts.Parse(importManager.context);
        newEnv.processImports = false;
        importManager.contents[resolvedFilename] = contents;
        if (currentFileInfo.reference || importOptions.reference) {
          newFileInfo.reference = true;
        }
        if (importOptions.plugin) {
          new FunctionImporter(newEnv, newFileInfo).eval(contents, function(e, root) {
            fileParsedFunc(e, root, resolvedFilename);
          });
        } else if (importOptions.inline) {
          fileParsedFunc(null, contents, resolvedFilename);
        } else {
          new Parser(newEnv, importManager, newFileInfo).parse(contents, function(e, root) {
            fileParsedFunc(e, root, resolvedFilename);
          });
        }
      };
      var promise = fileManager.loadFile(path, currentFileInfo.currentDirectory, this.context, environment, function(err, loadedFile) {
        if (err) {
          fileParsedFunc(err);
        } else {
          loadFileCallback(loadedFile);
        }
      });
      if (promise) {
        promise.then(loadFileCallback, fileParsedFunc);
      }
    };
    return ImportManager;
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/render.js", ["npm:promise@7.1.1/index.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var PromiseConstructor;
  module.exports = function(environment, ParseTree, ImportManager) {
    var render = function(input, options, callback) {
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      if (!callback) {
        if (!PromiseConstructor) {
          PromiseConstructor = typeof Promise === 'undefined' ? $__require('npm:promise@7.1.1/index.js') : Promise;
        }
        var self = this;
        return new PromiseConstructor(function(resolve, reject) {
          render.call(self, input, options, function(err, output) {
            if (err) {
              reject(err);
            } else {
              resolve(output);
            }
          });
        });
      } else {
        this.parse(input, options, function(err, root, imports, options) {
          if (err) {
            return callback(err);
          }
          var result;
          try {
            var parseTree = new ParseTree(root, imports);
            result = parseTree.toCSS(options);
          } catch (err) {
            return callback(err);
          }
          callback(null, result);
        });
      }
    };
    return render;
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/parser/chunker.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function(input, fail) {
    var len = input.length,
        level = 0,
        parenLevel = 0,
        lastOpening,
        lastOpeningParen,
        lastMultiComment,
        lastMultiCommentEndBrace,
        chunks = [],
        emitFrom = 0,
        chunkerCurrentIndex,
        currentChunkStartIndex,
        cc,
        cc2,
        matched;
    function emitChunk(force) {
      var len = chunkerCurrentIndex - emitFrom;
      if (((len < 512) && !force) || !len) {
        return;
      }
      chunks.push(input.slice(emitFrom, chunkerCurrentIndex + 1));
      emitFrom = chunkerCurrentIndex + 1;
    }
    for (chunkerCurrentIndex = 0; chunkerCurrentIndex < len; chunkerCurrentIndex++) {
      cc = input.charCodeAt(chunkerCurrentIndex);
      if (((cc >= 97) && (cc <= 122)) || (cc < 34)) {
        continue;
      }
      switch (cc) {
        case 40:
          parenLevel++;
          lastOpeningParen = chunkerCurrentIndex;
          continue;
        case 41:
          if (--parenLevel < 0) {
            return fail("missing opening `(`", chunkerCurrentIndex);
          }
          continue;
        case 59:
          if (!parenLevel) {
            emitChunk();
          }
          continue;
        case 123:
          level++;
          lastOpening = chunkerCurrentIndex;
          continue;
        case 125:
          if (--level < 0) {
            return fail("missing opening `{`", chunkerCurrentIndex);
          }
          if (!level && !parenLevel) {
            emitChunk();
          }
          continue;
        case 92:
          if (chunkerCurrentIndex < len - 1) {
            chunkerCurrentIndex++;
            continue;
          }
          return fail("unescaped `\\`", chunkerCurrentIndex);
        case 34:
        case 39:
        case 96:
          matched = 0;
          currentChunkStartIndex = chunkerCurrentIndex;
          for (chunkerCurrentIndex = chunkerCurrentIndex + 1; chunkerCurrentIndex < len; chunkerCurrentIndex++) {
            cc2 = input.charCodeAt(chunkerCurrentIndex);
            if (cc2 > 96) {
              continue;
            }
            if (cc2 == cc) {
              matched = 1;
              break;
            }
            if (cc2 == 92) {
              if (chunkerCurrentIndex == len - 1) {
                return fail("unescaped `\\`", chunkerCurrentIndex);
              }
              chunkerCurrentIndex++;
            }
          }
          if (matched) {
            continue;
          }
          return fail("unmatched `" + String.fromCharCode(cc) + "`", currentChunkStartIndex);
        case 47:
          if (parenLevel || (chunkerCurrentIndex == len - 1)) {
            continue;
          }
          cc2 = input.charCodeAt(chunkerCurrentIndex + 1);
          if (cc2 == 47) {
            for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len; chunkerCurrentIndex++) {
              cc2 = input.charCodeAt(chunkerCurrentIndex);
              if ((cc2 <= 13) && ((cc2 == 10) || (cc2 == 13))) {
                break;
              }
            }
          } else if (cc2 == 42) {
            lastMultiComment = currentChunkStartIndex = chunkerCurrentIndex;
            for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len - 1; chunkerCurrentIndex++) {
              cc2 = input.charCodeAt(chunkerCurrentIndex);
              if (cc2 == 125) {
                lastMultiCommentEndBrace = chunkerCurrentIndex;
              }
              if (cc2 != 42) {
                continue;
              }
              if (input.charCodeAt(chunkerCurrentIndex + 1) == 47) {
                break;
              }
            }
            if (chunkerCurrentIndex == len - 1) {
              return fail("missing closing `*/`", currentChunkStartIndex);
            }
            chunkerCurrentIndex++;
          }
          continue;
        case 42:
          if ((chunkerCurrentIndex < len - 1) && (input.charCodeAt(chunkerCurrentIndex + 1) == 47)) {
            return fail("unmatched `/*`", chunkerCurrentIndex);
          }
          continue;
      }
    }
    if (level !== 0) {
      if ((lastMultiComment > lastOpening) && (lastMultiCommentEndBrace > lastMultiComment)) {
        return fail("missing closing `}` or `*/`", lastOpening);
      } else {
        return fail("missing closing `}`", lastOpening);
      }
    } else if (parenLevel !== 0) {
      return fail("missing closing `)`", lastOpeningParen);
    }
    emitChunk(true);
    return chunks;
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/parser/parser-input.js", ["npm:less@2.6.1/lib/less/parser/chunker.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var chunker = $__require('npm:less@2.6.1/lib/less/parser/chunker.js');
  module.exports = function() {
    var input,
        j,
        saveStack = [],
        furthest,
        furthestPossibleErrorMessage,
        chunks,
        current,
        currentPos,
        parserInput = {};
    var CHARCODE_SPACE = 32,
        CHARCODE_TAB = 9,
        CHARCODE_LF = 10,
        CHARCODE_CR = 13,
        CHARCODE_PLUS = 43,
        CHARCODE_COMMA = 44,
        CHARCODE_FORWARD_SLASH = 47,
        CHARCODE_9 = 57;
    function skipWhitespace(length) {
      var oldi = parserInput.i,
          oldj = j,
          curr = parserInput.i - currentPos,
          endIndex = parserInput.i + current.length - curr,
          mem = (parserInput.i += length),
          inp = input,
          c,
          nextChar,
          comment;
      for (; parserInput.i < endIndex; parserInput.i++) {
        c = inp.charCodeAt(parserInput.i);
        if (parserInput.autoCommentAbsorb && c === CHARCODE_FORWARD_SLASH) {
          nextChar = inp.charAt(parserInput.i + 1);
          if (nextChar === '/') {
            comment = {
              index: parserInput.i,
              isLineComment: true
            };
            var nextNewLine = inp.indexOf("\n", parserInput.i + 2);
            if (nextNewLine < 0) {
              nextNewLine = endIndex;
            }
            parserInput.i = nextNewLine;
            comment.text = inp.substr(comment.i, parserInput.i - comment.i);
            parserInput.commentStore.push(comment);
            continue;
          } else if (nextChar === '*') {
            var nextStarSlash = inp.indexOf("*/", parserInput.i + 2);
            if (nextStarSlash >= 0) {
              comment = {
                index: parserInput.i,
                text: inp.substr(parserInput.i, nextStarSlash + 2 - parserInput.i),
                isLineComment: false
              };
              parserInput.i += comment.text.length - 1;
              parserInput.commentStore.push(comment);
              continue;
            }
          }
          break;
        }
        if ((c !== CHARCODE_SPACE) && (c !== CHARCODE_LF) && (c !== CHARCODE_TAB) && (c !== CHARCODE_CR)) {
          break;
        }
      }
      current = current.slice(length + parserInput.i - mem + curr);
      currentPos = parserInput.i;
      if (!current.length) {
        if (j < chunks.length - 1) {
          current = chunks[++j];
          skipWhitespace(0);
          return true;
        }
        parserInput.finished = true;
      }
      return oldi !== parserInput.i || oldj !== j;
    }
    parserInput.save = function() {
      currentPos = parserInput.i;
      saveStack.push({
        current: current,
        i: parserInput.i,
        j: j
      });
    };
    parserInput.restore = function(possibleErrorMessage) {
      if (parserInput.i > furthest || (parserInput.i === furthest && possibleErrorMessage && !furthestPossibleErrorMessage)) {
        furthest = parserInput.i;
        furthestPossibleErrorMessage = possibleErrorMessage;
      }
      var state = saveStack.pop();
      current = state.current;
      currentPos = parserInput.i = state.i;
      j = state.j;
    };
    parserInput.forget = function() {
      saveStack.pop();
    };
    parserInput.isWhitespace = function(offset) {
      var pos = parserInput.i + (offset || 0),
          code = input.charCodeAt(pos);
      return (code === CHARCODE_SPACE || code === CHARCODE_CR || code === CHARCODE_TAB || code === CHARCODE_LF);
    };
    parserInput.$re = function(tok) {
      if (parserInput.i > currentPos) {
        current = current.slice(parserInput.i - currentPos);
        currentPos = parserInput.i;
      }
      var m = tok.exec(current);
      if (!m) {
        return null;
      }
      skipWhitespace(m[0].length);
      if (typeof m === "string") {
        return m;
      }
      return m.length === 1 ? m[0] : m;
    };
    parserInput.$char = function(tok) {
      if (input.charAt(parserInput.i) !== tok) {
        return null;
      }
      skipWhitespace(1);
      return tok;
    };
    parserInput.$str = function(tok) {
      var tokLength = tok.length;
      for (var i = 0; i < tokLength; i++) {
        if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {
          return null;
        }
      }
      skipWhitespace(tokLength);
      return tok;
    };
    parserInput.$quoted = function() {
      var startChar = input.charAt(parserInput.i);
      if (startChar !== "'" && startChar !== '"') {
        return;
      }
      var length = input.length,
          currentPosition = parserInput.i;
      for (var i = 1; i + currentPosition < length; i++) {
        var nextChar = input.charAt(i + currentPosition);
        switch (nextChar) {
          case "\\":
            i++;
            continue;
          case "\r":
          case "\n":
            break;
          case startChar:
            var str = input.substr(currentPosition, i + 1);
            skipWhitespace(i + 1);
            return str;
          default:
        }
      }
      return null;
    };
    parserInput.autoCommentAbsorb = true;
    parserInput.commentStore = [];
    parserInput.finished = false;
    parserInput.peek = function(tok) {
      if (typeof tok === 'string') {
        for (var i = 0; i < tok.length; i++) {
          if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {
            return false;
          }
        }
        return true;
      } else {
        return tok.test(current);
      }
    };
    parserInput.peekChar = function(tok) {
      return input.charAt(parserInput.i) === tok;
    };
    parserInput.currentChar = function() {
      return input.charAt(parserInput.i);
    };
    parserInput.getInput = function() {
      return input;
    };
    parserInput.peekNotNumeric = function() {
      var c = input.charCodeAt(parserInput.i);
      return (c > CHARCODE_9 || c < CHARCODE_PLUS) || c === CHARCODE_FORWARD_SLASH || c === CHARCODE_COMMA;
    };
    parserInput.start = function(str, chunkInput, failFunction) {
      input = str;
      parserInput.i = j = currentPos = furthest = 0;
      if (chunkInput) {
        chunks = chunker(str, failFunction);
      } else {
        chunks = [str];
      }
      current = chunks[0];
      skipWhitespace(0);
    };
    parserInput.end = function() {
      var message,
          isFinished = parserInput.i >= input.length;
      if (parserInput.i < furthest) {
        message = furthestPossibleErrorMessage;
        parserInput.i = furthest;
      }
      return {
        isFinished: isFinished,
        furthest: parserInput.i,
        furthestPossibleErrorMessage: message,
        furthestReachedEnd: parserInput.i >= input.length - 1,
        furthestChar: input[parserInput.i]
      };
    };
    return parserInput;
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/parser/parser.js", ["npm:less@2.6.1/lib/less/less-error.js", "npm:less@2.6.1/lib/less/tree/index.js", "npm:less@2.6.1/lib/less/visitors/index.js", "npm:less@2.6.1/lib/less/parser/parser-input.js", "npm:less@2.6.1/lib/less/utils.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var LessError = $__require('npm:less@2.6.1/lib/less/less-error.js'),
      tree = $__require('npm:less@2.6.1/lib/less/tree/index.js'),
      visitors = $__require('npm:less@2.6.1/lib/less/visitors/index.js'),
      getParserInput = $__require('npm:less@2.6.1/lib/less/parser/parser-input.js'),
      utils = $__require('npm:less@2.6.1/lib/less/utils.js');
  var Parser = function Parser(context, imports, fileInfo) {
    var parsers,
        parserInput = getParserInput();
    function error(msg, type) {
      throw new LessError({
        index: parserInput.i,
        filename: fileInfo.filename,
        type: type || 'Syntax',
        message: msg
      }, imports);
    }
    function expect(arg, msg, index) {
      var result = (arg instanceof Function) ? arg.call(parsers) : parserInput.$re(arg);
      if (result) {
        return result;
      }
      error(msg || (typeof arg === 'string' ? "expected '" + arg + "' got '" + parserInput.currentChar() + "'" : "unexpected token"));
    }
    function expectChar(arg, msg) {
      if (parserInput.$char(arg)) {
        return arg;
      }
      error(msg || "expected '" + arg + "' got '" + parserInput.currentChar() + "'");
    }
    function getDebugInfo(index) {
      var filename = fileInfo.filename;
      return {
        lineNumber: utils.getLocation(index, parserInput.getInput()).line + 1,
        fileName: filename
      };
    }
    return {
      parse: function(str, callback, additionalData) {
        var root,
            error = null,
            globalVars,
            modifyVars,
            ignored,
            preText = "";
        globalVars = (additionalData && additionalData.globalVars) ? Parser.serializeVars(additionalData.globalVars) + '\n' : '';
        modifyVars = (additionalData && additionalData.modifyVars) ? '\n' + Parser.serializeVars(additionalData.modifyVars) : '';
        if (context.pluginManager) {
          var preProcessors = context.pluginManager.getPreProcessors();
          for (var i = 0; i < preProcessors.length; i++) {
            str = preProcessors[i].process(str, {
              context: context,
              imports: imports,
              fileInfo: fileInfo
            });
          }
        }
        if (globalVars || (additionalData && additionalData.banner)) {
          preText = ((additionalData && additionalData.banner) ? additionalData.banner : "") + globalVars;
          ignored = imports.contentsIgnoredChars;
          ignored[fileInfo.filename] = ignored[fileInfo.filename] || 0;
          ignored[fileInfo.filename] += preText.length;
        }
        str = str.replace(/\r\n?/g, '\n');
        str = preText + str.replace(/^\uFEFF/, '') + modifyVars;
        imports.contents[fileInfo.filename] = str;
        try {
          parserInput.start(str, context.chunkInput, function fail(msg, index) {
            throw new LessError({
              index: index,
              type: 'Parse',
              message: msg,
              filename: fileInfo.filename
            }, imports);
          });
          root = new (tree.Ruleset)(null, this.parsers.primary());
          root.root = true;
          root.firstRoot = true;
        } catch (e) {
          return callback(new LessError(e, imports, fileInfo.filename));
        }
        var endInfo = parserInput.end();
        if (!endInfo.isFinished) {
          var message = endInfo.furthestPossibleErrorMessage;
          if (!message) {
            message = "Unrecognised input";
            if (endInfo.furthestChar === '}') {
              message += ". Possibly missing opening '{'";
            } else if (endInfo.furthestChar === ')') {
              message += ". Possibly missing opening '('";
            } else if (endInfo.furthestReachedEnd) {
              message += ". Possibly missing something";
            }
          }
          error = new LessError({
            type: "Parse",
            message: message,
            index: endInfo.furthest,
            filename: fileInfo.filename
          }, imports);
        }
        var finish = function(e) {
          e = error || e || imports.error;
          if (e) {
            if (!(e instanceof LessError)) {
              e = new LessError(e, imports, fileInfo.filename);
            }
            return callback(e);
          } else {
            return callback(null, root);
          }
        };
        if (context.processImports !== false) {
          new visitors.ImportVisitor(imports, finish).run(root);
        } else {
          return finish();
        }
      },
      parsers: parsers = {
        primary: function() {
          var mixin = this.mixin,
              root = [],
              node;
          while (true) {
            while (true) {
              node = this.comment();
              if (!node) {
                break;
              }
              root.push(node);
            }
            if (parserInput.finished) {
              break;
            }
            if (parserInput.peek('}')) {
              break;
            }
            node = this.extendRule();
            if (node) {
              root = root.concat(node);
              continue;
            }
            node = mixin.definition() || this.rule() || this.ruleset() || mixin.call() || this.rulesetCall() || this.directive();
            if (node) {
              root.push(node);
            } else {
              var foundSemiColon = false;
              while (parserInput.$char(";")) {
                foundSemiColon = true;
              }
              if (!foundSemiColon) {
                break;
              }
            }
          }
          return root;
        },
        comment: function() {
          if (parserInput.commentStore.length) {
            var comment = parserInput.commentStore.shift();
            return new (tree.Comment)(comment.text, comment.isLineComment, comment.index, fileInfo);
          }
        },
        entities: {
          quoted: function() {
            var str,
                index = parserInput.i,
                isEscaped = false;
            parserInput.save();
            if (parserInput.$char("~")) {
              isEscaped = true;
            }
            str = parserInput.$quoted();
            if (!str) {
              parserInput.restore();
              return;
            }
            parserInput.forget();
            return new (tree.Quoted)(str.charAt(0), str.substr(1, str.length - 2), isEscaped, index, fileInfo);
          },
          keyword: function() {
            var k = parserInput.$char("%") || parserInput.$re(/^[_A-Za-z-][_A-Za-z0-9-]*/);
            if (k) {
              return tree.Color.fromKeyword(k) || new (tree.Keyword)(k);
            }
          },
          call: function() {
            var name,
                nameLC,
                args,
                alpha,
                index = parserInput.i;
            if (parserInput.peek(/^url\(/i)) {
              return;
            }
            parserInput.save();
            name = parserInput.$re(/^([\w-]+|%|progid:[\w\.]+)\(/);
            if (!name) {
              parserInput.forget();
              return;
            }
            name = name[1];
            nameLC = name.toLowerCase();
            if (nameLC === 'alpha') {
              alpha = parsers.alpha();
              if (alpha) {
                parserInput.forget();
                return alpha;
              }
            }
            args = this.arguments();
            if (!parserInput.$char(')')) {
              parserInput.restore("Could not parse call arguments or missing ')'");
              return;
            }
            parserInput.forget();
            return new (tree.Call)(name, args, index, fileInfo);
          },
          arguments: function() {
            var args = [],
                arg;
            while (true) {
              arg = this.assignment() || parsers.expression();
              if (!arg) {
                break;
              }
              args.push(arg);
              if (!parserInput.$char(',')) {
                break;
              }
            }
            return args;
          },
          literal: function() {
            return this.dimension() || this.color() || this.quoted() || this.unicodeDescriptor();
          },
          assignment: function() {
            var key,
                value;
            parserInput.save();
            key = parserInput.$re(/^\w+(?=\s?=)/i);
            if (!key) {
              parserInput.restore();
              return;
            }
            if (!parserInput.$char('=')) {
              parserInput.restore();
              return;
            }
            value = parsers.entity();
            if (value) {
              parserInput.forget();
              return new (tree.Assignment)(key, value);
            } else {
              parserInput.restore();
            }
          },
          url: function() {
            var value,
                index = parserInput.i;
            parserInput.autoCommentAbsorb = false;
            if (!parserInput.$str("url(")) {
              parserInput.autoCommentAbsorb = true;
              return;
            }
            value = this.quoted() || this.variable() || parserInput.$re(/^(?:(?:\\[\(\)'"])|[^\(\)'"])+/) || "";
            parserInput.autoCommentAbsorb = true;
            expectChar(')');
            return new (tree.URL)((value.value != null || value instanceof tree.Variable) ? value : new (tree.Anonymous)(value), index, fileInfo);
          },
          variable: function() {
            var name,
                index = parserInput.i;
            if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^@@?[\w-]+/))) {
              return new (tree.Variable)(name, index, fileInfo);
            }
          },
          variableCurly: function() {
            var curly,
                index = parserInput.i;
            if (parserInput.currentChar() === '@' && (curly = parserInput.$re(/^@\{([\w-]+)\}/))) {
              return new (tree.Variable)("@" + curly[1], index, fileInfo);
            }
          },
          color: function() {
            var rgb;
            if (parserInput.currentChar() === '#' && (rgb = parserInput.$re(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})/))) {
              var colorCandidateString = rgb.input.match(/^#([\w]+).*/);
              colorCandidateString = colorCandidateString[1];
              if (!colorCandidateString.match(/^[A-Fa-f0-9]+$/)) {
                error("Invalid HEX color code");
              }
              return new (tree.Color)(rgb[1], undefined, '#' + colorCandidateString);
            }
          },
          colorKeyword: function() {
            parserInput.save();
            var autoCommentAbsorb = parserInput.autoCommentAbsorb;
            parserInput.autoCommentAbsorb = false;
            var k = parserInput.$re(/^[A-Za-z]+/);
            parserInput.autoCommentAbsorb = autoCommentAbsorb;
            if (!k) {
              parserInput.forget();
              return;
            }
            parserInput.restore();
            var color = tree.Color.fromKeyword(k);
            if (color) {
              parserInput.$str(k);
              return color;
            }
          },
          dimension: function() {
            if (parserInput.peekNotNumeric()) {
              return;
            }
            var value = parserInput.$re(/^([+-]?\d*\.?\d+)(%|[a-z_]+)?/i);
            if (value) {
              return new (tree.Dimension)(value[1], value[2]);
            }
          },
          unicodeDescriptor: function() {
            var ud;
            ud = parserInput.$re(/^U\+[0-9a-fA-F?]+(\-[0-9a-fA-F?]+)?/);
            if (ud) {
              return new (tree.UnicodeDescriptor)(ud[0]);
            }
          },
          javascript: function() {
            var js,
                index = parserInput.i;
            parserInput.save();
            var escape = parserInput.$char("~");
            var jsQuote = parserInput.$char("`");
            if (!jsQuote) {
              parserInput.restore();
              return;
            }
            js = parserInput.$re(/^[^`]*`/);
            if (js) {
              parserInput.forget();
              return new (tree.JavaScript)(js.substr(0, js.length - 1), Boolean(escape), index, fileInfo);
            }
            parserInput.restore("invalid javascript definition");
          }
        },
        variable: function() {
          var name;
          if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^(@[\w-]+)\s*:/))) {
            return name[1];
          }
        },
        rulesetCall: function() {
          var name;
          if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^(@[\w-]+)\(\s*\)\s*;/))) {
            return new tree.RulesetCall(name[1]);
          }
        },
        extend: function(isRule) {
          var elements,
              e,
              index = parserInput.i,
              option,
              extendList,
              extend;
          if (!parserInput.$str(isRule ? "&:extend(" : ":extend(")) {
            return;
          }
          do {
            option = null;
            elements = null;
            while (!(option = parserInput.$re(/^(all)(?=\s*(\)|,))/))) {
              e = this.element();
              if (!e) {
                break;
              }
              if (elements) {
                elements.push(e);
              } else {
                elements = [e];
              }
            }
            option = option && option[1];
            if (!elements) {
              error("Missing target selector for :extend().");
            }
            extend = new (tree.Extend)(new (tree.Selector)(elements), option, index, fileInfo);
            if (extendList) {
              extendList.push(extend);
            } else {
              extendList = [extend];
            }
          } while (parserInput.$char(","));
          expect(/^\)/);
          if (isRule) {
            expect(/^;/);
          }
          return extendList;
        },
        extendRule: function() {
          return this.extend(true);
        },
        mixin: {
          call: function() {
            var s = parserInput.currentChar(),
                important = false,
                index = parserInput.i,
                elemIndex,
                elements,
                elem,
                e,
                c,
                args;
            if (s !== '.' && s !== '#') {
              return;
            }
            parserInput.save();
            while (true) {
              elemIndex = parserInput.i;
              e = parserInput.$re(/^[#.](?:[\w-]|\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/);
              if (!e) {
                break;
              }
              elem = new (tree.Element)(c, e, elemIndex, fileInfo);
              if (elements) {
                elements.push(elem);
              } else {
                elements = [elem];
              }
              c = parserInput.$char('>');
            }
            if (elements) {
              if (parserInput.$char('(')) {
                args = this.args(true).args;
                expectChar(')');
              }
              if (parsers.important()) {
                important = true;
              }
              if (parsers.end()) {
                parserInput.forget();
                return new (tree.mixin.Call)(elements, args, index, fileInfo, important);
              }
            }
            parserInput.restore();
          },
          args: function(isCall) {
            var entities = parsers.entities,
                returner = {
                  args: null,
                  variadic: false
                },
                expressions = [],
                argsSemiColon = [],
                argsComma = [],
                isSemiColonSeparated,
                expressionContainsNamed,
                name,
                nameLoop,
                value,
                arg,
                expand;
            parserInput.save();
            while (true) {
              if (isCall) {
                arg = parsers.detachedRuleset() || parsers.expression();
              } else {
                parserInput.commentStore.length = 0;
                if (parserInput.$str("...")) {
                  returner.variadic = true;
                  if (parserInput.$char(";") && !isSemiColonSeparated) {
                    isSemiColonSeparated = true;
                  }
                  (isSemiColonSeparated ? argsSemiColon : argsComma).push({variadic: true});
                  break;
                }
                arg = entities.variable() || entities.literal() || entities.keyword();
              }
              if (!arg) {
                break;
              }
              nameLoop = null;
              if (arg.throwAwayComments) {
                arg.throwAwayComments();
              }
              value = arg;
              var val = null;
              if (isCall) {
                if (arg.value && arg.value.length == 1) {
                  val = arg.value[0];
                }
              } else {
                val = arg;
              }
              if (val && val instanceof tree.Variable) {
                if (parserInput.$char(':')) {
                  if (expressions.length > 0) {
                    if (isSemiColonSeparated) {
                      error("Cannot mix ; and , as delimiter types");
                    }
                    expressionContainsNamed = true;
                  }
                  value = parsers.detachedRuleset() || parsers.expression();
                  if (!value) {
                    if (isCall) {
                      error("could not understand value for named argument");
                    } else {
                      parserInput.restore();
                      returner.args = [];
                      return returner;
                    }
                  }
                  nameLoop = (name = val.name);
                } else if (parserInput.$str("...")) {
                  if (!isCall) {
                    returner.variadic = true;
                    if (parserInput.$char(";") && !isSemiColonSeparated) {
                      isSemiColonSeparated = true;
                    }
                    (isSemiColonSeparated ? argsSemiColon : argsComma).push({
                      name: arg.name,
                      variadic: true
                    });
                    break;
                  } else {
                    expand = true;
                  }
                } else if (!isCall) {
                  name = nameLoop = val.name;
                  value = null;
                }
              }
              if (value) {
                expressions.push(value);
              }
              argsComma.push({
                name: nameLoop,
                value: value,
                expand: expand
              });
              if (parserInput.$char(',')) {
                continue;
              }
              if (parserInput.$char(';') || isSemiColonSeparated) {
                if (expressionContainsNamed) {
                  error("Cannot mix ; and , as delimiter types");
                }
                isSemiColonSeparated = true;
                if (expressions.length > 1) {
                  value = new (tree.Value)(expressions);
                }
                argsSemiColon.push({
                  name: name,
                  value: value,
                  expand: expand
                });
                name = null;
                expressions = [];
                expressionContainsNamed = false;
              }
            }
            parserInput.forget();
            returner.args = isSemiColonSeparated ? argsSemiColon : argsComma;
            return returner;
          },
          definition: function() {
            var name,
                params = [],
                match,
                ruleset,
                cond,
                variadic = false;
            if ((parserInput.currentChar() !== '.' && parserInput.currentChar() !== '#') || parserInput.peek(/^[^{]*\}/)) {
              return;
            }
            parserInput.save();
            match = parserInput.$re(/^([#.](?:[\w-]|\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+)\s*\(/);
            if (match) {
              name = match[1];
              var argInfo = this.args(false);
              params = argInfo.args;
              variadic = argInfo.variadic;
              if (!parserInput.$char(')')) {
                parserInput.restore("Missing closing ')'");
                return;
              }
              parserInput.commentStore.length = 0;
              if (parserInput.$str("when")) {
                cond = expect(parsers.conditions, 'expected condition');
              }
              ruleset = parsers.block();
              if (ruleset) {
                parserInput.forget();
                return new (tree.mixin.Definition)(name, params, ruleset, cond, variadic);
              } else {
                parserInput.restore();
              }
            } else {
              parserInput.forget();
            }
          }
        },
        entity: function() {
          var entities = this.entities;
          return this.comment() || entities.literal() || entities.variable() || entities.url() || entities.call() || entities.keyword() || entities.javascript();
        },
        end: function() {
          return parserInput.$char(';') || parserInput.peek('}');
        },
        alpha: function() {
          var value;
          if (!parserInput.$re(/^opacity=/i)) {
            return;
          }
          value = parserInput.$re(/^\d+/);
          if (!value) {
            value = expect(this.entities.variable, "Could not parse alpha");
          }
          expectChar(')');
          return new (tree.Alpha)(value);
        },
        element: function() {
          var e,
              c,
              v,
              index = parserInput.i;
          c = this.combinator();
          e = parserInput.$re(/^(?:\d+\.\d+|\d+)%/) || parserInput.$re(/^(?:[.#]?|:*)(?:[\w-]|[^\x00-\x9f]|\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/) || parserInput.$char('*') || parserInput.$char('&') || this.attribute() || parserInput.$re(/^\([^&()@]+\)/) || parserInput.$re(/^[\.#:](?=@)/) || this.entities.variableCurly();
          if (!e) {
            parserInput.save();
            if (parserInput.$char('(')) {
              if ((v = this.selector()) && parserInput.$char(')')) {
                e = new (tree.Paren)(v);
                parserInput.forget();
              } else {
                parserInput.restore("Missing closing ')'");
              }
            } else {
              parserInput.forget();
            }
          }
          if (e) {
            return new (tree.Element)(c, e, index, fileInfo);
          }
        },
        combinator: function() {
          var c = parserInput.currentChar();
          if (c === '/') {
            parserInput.save();
            var slashedCombinator = parserInput.$re(/^\/[a-z]+\//i);
            if (slashedCombinator) {
              parserInput.forget();
              return new (tree.Combinator)(slashedCombinator);
            }
            parserInput.restore();
          }
          if (c === '>' || c === '+' || c === '~' || c === '|' || c === '^') {
            parserInput.i++;
            if (c === '^' && parserInput.currentChar() === '^') {
              c = '^^';
              parserInput.i++;
            }
            while (parserInput.isWhitespace()) {
              parserInput.i++;
            }
            return new (tree.Combinator)(c);
          } else if (parserInput.isWhitespace(-1)) {
            return new (tree.Combinator)(" ");
          } else {
            return new (tree.Combinator)(null);
          }
        },
        lessSelector: function() {
          return this.selector(true);
        },
        selector: function(isLess) {
          var index = parserInput.i,
              elements,
              extendList,
              c,
              e,
              allExtends,
              when,
              condition;
          while ((isLess && (extendList = this.extend())) || (isLess && (when = parserInput.$str("when"))) || (e = this.element())) {
            if (when) {
              condition = expect(this.conditions, 'expected condition');
            } else if (condition) {
              error("CSS guard can only be used at the end of selector");
            } else if (extendList) {
              if (allExtends) {
                allExtends = allExtends.concat(extendList);
              } else {
                allExtends = extendList;
              }
            } else {
              if (allExtends) {
                error("Extend can only be used at the end of selector");
              }
              c = parserInput.currentChar();
              if (elements) {
                elements.push(e);
              } else {
                elements = [e];
              }
              e = null;
            }
            if (c === '{' || c === '}' || c === ';' || c === ',' || c === ')') {
              break;
            }
          }
          if (elements) {
            return new (tree.Selector)(elements, allExtends, condition, index, fileInfo);
          }
          if (allExtends) {
            error("Extend must be used to extend a selector, it cannot be used on its own");
          }
        },
        attribute: function() {
          if (!parserInput.$char('[')) {
            return;
          }
          var entities = this.entities,
              key,
              val,
              op;
          if (!(key = entities.variableCurly())) {
            key = expect(/^(?:[_A-Za-z0-9-\*]*\|)?(?:[_A-Za-z0-9-]|\\.)+/);
          }
          op = parserInput.$re(/^[|~*$^]?=/);
          if (op) {
            val = entities.quoted() || parserInput.$re(/^[0-9]+%/) || parserInput.$re(/^[\w-]+/) || entities.variableCurly();
          }
          expectChar(']');
          return new (tree.Attribute)(key, op, val);
        },
        block: function() {
          var content;
          if (parserInput.$char('{') && (content = this.primary()) && parserInput.$char('}')) {
            return content;
          }
        },
        blockRuleset: function() {
          var block = this.block();
          if (block) {
            block = new tree.Ruleset(null, block);
          }
          return block;
        },
        detachedRuleset: function() {
          var blockRuleset = this.blockRuleset();
          if (blockRuleset) {
            return new tree.DetachedRuleset(blockRuleset);
          }
        },
        ruleset: function() {
          var selectors,
              s,
              rules,
              debugInfo;
          parserInput.save();
          if (context.dumpLineNumbers) {
            debugInfo = getDebugInfo(parserInput.i);
          }
          while (true) {
            s = this.lessSelector();
            if (!s) {
              break;
            }
            if (selectors) {
              selectors.push(s);
            } else {
              selectors = [s];
            }
            parserInput.commentStore.length = 0;
            if (s.condition && selectors.length > 1) {
              error("Guards are only currently allowed on a single selector.");
            }
            if (!parserInput.$char(',')) {
              break;
            }
            if (s.condition) {
              error("Guards are only currently allowed on a single selector.");
            }
            parserInput.commentStore.length = 0;
          }
          if (selectors && (rules = this.block())) {
            parserInput.forget();
            var ruleset = new (tree.Ruleset)(selectors, rules, context.strictImports);
            if (context.dumpLineNumbers) {
              ruleset.debugInfo = debugInfo;
            }
            return ruleset;
          } else {
            parserInput.restore();
          }
        },
        rule: function(tryAnonymous) {
          var name,
              value,
              startOfRule = parserInput.i,
              c = parserInput.currentChar(),
              important,
              merge,
              isVariable;
          if (c === '.' || c === '#' || c === '&' || c === ':') {
            return;
          }
          parserInput.save();
          name = this.variable() || this.ruleProperty();
          if (name) {
            isVariable = typeof name === "string";
            if (isVariable) {
              value = this.detachedRuleset();
            }
            parserInput.commentStore.length = 0;
            if (!value) {
              merge = !isVariable && name.length > 1 && name.pop().value;
              var tryValueFirst = !tryAnonymous && (context.compress || isVariable);
              if (tryValueFirst) {
                value = this.value();
              }
              if (!value) {
                value = this.anonymousValue();
                if (value) {
                  parserInput.forget();
                  return new (tree.Rule)(name, value, false, merge, startOfRule, fileInfo);
                }
              }
              if (!tryValueFirst && !value) {
                value = this.value();
              }
              important = this.important();
            }
            if (value && this.end()) {
              parserInput.forget();
              return new (tree.Rule)(name, value, important, merge, startOfRule, fileInfo);
            } else {
              parserInput.restore();
              if (value && !tryAnonymous) {
                return this.rule(true);
              }
            }
          } else {
            parserInput.forget();
          }
        },
        anonymousValue: function() {
          var match = parserInput.$re(/^([^@+\/'"*`(;{}-]*);/);
          if (match) {
            return new (tree.Anonymous)(match[1]);
          }
        },
        "import": function() {
          var path,
              features,
              index = parserInput.i;
          var dir = parserInput.$re(/^@import?\s+/);
          if (dir) {
            var options = (dir ? this.importOptions() : null) || {};
            if ((path = this.entities.quoted() || this.entities.url())) {
              features = this.mediaFeatures();
              if (!parserInput.$char(';')) {
                parserInput.i = index;
                error("missing semi-colon or unrecognised media features on import");
              }
              features = features && new (tree.Value)(features);
              return new (tree.Import)(path, features, options, index, fileInfo);
            } else {
              parserInput.i = index;
              error("malformed import statement");
            }
          }
        },
        importOptions: function() {
          var o,
              options = {},
              optionName,
              value;
          if (!parserInput.$char('(')) {
            return null;
          }
          do {
            o = this.importOption();
            if (o) {
              optionName = o;
              value = true;
              switch (optionName) {
                case "css":
                  optionName = "less";
                  value = false;
                  break;
                case "once":
                  optionName = "multiple";
                  value = false;
                  break;
              }
              options[optionName] = value;
              if (!parserInput.$char(',')) {
                break;
              }
            }
          } while (o);
          expectChar(')');
          return options;
        },
        importOption: function() {
          var opt = parserInput.$re(/^(less|css|multiple|once|inline|reference|optional)/);
          if (opt) {
            return opt[1];
          }
        },
        mediaFeature: function() {
          var entities = this.entities,
              nodes = [],
              e,
              p;
          parserInput.save();
          do {
            e = entities.keyword() || entities.variable();
            if (e) {
              nodes.push(e);
            } else if (parserInput.$char('(')) {
              p = this.property();
              e = this.value();
              if (parserInput.$char(')')) {
                if (p && e) {
                  nodes.push(new (tree.Paren)(new (tree.Rule)(p, e, null, null, parserInput.i, fileInfo, true)));
                } else if (e) {
                  nodes.push(new (tree.Paren)(e));
                } else {
                  error("badly formed media feature definition");
                }
              } else {
                error("Missing closing ')'", "Parse");
              }
            }
          } while (e);
          parserInput.forget();
          if (nodes.length > 0) {
            return new (tree.Expression)(nodes);
          }
        },
        mediaFeatures: function() {
          var entities = this.entities,
              features = [],
              e;
          do {
            e = this.mediaFeature();
            if (e) {
              features.push(e);
              if (!parserInput.$char(',')) {
                break;
              }
            } else {
              e = entities.variable();
              if (e) {
                features.push(e);
                if (!parserInput.$char(',')) {
                  break;
                }
              }
            }
          } while (e);
          return features.length > 0 ? features : null;
        },
        media: function() {
          var features,
              rules,
              media,
              debugInfo;
          if (context.dumpLineNumbers) {
            debugInfo = getDebugInfo(parserInput.i);
          }
          parserInput.save();
          if (parserInput.$str("@media")) {
            features = this.mediaFeatures();
            rules = this.block();
            if (!rules) {
              error("media definitions require block statements after any features");
            }
            parserInput.forget();
            media = new (tree.Media)(rules, features, parserInput.i, fileInfo);
            if (context.dumpLineNumbers) {
              media.debugInfo = debugInfo;
            }
            return media;
          }
          parserInput.restore();
        },
        plugin: function() {
          var path,
              index = parserInput.i,
              dir = parserInput.$re(/^@plugin?\s+/);
          if (dir) {
            var options = {plugin: true};
            if ((path = this.entities.quoted() || this.entities.url())) {
              if (!parserInput.$char(';')) {
                parserInput.i = index;
                error("missing semi-colon on plugin");
              }
              return new (tree.Import)(path, null, options, index, fileInfo);
            } else {
              parserInput.i = index;
              error("malformed plugin statement");
            }
          }
        },
        directive: function() {
          var index = parserInput.i,
              name,
              value,
              rules,
              nonVendorSpecificName,
              hasIdentifier,
              hasExpression,
              hasUnknown,
              hasBlock = true,
              isRooted = true;
          if (parserInput.currentChar() !== '@') {
            return;
          }
          value = this['import']() || this.plugin() || this.media();
          if (value) {
            return value;
          }
          parserInput.save();
          name = parserInput.$re(/^@[a-z-]+/);
          if (!name) {
            return;
          }
          nonVendorSpecificName = name;
          if (name.charAt(1) == '-' && name.indexOf('-', 2) > 0) {
            nonVendorSpecificName = "@" + name.slice(name.indexOf('-', 2) + 1);
          }
          switch (nonVendorSpecificName) {
            case "@charset":
              hasIdentifier = true;
              hasBlock = false;
              break;
            case "@namespace":
              hasExpression = true;
              hasBlock = false;
              break;
            case "@keyframes":
            case "@counter-style":
              hasIdentifier = true;
              break;
            case "@document":
            case "@supports":
              hasUnknown = true;
              isRooted = false;
              break;
            default:
              hasUnknown = true;
              break;
          }
          parserInput.commentStore.length = 0;
          if (hasIdentifier) {
            value = this.entity();
            if (!value) {
              error("expected " + name + " identifier");
            }
          } else if (hasExpression) {
            value = this.expression();
            if (!value) {
              error("expected " + name + " expression");
            }
          } else if (hasUnknown) {
            value = (parserInput.$re(/^[^{;]+/) || '').trim();
            hasBlock = (parserInput.currentChar() == '{');
            if (value) {
              value = new (tree.Anonymous)(value);
            }
          }
          if (hasBlock) {
            rules = this.blockRuleset();
          }
          if (rules || (!hasBlock && value && parserInput.$char(';'))) {
            parserInput.forget();
            return new (tree.Directive)(name, value, rules, index, fileInfo, context.dumpLineNumbers ? getDebugInfo(index) : null, isRooted);
          }
          parserInput.restore("directive options not recognised");
        },
        value: function() {
          var e,
              expressions = [];
          do {
            e = this.expression();
            if (e) {
              expressions.push(e);
              if (!parserInput.$char(',')) {
                break;
              }
            }
          } while (e);
          if (expressions.length > 0) {
            return new (tree.Value)(expressions);
          }
        },
        important: function() {
          if (parserInput.currentChar() === '!') {
            return parserInput.$re(/^! *important/);
          }
        },
        sub: function() {
          var a,
              e;
          parserInput.save();
          if (parserInput.$char('(')) {
            a = this.addition();
            if (a && parserInput.$char(')')) {
              parserInput.forget();
              e = new (tree.Expression)([a]);
              e.parens = true;
              return e;
            }
            parserInput.restore("Expected ')'");
            return;
          }
          parserInput.restore();
        },
        multiplication: function() {
          var m,
              a,
              op,
              operation,
              isSpaced;
          m = this.operand();
          if (m) {
            isSpaced = parserInput.isWhitespace(-1);
            while (true) {
              if (parserInput.peek(/^\/[*\/]/)) {
                break;
              }
              parserInput.save();
              op = parserInput.$char('/') || parserInput.$char('*');
              if (!op) {
                parserInput.forget();
                break;
              }
              a = this.operand();
              if (!a) {
                parserInput.restore();
                break;
              }
              parserInput.forget();
              m.parensInOp = true;
              a.parensInOp = true;
              operation = new (tree.Operation)(op, [operation || m, a], isSpaced);
              isSpaced = parserInput.isWhitespace(-1);
            }
            return operation || m;
          }
        },
        addition: function() {
          var m,
              a,
              op,
              operation,
              isSpaced;
          m = this.multiplication();
          if (m) {
            isSpaced = parserInput.isWhitespace(-1);
            while (true) {
              op = parserInput.$re(/^[-+]\s+/) || (!isSpaced && (parserInput.$char('+') || parserInput.$char('-')));
              if (!op) {
                break;
              }
              a = this.multiplication();
              if (!a) {
                break;
              }
              m.parensInOp = true;
              a.parensInOp = true;
              operation = new (tree.Operation)(op, [operation || m, a], isSpaced);
              isSpaced = parserInput.isWhitespace(-1);
            }
            return operation || m;
          }
        },
        conditions: function() {
          var a,
              b,
              index = parserInput.i,
              condition;
          a = this.condition();
          if (a) {
            while (true) {
              if (!parserInput.peek(/^,\s*(not\s*)?\(/) || !parserInput.$char(',')) {
                break;
              }
              b = this.condition();
              if (!b) {
                break;
              }
              condition = new (tree.Condition)('or', condition || a, b, index);
            }
            return condition || a;
          }
        },
        condition: function() {
          var result,
              logical,
              next;
          function or() {
            return parserInput.$str("or");
          }
          result = this.conditionAnd(this);
          if (!result) {
            return;
          }
          logical = or();
          if (logical) {
            next = this.condition();
            if (next) {
              result = new (tree.Condition)(logical, result, next);
            } else {
              return;
            }
          }
          return result;
        },
        conditionAnd: function() {
          var result,
              logical,
              next;
          function insideCondition(me) {
            return me.negatedCondition() || me.parenthesisCondition();
          }
          function and() {
            return parserInput.$str("and");
          }
          result = insideCondition(this);
          if (!result) {
            return;
          }
          logical = and();
          if (logical) {
            next = this.conditionAnd();
            if (next) {
              result = new (tree.Condition)(logical, result, next);
            } else {
              return;
            }
          }
          return result;
        },
        negatedCondition: function() {
          if (parserInput.$str("not")) {
            var result = this.parenthesisCondition();
            if (result) {
              result.negate = !result.negate;
            }
            return result;
          }
        },
        parenthesisCondition: function() {
          function tryConditionFollowedByParenthesis(me) {
            var body;
            parserInput.save();
            body = me.condition();
            if (!body) {
              parserInput.restore();
              return;
            }
            if (!parserInput.$char(')')) {
              parserInput.restore();
              return;
            }
            parserInput.forget();
            return body;
          }
          var body;
          parserInput.save();
          if (!parserInput.$str("(")) {
            parserInput.restore();
            return;
          }
          body = tryConditionFollowedByParenthesis(this);
          if (body) {
            parserInput.forget();
            return body;
          }
          body = this.atomicCondition();
          if (!body) {
            parserInput.restore();
            return;
          }
          if (!parserInput.$char(')')) {
            parserInput.restore("expected ')' got '" + parserInput.currentChar() + "'");
            return;
          }
          parserInput.forget();
          return body;
        },
        atomicCondition: function() {
          var entities = this.entities,
              index = parserInput.i,
              a,
              b,
              c,
              op;
          a = this.addition() || entities.keyword() || entities.quoted();
          if (a) {
            if (parserInput.$char('>')) {
              if (parserInput.$char('=')) {
                op = ">=";
              } else {
                op = '>';
              }
            } else if (parserInput.$char('<')) {
              if (parserInput.$char('=')) {
                op = "<=";
              } else {
                op = '<';
              }
            } else if (parserInput.$char('=')) {
              if (parserInput.$char('>')) {
                op = "=>";
              } else if (parserInput.$char('<')) {
                op = '=<';
              } else {
                op = '=';
              }
            }
            if (op) {
              b = this.addition() || entities.keyword() || entities.quoted();
              if (b) {
                c = new (tree.Condition)(op, a, b, index, false);
              } else {
                error('expected expression');
              }
            } else {
              c = new (tree.Condition)('=', a, new (tree.Keyword)('true'), index, false);
            }
            return c;
          }
        },
        operand: function() {
          var entities = this.entities,
              negate;
          if (parserInput.peek(/^-[@\(]/)) {
            negate = parserInput.$char('-');
          }
          var o = this.sub() || entities.dimension() || entities.color() || entities.variable() || entities.call() || entities.colorKeyword();
          if (negate) {
            o.parensInOp = true;
            o = new (tree.Negative)(o);
          }
          return o;
        },
        expression: function() {
          var entities = [],
              e,
              delim;
          do {
            e = this.comment();
            if (e) {
              entities.push(e);
              continue;
            }
            e = this.addition() || this.entity();
            if (e) {
              entities.push(e);
              if (!parserInput.peek(/^\/[\/*]/)) {
                delim = parserInput.$char('/');
                if (delim) {
                  entities.push(new (tree.Anonymous)(delim));
                }
              }
            }
          } while (e);
          if (entities.length > 0) {
            return new (tree.Expression)(entities);
          }
        },
        property: function() {
          var name = parserInput.$re(/^(\*?-?[_a-zA-Z0-9-]+)\s*:/);
          if (name) {
            return name[1];
          }
        },
        ruleProperty: function() {
          var name = [],
              index = [],
              s,
              k;
          parserInput.save();
          var simpleProperty = parserInput.$re(/^([_a-zA-Z0-9-]+)\s*:/);
          if (simpleProperty) {
            name = [new (tree.Keyword)(simpleProperty[1])];
            parserInput.forget();
            return name;
          }
          function match(re) {
            var i = parserInput.i,
                chunk = parserInput.$re(re);
            if (chunk) {
              index.push(i);
              return name.push(chunk[1]);
            }
          }
          match(/^(\*?)/);
          while (true) {
            if (!match(/^((?:[\w-]+)|(?:@\{[\w-]+\}))/)) {
              break;
            }
          }
          if ((name.length > 1) && match(/^((?:\+_|\+)?)\s*:/)) {
            parserInput.forget();
            if (name[0] === '') {
              name.shift();
              index.shift();
            }
            for (k = 0; k < name.length; k++) {
              s = name[k];
              name[k] = (s.charAt(0) !== '@') ? new (tree.Keyword)(s) : new (tree.Variable)('@' + s.slice(2, -1), index[k], fileInfo);
            }
            return name;
          }
          parserInput.restore();
        }
      }
    };
  };
  Parser.serializeVars = function(vars) {
    var s = '';
    for (var name in vars) {
      if (Object.hasOwnProperty.call(vars, name)) {
        var value = vars[name];
        s += ((name[0] === '@') ? '' : '@') + name + ': ' + value + ((String(value).slice(-1) === ';') ? '' : ';');
      }
    }
    return s;
  };
  module.exports = Parser;
  return module.exports;
});

$__System.registerDynamic("npm:promise@7.1.1/lib/done.js", ["npm:promise@7.1.1/lib/core.js"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Promise = $__require('npm:promise@7.1.1/lib/core.js');
  module.exports = Promise;
  Promise.prototype.done = function(onFulfilled, onRejected) {
    var self = arguments.length ? this.then.apply(this, arguments) : this;
    self.then(null, function(err) {
      setTimeout(function() {
        throw err;
      }, 0);
    });
  };
  return module.exports;
});

$__System.registerDynamic("npm:promise@7.1.1/lib/finally.js", ["npm:promise@7.1.1/lib/core.js"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Promise = $__require('npm:promise@7.1.1/lib/core.js');
  module.exports = Promise;
  Promise.prototype['finally'] = function(f) {
    return this.then(function(value) {
      return Promise.resolve(f()).then(function() {
        return value;
      });
    }, function(err) {
      return Promise.resolve(f()).then(function() {
        throw err;
      });
    });
  };
  return module.exports;
});

$__System.registerDynamic("npm:promise@7.1.1/lib/es6-extensions.js", ["npm:promise@7.1.1/lib/core.js"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Promise = $__require('npm:promise@7.1.1/lib/core.js');
  module.exports = Promise;
  var TRUE = valuePromise(true);
  var FALSE = valuePromise(false);
  var NULL = valuePromise(null);
  var UNDEFINED = valuePromise(undefined);
  var ZERO = valuePromise(0);
  var EMPTYSTRING = valuePromise('');
  function valuePromise(value) {
    var p = new Promise(Promise._61);
    p._81 = 1;
    p._65 = value;
    return p;
  }
  Promise.resolve = function(value) {
    if (value instanceof Promise)
      return value;
    if (value === null)
      return NULL;
    if (value === undefined)
      return UNDEFINED;
    if (value === true)
      return TRUE;
    if (value === false)
      return FALSE;
    if (value === 0)
      return ZERO;
    if (value === '')
      return EMPTYSTRING;
    if (typeof value === 'object' || typeof value === 'function') {
      try {
        var then = value.then;
        if (typeof then === 'function') {
          return new Promise(then.bind(value));
        }
      } catch (ex) {
        return new Promise(function(resolve, reject) {
          reject(ex);
        });
      }
    }
    return valuePromise(value);
  };
  Promise.all = function(arr) {
    var args = Array.prototype.slice.call(arr);
    return new Promise(function(resolve, reject) {
      if (args.length === 0)
        return resolve([]);
      var remaining = args.length;
      function res(i, val) {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          if (val instanceof Promise && val.then === Promise.prototype.then) {
            while (val._81 === 3) {
              val = val._65;
            }
            if (val._81 === 1)
              return res(i, val._65);
            if (val._81 === 2)
              reject(val._65);
            val.then(function(val) {
              res(i, val);
            }, reject);
            return;
          } else {
            var then = val.then;
            if (typeof then === 'function') {
              var p = new Promise(then.bind(val));
              p.then(function(val) {
                res(i, val);
              }, reject);
              return;
            }
          }
        }
        args[i] = val;
        if (--remaining === 0) {
          resolve(args);
        }
      }
      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };
  Promise.reject = function(value) {
    return new Promise(function(resolve, reject) {
      reject(value);
    });
  };
  Promise.race = function(values) {
    return new Promise(function(resolve, reject) {
      values.forEach(function(value) {
        Promise.resolve(value).then(resolve, reject);
      });
    });
  };
  Promise.prototype['catch'] = function(onRejected) {
    return this.then(null, onRejected);
  };
  return module.exports;
});

$__System.registerDynamic("npm:asap@2.0.3/asap.js", ["npm:asap@2.0.3/raw.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var rawAsap = $__require('npm:asap@2.0.3/raw.js');
  var freeTasks = [];
  module.exports = asap;
  function asap(task) {
    var rawTask;
    if (freeTasks.length) {
      rawTask = freeTasks.pop();
    } else {
      rawTask = new RawTask();
    }
    rawTask.task = task;
    rawTask.domain = process.domain;
    rawAsap(rawTask);
  }
  function RawTask() {
    this.task = null;
    this.domain = null;
  }
  RawTask.prototype.call = function() {
    if (this.domain) {
      this.domain.enter();
    }
    var threw = true;
    try {
      this.task.call();
      threw = false;
      if (this.domain) {
        this.domain.exit();
      }
    } finally {
      if (threw) {
        rawAsap.requestFlush();
      }
      this.task = null;
      this.domain = null;
      freeTasks.push(this);
    }
  };
  return module.exports;
});

$__System.registerDynamic("npm:promise@7.1.1/lib/node-extensions.js", ["npm:promise@7.1.1/lib/core.js", "npm:asap@2.0.3/asap.js"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Promise = $__require('npm:promise@7.1.1/lib/core.js');
  var asap = $__require('npm:asap@2.0.3/asap.js');
  module.exports = Promise;
  Promise.denodeify = function(fn, argumentCount) {
    if (typeof argumentCount === 'number' && argumentCount !== Infinity) {
      return denodeifyWithCount(fn, argumentCount);
    } else {
      return denodeifyWithoutCount(fn);
    }
  };
  var callbackFn = ('function (err, res) {' + 'if (err) { rj(err); } else { rs(res); }' + '}');
  function denodeifyWithCount(fn, argumentCount) {
    var args = [];
    for (var i = 0; i < argumentCount; i++) {
      args.push('a' + i);
    }
    var body = ['return function (' + args.join(',') + ') {', 'var self = this;', 'return new Promise(function (rs, rj) {', 'var res = fn.call(', ['self'].concat(args).concat([callbackFn]).join(','), ');', 'if (res &&', '(typeof res === "object" || typeof res === "function") &&', 'typeof res.then === "function"', ') {rs(res);}', '});', '};'].join('');
    return Function(['Promise', 'fn'], body)(Promise, fn);
  }
  function denodeifyWithoutCount(fn) {
    var fnLength = Math.max(fn.length - 1, 3);
    var args = [];
    for (var i = 0; i < fnLength; i++) {
      args.push('a' + i);
    }
    var body = ['return function (' + args.join(',') + ') {', 'var self = this;', 'var args;', 'var argLength = arguments.length;', 'if (arguments.length > ' + fnLength + ') {', 'args = new Array(arguments.length + 1);', 'for (var i = 0; i < arguments.length; i++) {', 'args[i] = arguments[i];', '}', '}', 'return new Promise(function (rs, rj) {', 'var cb = ' + callbackFn + ';', 'var res;', 'switch (argLength) {', args.concat(['extra']).map(function(_, index) {
      return ('case ' + (index) + ':' + 'res = fn.call(' + ['self'].concat(args.slice(0, index)).concat('cb').join(',') + ');' + 'break;');
    }).join(''), 'default:', 'args[argLength] = cb;', 'res = fn.apply(self, args);', '}', 'if (res &&', '(typeof res === "object" || typeof res === "function") &&', 'typeof res.then === "function"', ') {rs(res);}', '});', '};'].join('');
    return Function(['Promise', 'fn'], body)(Promise, fn);
  }
  Promise.nodeify = function(fn) {
    return function() {
      var args = Array.prototype.slice.call(arguments);
      var callback = typeof args[args.length - 1] === 'function' ? args.pop() : null;
      var ctx = this;
      try {
        return fn.apply(this, arguments).nodeify(callback, ctx);
      } catch (ex) {
        if (callback === null || typeof callback == 'undefined') {
          return new Promise(function(resolve, reject) {
            reject(ex);
          });
        } else {
          asap(function() {
            callback.call(ctx, ex);
          });
        }
      }
    };
  };
  Promise.prototype.nodeify = function(callback, ctx) {
    if (typeof callback != 'function')
      return this;
    this.then(function(value) {
      asap(function() {
        callback.call(ctx, null, value);
      });
    }, function(err) {
      asap(function() {
        callback.call(ctx, err);
      });
    });
  };
  return module.exports;
});

$__System.registerDynamic("npm:asap@2.0.3/raw.js", ["@node/domain", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var domain;
  var hasSetImmediate = typeof setImmediate === "function";
  module.exports = rawAsap;
  function rawAsap(task) {
    if (!queue.length) {
      requestFlush();
      flushing = true;
    }
    queue[queue.length] = task;
  }
  var queue = [];
  var flushing = false;
  var index = 0;
  var capacity = 1024;
  function flush() {
    while (index < queue.length) {
      var currentIndex = index;
      index = index + 1;
      queue[currentIndex].call();
      if (index > capacity) {
        for (var scan = 0,
            newLength = queue.length - index; scan < newLength; scan++) {
          queue[scan] = queue[scan + index];
        }
        queue.length -= index;
        index = 0;
      }
    }
    queue.length = 0;
    index = 0;
    flushing = false;
  }
  rawAsap.requestFlush = requestFlush;
  function requestFlush() {
    var parentDomain = process.domain;
    if (parentDomain) {
      if (!domain) {
        domain = $__require('@node/domain');
      }
      domain.active = process.domain = null;
    }
    if (flushing && hasSetImmediate) {
      setImmediate(flush);
    } else {
      process.nextTick(flush);
    }
    if (parentDomain) {
      domain.active = process.domain = parentDomain;
    }
  }
  return module.exports;
});

$__System.registerDynamic("npm:promise@7.1.1/lib/core.js", ["npm:asap@2.0.3/raw.js"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var asap = $__require('npm:asap@2.0.3/raw.js');
  function noop() {}
  var LAST_ERROR = null;
  var IS_ERROR = {};
  function getThen(obj) {
    try {
      return obj.then;
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }
  function tryCallOne(fn, a) {
    try {
      return fn(a);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }
  function tryCallTwo(fn, a, b) {
    try {
      fn(a, b);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }
  module.exports = Promise;
  function Promise(fn) {
    if (typeof this !== 'object') {
      throw new TypeError('Promises must be constructed via new');
    }
    if (typeof fn !== 'function') {
      throw new TypeError('not a function');
    }
    this._45 = 0;
    this._81 = 0;
    this._65 = null;
    this._54 = null;
    if (fn === noop)
      return;
    doResolve(fn, this);
  }
  Promise._10 = null;
  Promise._97 = null;
  Promise._61 = noop;
  Promise.prototype.then = function(onFulfilled, onRejected) {
    if (this.constructor !== Promise) {
      return safeThen(this, onFulfilled, onRejected);
    }
    var res = new Promise(noop);
    handle(this, new Handler(onFulfilled, onRejected, res));
    return res;
  };
  function safeThen(self, onFulfilled, onRejected) {
    return new self.constructor(function(resolve, reject) {
      var res = new Promise(noop);
      res.then(resolve, reject);
      handle(self, new Handler(onFulfilled, onRejected, res));
    });
  }
  ;
  function handle(self, deferred) {
    while (self._81 === 3) {
      self = self._65;
    }
    if (Promise._10) {
      Promise._10(self);
    }
    if (self._81 === 0) {
      if (self._45 === 0) {
        self._45 = 1;
        self._54 = deferred;
        return;
      }
      if (self._45 === 1) {
        self._45 = 2;
        self._54 = [self._54, deferred];
        return;
      }
      self._54.push(deferred);
      return;
    }
    handleResolved(self, deferred);
  }
  function handleResolved(self, deferred) {
    asap(function() {
      var cb = self._81 === 1 ? deferred.onFulfilled : deferred.onRejected;
      if (cb === null) {
        if (self._81 === 1) {
          resolve(deferred.promise, self._65);
        } else {
          reject(deferred.promise, self._65);
        }
        return;
      }
      var ret = tryCallOne(cb, self._65);
      if (ret === IS_ERROR) {
        reject(deferred.promise, LAST_ERROR);
      } else {
        resolve(deferred.promise, ret);
      }
    });
  }
  function resolve(self, newValue) {
    if (newValue === self) {
      return reject(self, new TypeError('A promise cannot be resolved with itself.'));
    }
    if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
      var then = getThen(newValue);
      if (then === IS_ERROR) {
        return reject(self, LAST_ERROR);
      }
      if (then === self.then && newValue instanceof Promise) {
        self._81 = 3;
        self._65 = newValue;
        finale(self);
        return;
      } else if (typeof then === 'function') {
        doResolve(then.bind(newValue), self);
        return;
      }
    }
    self._81 = 1;
    self._65 = newValue;
    finale(self);
  }
  function reject(self, newValue) {
    self._81 = 2;
    self._65 = newValue;
    if (Promise._97) {
      Promise._97(self, newValue);
    }
    finale(self);
  }
  function finale(self) {
    if (self._45 === 1) {
      handle(self, self._54);
      self._54 = null;
    }
    if (self._45 === 2) {
      for (var i = 0; i < self._54.length; i++) {
        handle(self, self._54[i]);
      }
      self._54 = null;
    }
  }
  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }
  function doResolve(fn, promise) {
    var done = false;
    var res = tryCallTwo(fn, function(value) {
      if (done)
        return;
      done = true;
      resolve(promise, value);
    }, function(reason) {
      if (done)
        return;
      done = true;
      reject(promise, reason);
    });
    if (!done && res === IS_ERROR) {
      done = true;
      reject(promise, LAST_ERROR);
    }
  }
  return module.exports;
});

$__System.registerDynamic("npm:promise@7.1.1/lib/synchronous.js", ["npm:promise@7.1.1/lib/core.js"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var Promise = $__require('npm:promise@7.1.1/lib/core.js');
  module.exports = Promise;
  Promise.enableSynchronous = function() {
    Promise.prototype.isPending = function() {
      return this.getState() == 0;
    };
    Promise.prototype.isFulfilled = function() {
      return this.getState() == 1;
    };
    Promise.prototype.isRejected = function() {
      return this.getState() == 2;
    };
    Promise.prototype.getValue = function() {
      if (this._81 === 3) {
        return this._65.getValue();
      }
      if (!this.isFulfilled()) {
        throw new Error('Cannot get a value of an unfulfilled promise.');
      }
      return this._65;
    };
    Promise.prototype.getReason = function() {
      if (this._81 === 3) {
        return this._65.getReason();
      }
      if (!this.isRejected()) {
        throw new Error('Cannot get a rejection reason of a non-rejected promise.');
      }
      return this._65;
    };
    Promise.prototype.getState = function() {
      if (this._81 === 3) {
        return this._65.getState();
      }
      if (this._81 === -1 || this._81 === -2) {
        return 0;
      }
      return this._81;
    };
  };
  Promise.disableSynchronous = function() {
    Promise.prototype.isPending = undefined;
    Promise.prototype.isFulfilled = undefined;
    Promise.prototype.isRejected = undefined;
    Promise.prototype.getValue = undefined;
    Promise.prototype.getReason = undefined;
    Promise.prototype.getState = undefined;
  };
  return module.exports;
});

$__System.registerDynamic("npm:promise@7.1.1/lib/index.js", ["npm:promise@7.1.1/lib/core.js", "npm:promise@7.1.1/lib/done.js", "npm:promise@7.1.1/lib/finally.js", "npm:promise@7.1.1/lib/es6-extensions.js", "npm:promise@7.1.1/lib/node-extensions.js", "npm:promise@7.1.1/lib/synchronous.js"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('npm:promise@7.1.1/lib/core.js');
  $__require('npm:promise@7.1.1/lib/done.js');
  $__require('npm:promise@7.1.1/lib/finally.js');
  $__require('npm:promise@7.1.1/lib/es6-extensions.js');
  $__require('npm:promise@7.1.1/lib/node-extensions.js');
  $__require('npm:promise@7.1.1/lib/synchronous.js');
  return module.exports;
});

$__System.registerDynamic("npm:promise@7.1.1/index.js", ["npm:promise@7.1.1/lib/index.js"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('npm:promise@7.1.1/lib/index.js');
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/parse.js", ["npm:less@2.6.1/lib/less/contexts.js", "npm:less@2.6.1/lib/less/parser/parser.js", "npm:less@2.6.1/lib/less/plugin-manager.js", "npm:promise@7.1.1/index.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var PromiseConstructor,
      contexts = $__require('npm:less@2.6.1/lib/less/contexts.js'),
      Parser = $__require('npm:less@2.6.1/lib/less/parser/parser.js'),
      PluginManager = $__require('npm:less@2.6.1/lib/less/plugin-manager.js');
  module.exports = function(environment, ParseTree, ImportManager) {
    var parse = function(input, options, callback) {
      options = options || {};
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      if (!callback) {
        if (!PromiseConstructor) {
          PromiseConstructor = typeof Promise === 'undefined' ? $__require('npm:promise@7.1.1/index.js') : Promise;
        }
        var self = this;
        return new PromiseConstructor(function(resolve, reject) {
          parse.call(self, input, options, function(err, output) {
            if (err) {
              reject(err);
            } else {
              resolve(output);
            }
          });
        });
      } else {
        var context,
            rootFileInfo,
            pluginManager = new PluginManager(this);
        pluginManager.addPlugins(options.plugins);
        options.pluginManager = pluginManager;
        context = new contexts.Parse(options);
        if (options.rootFileInfo) {
          rootFileInfo = options.rootFileInfo;
        } else {
          var filename = options.filename || "input";
          var entryPath = filename.replace(/[^\/\\]*$/, "");
          rootFileInfo = {
            filename: filename,
            relativeUrls: context.relativeUrls,
            rootpath: context.rootpath || "",
            currentDirectory: entryPath,
            entryPath: entryPath,
            rootFilename: filename
          };
          if (rootFileInfo.rootpath && rootFileInfo.rootpath.slice(-1) !== "/") {
            rootFileInfo.rootpath += "/";
          }
        }
        var imports = new ImportManager(context, rootFileInfo);
        new Parser(context, imports, rootFileInfo).parse(input, function(e, root) {
          if (e) {
            return callback(e);
          }
          callback(null, root, imports, options);
        }, options);
      }
    };
    return parse;
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/less-error.js", ["npm:less@2.6.1/lib/less/utils.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var utils = $__require('npm:less@2.6.1/lib/less/utils.js');
  var LessError = module.exports = function LessError(e, importManager, currentFilename) {
    Error.call(this);
    var filename = e.filename || currentFilename;
    if (importManager && filename) {
      var input = importManager.contents[filename],
          loc = utils.getLocation(e.index, input),
          line = loc.line,
          col = loc.column,
          callLine = e.call && utils.getLocation(e.call, input).line,
          lines = input.split('\n');
      this.type = e.type || 'Syntax';
      this.filename = filename;
      this.index = e.index;
      this.line = typeof line === 'number' ? line + 1 : null;
      this.callLine = callLine + 1;
      this.callExtract = lines[callLine];
      this.column = col;
      this.extract = [lines[line - 1], lines[line], lines[line + 1]];
    }
    this.message = e.message;
    this.stack = e.stack;
  };
  if (typeof Object.create === 'undefined') {
    var F = function() {};
    F.prototype = Error.prototype;
    LessError.prototype = new F();
  } else {
    LessError.prototype = Object.create(Error.prototype);
  }
  LessError.prototype.constructor = LessError;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/visitors/import-sequencer.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  function ImportSequencer(onSequencerEmpty) {
    this.imports = [];
    this.variableImports = [];
    this._onSequencerEmpty = onSequencerEmpty;
    this._currentDepth = 0;
  }
  ImportSequencer.prototype.addImport = function(callback) {
    var importSequencer = this,
        importItem = {
          callback: callback,
          args: null,
          isReady: false
        };
    this.imports.push(importItem);
    return function() {
      importItem.args = Array.prototype.slice.call(arguments, 0);
      importItem.isReady = true;
      importSequencer.tryRun();
    };
  };
  ImportSequencer.prototype.addVariableImport = function(callback) {
    this.variableImports.push(callback);
  };
  ImportSequencer.prototype.tryRun = function() {
    this._currentDepth++;
    try {
      while (true) {
        while (this.imports.length > 0) {
          var importItem = this.imports[0];
          if (!importItem.isReady) {
            return;
          }
          this.imports = this.imports.slice(1);
          importItem.callback.apply(null, importItem.args);
        }
        if (this.variableImports.length === 0) {
          break;
        }
        var variableImport = this.variableImports[0];
        this.variableImports = this.variableImports.slice(1);
        variableImport();
      }
    } finally {
      this._currentDepth--;
    }
    if (this._currentDepth === 0 && this._onSequencerEmpty) {
      this._onSequencerEmpty();
    }
  };
  module.exports = ImportSequencer;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/visitors/import-visitor.js", ["npm:less@2.6.1/lib/less/contexts.js", "npm:less@2.6.1/lib/less/visitors/visitor.js", "npm:less@2.6.1/lib/less/visitors/import-sequencer.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var contexts = $__require('npm:less@2.6.1/lib/less/contexts.js'),
      Visitor = $__require('npm:less@2.6.1/lib/less/visitors/visitor.js'),
      ImportSequencer = $__require('npm:less@2.6.1/lib/less/visitors/import-sequencer.js');
  var ImportVisitor = function(importer, finish) {
    this._visitor = new Visitor(this);
    this._importer = importer;
    this._finish = finish;
    this.context = new contexts.Eval();
    this.importCount = 0;
    this.onceFileDetectionMap = {};
    this.recursionDetector = {};
    this._sequencer = new ImportSequencer(this._onSequencerEmpty.bind(this));
  };
  ImportVisitor.prototype = {
    isReplacing: false,
    run: function(root) {
      try {
        this._visitor.visit(root);
      } catch (e) {
        this.error = e;
      }
      this.isFinished = true;
      this._sequencer.tryRun();
    },
    _onSequencerEmpty: function() {
      if (!this.isFinished) {
        return;
      }
      this._finish(this.error);
    },
    visitImport: function(importNode, visitArgs) {
      var inlineCSS = importNode.options.inline;
      if (!importNode.css || inlineCSS) {
        var context = new contexts.Eval(this.context, this.context.frames.slice(0));
        var importParent = context.frames[0];
        this.importCount++;
        if (importNode.isVariableImport()) {
          this._sequencer.addVariableImport(this.processImportNode.bind(this, importNode, context, importParent));
        } else {
          this.processImportNode(importNode, context, importParent);
        }
      }
      visitArgs.visitDeeper = false;
    },
    processImportNode: function(importNode, context, importParent) {
      var evaldImportNode,
          inlineCSS = importNode.options.inline;
      try {
        evaldImportNode = importNode.evalForImport(context);
      } catch (e) {
        if (!e.filename) {
          e.index = importNode.index;
          e.filename = importNode.currentFileInfo.filename;
        }
        importNode.css = true;
        importNode.error = e;
      }
      if (evaldImportNode && (!evaldImportNode.css || inlineCSS)) {
        if (evaldImportNode.options.multiple) {
          context.importMultiple = true;
        }
        var tryAppendLessExtension = evaldImportNode.css === undefined;
        for (var i = 0; i < importParent.rules.length; i++) {
          if (importParent.rules[i] === importNode) {
            importParent.rules[i] = evaldImportNode;
            break;
          }
        }
        var onImported = this.onImported.bind(this, evaldImportNode, context),
            sequencedOnImported = this._sequencer.addImport(onImported);
        this._importer.push(evaldImportNode.getPath(), tryAppendLessExtension, evaldImportNode.currentFileInfo, evaldImportNode.options, sequencedOnImported);
      } else {
        this.importCount--;
        if (this.isFinished) {
          this._sequencer.tryRun();
        }
      }
    },
    onImported: function(importNode, context, e, root, importedAtRoot, fullPath) {
      if (e) {
        if (!e.filename) {
          e.index = importNode.index;
          e.filename = importNode.currentFileInfo.filename;
        }
        this.error = e;
      }
      var importVisitor = this,
          inlineCSS = importNode.options.inline,
          isPlugin = importNode.options.plugin,
          isOptional = importNode.options.optional,
          duplicateImport = importedAtRoot || fullPath in importVisitor.recursionDetector;
      if (!context.importMultiple) {
        if (duplicateImport) {
          importNode.skip = true;
        } else {
          importNode.skip = function() {
            if (fullPath in importVisitor.onceFileDetectionMap) {
              return true;
            }
            importVisitor.onceFileDetectionMap[fullPath] = true;
            return false;
          };
        }
      }
      if (!fullPath && isOptional) {
        importNode.skip = true;
      }
      if (root) {
        importNode.root = root;
        importNode.importedFilename = fullPath;
        if (!inlineCSS && !isPlugin && (context.importMultiple || !duplicateImport)) {
          importVisitor.recursionDetector[fullPath] = true;
          var oldContext = this.context;
          this.context = context;
          try {
            this._visitor.visit(root);
          } catch (e) {
            this.error = e;
          }
          this.context = oldContext;
        }
      }
      importVisitor.importCount--;
      if (importVisitor.isFinished) {
        importVisitor._sequencer.tryRun();
      }
    },
    visitRule: function(ruleNode, visitArgs) {
      if (ruleNode.value.type === "DetachedRuleset") {
        this.context.frames.unshift(ruleNode);
      } else {
        visitArgs.visitDeeper = false;
      }
    },
    visitRuleOut: function(ruleNode) {
      if (ruleNode.value.type === "DetachedRuleset") {
        this.context.frames.shift();
      }
    },
    visitDirective: function(directiveNode, visitArgs) {
      this.context.frames.unshift(directiveNode);
    },
    visitDirectiveOut: function(directiveNode) {
      this.context.frames.shift();
    },
    visitMixinDefinition: function(mixinDefinitionNode, visitArgs) {
      this.context.frames.unshift(mixinDefinitionNode);
    },
    visitMixinDefinitionOut: function(mixinDefinitionNode) {
      this.context.frames.shift();
    },
    visitRuleset: function(rulesetNode, visitArgs) {
      this.context.frames.unshift(rulesetNode);
    },
    visitRulesetOut: function(rulesetNode) {
      this.context.frames.shift();
    },
    visitMedia: function(mediaNode, visitArgs) {
      this.context.frames.unshift(mediaNode.rules[0]);
    },
    visitMediaOut: function(mediaNode) {
      this.context.frames.shift();
    }
  };
  module.exports = ImportVisitor;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/visitors/set-tree-visibility-visitor.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var SetTreeVisibilityVisitor = function(visible) {
    this.visible = visible;
  };
  SetTreeVisibilityVisitor.prototype.run = function(root) {
    this.visit(root);
  };
  SetTreeVisibilityVisitor.prototype.visitArray = function(nodes) {
    if (!nodes) {
      return nodes;
    }
    var cnt = nodes.length,
        i;
    for (i = 0; i < cnt; i++) {
      this.visit(nodes[i]);
    }
    return nodes;
  };
  SetTreeVisibilityVisitor.prototype.visit = function(node) {
    if (!node) {
      return node;
    }
    if (node.constructor === Array) {
      return this.visitArray(node);
    }
    if (!node.blocksVisibility || node.blocksVisibility()) {
      return node;
    }
    if (this.visible) {
      node.ensureVisibility();
    } else {
      node.ensureInvisibility();
    }
    node.accept(this);
    return node;
  };
  module.exports = SetTreeVisibilityVisitor;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/visitors/extend-visitor.js", ["npm:less@2.6.1/lib/less/tree/index.js", "npm:less@2.6.1/lib/less/visitors/visitor.js", "npm:less@2.6.1/lib/less/logger.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var tree = $__require('npm:less@2.6.1/lib/less/tree/index.js'),
      Visitor = $__require('npm:less@2.6.1/lib/less/visitors/visitor.js'),
      logger = $__require('npm:less@2.6.1/lib/less/logger.js');
  var ExtendFinderVisitor = function() {
    this._visitor = new Visitor(this);
    this.contexts = [];
    this.allExtendsStack = [[]];
  };
  ExtendFinderVisitor.prototype = {
    run: function(root) {
      root = this._visitor.visit(root);
      root.allExtends = this.allExtendsStack[0];
      return root;
    },
    visitRule: function(ruleNode, visitArgs) {
      visitArgs.visitDeeper = false;
    },
    visitMixinDefinition: function(mixinDefinitionNode, visitArgs) {
      visitArgs.visitDeeper = false;
    },
    visitRuleset: function(rulesetNode, visitArgs) {
      if (rulesetNode.root) {
        return;
      }
      var i,
          j,
          extend,
          allSelectorsExtendList = [],
          extendList;
      var rules = rulesetNode.rules,
          ruleCnt = rules ? rules.length : 0;
      for (i = 0; i < ruleCnt; i++) {
        if (rulesetNode.rules[i] instanceof tree.Extend) {
          allSelectorsExtendList.push(rules[i]);
          rulesetNode.extendOnEveryPath = true;
        }
      }
      var paths = rulesetNode.paths;
      for (i = 0; i < paths.length; i++) {
        var selectorPath = paths[i],
            selector = selectorPath[selectorPath.length - 1],
            selExtendList = selector.extendList;
        extendList = selExtendList ? selExtendList.slice(0).concat(allSelectorsExtendList) : allSelectorsExtendList;
        if (extendList) {
          extendList = extendList.map(function(allSelectorsExtend) {
            return allSelectorsExtend.clone();
          });
        }
        for (j = 0; j < extendList.length; j++) {
          this.foundExtends = true;
          extend = extendList[j];
          extend.findSelfSelectors(selectorPath);
          extend.ruleset = rulesetNode;
          if (j === 0) {
            extend.firstExtendOnThisSelectorPath = true;
          }
          this.allExtendsStack[this.allExtendsStack.length - 1].push(extend);
        }
      }
      this.contexts.push(rulesetNode.selectors);
    },
    visitRulesetOut: function(rulesetNode) {
      if (!rulesetNode.root) {
        this.contexts.length = this.contexts.length - 1;
      }
    },
    visitMedia: function(mediaNode, visitArgs) {
      mediaNode.allExtends = [];
      this.allExtendsStack.push(mediaNode.allExtends);
    },
    visitMediaOut: function(mediaNode) {
      this.allExtendsStack.length = this.allExtendsStack.length - 1;
    },
    visitDirective: function(directiveNode, visitArgs) {
      directiveNode.allExtends = [];
      this.allExtendsStack.push(directiveNode.allExtends);
    },
    visitDirectiveOut: function(directiveNode) {
      this.allExtendsStack.length = this.allExtendsStack.length - 1;
    }
  };
  var ProcessExtendsVisitor = function() {
    this._visitor = new Visitor(this);
  };
  ProcessExtendsVisitor.prototype = {
    run: function(root) {
      var extendFinder = new ExtendFinderVisitor();
      this.extendIndicies = {};
      extendFinder.run(root);
      if (!extendFinder.foundExtends) {
        return root;
      }
      root.allExtends = root.allExtends.concat(this.doExtendChaining(root.allExtends, root.allExtends));
      this.allExtendsStack = [root.allExtends];
      var newRoot = this._visitor.visit(root);
      this.checkExtendsForNonMatched(root.allExtends);
      return newRoot;
    },
    checkExtendsForNonMatched: function(extendList) {
      var indicies = this.extendIndicies;
      extendList.filter(function(extend) {
        return !extend.hasFoundMatches && extend.parent_ids.length == 1;
      }).forEach(function(extend) {
        var selector = "_unknown_";
        try {
          selector = extend.selector.toCSS({});
        } catch (_) {}
        if (!indicies[extend.index + ' ' + selector]) {
          indicies[extend.index + ' ' + selector] = true;
          logger.warn("extend '" + selector + "' has no matches");
        }
      });
    },
    doExtendChaining: function(extendsList, extendsListTarget, iterationCount) {
      var extendIndex,
          targetExtendIndex,
          matches,
          extendsToAdd = [],
          newSelector,
          extendVisitor = this,
          selectorPath,
          extend,
          targetExtend,
          newExtend;
      iterationCount = iterationCount || 0;
      for (extendIndex = 0; extendIndex < extendsList.length; extendIndex++) {
        for (targetExtendIndex = 0; targetExtendIndex < extendsListTarget.length; targetExtendIndex++) {
          extend = extendsList[extendIndex];
          targetExtend = extendsListTarget[targetExtendIndex];
          if (extend.parent_ids.indexOf(targetExtend.object_id) >= 0) {
            continue;
          }
          selectorPath = [targetExtend.selfSelectors[0]];
          matches = extendVisitor.findMatch(extend, selectorPath);
          if (matches.length) {
            extend.hasFoundMatches = true;
            extend.selfSelectors.forEach(function(selfSelector) {
              var info = targetExtend.visibilityInfo();
              newSelector = extendVisitor.extendSelector(matches, selectorPath, selfSelector, extend.isVisible());
              newExtend = new (tree.Extend)(targetExtend.selector, targetExtend.option, 0, targetExtend.currentFileInfo, info);
              newExtend.selfSelectors = newSelector;
              newSelector[newSelector.length - 1].extendList = [newExtend];
              extendsToAdd.push(newExtend);
              newExtend.ruleset = targetExtend.ruleset;
              newExtend.parent_ids = newExtend.parent_ids.concat(targetExtend.parent_ids, extend.parent_ids);
              if (targetExtend.firstExtendOnThisSelectorPath) {
                newExtend.firstExtendOnThisSelectorPath = true;
                targetExtend.ruleset.paths.push(newSelector);
              }
            });
          }
        }
      }
      if (extendsToAdd.length) {
        this.extendChainCount++;
        if (iterationCount > 100) {
          var selectorOne = "{unable to calculate}";
          var selectorTwo = "{unable to calculate}";
          try {
            selectorOne = extendsToAdd[0].selfSelectors[0].toCSS();
            selectorTwo = extendsToAdd[0].selector.toCSS();
          } catch (e) {}
          throw {message: "extend circular reference detected. One of the circular extends is currently:" + selectorOne + ":extend(" + selectorTwo + ")"};
        }
        return extendsToAdd.concat(extendVisitor.doExtendChaining(extendsToAdd, extendsListTarget, iterationCount + 1));
      } else {
        return extendsToAdd;
      }
    },
    visitRule: function(ruleNode, visitArgs) {
      visitArgs.visitDeeper = false;
    },
    visitMixinDefinition: function(mixinDefinitionNode, visitArgs) {
      visitArgs.visitDeeper = false;
    },
    visitSelector: function(selectorNode, visitArgs) {
      visitArgs.visitDeeper = false;
    },
    visitRuleset: function(rulesetNode, visitArgs) {
      if (rulesetNode.root) {
        return;
      }
      var matches,
          pathIndex,
          extendIndex,
          allExtends = this.allExtendsStack[this.allExtendsStack.length - 1],
          selectorsToAdd = [],
          extendVisitor = this,
          selectorPath;
      for (extendIndex = 0; extendIndex < allExtends.length; extendIndex++) {
        for (pathIndex = 0; pathIndex < rulesetNode.paths.length; pathIndex++) {
          selectorPath = rulesetNode.paths[pathIndex];
          if (rulesetNode.extendOnEveryPath) {
            continue;
          }
          var extendList = selectorPath[selectorPath.length - 1].extendList;
          if (extendList && extendList.length) {
            continue;
          }
          matches = this.findMatch(allExtends[extendIndex], selectorPath);
          if (matches.length) {
            allExtends[extendIndex].hasFoundMatches = true;
            allExtends[extendIndex].selfSelectors.forEach(function(selfSelector) {
              var extendedSelectors;
              extendedSelectors = extendVisitor.extendSelector(matches, selectorPath, selfSelector, allExtends[extendIndex].isVisible());
              selectorsToAdd.push(extendedSelectors);
            });
          }
        }
      }
      rulesetNode.paths = rulesetNode.paths.concat(selectorsToAdd);
    },
    findMatch: function(extend, haystackSelectorPath) {
      var haystackSelectorIndex,
          hackstackSelector,
          hackstackElementIndex,
          haystackElement,
          targetCombinator,
          i,
          extendVisitor = this,
          needleElements = extend.selector.elements,
          potentialMatches = [],
          potentialMatch,
          matches = [];
      for (haystackSelectorIndex = 0; haystackSelectorIndex < haystackSelectorPath.length; haystackSelectorIndex++) {
        hackstackSelector = haystackSelectorPath[haystackSelectorIndex];
        for (hackstackElementIndex = 0; hackstackElementIndex < hackstackSelector.elements.length; hackstackElementIndex++) {
          haystackElement = hackstackSelector.elements[hackstackElementIndex];
          if (extend.allowBefore || (haystackSelectorIndex === 0 && hackstackElementIndex === 0)) {
            potentialMatches.push({
              pathIndex: haystackSelectorIndex,
              index: hackstackElementIndex,
              matched: 0,
              initialCombinator: haystackElement.combinator
            });
          }
          for (i = 0; i < potentialMatches.length; i++) {
            potentialMatch = potentialMatches[i];
            targetCombinator = haystackElement.combinator.value;
            if (targetCombinator === '' && hackstackElementIndex === 0) {
              targetCombinator = ' ';
            }
            if (!extendVisitor.isElementValuesEqual(needleElements[potentialMatch.matched].value, haystackElement.value) || (potentialMatch.matched > 0 && needleElements[potentialMatch.matched].combinator.value !== targetCombinator)) {
              potentialMatch = null;
            } else {
              potentialMatch.matched++;
            }
            if (potentialMatch) {
              potentialMatch.finished = potentialMatch.matched === needleElements.length;
              if (potentialMatch.finished && (!extend.allowAfter && (hackstackElementIndex + 1 < hackstackSelector.elements.length || haystackSelectorIndex + 1 < haystackSelectorPath.length))) {
                potentialMatch = null;
              }
            }
            if (potentialMatch) {
              if (potentialMatch.finished) {
                potentialMatch.length = needleElements.length;
                potentialMatch.endPathIndex = haystackSelectorIndex;
                potentialMatch.endPathElementIndex = hackstackElementIndex + 1;
                potentialMatches.length = 0;
                matches.push(potentialMatch);
              }
            } else {
              potentialMatches.splice(i, 1);
              i--;
            }
          }
        }
      }
      return matches;
    },
    isElementValuesEqual: function(elementValue1, elementValue2) {
      if (typeof elementValue1 === "string" || typeof elementValue2 === "string") {
        return elementValue1 === elementValue2;
      }
      if (elementValue1 instanceof tree.Attribute) {
        if (elementValue1.op !== elementValue2.op || elementValue1.key !== elementValue2.key) {
          return false;
        }
        if (!elementValue1.value || !elementValue2.value) {
          if (elementValue1.value || elementValue2.value) {
            return false;
          }
          return true;
        }
        elementValue1 = elementValue1.value.value || elementValue1.value;
        elementValue2 = elementValue2.value.value || elementValue2.value;
        return elementValue1 === elementValue2;
      }
      elementValue1 = elementValue1.value;
      elementValue2 = elementValue2.value;
      if (elementValue1 instanceof tree.Selector) {
        if (!(elementValue2 instanceof tree.Selector) || elementValue1.elements.length !== elementValue2.elements.length) {
          return false;
        }
        for (var i = 0; i < elementValue1.elements.length; i++) {
          if (elementValue1.elements[i].combinator.value !== elementValue2.elements[i].combinator.value) {
            if (i !== 0 || (elementValue1.elements[i].combinator.value || ' ') !== (elementValue2.elements[i].combinator.value || ' ')) {
              return false;
            }
          }
          if (!this.isElementValuesEqual(elementValue1.elements[i].value, elementValue2.elements[i].value)) {
            return false;
          }
        }
        return true;
      }
      return false;
    },
    extendSelector: function(matches, selectorPath, replacementSelector, isVisible) {
      var currentSelectorPathIndex = 0,
          currentSelectorPathElementIndex = 0,
          path = [],
          matchIndex,
          selector,
          firstElement,
          match,
          newElements;
      for (matchIndex = 0; matchIndex < matches.length; matchIndex++) {
        match = matches[matchIndex];
        selector = selectorPath[match.pathIndex];
        firstElement = new tree.Element(match.initialCombinator, replacementSelector.elements[0].value, replacementSelector.elements[0].index, replacementSelector.elements[0].currentFileInfo);
        if (match.pathIndex > currentSelectorPathIndex && currentSelectorPathElementIndex > 0) {
          path[path.length - 1].elements = path[path.length - 1].elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));
          currentSelectorPathElementIndex = 0;
          currentSelectorPathIndex++;
        }
        newElements = selector.elements.slice(currentSelectorPathElementIndex, match.index).concat([firstElement]).concat(replacementSelector.elements.slice(1));
        if (currentSelectorPathIndex === match.pathIndex && matchIndex > 0) {
          path[path.length - 1].elements = path[path.length - 1].elements.concat(newElements);
        } else {
          path = path.concat(selectorPath.slice(currentSelectorPathIndex, match.pathIndex));
          path.push(new tree.Selector(newElements));
        }
        currentSelectorPathIndex = match.endPathIndex;
        currentSelectorPathElementIndex = match.endPathElementIndex;
        if (currentSelectorPathElementIndex >= selectorPath[currentSelectorPathIndex].elements.length) {
          currentSelectorPathElementIndex = 0;
          currentSelectorPathIndex++;
        }
      }
      if (currentSelectorPathIndex < selectorPath.length && currentSelectorPathElementIndex > 0) {
        path[path.length - 1].elements = path[path.length - 1].elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));
        currentSelectorPathIndex++;
      }
      path = path.concat(selectorPath.slice(currentSelectorPathIndex, selectorPath.length));
      path = path.map(function(currentValue) {
        var derived = currentValue.createDerived(currentValue.elements);
        if (isVisible) {
          derived.ensureVisibility();
        } else {
          derived.ensureInvisibility();
        }
        return derived;
      });
      return path;
    },
    visitMedia: function(mediaNode, visitArgs) {
      var newAllExtends = mediaNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);
      newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, mediaNode.allExtends));
      this.allExtendsStack.push(newAllExtends);
    },
    visitMediaOut: function(mediaNode) {
      var lastIndex = this.allExtendsStack.length - 1;
      this.allExtendsStack.length = lastIndex;
    },
    visitDirective: function(directiveNode, visitArgs) {
      var newAllExtends = directiveNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);
      newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, directiveNode.allExtends));
      this.allExtendsStack.push(newAllExtends);
    },
    visitDirectiveOut: function(directiveNode) {
      var lastIndex = this.allExtendsStack.length - 1;
      this.allExtendsStack.length = lastIndex;
    }
  };
  module.exports = ProcessExtendsVisitor;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/visitors/join-selector-visitor.js", ["npm:less@2.6.1/lib/less/visitors/visitor.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Visitor = $__require('npm:less@2.6.1/lib/less/visitors/visitor.js');
  var JoinSelectorVisitor = function() {
    this.contexts = [[]];
    this._visitor = new Visitor(this);
  };
  JoinSelectorVisitor.prototype = {
    run: function(root) {
      return this._visitor.visit(root);
    },
    visitRule: function(ruleNode, visitArgs) {
      visitArgs.visitDeeper = false;
    },
    visitMixinDefinition: function(mixinDefinitionNode, visitArgs) {
      visitArgs.visitDeeper = false;
    },
    visitRuleset: function(rulesetNode, visitArgs) {
      var context = this.contexts[this.contexts.length - 1],
          paths = [],
          selectors;
      this.contexts.push(paths);
      if (!rulesetNode.root) {
        selectors = rulesetNode.selectors;
        if (selectors) {
          selectors = selectors.filter(function(selector) {
            return selector.getIsOutput();
          });
          rulesetNode.selectors = selectors.length ? selectors : (selectors = null);
          if (selectors) {
            rulesetNode.joinSelectors(paths, context, selectors);
          }
        }
        if (!selectors) {
          rulesetNode.rules = null;
        }
        rulesetNode.paths = paths;
      }
    },
    visitRulesetOut: function(rulesetNode) {
      this.contexts.length = this.contexts.length - 1;
    },
    visitMedia: function(mediaNode, visitArgs) {
      var context = this.contexts[this.contexts.length - 1];
      mediaNode.rules[0].root = (context.length === 0 || context[0].multiMedia);
    },
    visitDirective: function(directiveNode, visitArgs) {
      var context = this.contexts[this.contexts.length - 1];
      if (directiveNode.rules && directiveNode.rules.length) {
        directiveNode.rules[0].root = (directiveNode.isRooted || context.length === 0 || null);
      }
    }
  };
  module.exports = JoinSelectorVisitor;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/visitors/visitor.js", ["npm:less@2.6.1/lib/less/tree/index.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var tree = $__require('npm:less@2.6.1/lib/less/tree/index.js');
  var _visitArgs = {visitDeeper: true},
      _hasIndexed = false;
  function _noop(node) {
    return node;
  }
  function indexNodeTypes(parent, ticker) {
    var key,
        child;
    for (key in parent) {
      if (parent.hasOwnProperty(key)) {
        child = parent[key];
        switch (typeof child) {
          case "function":
            if (child.prototype && child.prototype.type) {
              child.prototype.typeIndex = ticker++;
            }
            break;
          case "object":
            ticker = indexNodeTypes(child, ticker);
            break;
        }
      }
    }
    return ticker;
  }
  var Visitor = function(implementation) {
    this._implementation = implementation;
    this._visitFnCache = [];
    if (!_hasIndexed) {
      indexNodeTypes(tree, 1);
      _hasIndexed = true;
    }
  };
  Visitor.prototype = {
    visit: function(node) {
      if (!node) {
        return node;
      }
      var nodeTypeIndex = node.typeIndex;
      if (!nodeTypeIndex) {
        return node;
      }
      var visitFnCache = this._visitFnCache,
          impl = this._implementation,
          aryIndx = nodeTypeIndex << 1,
          outAryIndex = aryIndx | 1,
          func = visitFnCache[aryIndx],
          funcOut = visitFnCache[outAryIndex],
          visitArgs = _visitArgs,
          fnName;
      visitArgs.visitDeeper = true;
      if (!func) {
        fnName = "visit" + node.type;
        func = impl[fnName] || _noop;
        funcOut = impl[fnName + "Out"] || _noop;
        visitFnCache[aryIndx] = func;
        visitFnCache[outAryIndex] = funcOut;
      }
      if (func !== _noop) {
        var newNode = func.call(impl, node, visitArgs);
        if (impl.isReplacing) {
          node = newNode;
        }
      }
      if (visitArgs.visitDeeper && node && node.accept) {
        node.accept(this);
      }
      if (funcOut != _noop) {
        funcOut.call(impl, node);
      }
      return node;
    },
    visitArray: function(nodes, nonReplacing) {
      if (!nodes) {
        return nodes;
      }
      var cnt = nodes.length,
          i;
      if (nonReplacing || !this._implementation.isReplacing) {
        for (i = 0; i < cnt; i++) {
          this.visit(nodes[i]);
        }
        return nodes;
      }
      var out = [];
      for (i = 0; i < cnt; i++) {
        var evald = this.visit(nodes[i]);
        if (evald === undefined) {
          continue;
        }
        if (!evald.splice) {
          out.push(evald);
        } else if (evald.length) {
          this.flatten(evald, out);
        }
      }
      return out;
    },
    flatten: function(arr, out) {
      if (!out) {
        out = [];
      }
      var cnt,
          i,
          item,
          nestedCnt,
          j,
          nestedItem;
      for (i = 0, cnt = arr.length; i < cnt; i++) {
        item = arr[i];
        if (item === undefined) {
          continue;
        }
        if (!item.splice) {
          out.push(item);
          continue;
        }
        for (j = 0, nestedCnt = item.length; j < nestedCnt; j++) {
          nestedItem = item[j];
          if (nestedItem === undefined) {
            continue;
          }
          if (!nestedItem.splice) {
            out.push(nestedItem);
          } else if (nestedItem.length) {
            this.flatten(nestedItem, out);
          }
        }
      }
      return out;
    }
  };
  module.exports = Visitor;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/visitors/to-css-visitor.js", ["npm:less@2.6.1/lib/less/tree/index.js", "npm:less@2.6.1/lib/less/visitors/visitor.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var tree = $__require('npm:less@2.6.1/lib/less/tree/index.js'),
      Visitor = $__require('npm:less@2.6.1/lib/less/visitors/visitor.js');
  var CSSVisitorUtils = function(context) {
    this._visitor = new Visitor(this);
    this._context = context;
  };
  CSSVisitorUtils.prototype = {
    containsSilentNonBlockedChild: function(bodyRules) {
      var rule;
      if (bodyRules == null) {
        return false;
      }
      for (var r = 0; r < bodyRules.length; r++) {
        rule = bodyRules[r];
        if (rule.isSilent && rule.isSilent(this._context) && !rule.blocksVisibility()) {
          return true;
        }
      }
      return false;
    },
    keepOnlyVisibleChilds: function(owner) {
      if (owner == null || owner.rules == null) {
        return;
      }
      owner.rules = owner.rules.filter(function(thing) {
        return thing.isVisible();
      });
    },
    isEmpty: function(owner) {
      if (owner == null || owner.rules == null) {
        return true;
      }
      return owner.rules.length === 0;
    },
    hasVisibleSelector: function(rulesetNode) {
      if (rulesetNode == null || rulesetNode.paths == null) {
        return false;
      }
      return rulesetNode.paths.length > 0;
    },
    resolveVisibility: function(node, originalRules) {
      if (!node.blocksVisibility()) {
        if (this.isEmpty(node) && !this.containsSilentNonBlockedChild(originalRules)) {
          return;
        }
        return node;
      }
      var compiledRulesBody = node.rules[0];
      this.keepOnlyVisibleChilds(compiledRulesBody);
      if (this.isEmpty(compiledRulesBody)) {
        return;
      }
      node.ensureVisibility();
      node.removeVisibilityBlock();
      return node;
    },
    isVisibleRuleset: function(rulesetNode) {
      if (rulesetNode.firstRoot) {
        return true;
      }
      if (this.isEmpty(rulesetNode)) {
        return false;
      }
      if (!rulesetNode.root && !this.hasVisibleSelector(rulesetNode)) {
        return false;
      }
      return true;
    }
  };
  var ToCSSVisitor = function(context) {
    this._visitor = new Visitor(this);
    this._context = context;
    this.utils = new CSSVisitorUtils(context);
  };
  ToCSSVisitor.prototype = {
    isReplacing: true,
    run: function(root) {
      return this._visitor.visit(root);
    },
    visitRule: function(ruleNode, visitArgs) {
      if (ruleNode.blocksVisibility() || ruleNode.variable) {
        return;
      }
      return ruleNode;
    },
    visitMixinDefinition: function(mixinNode, visitArgs) {
      mixinNode.frames = [];
    },
    visitExtend: function(extendNode, visitArgs) {},
    visitComment: function(commentNode, visitArgs) {
      if (commentNode.blocksVisibility() || commentNode.isSilent(this._context)) {
        return;
      }
      return commentNode;
    },
    visitMedia: function(mediaNode, visitArgs) {
      var originalRules = mediaNode.rules[0].rules;
      mediaNode.accept(this._visitor);
      visitArgs.visitDeeper = false;
      return this.utils.resolveVisibility(mediaNode, originalRules);
    },
    visitImport: function(importNode, visitArgs) {
      if (importNode.blocksVisibility()) {
        return;
      }
      return importNode;
    },
    visitDirective: function(directiveNode, visitArgs) {
      if (directiveNode.rules && directiveNode.rules.length) {
        return this.visitDirectiveWithBody(directiveNode, visitArgs);
      } else {
        return this.visitDirectiveWithoutBody(directiveNode, visitArgs);
      }
      return directiveNode;
    },
    visitDirectiveWithBody: function(directiveNode, visitArgs) {
      function hasFakeRuleset(directiveNode) {
        var bodyRules = directiveNode.rules;
        return bodyRules.length === 1 && (!bodyRules[0].paths || bodyRules[0].paths.length === 0);
      }
      function getBodyRules(directiveNode) {
        var nodeRules = directiveNode.rules;
        if (hasFakeRuleset(directiveNode)) {
          return nodeRules[0].rules;
        }
        return nodeRules;
      }
      var originalRules = getBodyRules(directiveNode);
      directiveNode.accept(this._visitor);
      visitArgs.visitDeeper = false;
      if (!this.utils.isEmpty(directiveNode)) {
        this._mergeRules(directiveNode.rules[0].rules);
      }
      return this.utils.resolveVisibility(directiveNode, originalRules);
    },
    visitDirectiveWithoutBody: function(directiveNode, visitArgs) {
      if (directiveNode.blocksVisibility()) {
        return;
      }
      if (directiveNode.name === "@charset") {
        if (this.charset) {
          if (directiveNode.debugInfo) {
            var comment = new tree.Comment("/* " + directiveNode.toCSS(this._context).replace(/\n/g, "") + " */\n");
            comment.debugInfo = directiveNode.debugInfo;
            return this._visitor.visit(comment);
          }
          return;
        }
        this.charset = true;
      }
      return directiveNode;
    },
    checkPropertiesInRoot: function(rules) {
      var ruleNode;
      for (var i = 0; i < rules.length; i++) {
        ruleNode = rules[i];
        if (ruleNode instanceof tree.Rule && !ruleNode.variable) {
          throw {
            message: "properties must be inside selector blocks, they cannot be in the root.",
            index: ruleNode.index,
            filename: ruleNode.currentFileInfo ? ruleNode.currentFileInfo.filename : null
          };
        }
      }
    },
    visitRuleset: function(rulesetNode, visitArgs) {
      var rule,
          rulesets = [];
      if (rulesetNode.firstRoot) {
        this.checkPropertiesInRoot(rulesetNode.rules);
      }
      if (!rulesetNode.root) {
        this._compileRulesetPaths(rulesetNode);
        var nodeRules = rulesetNode.rules,
            nodeRuleCnt = nodeRules ? nodeRules.length : 0;
        for (var i = 0; i < nodeRuleCnt; ) {
          rule = nodeRules[i];
          if (rule && rule.rules) {
            rulesets.push(this._visitor.visit(rule));
            nodeRules.splice(i, 1);
            nodeRuleCnt--;
            continue;
          }
          i++;
        }
        if (nodeRuleCnt > 0) {
          rulesetNode.accept(this._visitor);
        } else {
          rulesetNode.rules = null;
        }
        visitArgs.visitDeeper = false;
      } else {
        rulesetNode.accept(this._visitor);
        visitArgs.visitDeeper = false;
      }
      if (rulesetNode.rules) {
        this._mergeRules(rulesetNode.rules);
        this._removeDuplicateRules(rulesetNode.rules);
      }
      if (this.utils.isVisibleRuleset(rulesetNode)) {
        rulesetNode.ensureVisibility();
        rulesets.splice(0, 0, rulesetNode);
      }
      if (rulesets.length === 1) {
        return rulesets[0];
      }
      return rulesets;
    },
    _compileRulesetPaths: function(rulesetNode) {
      if (rulesetNode.paths) {
        rulesetNode.paths = rulesetNode.paths.filter(function(p) {
          var i;
          if (p[0].elements[0].combinator.value === ' ') {
            p[0].elements[0].combinator = new (tree.Combinator)('');
          }
          for (i = 0; i < p.length; i++) {
            if (p[i].isVisible() && p[i].getIsOutput()) {
              return true;
            }
          }
          return false;
        });
      }
    },
    _removeDuplicateRules: function(rules) {
      if (!rules) {
        return;
      }
      var ruleCache = {},
          ruleList,
          rule,
          i;
      for (i = rules.length - 1; i >= 0; i--) {
        rule = rules[i];
        if (rule instanceof tree.Rule) {
          if (!ruleCache[rule.name]) {
            ruleCache[rule.name] = rule;
          } else {
            ruleList = ruleCache[rule.name];
            if (ruleList instanceof tree.Rule) {
              ruleList = ruleCache[rule.name] = [ruleCache[rule.name].toCSS(this._context)];
            }
            var ruleCSS = rule.toCSS(this._context);
            if (ruleList.indexOf(ruleCSS) !== -1) {
              rules.splice(i, 1);
            } else {
              ruleList.push(ruleCSS);
            }
          }
        }
      }
    },
    _mergeRules: function(rules) {
      if (!rules) {
        return;
      }
      var groups = {},
          parts,
          rule,
          key;
      for (var i = 0; i < rules.length; i++) {
        rule = rules[i];
        if ((rule instanceof tree.Rule) && rule.merge) {
          key = [rule.name, rule.important ? "!" : ""].join(",");
          if (!groups[key]) {
            groups[key] = [];
          } else {
            rules.splice(i--, 1);
          }
          groups[key].push(rule);
        }
      }
      Object.keys(groups).map(function(k) {
        function toExpression(values) {
          return new (tree.Expression)(values.map(function(p) {
            return p.value;
          }));
        }
        function toValue(values) {
          return new (tree.Value)(values.map(function(p) {
            return p;
          }));
        }
        parts = groups[k];
        if (parts.length > 1) {
          rule = parts[0];
          var spacedGroups = [];
          var lastSpacedGroup = [];
          parts.map(function(p) {
            if (p.merge === "+") {
              if (lastSpacedGroup.length > 0) {
                spacedGroups.push(toExpression(lastSpacedGroup));
              }
              lastSpacedGroup = [];
            }
            lastSpacedGroup.push(p);
          });
          spacedGroups.push(toExpression(lastSpacedGroup));
          rule.value = toValue(spacedGroups);
        }
      });
    },
    visitAnonymous: function(anonymousNode, visitArgs) {
      if (anonymousNode.blocksVisibility()) {
        return;
      }
      anonymousNode.accept(this._visitor);
      return anonymousNode;
    }
  };
  module.exports = ToCSSVisitor;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/visitors/index.js", ["npm:less@2.6.1/lib/less/visitors/visitor.js", "npm:less@2.6.1/lib/less/visitors/import-visitor.js", "npm:less@2.6.1/lib/less/visitors/set-tree-visibility-visitor.js", "npm:less@2.6.1/lib/less/visitors/extend-visitor.js", "npm:less@2.6.1/lib/less/visitors/join-selector-visitor.js", "npm:less@2.6.1/lib/less/visitors/to-css-visitor.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var visitors = {
    Visitor: $__require('npm:less@2.6.1/lib/less/visitors/visitor.js'),
    ImportVisitor: $__require('npm:less@2.6.1/lib/less/visitors/import-visitor.js'),
    MarkVisibleSelectorsVisitor: $__require('npm:less@2.6.1/lib/less/visitors/set-tree-visibility-visitor.js'),
    ExtendVisitor: $__require('npm:less@2.6.1/lib/less/visitors/extend-visitor.js'),
    JoinSelectorVisitor: $__require('npm:less@2.6.1/lib/less/visitors/join-selector-visitor.js'),
    ToCSSVisitor: $__require('npm:less@2.6.1/lib/less/visitors/to-css-visitor.js')
  };
  module.exports = visitors;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/alpha.js", ["npm:less@2.6.1/lib/less/tree/node.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js');
  var Alpha = function(val) {
    this.value = val;
  };
  Alpha.prototype = new Node();
  Alpha.prototype.type = "Alpha";
  Alpha.prototype.accept = function(visitor) {
    this.value = visitor.visit(this.value);
  };
  Alpha.prototype.eval = function(context) {
    if (this.value.eval) {
      return new Alpha(this.value.eval(context));
    }
    return this;
  };
  Alpha.prototype.genCSS = function(context, output) {
    output.add("alpha(opacity=");
    if (this.value.genCSS) {
      this.value.genCSS(context, output);
    } else {
      output.add(this.value);
    }
    output.add(")");
  };
  module.exports = Alpha;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/detached-ruleset.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/contexts.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js'),
      contexts = $__require('npm:less@2.6.1/lib/less/contexts.js');
  var DetachedRuleset = function(ruleset, frames) {
    this.ruleset = ruleset;
    this.frames = frames;
  };
  DetachedRuleset.prototype = new Node();
  DetachedRuleset.prototype.type = "DetachedRuleset";
  DetachedRuleset.prototype.evalFirst = true;
  DetachedRuleset.prototype.accept = function(visitor) {
    this.ruleset = visitor.visit(this.ruleset);
  };
  DetachedRuleset.prototype.eval = function(context) {
    var frames = this.frames || context.frames.slice(0);
    return new DetachedRuleset(this.ruleset, frames);
  };
  DetachedRuleset.prototype.callEval = function(context) {
    return this.ruleset.eval(this.frames ? new contexts.Eval(context, this.frames.concat(context.frames)) : context);
  };
  module.exports = DetachedRuleset;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/attribute.js", ["npm:less@2.6.1/lib/less/tree/node.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js');
  var Attribute = function(key, op, value) {
    this.key = key;
    this.op = op;
    this.value = value;
  };
  Attribute.prototype = new Node();
  Attribute.prototype.type = "Attribute";
  Attribute.prototype.eval = function(context) {
    return new Attribute(this.key.eval ? this.key.eval(context) : this.key, this.op, (this.value && this.value.eval) ? this.value.eval(context) : this.value);
  };
  Attribute.prototype.genCSS = function(context, output) {
    output.add(this.toCSS(context));
  };
  Attribute.prototype.toCSS = function(context) {
    var value = this.key.toCSS ? this.key.toCSS(context) : this.key;
    if (this.op) {
      value += this.op;
      value += (this.value.toCSS ? this.value.toCSS(context) : this.value);
    }
    return '[' + value + ']';
  };
  module.exports = Attribute;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/functions/function-caller.js", ["npm:less@2.6.1/lib/less/tree/expression.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Expression = $__require('npm:less@2.6.1/lib/less/tree/expression.js');
  var functionCaller = function(name, context, index, currentFileInfo) {
    this.name = name.toLowerCase();
    this.index = index;
    this.context = context;
    this.currentFileInfo = currentFileInfo;
    this.func = context.frames[0].functionRegistry.get(this.name);
  };
  functionCaller.prototype.isValid = function() {
    return Boolean(this.func);
  };
  functionCaller.prototype.call = function(args) {
    if (Array.isArray(args)) {
      args = args.filter(function(item) {
        if (item.type === "Comment") {
          return false;
        }
        return true;
      }).map(function(item) {
        if (item.type === "Expression") {
          var subNodes = item.value.filter(function(item) {
            if (item.type === "Comment") {
              return false;
            }
            return true;
          });
          if (subNodes.length === 1) {
            return subNodes[0];
          } else {
            return new Expression(subNodes);
          }
        }
        return item;
      });
    }
    return this.func.apply(this, args);
  };
  module.exports = functionCaller;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/call.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/functions/function-caller.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js'),
      FunctionCaller = $__require('npm:less@2.6.1/lib/less/functions/function-caller.js');
  var Call = function(name, args, index, currentFileInfo) {
    this.name = name;
    this.args = args;
    this.index = index;
    this.currentFileInfo = currentFileInfo;
  };
  Call.prototype = new Node();
  Call.prototype.type = "Call";
  Call.prototype.accept = function(visitor) {
    if (this.args) {
      this.args = visitor.visitArray(this.args);
    }
  };
  Call.prototype.eval = function(context) {
    var args = this.args.map(function(a) {
      return a.eval(context);
    }),
        result,
        funcCaller = new FunctionCaller(this.name, context, this.index, this.currentFileInfo);
    if (funcCaller.isValid()) {
      try {
        result = funcCaller.call(args);
        if (result != null) {
          return result;
        }
      } catch (e) {
        throw {
          type: e.type || "Runtime",
          message: "error evaluating function `" + this.name + "`" + (e.message ? ': ' + e.message : ''),
          index: this.index,
          filename: this.currentFileInfo.filename
        };
      }
    }
    return new Call(this.name, args, this.index, this.currentFileInfo);
  };
  Call.prototype.genCSS = function(context, output) {
    output.add(this.name + "(", this.currentFileInfo, this.index);
    for (var i = 0; i < this.args.length; i++) {
      this.args[i].genCSS(context, output);
      if (i + 1 < this.args.length) {
        output.add(", ");
      }
    }
    output.add(")");
  };
  module.exports = Call;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/url.js", ["npm:less@2.6.1/lib/less/tree/node.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js');
  var URL = function(val, index, currentFileInfo, isEvald) {
    this.value = val;
    this.currentFileInfo = currentFileInfo;
    this.index = index;
    this.isEvald = isEvald;
  };
  URL.prototype = new Node();
  URL.prototype.type = "Url";
  URL.prototype.accept = function(visitor) {
    this.value = visitor.visit(this.value);
  };
  URL.prototype.genCSS = function(context, output) {
    output.add("url(");
    this.value.genCSS(context, output);
    output.add(")");
  };
  URL.prototype.eval = function(context) {
    var val = this.value.eval(context),
        rootpath;
    if (!this.isEvald) {
      rootpath = this.currentFileInfo && this.currentFileInfo.rootpath;
      if (rootpath && typeof val.value === "string" && context.isPathRelative(val.value)) {
        if (!val.quote) {
          rootpath = rootpath.replace(/[\(\)'"\s]/g, function(match) {
            return "\\" + match;
          });
        }
        val.value = rootpath + val.value;
      }
      val.value = context.normalizePath(val.value);
      if (context.urlArgs) {
        if (!val.value.match(/^\s*data:/)) {
          var delimiter = val.value.indexOf('?') === -1 ? '?' : '&';
          var urlArgs = delimiter + context.urlArgs;
          if (val.value.indexOf('#') !== -1) {
            val.value = val.value.replace('#', urlArgs + '#');
          } else {
            val.value += urlArgs;
          }
        }
      }
    }
    return new URL(val, this.index, this.currentFileInfo, true);
  };
  module.exports = URL;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/import.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/tree/media.js", "npm:less@2.6.1/lib/less/tree/url.js", "npm:less@2.6.1/lib/less/tree/quoted.js", "npm:less@2.6.1/lib/less/tree/ruleset.js", "npm:less@2.6.1/lib/less/tree/anonymous.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js'),
      Media = $__require('npm:less@2.6.1/lib/less/tree/media.js'),
      URL = $__require('npm:less@2.6.1/lib/less/tree/url.js'),
      Quoted = $__require('npm:less@2.6.1/lib/less/tree/quoted.js'),
      Ruleset = $__require('npm:less@2.6.1/lib/less/tree/ruleset.js'),
      Anonymous = $__require('npm:less@2.6.1/lib/less/tree/anonymous.js');
  var Import = function(path, features, options, index, currentFileInfo, visibilityInfo) {
    this.options = options;
    this.index = index;
    this.path = path;
    this.features = features;
    this.currentFileInfo = currentFileInfo;
    if (this.options.less !== undefined || this.options.inline) {
      this.css = !this.options.less || this.options.inline;
    } else {
      var pathValue = this.getPath();
      if (pathValue && /[#\.\&\?\/]css([\?;].*)?$/.test(pathValue)) {
        this.css = true;
      }
    }
    this.copyVisibilityInfo(visibilityInfo);
  };
  Import.prototype = new Node();
  Import.prototype.type = "Import";
  Import.prototype.accept = function(visitor) {
    if (this.features) {
      this.features = visitor.visit(this.features);
    }
    this.path = visitor.visit(this.path);
    if (!this.options.plugin && !this.options.inline && this.root) {
      this.root = visitor.visit(this.root);
    }
  };
  Import.prototype.genCSS = function(context, output) {
    if (this.css && this.path.currentFileInfo.reference === undefined) {
      output.add("@import ", this.currentFileInfo, this.index);
      this.path.genCSS(context, output);
      if (this.features) {
        output.add(" ");
        this.features.genCSS(context, output);
      }
      output.add(';');
    }
  };
  Import.prototype.getPath = function() {
    return (this.path instanceof URL) ? this.path.value.value : this.path.value;
  };
  Import.prototype.isVariableImport = function() {
    var path = this.path;
    if (path instanceof URL) {
      path = path.value;
    }
    if (path instanceof Quoted) {
      return path.containsVariables();
    }
    return true;
  };
  Import.prototype.evalForImport = function(context) {
    var path = this.path;
    if (path instanceof URL) {
      path = path.value;
    }
    return new Import(path.eval(context), this.features, this.options, this.index, this.currentFileInfo, this.visibilityInfo());
  };
  Import.prototype.evalPath = function(context) {
    var path = this.path.eval(context);
    var rootpath = this.currentFileInfo && this.currentFileInfo.rootpath;
    if (!(path instanceof URL)) {
      if (rootpath) {
        var pathValue = path.value;
        if (pathValue && context.isPathRelative(pathValue)) {
          path.value = rootpath + pathValue;
        }
      }
      path.value = context.normalizePath(path.value);
    }
    return path;
  };
  Import.prototype.eval = function(context) {
    var result = this.doEval(context);
    if (this.options.reference || this.blocksVisibility()) {
      if (result.length || result.length === 0) {
        result.forEach(function(node) {
          node.addVisibilityBlock();
        });
      } else {
        result.addVisibilityBlock();
      }
    }
    return result;
  };
  Import.prototype.doEval = function(context) {
    var ruleset,
        registry,
        features = this.features && this.features.eval(context);
    if (this.options.plugin) {
      registry = context.frames[0] && context.frames[0].functionRegistry;
      if (registry && this.root && this.root.functions) {
        registry.addMultiple(this.root.functions);
      }
      return [];
    }
    if (this.skip) {
      if (typeof this.skip === "function") {
        this.skip = this.skip();
      }
      if (this.skip) {
        return [];
      }
    }
    if (this.options.inline) {
      var contents = new Anonymous(this.root, 0, {
        filename: this.importedFilename,
        reference: this.path.currentFileInfo && this.path.currentFileInfo.reference
      }, true, true);
      return this.features ? new Media([contents], this.features.value) : [contents];
    } else if (this.css) {
      var newImport = new Import(this.evalPath(context), features, this.options, this.index);
      if (!newImport.css && this.error) {
        throw this.error;
      }
      return newImport;
    } else {
      ruleset = new Ruleset(null, this.root.rules.slice(0));
      ruleset.evalImports(context);
      return this.features ? new Media(ruleset.rules, this.features.value) : ruleset.rules;
    }
  };
  module.exports = Import;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/mixin-call.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/tree/selector.js", "npm:less@2.6.1/lib/less/tree/mixin-definition.js", "npm:less@2.6.1/lib/less/functions/default.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js'),
      Selector = $__require('npm:less@2.6.1/lib/less/tree/selector.js'),
      MixinDefinition = $__require('npm:less@2.6.1/lib/less/tree/mixin-definition.js'),
      defaultFunc = $__require('npm:less@2.6.1/lib/less/functions/default.js');
  var MixinCall = function(elements, args, index, currentFileInfo, important) {
    this.selector = new Selector(elements);
    this.arguments = args || [];
    this.index = index;
    this.currentFileInfo = currentFileInfo;
    this.important = important;
  };
  MixinCall.prototype = new Node();
  MixinCall.prototype.type = "MixinCall";
  MixinCall.prototype.accept = function(visitor) {
    if (this.selector) {
      this.selector = visitor.visit(this.selector);
    }
    if (this.arguments.length) {
      this.arguments = visitor.visitArray(this.arguments);
    }
  };
  MixinCall.prototype.eval = function(context) {
    var mixins,
        mixin,
        mixinPath,
        args = [],
        arg,
        argValue,
        rules = [],
        match = false,
        i,
        m,
        f,
        isRecursive,
        isOneFound,
        candidates = [],
        candidate,
        conditionResult = [],
        defaultResult,
        defFalseEitherCase = -1,
        defNone = 0,
        defTrue = 1,
        defFalse = 2,
        count,
        originalRuleset,
        noArgumentsFilter;
    function calcDefGroup(mixin, mixinPath) {
      var f,
          p,
          namespace;
      for (f = 0; f < 2; f++) {
        conditionResult[f] = true;
        defaultFunc.value(f);
        for (p = 0; p < mixinPath.length && conditionResult[f]; p++) {
          namespace = mixinPath[p];
          if (namespace.matchCondition) {
            conditionResult[f] = conditionResult[f] && namespace.matchCondition(null, context);
          }
        }
        if (mixin.matchCondition) {
          conditionResult[f] = conditionResult[f] && mixin.matchCondition(args, context);
        }
      }
      if (conditionResult[0] || conditionResult[1]) {
        if (conditionResult[0] != conditionResult[1]) {
          return conditionResult[1] ? defTrue : defFalse;
        }
        return defNone;
      }
      return defFalseEitherCase;
    }
    for (i = 0; i < this.arguments.length; i++) {
      arg = this.arguments[i];
      argValue = arg.value.eval(context);
      if (arg.expand && Array.isArray(argValue.value)) {
        argValue = argValue.value;
        for (m = 0; m < argValue.length; m++) {
          args.push({value: argValue[m]});
        }
      } else {
        args.push({
          name: arg.name,
          value: argValue
        });
      }
    }
    noArgumentsFilter = function(rule) {
      return rule.matchArgs(null, context);
    };
    for (i = 0; i < context.frames.length; i++) {
      if ((mixins = context.frames[i].find(this.selector, null, noArgumentsFilter)).length > 0) {
        isOneFound = true;
        for (m = 0; m < mixins.length; m++) {
          mixin = mixins[m].rule;
          mixinPath = mixins[m].path;
          isRecursive = false;
          for (f = 0; f < context.frames.length; f++) {
            if ((!(mixin instanceof MixinDefinition)) && mixin === (context.frames[f].originalRuleset || context.frames[f])) {
              isRecursive = true;
              break;
            }
          }
          if (isRecursive) {
            continue;
          }
          if (mixin.matchArgs(args, context)) {
            candidate = {
              mixin: mixin,
              group: calcDefGroup(mixin, mixinPath)
            };
            if (candidate.group !== defFalseEitherCase) {
              candidates.push(candidate);
            }
            match = true;
          }
        }
        defaultFunc.reset();
        count = [0, 0, 0];
        for (m = 0; m < candidates.length; m++) {
          count[candidates[m].group]++;
        }
        if (count[defNone] > 0) {
          defaultResult = defFalse;
        } else {
          defaultResult = defTrue;
          if ((count[defTrue] + count[defFalse]) > 1) {
            throw {
              type: 'Runtime',
              message: 'Ambiguous use of `default()` found when matching for `' + this.format(args) + '`',
              index: this.index,
              filename: this.currentFileInfo.filename
            };
          }
        }
        for (m = 0; m < candidates.length; m++) {
          candidate = candidates[m].group;
          if ((candidate === defNone) || (candidate === defaultResult)) {
            try {
              mixin = candidates[m].mixin;
              if (!(mixin instanceof MixinDefinition)) {
                originalRuleset = mixin.originalRuleset || mixin;
                mixin = new MixinDefinition("", [], mixin.rules, null, false, null, originalRuleset.visibilityInfo());
                mixin.originalRuleset = originalRuleset;
              }
              var newRules = mixin.evalCall(context, args, this.important).rules;
              this._setVisibilityToReplacement(newRules);
              Array.prototype.push.apply(rules, newRules);
            } catch (e) {
              throw {
                message: e.message,
                index: this.index,
                filename: this.currentFileInfo.filename,
                stack: e.stack
              };
            }
          }
        }
        if (match) {
          return rules;
        }
      }
    }
    if (isOneFound) {
      throw {
        type: 'Runtime',
        message: 'No matching definition was found for `' + this.format(args) + '`',
        index: this.index,
        filename: this.currentFileInfo.filename
      };
    } else {
      throw {
        type: 'Name',
        message: this.selector.toCSS().trim() + " is undefined",
        index: this.index,
        filename: this.currentFileInfo.filename
      };
    }
  };
  MixinCall.prototype._setVisibilityToReplacement = function(replacement) {
    var i,
        rule;
    if (this.blocksVisibility()) {
      for (i = 0; i < replacement.length; i++) {
        rule = replacement[i];
        rule.addVisibilityBlock();
      }
    }
  };
  MixinCall.prototype.format = function(args) {
    return this.selector.toCSS().trim() + '(' + (args ? args.map(function(a) {
      var argValue = "";
      if (a.name) {
        argValue += a.name + ":";
      }
      if (a.value.toCSS) {
        argValue += a.value.toCSS();
      } else {
        argValue += "???";
      }
      return argValue;
    }).join(', ') : "") + ")";
  };
  module.exports = MixinCall;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/mixin-definition.js", ["npm:less@2.6.1/lib/less/tree/selector.js", "npm:less@2.6.1/lib/less/tree/element.js", "npm:less@2.6.1/lib/less/tree/ruleset.js", "npm:less@2.6.1/lib/less/tree/rule.js", "npm:less@2.6.1/lib/less/tree/expression.js", "npm:less@2.6.1/lib/less/contexts.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Selector = $__require('npm:less@2.6.1/lib/less/tree/selector.js'),
      Element = $__require('npm:less@2.6.1/lib/less/tree/element.js'),
      Ruleset = $__require('npm:less@2.6.1/lib/less/tree/ruleset.js'),
      Rule = $__require('npm:less@2.6.1/lib/less/tree/rule.js'),
      Expression = $__require('npm:less@2.6.1/lib/less/tree/expression.js'),
      contexts = $__require('npm:less@2.6.1/lib/less/contexts.js');
  var Definition = function(name, params, rules, condition, variadic, frames, visibilityInfo) {
    this.name = name;
    this.selectors = [new Selector([new Element(null, name, this.index, this.currentFileInfo)])];
    this.params = params;
    this.condition = condition;
    this.variadic = variadic;
    this.arity = params.length;
    this.rules = rules;
    this._lookups = {};
    var optionalParameters = [];
    this.required = params.reduce(function(count, p) {
      if (!p.name || (p.name && !p.value)) {
        return count + 1;
      } else {
        optionalParameters.push(p.name);
        return count;
      }
    }, 0);
    this.optionalParameters = optionalParameters;
    this.frames = frames;
    this.copyVisibilityInfo(visibilityInfo);
  };
  Definition.prototype = new Ruleset();
  Definition.prototype.type = "MixinDefinition";
  Definition.prototype.evalFirst = true;
  Definition.prototype.accept = function(visitor) {
    if (this.params && this.params.length) {
      this.params = visitor.visitArray(this.params);
    }
    this.rules = visitor.visitArray(this.rules);
    if (this.condition) {
      this.condition = visitor.visit(this.condition);
    }
  };
  Definition.prototype.evalParams = function(context, mixinEnv, args, evaldArguments) {
    var frame = new Ruleset(null, null),
        varargs,
        arg,
        params = this.params.slice(0),
        i,
        j,
        val,
        name,
        isNamedFound,
        argIndex,
        argsLength = 0;
    if (mixinEnv.frames && mixinEnv.frames[0] && mixinEnv.frames[0].functionRegistry) {
      frame.functionRegistry = mixinEnv.frames[0].functionRegistry.inherit();
    }
    mixinEnv = new contexts.Eval(mixinEnv, [frame].concat(mixinEnv.frames));
    if (args) {
      args = args.slice(0);
      argsLength = args.length;
      for (i = 0; i < argsLength; i++) {
        arg = args[i];
        if (name = (arg && arg.name)) {
          isNamedFound = false;
          for (j = 0; j < params.length; j++) {
            if (!evaldArguments[j] && name === params[j].name) {
              evaldArguments[j] = arg.value.eval(context);
              frame.prependRule(new Rule(name, arg.value.eval(context)));
              isNamedFound = true;
              break;
            }
          }
          if (isNamedFound) {
            args.splice(i, 1);
            i--;
            continue;
          } else {
            throw {
              type: 'Runtime',
              message: "Named argument for " + this.name + ' ' + args[i].name + ' not found'
            };
          }
        }
      }
    }
    argIndex = 0;
    for (i = 0; i < params.length; i++) {
      if (evaldArguments[i]) {
        continue;
      }
      arg = args && args[argIndex];
      if (name = params[i].name) {
        if (params[i].variadic) {
          varargs = [];
          for (j = argIndex; j < argsLength; j++) {
            varargs.push(args[j].value.eval(context));
          }
          frame.prependRule(new Rule(name, new Expression(varargs).eval(context)));
        } else {
          val = arg && arg.value;
          if (val) {
            val = val.eval(context);
          } else if (params[i].value) {
            val = params[i].value.eval(mixinEnv);
            frame.resetCache();
          } else {
            throw {
              type: 'Runtime',
              message: "wrong number of arguments for " + this.name + ' (' + argsLength + ' for ' + this.arity + ')'
            };
          }
          frame.prependRule(new Rule(name, val));
          evaldArguments[i] = val;
        }
      }
      if (params[i].variadic && args) {
        for (j = argIndex; j < argsLength; j++) {
          evaldArguments[j] = args[j].value.eval(context);
        }
      }
      argIndex++;
    }
    return frame;
  };
  Definition.prototype.makeImportant = function() {
    var rules = !this.rules ? this.rules : this.rules.map(function(r) {
      if (r.makeImportant) {
        return r.makeImportant(true);
      } else {
        return r;
      }
    });
    var result = new Definition(this.name, this.params, rules, this.condition, this.variadic, this.frames);
    return result;
  };
  Definition.prototype.eval = function(context) {
    return new Definition(this.name, this.params, this.rules, this.condition, this.variadic, this.frames || context.frames.slice(0));
  };
  Definition.prototype.evalCall = function(context, args, important) {
    var _arguments = [],
        mixinFrames = this.frames ? this.frames.concat(context.frames) : context.frames,
        frame = this.evalParams(context, new contexts.Eval(context, mixinFrames), args, _arguments),
        rules,
        ruleset;
    frame.prependRule(new Rule('@arguments', new Expression(_arguments).eval(context)));
    rules = this.rules.slice(0);
    ruleset = new Ruleset(null, rules);
    ruleset.originalRuleset = this;
    ruleset = ruleset.eval(new contexts.Eval(context, [this, frame].concat(mixinFrames)));
    if (important) {
      ruleset = ruleset.makeImportant();
    }
    return ruleset;
  };
  Definition.prototype.matchCondition = function(args, context) {
    if (this.condition && !this.condition.eval(new contexts.Eval(context, [this.evalParams(context, new contexts.Eval(context, this.frames ? this.frames.concat(context.frames) : context.frames), args, [])].concat(this.frames || []).concat(context.frames)))) {
      return false;
    }
    return true;
  };
  Definition.prototype.matchArgs = function(args, context) {
    var allArgsCnt = (args && args.length) || 0,
        len,
        optionalParameters = this.optionalParameters;
    var requiredArgsCnt = !args ? 0 : args.reduce(function(count, p) {
      if (optionalParameters.indexOf(p.name) < 0) {
        return count + 1;
      } else {
        return count;
      }
    }, 0);
    if (!this.variadic) {
      if (requiredArgsCnt < this.required) {
        return false;
      }
      if (allArgsCnt > this.params.length) {
        return false;
      }
    } else {
      if (requiredArgsCnt < (this.required - 1)) {
        return false;
      }
    }
    len = Math.min(requiredArgsCnt, this.arity);
    for (var i = 0; i < len; i++) {
      if (!this.params[i].name && !this.params[i].variadic) {
        if (args[i].value.eval(context).toCSS() != this.params[i].value.eval(context).toCSS()) {
          return false;
        }
      }
    }
    return true;
  };
  module.exports = Definition;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/js-eval-node.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/tree/variable.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js'),
      Variable = $__require('npm:less@2.6.1/lib/less/tree/variable.js');
  var JsEvalNode = function() {};
  JsEvalNode.prototype = new Node();
  JsEvalNode.prototype.evaluateJavaScript = function(expression, context) {
    var result,
        that = this,
        evalContext = {};
    if (context.javascriptEnabled !== undefined && !context.javascriptEnabled) {
      throw {
        message: "You are using JavaScript, which has been disabled.",
        filename: this.currentFileInfo.filename,
        index: this.index
      };
    }
    expression = expression.replace(/@\{([\w-]+)\}/g, function(_, name) {
      return that.jsify(new Variable('@' + name, that.index, that.currentFileInfo).eval(context));
    });
    try {
      expression = new Function('return (' + expression + ')');
    } catch (e) {
      throw {
        message: "JavaScript evaluation error: " + e.message + " from `" + expression + "`",
        filename: this.currentFileInfo.filename,
        index: this.index
      };
    }
    var variables = context.frames[0].variables();
    for (var k in variables) {
      if (variables.hasOwnProperty(k)) {
        evalContext[k.slice(1)] = {
          value: variables[k].value,
          toJS: function() {
            return this.value.eval(context).toCSS();
          }
        };
      }
    }
    try {
      result = expression.call(evalContext);
    } catch (e) {
      throw {
        message: "JavaScript evaluation error: '" + e.name + ': ' + e.message.replace(/["]/g, "'") + "'",
        filename: this.currentFileInfo.filename,
        index: this.index
      };
    }
    return result;
  };
  JsEvalNode.prototype.jsify = function(obj) {
    if (Array.isArray(obj.value) && (obj.value.length > 1)) {
      return '[' + obj.value.map(function(v) {
        return v.toCSS();
      }).join(', ') + ']';
    } else {
      return obj.toCSS();
    }
  };
  module.exports = JsEvalNode;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/quoted.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/tree/js-eval-node.js", "npm:less@2.6.1/lib/less/tree/variable.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js'),
      JsEvalNode = $__require('npm:less@2.6.1/lib/less/tree/js-eval-node.js'),
      Variable = $__require('npm:less@2.6.1/lib/less/tree/variable.js');
  var Quoted = function(str, content, escaped, index, currentFileInfo) {
    this.escaped = (escaped == null) ? true : escaped;
    this.value = content || '';
    this.quote = str.charAt(0);
    this.index = index;
    this.currentFileInfo = currentFileInfo;
  };
  Quoted.prototype = new JsEvalNode();
  Quoted.prototype.type = "Quoted";
  Quoted.prototype.genCSS = function(context, output) {
    if (!this.escaped) {
      output.add(this.quote, this.currentFileInfo, this.index);
    }
    output.add(this.value);
    if (!this.escaped) {
      output.add(this.quote);
    }
  };
  Quoted.prototype.containsVariables = function() {
    return this.value.match(/(`([^`]+)`)|@\{([\w-]+)\}/);
  };
  Quoted.prototype.eval = function(context) {
    var that = this,
        value = this.value;
    var javascriptReplacement = function(_, exp) {
      return String(that.evaluateJavaScript(exp, context));
    };
    var interpolationReplacement = function(_, name) {
      var v = new Variable('@' + name, that.index, that.currentFileInfo).eval(context, true);
      return (v instanceof Quoted) ? v.value : v.toCSS();
    };
    function iterativeReplace(value, regexp, replacementFnc) {
      var evaluatedValue = value;
      do {
        value = evaluatedValue;
        evaluatedValue = value.replace(regexp, replacementFnc);
      } while (value !== evaluatedValue);
      return evaluatedValue;
    }
    value = iterativeReplace(value, /`([^`]+)`/g, javascriptReplacement);
    value = iterativeReplace(value, /@\{([\w-]+)\}/g, interpolationReplacement);
    return new Quoted(this.quote + value + this.quote, value, this.escaped, this.index, this.currentFileInfo);
  };
  Quoted.prototype.compare = function(other) {
    if (other.type === "Quoted" && !this.escaped && !other.escaped) {
      return Node.numericCompare(this.value, other.value);
    } else {
      return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;
    }
  };
  module.exports = Quoted;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/javascript.js", ["npm:less@2.6.1/lib/less/tree/js-eval-node.js", "npm:less@2.6.1/lib/less/tree/dimension.js", "npm:less@2.6.1/lib/less/tree/quoted.js", "npm:less@2.6.1/lib/less/tree/anonymous.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var JsEvalNode = $__require('npm:less@2.6.1/lib/less/tree/js-eval-node.js'),
      Dimension = $__require('npm:less@2.6.1/lib/less/tree/dimension.js'),
      Quoted = $__require('npm:less@2.6.1/lib/less/tree/quoted.js'),
      Anonymous = $__require('npm:less@2.6.1/lib/less/tree/anonymous.js');
  var JavaScript = function(string, escaped, index, currentFileInfo) {
    this.escaped = escaped;
    this.expression = string;
    this.index = index;
    this.currentFileInfo = currentFileInfo;
  };
  JavaScript.prototype = new JsEvalNode();
  JavaScript.prototype.type = "JavaScript";
  JavaScript.prototype.eval = function(context) {
    var result = this.evaluateJavaScript(this.expression, context);
    if (typeof result === 'number') {
      return new Dimension(result);
    } else if (typeof result === 'string') {
      return new Quoted('"' + result + '"', result, this.escaped, this.index);
    } else if (Array.isArray(result)) {
      return new Anonymous(result.join(', '));
    } else {
      return new Anonymous(result);
    }
  };
  module.exports = JavaScript;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/assignment.js", ["npm:less@2.6.1/lib/less/tree/node.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js');
  var Assignment = function(key, val) {
    this.key = key;
    this.value = val;
  };
  Assignment.prototype = new Node();
  Assignment.prototype.type = "Assignment";
  Assignment.prototype.accept = function(visitor) {
    this.value = visitor.visit(this.value);
  };
  Assignment.prototype.eval = function(context) {
    if (this.value.eval) {
      return new Assignment(this.key, this.value.eval(context));
    }
    return this;
  };
  Assignment.prototype.genCSS = function(context, output) {
    output.add(this.key + '=');
    if (this.value.genCSS) {
      this.value.genCSS(context, output);
    } else {
      output.add(this.value);
    }
  };
  module.exports = Assignment;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/condition.js", ["npm:less@2.6.1/lib/less/tree/node.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js');
  var Condition = function(op, l, r, i, negate) {
    this.op = op.trim();
    this.lvalue = l;
    this.rvalue = r;
    this.index = i;
    this.negate = negate;
  };
  Condition.prototype = new Node();
  Condition.prototype.type = "Condition";
  Condition.prototype.accept = function(visitor) {
    this.lvalue = visitor.visit(this.lvalue);
    this.rvalue = visitor.visit(this.rvalue);
  };
  Condition.prototype.eval = function(context) {
    var result = (function(op, a, b) {
      switch (op) {
        case 'and':
          return a && b;
        case 'or':
          return a || b;
        default:
          switch (Node.compare(a, b)) {
            case -1:
              return op === '<' || op === '=<' || op === '<=';
            case 0:
              return op === '=' || op === '>=' || op === '=<' || op === '<=';
            case 1:
              return op === '>' || op === '>=';
            default:
              return false;
          }
      }
    })(this.op, this.lvalue.eval(context), this.rvalue.eval(context));
    return this.negate ? !result : result;
  };
  module.exports = Condition;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/anonymous.js", ["npm:less@2.6.1/lib/less/tree/node.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js');
  var Anonymous = function(value, index, currentFileInfo, mapLines, rulesetLike, visibilityInfo) {
    this.value = value;
    this.index = index;
    this.mapLines = mapLines;
    this.currentFileInfo = currentFileInfo;
    this.rulesetLike = (typeof rulesetLike === 'undefined') ? false : rulesetLike;
    this.copyVisibilityInfo(visibilityInfo);
  };
  Anonymous.prototype = new Node();
  Anonymous.prototype.type = "Anonymous";
  Anonymous.prototype.eval = function() {
    return new Anonymous(this.value, this.index, this.currentFileInfo, this.mapLines, this.rulesetLike, this.visibilityInfo());
  };
  Anonymous.prototype.compare = function(other) {
    return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;
  };
  Anonymous.prototype.isRulesetLike = function() {
    return this.rulesetLike;
  };
  Anonymous.prototype.genCSS = function(context, output) {
    output.add(this.value, this.currentFileInfo, this.index, this.mapLines);
  };
  module.exports = Anonymous;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/value.js", ["npm:less@2.6.1/lib/less/tree/node.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js');
  var Value = function(value) {
    this.value = value;
    if (!value) {
      throw new Error("Value requires an array argument");
    }
  };
  Value.prototype = new Node();
  Value.prototype.type = "Value";
  Value.prototype.accept = function(visitor) {
    if (this.value) {
      this.value = visitor.visitArray(this.value);
    }
  };
  Value.prototype.eval = function(context) {
    if (this.value.length === 1) {
      return this.value[0].eval(context);
    } else {
      return new Value(this.value.map(function(v) {
        return v.eval(context);
      }));
    }
  };
  Value.prototype.genCSS = function(context, output) {
    var i;
    for (i = 0; i < this.value.length; i++) {
      this.value[i].genCSS(context, output);
      if (i + 1 < this.value.length) {
        output.add((context && context.compress) ? ',' : ', ');
      }
    }
  };
  module.exports = Value;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/rule.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/tree/value.js", "npm:less@2.6.1/lib/less/tree/keyword.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js'),
      Value = $__require('npm:less@2.6.1/lib/less/tree/value.js'),
      Keyword = $__require('npm:less@2.6.1/lib/less/tree/keyword.js');
  var Rule = function(name, value, important, merge, index, currentFileInfo, inline, variable) {
    this.name = name;
    this.value = (value instanceof Node) ? value : new Value([value]);
    this.important = important ? ' ' + important.trim() : '';
    this.merge = merge;
    this.index = index;
    this.currentFileInfo = currentFileInfo;
    this.inline = inline || false;
    this.variable = (variable !== undefined) ? variable : (name.charAt && (name.charAt(0) === '@'));
  };
  function evalName(context, name) {
    var value = "",
        i,
        n = name.length,
        output = {add: function(s) {
            value += s;
          }};
    for (i = 0; i < n; i++) {
      name[i].eval(context).genCSS(context, output);
    }
    return value;
  }
  Rule.prototype = new Node();
  Rule.prototype.type = "Rule";
  Rule.prototype.genCSS = function(context, output) {
    output.add(this.name + (context.compress ? ':' : ': '), this.currentFileInfo, this.index);
    try {
      this.value.genCSS(context, output);
    } catch (e) {
      e.index = this.index;
      e.filename = this.currentFileInfo.filename;
      throw e;
    }
    output.add(this.important + ((this.inline || (context.lastRule && context.compress)) ? "" : ";"), this.currentFileInfo, this.index);
  };
  Rule.prototype.eval = function(context) {
    var strictMathBypass = false,
        name = this.name,
        evaldValue,
        variable = this.variable;
    if (typeof name !== "string") {
      name = (name.length === 1) && (name[0] instanceof Keyword) ? name[0].value : evalName(context, name);
      variable = false;
    }
    if (name === "font" && !context.strictMath) {
      strictMathBypass = true;
      context.strictMath = true;
    }
    try {
      context.importantScope.push({});
      evaldValue = this.value.eval(context);
      if (!this.variable && evaldValue.type === "DetachedRuleset") {
        throw {
          message: "Rulesets cannot be evaluated on a property.",
          index: this.index,
          filename: this.currentFileInfo.filename
        };
      }
      var important = this.important,
          importantResult = context.importantScope.pop();
      if (!important && importantResult.important) {
        important = importantResult.important;
      }
      return new Rule(name, evaldValue, important, this.merge, this.index, this.currentFileInfo, this.inline, variable);
    } catch (e) {
      if (typeof e.index !== 'number') {
        e.index = this.index;
        e.filename = this.currentFileInfo.filename;
      }
      throw e;
    } finally {
      if (strictMathBypass) {
        context.strictMath = false;
      }
    }
  };
  Rule.prototype.makeImportant = function() {
    return new Rule(this.name, this.value, "!important", this.merge, this.index, this.currentFileInfo, this.inline);
  };
  module.exports = Rule;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/contexts.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var contexts = {};
  module.exports = contexts;
  var copyFromOriginal = function copyFromOriginal(original, destination, propertiesToCopy) {
    if (!original) {
      return;
    }
    for (var i = 0; i < propertiesToCopy.length; i++) {
      if (original.hasOwnProperty(propertiesToCopy[i])) {
        destination[propertiesToCopy[i]] = original[propertiesToCopy[i]];
      }
    }
  };
  var parseCopyProperties = ['paths', 'relativeUrls', 'rootpath', 'strictImports', 'insecure', 'dumpLineNumbers', 'compress', 'syncImport', 'chunkInput', 'mime', 'useFileCache', 'processImports', 'pluginManager'];
  contexts.Parse = function(options) {
    copyFromOriginal(options, this, parseCopyProperties);
    if (typeof this.paths === "string") {
      this.paths = [this.paths];
    }
  };
  var evalCopyProperties = ['paths', 'compress', 'ieCompat', 'strictMath', 'strictUnits', 'sourceMap', 'importMultiple', 'urlArgs', 'javascriptEnabled', 'pluginManager', 'importantScope'];
  contexts.Eval = function(options, frames) {
    copyFromOriginal(options, this, evalCopyProperties);
    if (typeof this.paths === "string") {
      this.paths = [this.paths];
    }
    this.frames = frames || [];
    this.importantScope = this.importantScope || [];
  };
  contexts.Eval.prototype.inParenthesis = function() {
    if (!this.parensStack) {
      this.parensStack = [];
    }
    this.parensStack.push(true);
  };
  contexts.Eval.prototype.outOfParenthesis = function() {
    this.parensStack.pop();
  };
  contexts.Eval.prototype.isMathOn = function() {
    return this.strictMath ? (this.parensStack && this.parensStack.length) : true;
  };
  contexts.Eval.prototype.isPathRelative = function(path) {
    return !/^(?:[a-z-]+:|\/|#)/i.test(path);
  };
  contexts.Eval.prototype.normalizePath = function(path) {
    var segments = path.split("/").reverse(),
        segment;
    path = [];
    while (segments.length !== 0) {
      segment = segments.pop();
      switch (segment) {
        case ".":
          break;
        case "..":
          if ((path.length === 0) || (path[path.length - 1] === "..")) {
            path.push(segment);
          } else {
            path.pop();
          }
          break;
        default:
          path.push(segment);
          break;
      }
    }
    return path.join("/");
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/keyword.js", ["npm:less@2.6.1/lib/less/tree/node.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js');
  var Keyword = function(value) {
    this.value = value;
  };
  Keyword.prototype = new Node();
  Keyword.prototype.type = "Keyword";
  Keyword.prototype.genCSS = function(context, output) {
    if (this.value === '%') {
      throw {
        type: "Syntax",
        message: "Invalid % without number"
      };
    }
    output.add(this.value);
  };
  Keyword.True = new Keyword('true');
  Keyword.False = new Keyword('false');
  module.exports = Keyword;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/functions/default.js", ["npm:less@2.6.1/lib/less/tree/keyword.js", "npm:less@2.6.1/lib/less/functions/function-registry.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Keyword = $__require('npm:less@2.6.1/lib/less/tree/keyword.js'),
      functionRegistry = $__require('npm:less@2.6.1/lib/less/functions/function-registry.js');
  var defaultFunc = {
    eval: function() {
      var v = this.value_,
          e = this.error_;
      if (e) {
        throw e;
      }
      if (v != null) {
        return v ? Keyword.True : Keyword.False;
      }
    },
    value: function(v) {
      this.value_ = v;
    },
    error: function(e) {
      this.error_ = e;
    },
    reset: function() {
      this.value_ = this.error_ = null;
    }
  };
  functionRegistry.add("default", defaultFunc.eval.bind(defaultFunc));
  module.exports = defaultFunc;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/ruleset.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/tree/rule.js", "npm:less@2.6.1/lib/less/tree/selector.js", "npm:less@2.6.1/lib/less/tree/element.js", "npm:less@2.6.1/lib/less/tree/paren.js", "npm:less@2.6.1/lib/less/contexts.js", "npm:less@2.6.1/lib/less/functions/function-registry.js", "npm:less@2.6.1/lib/less/functions/default.js", "npm:less@2.6.1/lib/less/tree/debug-info.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js'),
      Rule = $__require('npm:less@2.6.1/lib/less/tree/rule.js'),
      Selector = $__require('npm:less@2.6.1/lib/less/tree/selector.js'),
      Element = $__require('npm:less@2.6.1/lib/less/tree/element.js'),
      Paren = $__require('npm:less@2.6.1/lib/less/tree/paren.js'),
      contexts = $__require('npm:less@2.6.1/lib/less/contexts.js'),
      globalFunctionRegistry = $__require('npm:less@2.6.1/lib/less/functions/function-registry.js'),
      defaultFunc = $__require('npm:less@2.6.1/lib/less/functions/default.js'),
      getDebugInfo = $__require('npm:less@2.6.1/lib/less/tree/debug-info.js');
  var Ruleset = function(selectors, rules, strictImports, visibilityInfo) {
    this.selectors = selectors;
    this.rules = rules;
    this._lookups = {};
    this.strictImports = strictImports;
    this.copyVisibilityInfo(visibilityInfo);
  };
  Ruleset.prototype = new Node();
  Ruleset.prototype.type = "Ruleset";
  Ruleset.prototype.isRuleset = true;
  Ruleset.prototype.isRulesetLike = true;
  Ruleset.prototype.accept = function(visitor) {
    if (this.paths) {
      this.paths = visitor.visitArray(this.paths, true);
    } else if (this.selectors) {
      this.selectors = visitor.visitArray(this.selectors);
    }
    if (this.rules && this.rules.length) {
      this.rules = visitor.visitArray(this.rules);
    }
  };
  Ruleset.prototype.eval = function(context) {
    var thisSelectors = this.selectors,
        selectors,
        selCnt,
        selector,
        i,
        hasOnePassingSelector = false;
    if (thisSelectors && (selCnt = thisSelectors.length)) {
      selectors = [];
      defaultFunc.error({
        type: "Syntax",
        message: "it is currently only allowed in parametric mixin guards,"
      });
      for (i = 0; i < selCnt; i++) {
        selector = thisSelectors[i].eval(context);
        selectors.push(selector);
        if (selector.evaldCondition) {
          hasOnePassingSelector = true;
        }
      }
      defaultFunc.reset();
    } else {
      hasOnePassingSelector = true;
    }
    var rules = this.rules ? this.rules.slice(0) : null,
        ruleset = new Ruleset(selectors, rules, this.strictImports, this.visibilityInfo()),
        rule,
        subRule;
    ruleset.originalRuleset = this;
    ruleset.root = this.root;
    ruleset.firstRoot = this.firstRoot;
    ruleset.allowImports = this.allowImports;
    if (this.debugInfo) {
      ruleset.debugInfo = this.debugInfo;
    }
    if (!hasOnePassingSelector) {
      rules.length = 0;
    }
    ruleset.functionRegistry = (function(frames) {
      var i = 0,
          n = frames.length,
          found;
      for (; i !== n; ++i) {
        found = frames[i].functionRegistry;
        if (found) {
          return found;
        }
      }
      return globalFunctionRegistry;
    }(context.frames)).inherit();
    var ctxFrames = context.frames;
    ctxFrames.unshift(ruleset);
    var ctxSelectors = context.selectors;
    if (!ctxSelectors) {
      context.selectors = ctxSelectors = [];
    }
    ctxSelectors.unshift(this.selectors);
    if (ruleset.root || ruleset.allowImports || !ruleset.strictImports) {
      ruleset.evalImports(context);
    }
    var rsRules = ruleset.rules,
        rsRuleCnt = rsRules ? rsRules.length : 0;
    for (i = 0; i < rsRuleCnt; i++) {
      if (rsRules[i].evalFirst) {
        rsRules[i] = rsRules[i].eval(context);
      }
    }
    var mediaBlockCount = (context.mediaBlocks && context.mediaBlocks.length) || 0;
    for (i = 0; i < rsRuleCnt; i++) {
      if (rsRules[i].type === "MixinCall") {
        rules = rsRules[i].eval(context).filter(function(r) {
          if ((r instanceof Rule) && r.variable) {
            return !(ruleset.variable(r.name));
          }
          return true;
        });
        rsRules.splice.apply(rsRules, [i, 1].concat(rules));
        rsRuleCnt += rules.length - 1;
        i += rules.length - 1;
        ruleset.resetCache();
      } else if (rsRules[i].type === "RulesetCall") {
        rules = rsRules[i].eval(context).rules.filter(function(r) {
          if ((r instanceof Rule) && r.variable) {
            return false;
          }
          return true;
        });
        rsRules.splice.apply(rsRules, [i, 1].concat(rules));
        rsRuleCnt += rules.length - 1;
        i += rules.length - 1;
        ruleset.resetCache();
      }
    }
    for (i = 0; i < rsRules.length; i++) {
      rule = rsRules[i];
      if (!rule.evalFirst) {
        rsRules[i] = rule = rule.eval ? rule.eval(context) : rule;
      }
    }
    for (i = 0; i < rsRules.length; i++) {
      rule = rsRules[i];
      if (rule instanceof Ruleset && rule.selectors && rule.selectors.length === 1) {
        if (rule.selectors[0].isJustParentSelector()) {
          rsRules.splice(i--, 1);
          for (var j = 0; j < rule.rules.length; j++) {
            subRule = rule.rules[j];
            subRule.copyVisibilityInfo(rule.visibilityInfo());
            if (!(subRule instanceof Rule) || !subRule.variable) {
              rsRules.splice(++i, 0, subRule);
            }
          }
        }
      }
    }
    ctxFrames.shift();
    ctxSelectors.shift();
    if (context.mediaBlocks) {
      for (i = mediaBlockCount; i < context.mediaBlocks.length; i++) {
        context.mediaBlocks[i].bubbleSelectors(selectors);
      }
    }
    return ruleset;
  };
  Ruleset.prototype.evalImports = function(context) {
    var rules = this.rules,
        i,
        importRules;
    if (!rules) {
      return;
    }
    for (i = 0; i < rules.length; i++) {
      if (rules[i].type === "Import") {
        importRules = rules[i].eval(context);
        if (importRules && (importRules.length || importRules.length === 0)) {
          rules.splice.apply(rules, [i, 1].concat(importRules));
          i += importRules.length - 1;
        } else {
          rules.splice(i, 1, importRules);
        }
        this.resetCache();
      }
    }
  };
  Ruleset.prototype.makeImportant = function() {
    var result = new Ruleset(this.selectors, this.rules.map(function(r) {
      if (r.makeImportant) {
        return r.makeImportant();
      } else {
        return r;
      }
    }), this.strictImports, this.visibilityInfo());
    return result;
  };
  Ruleset.prototype.matchArgs = function(args) {
    return !args || args.length === 0;
  };
  Ruleset.prototype.matchCondition = function(args, context) {
    var lastSelector = this.selectors[this.selectors.length - 1];
    if (!lastSelector.evaldCondition) {
      return false;
    }
    if (lastSelector.condition && !lastSelector.condition.eval(new contexts.Eval(context, context.frames))) {
      return false;
    }
    return true;
  };
  Ruleset.prototype.resetCache = function() {
    this._rulesets = null;
    this._variables = null;
    this._lookups = {};
  };
  Ruleset.prototype.variables = function() {
    if (!this._variables) {
      this._variables = !this.rules ? {} : this.rules.reduce(function(hash, r) {
        if (r instanceof Rule && r.variable === true) {
          hash[r.name] = r;
        }
        if (r.type === "Import" && r.root && r.root.variables) {
          var vars = r.root.variables();
          for (var name in vars) {
            if (vars.hasOwnProperty(name)) {
              hash[name] = vars[name];
            }
          }
        }
        return hash;
      }, {});
    }
    return this._variables;
  };
  Ruleset.prototype.variable = function(name) {
    return this.variables()[name];
  };
  Ruleset.prototype.rulesets = function() {
    if (!this.rules) {
      return [];
    }
    var filtRules = [],
        rules = this.rules,
        cnt = rules.length,
        i,
        rule;
    for (i = 0; i < cnt; i++) {
      rule = rules[i];
      if (rule.isRuleset) {
        filtRules.push(rule);
      }
    }
    return filtRules;
  };
  Ruleset.prototype.prependRule = function(rule) {
    var rules = this.rules;
    if (rules) {
      rules.unshift(rule);
    } else {
      this.rules = [rule];
    }
  };
  Ruleset.prototype.find = function(selector, self, filter) {
    self = self || this;
    var rules = [],
        match,
        foundMixins,
        key = selector.toCSS();
    if (key in this._lookups) {
      return this._lookups[key];
    }
    this.rulesets().forEach(function(rule) {
      if (rule !== self) {
        for (var j = 0; j < rule.selectors.length; j++) {
          match = selector.match(rule.selectors[j]);
          if (match) {
            if (selector.elements.length > match) {
              if (!filter || filter(rule)) {
                foundMixins = rule.find(new Selector(selector.elements.slice(match)), self, filter);
                for (var i = 0; i < foundMixins.length; ++i) {
                  foundMixins[i].path.push(rule);
                }
                Array.prototype.push.apply(rules, foundMixins);
              }
            } else {
              rules.push({
                rule: rule,
                path: []
              });
            }
            break;
          }
        }
      }
    });
    this._lookups[key] = rules;
    return rules;
  };
  Ruleset.prototype.genCSS = function(context, output) {
    var i,
        j,
        charsetRuleNodes = [],
        ruleNodes = [],
        debugInfo,
        rule,
        path;
    context.tabLevel = (context.tabLevel || 0);
    if (!this.root) {
      context.tabLevel++;
    }
    var tabRuleStr = context.compress ? '' : Array(context.tabLevel + 1).join("  "),
        tabSetStr = context.compress ? '' : Array(context.tabLevel).join("  "),
        sep;
    function isRulesetLikeNode(rule) {
      if (typeof rule.isRulesetLike === "boolean") {
        return rule.isRulesetLike;
      } else if (typeof rule.isRulesetLike === "function") {
        return rule.isRulesetLike();
      }
      return false;
    }
    var charsetNodeIndex = 0;
    var importNodeIndex = 0;
    for (i = 0; i < this.rules.length; i++) {
      rule = this.rules[i];
      if (rule.type === "Comment") {
        if (importNodeIndex === i) {
          importNodeIndex++;
        }
        ruleNodes.push(rule);
      } else if (rule.isCharset && rule.isCharset()) {
        ruleNodes.splice(charsetNodeIndex, 0, rule);
        charsetNodeIndex++;
        importNodeIndex++;
      } else if (rule.type === "Import") {
        ruleNodes.splice(importNodeIndex, 0, rule);
        importNodeIndex++;
      } else {
        ruleNodes.push(rule);
      }
    }
    ruleNodes = charsetRuleNodes.concat(ruleNodes);
    if (!this.root) {
      debugInfo = getDebugInfo(context, this, tabSetStr);
      if (debugInfo) {
        output.add(debugInfo);
        output.add(tabSetStr);
      }
      var paths = this.paths,
          pathCnt = paths.length,
          pathSubCnt;
      sep = context.compress ? ',' : (',\n' + tabSetStr);
      for (i = 0; i < pathCnt; i++) {
        path = paths[i];
        if (!(pathSubCnt = path.length)) {
          continue;
        }
        if (i > 0) {
          output.add(sep);
        }
        context.firstSelector = true;
        path[0].genCSS(context, output);
        context.firstSelector = false;
        for (j = 1; j < pathSubCnt; j++) {
          path[j].genCSS(context, output);
        }
      }
      output.add((context.compress ? '{' : ' {\n') + tabRuleStr);
    }
    for (i = 0; i < ruleNodes.length; i++) {
      rule = ruleNodes[i];
      if (i + 1 === ruleNodes.length) {
        context.lastRule = true;
      }
      var currentLastRule = context.lastRule;
      if (isRulesetLikeNode(rule)) {
        context.lastRule = false;
      }
      if (rule.genCSS) {
        rule.genCSS(context, output);
      } else if (rule.value) {
        output.add(rule.value.toString());
      }
      context.lastRule = currentLastRule;
      if (!context.lastRule) {
        output.add(context.compress ? '' : ('\n' + tabRuleStr));
      } else {
        context.lastRule = false;
      }
    }
    if (!this.root) {
      output.add((context.compress ? '}' : '\n' + tabSetStr + '}'));
      context.tabLevel--;
    }
    if (!output.isEmpty() && !context.compress && this.firstRoot) {
      output.add('\n');
    }
  };
  Ruleset.prototype.joinSelectors = function(paths, context, selectors) {
    for (var s = 0; s < selectors.length; s++) {
      this.joinSelector(paths, context, selectors[s]);
    }
  };
  Ruleset.prototype.joinSelector = function(paths, context, selector) {
    function createParenthesis(elementsToPak, originalElement) {
      var replacementParen,
          j;
      if (elementsToPak.length === 0) {
        replacementParen = new Paren(elementsToPak[0]);
      } else {
        var insideParent = [];
        for (j = 0; j < elementsToPak.length; j++) {
          insideParent.push(new Element(null, elementsToPak[j], originalElement.index, originalElement.currentFileInfo));
        }
        replacementParen = new Paren(new Selector(insideParent));
      }
      return replacementParen;
    }
    function createSelector(containedElement, originalElement) {
      var element,
          selector;
      element = new Element(null, containedElement, originalElement.index, originalElement.currentFileInfo);
      selector = new Selector([element]);
      return selector;
    }
    function addReplacementIntoPath(beginningPath, addPath, replacedElement, originalSelector) {
      var newSelectorPath,
          lastSelector,
          newJoinedSelector;
      newSelectorPath = [];
      if (beginningPath.length > 0) {
        newSelectorPath = beginningPath.slice(0);
        lastSelector = newSelectorPath.pop();
        newJoinedSelector = originalSelector.createDerived(lastSelector.elements.slice(0));
      } else {
        newJoinedSelector = originalSelector.createDerived([]);
      }
      if (addPath.length > 0) {
        var combinator = replacedElement.combinator,
            parentEl = addPath[0].elements[0];
        if (combinator.emptyOrWhitespace && !parentEl.combinator.emptyOrWhitespace) {
          combinator = parentEl.combinator;
        }
        newJoinedSelector.elements.push(new Element(combinator, parentEl.value, replacedElement.index, replacedElement.currentFileInfo));
        newJoinedSelector.elements = newJoinedSelector.elements.concat(addPath[0].elements.slice(1));
      }
      if (newJoinedSelector.elements.length !== 0) {
        newSelectorPath.push(newJoinedSelector);
      }
      if (addPath.length > 1) {
        var restOfPath = addPath.slice(1);
        restOfPath = restOfPath.map(function(selector) {
          return selector.createDerived(selector.elements, []);
        });
        newSelectorPath = newSelectorPath.concat(restOfPath);
      }
      return newSelectorPath;
    }
    function addAllReplacementsIntoPath(beginningPath, addPaths, replacedElement, originalSelector, result) {
      var j;
      for (j = 0; j < beginningPath.length; j++) {
        var newSelectorPath = addReplacementIntoPath(beginningPath[j], addPaths, replacedElement, originalSelector);
        result.push(newSelectorPath);
      }
      return result;
    }
    function mergeElementsOnToSelectors(elements, selectors) {
      var i,
          sel;
      if (elements.length === 0) {
        return;
      }
      if (selectors.length === 0) {
        selectors.push([new Selector(elements)]);
        return;
      }
      for (i = 0; i < selectors.length; i++) {
        sel = selectors[i];
        if (sel.length > 0) {
          sel[sel.length - 1] = sel[sel.length - 1].createDerived(sel[sel.length - 1].elements.concat(elements));
        } else {
          sel.push(new Selector(elements));
        }
      }
    }
    function replaceParentSelector(paths, context, inSelector) {
      var i,
          j,
          k,
          currentElements,
          newSelectors,
          selectorsMultiplied,
          sel,
          el,
          hadParentSelector = false,
          length,
          lastSelector;
      function findNestedSelector(element) {
        var maybeSelector;
        if (element.value.type !== 'Paren') {
          return null;
        }
        maybeSelector = element.value.value;
        if (maybeSelector.type !== 'Selector') {
          return null;
        }
        return maybeSelector;
      }
      currentElements = [];
      newSelectors = [[]];
      for (i = 0; i < inSelector.elements.length; i++) {
        el = inSelector.elements[i];
        if (el.value !== "&") {
          var nestedSelector = findNestedSelector(el);
          if (nestedSelector != null) {
            mergeElementsOnToSelectors(currentElements, newSelectors);
            var nestedPaths = [],
                replaced,
                replacedNewSelectors = [];
            replaced = replaceParentSelector(nestedPaths, context, nestedSelector);
            hadParentSelector = hadParentSelector || replaced;
            for (k = 0; k < nestedPaths.length; k++) {
              var replacementSelector = createSelector(createParenthesis(nestedPaths[k], el), el);
              addAllReplacementsIntoPath(newSelectors, [replacementSelector], el, inSelector, replacedNewSelectors);
            }
            newSelectors = replacedNewSelectors;
            currentElements = [];
          } else {
            currentElements.push(el);
          }
        } else {
          hadParentSelector = true;
          selectorsMultiplied = [];
          mergeElementsOnToSelectors(currentElements, newSelectors);
          for (j = 0; j < newSelectors.length; j++) {
            sel = newSelectors[j];
            if (context.length === 0) {
              if (sel.length > 0) {
                sel[0].elements.push(new Element(el.combinator, '', el.index, el.currentFileInfo));
              }
              selectorsMultiplied.push(sel);
            } else {
              for (k = 0; k < context.length; k++) {
                var newSelectorPath = addReplacementIntoPath(sel, context[k], el, inSelector);
                selectorsMultiplied.push(newSelectorPath);
              }
            }
          }
          newSelectors = selectorsMultiplied;
          currentElements = [];
        }
      }
      mergeElementsOnToSelectors(currentElements, newSelectors);
      for (i = 0; i < newSelectors.length; i++) {
        length = newSelectors[i].length;
        if (length > 0) {
          paths.push(newSelectors[i]);
          lastSelector = newSelectors[i][length - 1];
          newSelectors[i][length - 1] = lastSelector.createDerived(lastSelector.elements, inSelector.extendList);
        }
      }
      return hadParentSelector;
    }
    function deriveSelector(visibilityInfo, deriveFrom) {
      var newSelector = deriveFrom.createDerived(deriveFrom.elements, deriveFrom.extendList, deriveFrom.evaldCondition);
      newSelector.copyVisibilityInfo(visibilityInfo);
      return newSelector;
    }
    var i,
        newPaths,
        hadParentSelector;
    newPaths = [];
    hadParentSelector = replaceParentSelector(newPaths, context, selector);
    if (!hadParentSelector) {
      if (context.length > 0) {
        newPaths = [];
        for (i = 0; i < context.length; i++) {
          var concatenated = context[i].map(deriveSelector.bind(this, selector.visibilityInfo()));
          concatenated.push(selector);
          newPaths.push(concatenated);
        }
      } else {
        newPaths = [[selector]];
      }
    }
    for (i = 0; i < newPaths.length; i++) {
      paths.push(newPaths[i]);
    }
  };
  module.exports = Ruleset;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/directive.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/tree/selector.js", "npm:less@2.6.1/lib/less/tree/ruleset.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js'),
      Selector = $__require('npm:less@2.6.1/lib/less/tree/selector.js'),
      Ruleset = $__require('npm:less@2.6.1/lib/less/tree/ruleset.js');
  var Directive = function(name, value, rules, index, currentFileInfo, debugInfo, isRooted, visibilityInfo) {
    var i;
    this.name = name;
    this.value = value;
    if (rules) {
      if (Array.isArray(rules)) {
        this.rules = rules;
      } else {
        this.rules = [rules];
        this.rules[0].selectors = (new Selector([], null, null, this.index, currentFileInfo)).createEmptySelectors();
      }
      for (i = 0; i < this.rules.length; i++) {
        this.rules[i].allowImports = true;
      }
    }
    this.index = index;
    this.currentFileInfo = currentFileInfo;
    this.debugInfo = debugInfo;
    this.isRooted = isRooted || false;
    this.copyVisibilityInfo(visibilityInfo);
  };
  Directive.prototype = new Node();
  Directive.prototype.type = "Directive";
  Directive.prototype.accept = function(visitor) {
    var value = this.value,
        rules = this.rules;
    if (rules) {
      this.rules = visitor.visitArray(rules);
    }
    if (value) {
      this.value = visitor.visit(value);
    }
  };
  Directive.prototype.isRulesetLike = function() {
    return this.rules || !this.isCharset();
  };
  Directive.prototype.isCharset = function() {
    return "@charset" === this.name;
  };
  Directive.prototype.genCSS = function(context, output) {
    var value = this.value,
        rules = this.rules;
    output.add(this.name, this.currentFileInfo, this.index);
    if (value) {
      output.add(' ');
      value.genCSS(context, output);
    }
    if (rules) {
      this.outputRuleset(context, output, rules);
    } else {
      output.add(';');
    }
  };
  Directive.prototype.eval = function(context) {
    var mediaPathBackup,
        mediaBlocksBackup,
        value = this.value,
        rules = this.rules;
    mediaPathBackup = context.mediaPath;
    mediaBlocksBackup = context.mediaBlocks;
    context.mediaPath = [];
    context.mediaBlocks = [];
    if (value) {
      value = value.eval(context);
    }
    if (rules) {
      rules = [rules[0].eval(context)];
      rules[0].root = true;
    }
    context.mediaPath = mediaPathBackup;
    context.mediaBlocks = mediaBlocksBackup;
    return new Directive(this.name, value, rules, this.index, this.currentFileInfo, this.debugInfo, this.isRooted, this.visibilityInfo());
  };
  Directive.prototype.variable = function(name) {
    if (this.rules) {
      return Ruleset.prototype.variable.call(this.rules[0], name);
    }
  };
  Directive.prototype.find = function() {
    if (this.rules) {
      return Ruleset.prototype.find.apply(this.rules[0], arguments);
    }
  };
  Directive.prototype.rulesets = function() {
    if (this.rules) {
      return Ruleset.prototype.rulesets.apply(this.rules[0]);
    }
  };
  Directive.prototype.outputRuleset = function(context, output, rules) {
    var ruleCnt = rules.length,
        i;
    context.tabLevel = (context.tabLevel | 0) + 1;
    if (context.compress) {
      output.add('{');
      for (i = 0; i < ruleCnt; i++) {
        rules[i].genCSS(context, output);
      }
      output.add('}');
      context.tabLevel--;
      return;
    }
    var tabSetStr = '\n' + Array(context.tabLevel).join("  "),
        tabRuleStr = tabSetStr + "  ";
    if (!ruleCnt) {
      output.add(" {" + tabSetStr + '}');
    } else {
      output.add(" {" + tabRuleStr);
      rules[0].genCSS(context, output);
      for (i = 1; i < ruleCnt; i++) {
        output.add(tabRuleStr);
        rules[i].genCSS(context, output);
      }
      output.add(tabSetStr + '}');
    }
    context.tabLevel--;
  };
  module.exports = Directive;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/media.js", ["npm:less@2.6.1/lib/less/tree/ruleset.js", "npm:less@2.6.1/lib/less/tree/value.js", "npm:less@2.6.1/lib/less/tree/selector.js", "npm:less@2.6.1/lib/less/tree/anonymous.js", "npm:less@2.6.1/lib/less/tree/expression.js", "npm:less@2.6.1/lib/less/tree/directive.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Ruleset = $__require('npm:less@2.6.1/lib/less/tree/ruleset.js'),
      Value = $__require('npm:less@2.6.1/lib/less/tree/value.js'),
      Selector = $__require('npm:less@2.6.1/lib/less/tree/selector.js'),
      Anonymous = $__require('npm:less@2.6.1/lib/less/tree/anonymous.js'),
      Expression = $__require('npm:less@2.6.1/lib/less/tree/expression.js'),
      Directive = $__require('npm:less@2.6.1/lib/less/tree/directive.js');
  var Media = function(value, features, index, currentFileInfo, visibilityInfo) {
    this.index = index;
    this.currentFileInfo = currentFileInfo;
    var selectors = (new Selector([], null, null, this.index, this.currentFileInfo)).createEmptySelectors();
    this.features = new Value(features);
    this.rules = [new Ruleset(selectors, value)];
    this.rules[0].allowImports = true;
    this.copyVisibilityInfo(visibilityInfo);
  };
  Media.prototype = new Directive();
  Media.prototype.type = "Media";
  Media.prototype.isRulesetLike = true;
  Media.prototype.accept = function(visitor) {
    if (this.features) {
      this.features = visitor.visit(this.features);
    }
    if (this.rules) {
      this.rules = visitor.visitArray(this.rules);
    }
  };
  Media.prototype.genCSS = function(context, output) {
    output.add('@media ', this.currentFileInfo, this.index);
    this.features.genCSS(context, output);
    this.outputRuleset(context, output, this.rules);
  };
  Media.prototype.eval = function(context) {
    if (!context.mediaBlocks) {
      context.mediaBlocks = [];
      context.mediaPath = [];
    }
    var media = new Media(null, [], this.index, this.currentFileInfo, this.visibilityInfo());
    if (this.debugInfo) {
      this.rules[0].debugInfo = this.debugInfo;
      media.debugInfo = this.debugInfo;
    }
    var strictMathBypass = false;
    if (!context.strictMath) {
      strictMathBypass = true;
      context.strictMath = true;
    }
    try {
      media.features = this.features.eval(context);
    } finally {
      if (strictMathBypass) {
        context.strictMath = false;
      }
    }
    context.mediaPath.push(media);
    context.mediaBlocks.push(media);
    this.rules[0].functionRegistry = context.frames[0].functionRegistry.inherit();
    context.frames.unshift(this.rules[0]);
    media.rules = [this.rules[0].eval(context)];
    context.frames.shift();
    context.mediaPath.pop();
    return context.mediaPath.length === 0 ? media.evalTop(context) : media.evalNested(context);
  };
  Media.prototype.evalTop = function(context) {
    var result = this;
    if (context.mediaBlocks.length > 1) {
      var selectors = (new Selector([], null, null, this.index, this.currentFileInfo)).createEmptySelectors();
      result = new Ruleset(selectors, context.mediaBlocks);
      result.multiMedia = true;
      result.copyVisibilityInfo(this.visibilityInfo());
    }
    delete context.mediaBlocks;
    delete context.mediaPath;
    return result;
  };
  Media.prototype.evalNested = function(context) {
    var i,
        value,
        path = context.mediaPath.concat([this]);
    for (i = 0; i < path.length; i++) {
      value = path[i].features instanceof Value ? path[i].features.value : path[i].features;
      path[i] = Array.isArray(value) ? value : [value];
    }
    this.features = new Value(this.permute(path).map(function(path) {
      path = path.map(function(fragment) {
        return fragment.toCSS ? fragment : new Anonymous(fragment);
      });
      for (i = path.length - 1; i > 0; i--) {
        path.splice(i, 0, new Anonymous("and"));
      }
      return new Expression(path);
    }));
    return new Ruleset([], []);
  };
  Media.prototype.permute = function(arr) {
    if (arr.length === 0) {
      return [];
    } else if (arr.length === 1) {
      return arr[0];
    } else {
      var result = [];
      var rest = this.permute(arr.slice(1));
      for (var i = 0; i < rest.length; i++) {
        for (var j = 0; j < arr[0].length; j++) {
          result.push([arr[0][j]].concat(rest[i]));
        }
      }
      return result;
    }
  };
  Media.prototype.bubbleSelectors = function(selectors) {
    if (!selectors) {
      return;
    }
    this.rules = [new Ruleset(selectors.slice(0), [this.rules[0]])];
  };
  module.exports = Media;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/unicode-descriptor.js", ["npm:less@2.6.1/lib/less/tree/node.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js');
  var UnicodeDescriptor = function(value) {
    this.value = value;
  };
  UnicodeDescriptor.prototype = new Node();
  UnicodeDescriptor.prototype.type = "UnicodeDescriptor";
  module.exports = UnicodeDescriptor;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/operation.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/tree/color.js", "npm:less@2.6.1/lib/less/tree/dimension.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js'),
      Color = $__require('npm:less@2.6.1/lib/less/tree/color.js'),
      Dimension = $__require('npm:less@2.6.1/lib/less/tree/dimension.js');
  var Operation = function(op, operands, isSpaced) {
    this.op = op.trim();
    this.operands = operands;
    this.isSpaced = isSpaced;
  };
  Operation.prototype = new Node();
  Operation.prototype.type = "Operation";
  Operation.prototype.accept = function(visitor) {
    this.operands = visitor.visit(this.operands);
  };
  Operation.prototype.eval = function(context) {
    var a = this.operands[0].eval(context),
        b = this.operands[1].eval(context);
    if (context.isMathOn()) {
      if (a instanceof Dimension && b instanceof Color) {
        a = a.toColor();
      }
      if (b instanceof Dimension && a instanceof Color) {
        b = b.toColor();
      }
      if (!a.operate) {
        throw {
          type: "Operation",
          message: "Operation on an invalid type"
        };
      }
      return a.operate(context, this.op, b);
    } else {
      return new Operation(this.op, [a, b], this.isSpaced);
    }
  };
  Operation.prototype.genCSS = function(context, output) {
    this.operands[0].genCSS(context, output);
    if (this.isSpaced) {
      output.add(" ");
    }
    output.add(this.op);
    if (this.isSpaced) {
      output.add(" ");
    }
    this.operands[1].genCSS(context, output);
  };
  module.exports = Operation;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/negative.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/tree/operation.js", "npm:less@2.6.1/lib/less/tree/dimension.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js'),
      Operation = $__require('npm:less@2.6.1/lib/less/tree/operation.js'),
      Dimension = $__require('npm:less@2.6.1/lib/less/tree/dimension.js');
  var Negative = function(node) {
    this.value = node;
  };
  Negative.prototype = new Node();
  Negative.prototype.type = "Negative";
  Negative.prototype.genCSS = function(context, output) {
    output.add('-');
    this.value.genCSS(context, output);
  };
  Negative.prototype.eval = function(context) {
    if (context.isMathOn()) {
      return (new Operation('*', [new Dimension(-1), this.value])).eval(context);
    }
    return new Negative(this.value.eval(context));
  };
  module.exports = Negative;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/combinator.js", ["npm:less@2.6.1/lib/less/tree/node.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js');
  var Combinator = function(value) {
    if (value === ' ') {
      this.value = ' ';
      this.emptyOrWhitespace = true;
    } else {
      this.value = value ? value.trim() : "";
      this.emptyOrWhitespace = this.value === "";
    }
  };
  Combinator.prototype = new Node();
  Combinator.prototype.type = "Combinator";
  var _noSpaceCombinators = {
    '': true,
    ' ': true,
    '|': true
  };
  Combinator.prototype.genCSS = function(context, output) {
    var spaceOrEmpty = (context.compress || _noSpaceCombinators[this.value]) ? '' : ' ';
    output.add(spaceOrEmpty + this.value + spaceOrEmpty);
  };
  module.exports = Combinator;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/element.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/tree/paren.js", "npm:less@2.6.1/lib/less/tree/combinator.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js'),
      Paren = $__require('npm:less@2.6.1/lib/less/tree/paren.js'),
      Combinator = $__require('npm:less@2.6.1/lib/less/tree/combinator.js');
  var Element = function(combinator, value, index, currentFileInfo, info) {
    this.combinator = combinator instanceof Combinator ? combinator : new Combinator(combinator);
    if (typeof value === 'string') {
      this.value = value.trim();
    } else if (value) {
      this.value = value;
    } else {
      this.value = "";
    }
    this.index = index;
    this.currentFileInfo = currentFileInfo;
    this.copyVisibilityInfo(info);
  };
  Element.prototype = new Node();
  Element.prototype.type = "Element";
  Element.prototype.accept = function(visitor) {
    var value = this.value;
    this.combinator = visitor.visit(this.combinator);
    if (typeof value === "object") {
      this.value = visitor.visit(value);
    }
  };
  Element.prototype.eval = function(context) {
    return new Element(this.combinator, this.value.eval ? this.value.eval(context) : this.value, this.index, this.currentFileInfo, this.visibilityInfo());
  };
  Element.prototype.clone = function() {
    return new Element(this.combinator, this.value, this.index, this.currentFileInfo, this.visibilityInfo());
  };
  Element.prototype.genCSS = function(context, output) {
    output.add(this.toCSS(context), this.currentFileInfo, this.index);
  };
  Element.prototype.toCSS = function(context) {
    context = context || {};
    var value = this.value,
        firstSelector = context.firstSelector;
    if (value instanceof Paren) {
      context.firstSelector = true;
    }
    value = value.toCSS ? value.toCSS(context) : value;
    context.firstSelector = firstSelector;
    if (value === '' && this.combinator.value.charAt(0) === '&') {
      return '';
    } else {
      return this.combinator.toCSS(context) + value;
    }
  };
  module.exports = Element;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/selector.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/tree/element.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js'),
      Element = $__require('npm:less@2.6.1/lib/less/tree/element.js');
  var Selector = function(elements, extendList, condition, index, currentFileInfo, visibilityInfo) {
    this.elements = elements;
    this.extendList = extendList;
    this.condition = condition;
    this.currentFileInfo = currentFileInfo || {};
    if (!condition) {
      this.evaldCondition = true;
    }
    this.copyVisibilityInfo(visibilityInfo);
  };
  Selector.prototype = new Node();
  Selector.prototype.type = "Selector";
  Selector.prototype.accept = function(visitor) {
    if (this.elements) {
      this.elements = visitor.visitArray(this.elements);
    }
    if (this.extendList) {
      this.extendList = visitor.visitArray(this.extendList);
    }
    if (this.condition) {
      this.condition = visitor.visit(this.condition);
    }
  };
  Selector.prototype.createDerived = function(elements, extendList, evaldCondition) {
    var info = this.visibilityInfo();
    evaldCondition = (evaldCondition != null) ? evaldCondition : this.evaldCondition;
    var newSelector = new Selector(elements, extendList || this.extendList, null, this.index, this.currentFileInfo, info);
    newSelector.evaldCondition = evaldCondition;
    newSelector.mediaEmpty = this.mediaEmpty;
    return newSelector;
  };
  Selector.prototype.createEmptySelectors = function() {
    var el = new Element('', '&', this.index, this.currentFileInfo),
        sels = [new Selector([el], null, null, this.index, this.currentFileInfo)];
    sels[0].mediaEmpty = true;
    return sels;
  };
  Selector.prototype.match = function(other) {
    var elements = this.elements,
        len = elements.length,
        olen,
        i;
    other.CacheElements();
    olen = other._elements.length;
    if (olen === 0 || len < olen) {
      return 0;
    } else {
      for (i = 0; i < olen; i++) {
        if (elements[i].value !== other._elements[i]) {
          return 0;
        }
      }
    }
    return olen;
  };
  Selector.prototype.CacheElements = function() {
    if (this._elements) {
      return;
    }
    var elements = this.elements.map(function(v) {
      return v.combinator.value + (v.value.value || v.value);
    }).join("").match(/[,&#\*\.\w-]([\w-]|(\\.))*/g);
    if (elements) {
      if (elements[0] === "&") {
        elements.shift();
      }
    } else {
      elements = [];
    }
    this._elements = elements;
  };
  Selector.prototype.isJustParentSelector = function() {
    return !this.mediaEmpty && this.elements.length === 1 && this.elements[0].value === '&' && (this.elements[0].combinator.value === ' ' || this.elements[0].combinator.value === '');
  };
  Selector.prototype.eval = function(context) {
    var evaldCondition = this.condition && this.condition.eval(context),
        elements = this.elements,
        extendList = this.extendList;
    elements = elements && elements.map(function(e) {
      return e.eval(context);
    });
    extendList = extendList && extendList.map(function(extend) {
      return extend.eval(context);
    });
    return this.createDerived(elements, extendList, evaldCondition);
  };
  Selector.prototype.genCSS = function(context, output) {
    var i,
        element;
    if ((!context || !context.firstSelector) && this.elements[0].combinator.value === "") {
      output.add(' ', this.currentFileInfo, this.index);
    }
    if (!this._css) {
      for (i = 0; i < this.elements.length; i++) {
        element = this.elements[i];
        element.genCSS(context, output);
      }
    }
  };
  Selector.prototype.getIsOutput = function() {
    return this.evaldCondition;
  };
  module.exports = Selector;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/extend.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/tree/selector.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js'),
      Selector = $__require('npm:less@2.6.1/lib/less/tree/selector.js');
  var Extend = function Extend(selector, option, index, currentFileInfo, visibilityInfo) {
    this.selector = selector;
    this.option = option;
    this.index = index;
    this.object_id = Extend.next_id++;
    this.parent_ids = [this.object_id];
    this.currentFileInfo = currentFileInfo || {};
    this.copyVisibilityInfo(visibilityInfo);
    switch (option) {
      case "all":
        this.allowBefore = true;
        this.allowAfter = true;
        break;
      default:
        this.allowBefore = false;
        this.allowAfter = false;
        break;
    }
  };
  Extend.next_id = 0;
  Extend.prototype = new Node();
  Extend.prototype.type = "Extend";
  Extend.prototype.accept = function(visitor) {
    this.selector = visitor.visit(this.selector);
  };
  Extend.prototype.eval = function(context) {
    return new Extend(this.selector.eval(context), this.option, this.index, this.currentFileInfo, this.visibilityInfo());
  };
  Extend.prototype.clone = function(context) {
    return new Extend(this.selector, this.option, this.index, this.currentFileInfo, this.visibilityInfo());
  };
  Extend.prototype.findSelfSelectors = function(selectors) {
    var selfElements = [],
        i,
        selectorElements;
    for (i = 0; i < selectors.length; i++) {
      selectorElements = selectors[i].elements;
      if (i > 0 && selectorElements.length && selectorElements[0].combinator.value === "") {
        selectorElements[0].combinator.value = ' ';
      }
      selfElements = selfElements.concat(selectors[i].elements);
    }
    this.selfSelectors = [new Selector(selfElements)];
    this.selfSelectors[0].copyVisibilityInfo(this.visibilityInfo());
  };
  module.exports = Extend;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/variable.js", ["npm:less@2.6.1/lib/less/tree/node.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js');
  var Variable = function(name, index, currentFileInfo) {
    this.name = name;
    this.index = index;
    this.currentFileInfo = currentFileInfo || {};
  };
  Variable.prototype = new Node();
  Variable.prototype.type = "Variable";
  Variable.prototype.eval = function(context) {
    var variable,
        name = this.name;
    if (name.indexOf('@@') === 0) {
      name = '@' + new Variable(name.slice(1), this.index, this.currentFileInfo).eval(context).value;
    }
    if (this.evaluating) {
      throw {
        type: 'Name',
        message: "Recursive variable definition for " + name,
        filename: this.currentFileInfo.filename,
        index: this.index
      };
    }
    this.evaluating = true;
    variable = this.find(context.frames, function(frame) {
      var v = frame.variable(name);
      if (v) {
        if (v.important) {
          var importantScope = context.importantScope[context.importantScope.length - 1];
          importantScope.important = v.important;
        }
        return v.value.eval(context);
      }
    });
    if (variable) {
      this.evaluating = false;
      return variable;
    } else {
      throw {
        type: 'Name',
        message: "variable " + name + " is undefined",
        filename: this.currentFileInfo.filename,
        index: this.index
      };
    }
  };
  Variable.prototype.find = function(obj, fun) {
    for (var i = 0,
        r; i < obj.length; i++) {
      r = fun.call(obj, obj[i]);
      if (r) {
        return r;
      }
    }
    return null;
  };
  module.exports = Variable;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/ruleset-call.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/tree/variable.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js'),
      Variable = $__require('npm:less@2.6.1/lib/less/tree/variable.js');
  var RulesetCall = function(variable) {
    this.variable = variable;
  };
  RulesetCall.prototype = new Node();
  RulesetCall.prototype.type = "RulesetCall";
  RulesetCall.prototype.eval = function(context) {
    var detachedRuleset = new Variable(this.variable).eval(context);
    return detachedRuleset.callEval(context);
  };
  module.exports = RulesetCall;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/index.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/tree/alpha.js", "npm:less@2.6.1/lib/less/tree/color.js", "npm:less@2.6.1/lib/less/tree/directive.js", "npm:less@2.6.1/lib/less/tree/detached-ruleset.js", "npm:less@2.6.1/lib/less/tree/operation.js", "npm:less@2.6.1/lib/less/tree/dimension.js", "npm:less@2.6.1/lib/less/tree/unit.js", "npm:less@2.6.1/lib/less/tree/keyword.js", "npm:less@2.6.1/lib/less/tree/variable.js", "npm:less@2.6.1/lib/less/tree/ruleset.js", "npm:less@2.6.1/lib/less/tree/element.js", "npm:less@2.6.1/lib/less/tree/attribute.js", "npm:less@2.6.1/lib/less/tree/combinator.js", "npm:less@2.6.1/lib/less/tree/selector.js", "npm:less@2.6.1/lib/less/tree/quoted.js", "npm:less@2.6.1/lib/less/tree/expression.js", "npm:less@2.6.1/lib/less/tree/rule.js", "npm:less@2.6.1/lib/less/tree/call.js", "npm:less@2.6.1/lib/less/tree/url.js", "npm:less@2.6.1/lib/less/tree/import.js", "npm:less@2.6.1/lib/less/tree/mixin-call.js", "npm:less@2.6.1/lib/less/tree/mixin-definition.js", "npm:less@2.6.1/lib/less/tree/comment.js", "npm:less@2.6.1/lib/less/tree/anonymous.js", "npm:less@2.6.1/lib/less/tree/value.js", "npm:less@2.6.1/lib/less/tree/javascript.js", "npm:less@2.6.1/lib/less/tree/assignment.js", "npm:less@2.6.1/lib/less/tree/condition.js", "npm:less@2.6.1/lib/less/tree/paren.js", "npm:less@2.6.1/lib/less/tree/media.js", "npm:less@2.6.1/lib/less/tree/unicode-descriptor.js", "npm:less@2.6.1/lib/less/tree/negative.js", "npm:less@2.6.1/lib/less/tree/extend.js", "npm:less@2.6.1/lib/less/tree/ruleset-call.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var tree = {};
  tree.Node = $__require('npm:less@2.6.1/lib/less/tree/node.js');
  tree.Alpha = $__require('npm:less@2.6.1/lib/less/tree/alpha.js');
  tree.Color = $__require('npm:less@2.6.1/lib/less/tree/color.js');
  tree.Directive = $__require('npm:less@2.6.1/lib/less/tree/directive.js');
  tree.DetachedRuleset = $__require('npm:less@2.6.1/lib/less/tree/detached-ruleset.js');
  tree.Operation = $__require('npm:less@2.6.1/lib/less/tree/operation.js');
  tree.Dimension = $__require('npm:less@2.6.1/lib/less/tree/dimension.js');
  tree.Unit = $__require('npm:less@2.6.1/lib/less/tree/unit.js');
  tree.Keyword = $__require('npm:less@2.6.1/lib/less/tree/keyword.js');
  tree.Variable = $__require('npm:less@2.6.1/lib/less/tree/variable.js');
  tree.Ruleset = $__require('npm:less@2.6.1/lib/less/tree/ruleset.js');
  tree.Element = $__require('npm:less@2.6.1/lib/less/tree/element.js');
  tree.Attribute = $__require('npm:less@2.6.1/lib/less/tree/attribute.js');
  tree.Combinator = $__require('npm:less@2.6.1/lib/less/tree/combinator.js');
  tree.Selector = $__require('npm:less@2.6.1/lib/less/tree/selector.js');
  tree.Quoted = $__require('npm:less@2.6.1/lib/less/tree/quoted.js');
  tree.Expression = $__require('npm:less@2.6.1/lib/less/tree/expression.js');
  tree.Rule = $__require('npm:less@2.6.1/lib/less/tree/rule.js');
  tree.Call = $__require('npm:less@2.6.1/lib/less/tree/call.js');
  tree.URL = $__require('npm:less@2.6.1/lib/less/tree/url.js');
  tree.Import = $__require('npm:less@2.6.1/lib/less/tree/import.js');
  tree.mixin = {
    Call: $__require('npm:less@2.6.1/lib/less/tree/mixin-call.js'),
    Definition: $__require('npm:less@2.6.1/lib/less/tree/mixin-definition.js')
  };
  tree.Comment = $__require('npm:less@2.6.1/lib/less/tree/comment.js');
  tree.Anonymous = $__require('npm:less@2.6.1/lib/less/tree/anonymous.js');
  tree.Value = $__require('npm:less@2.6.1/lib/less/tree/value.js');
  tree.JavaScript = $__require('npm:less@2.6.1/lib/less/tree/javascript.js');
  tree.Assignment = $__require('npm:less@2.6.1/lib/less/tree/assignment.js');
  tree.Condition = $__require('npm:less@2.6.1/lib/less/tree/condition.js');
  tree.Paren = $__require('npm:less@2.6.1/lib/less/tree/paren.js');
  tree.Media = $__require('npm:less@2.6.1/lib/less/tree/media.js');
  tree.UnicodeDescriptor = $__require('npm:less@2.6.1/lib/less/tree/unicode-descriptor.js');
  tree.Negative = $__require('npm:less@2.6.1/lib/less/tree/negative.js');
  tree.Extend = $__require('npm:less@2.6.1/lib/less/tree/extend.js');
  tree.RulesetCall = $__require('npm:less@2.6.1/lib/less/tree/ruleset-call.js');
  module.exports = tree;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/transform-tree.js", ["npm:less@2.6.1/lib/less/contexts.js", "npm:less@2.6.1/lib/less/visitors/index.js", "npm:less@2.6.1/lib/less/tree/index.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var contexts = $__require('npm:less@2.6.1/lib/less/contexts.js'),
      visitor = $__require('npm:less@2.6.1/lib/less/visitors/index.js'),
      tree = $__require('npm:less@2.6.1/lib/less/tree/index.js');
  module.exports = function(root, options) {
    options = options || {};
    var evaldRoot,
        variables = options.variables,
        evalEnv = new contexts.Eval(options);
    if (typeof variables === 'object' && !Array.isArray(variables)) {
      variables = Object.keys(variables).map(function(k) {
        var value = variables[k];
        if (!(value instanceof tree.Value)) {
          if (!(value instanceof tree.Expression)) {
            value = new tree.Expression([value]);
          }
          value = new tree.Value([value]);
        }
        return new tree.Rule('@' + k, value, false, null, 0);
      });
      evalEnv.frames = [new tree.Ruleset(null, variables)];
    }
    var preEvalVisitors = [],
        visitors = [new visitor.JoinSelectorVisitor(), new visitor.MarkVisibleSelectorsVisitor(true), new visitor.ExtendVisitor(), new visitor.ToCSSVisitor({compress: Boolean(options.compress)})],
        i;
    if (options.pluginManager) {
      var pluginVisitors = options.pluginManager.getVisitors();
      for (i = 0; i < pluginVisitors.length; i++) {
        var pluginVisitor = pluginVisitors[i];
        if (pluginVisitor.isPreEvalVisitor) {
          preEvalVisitors.push(pluginVisitor);
        } else {
          if (pluginVisitor.isPreVisitor) {
            visitors.splice(0, 0, pluginVisitor);
          } else {
            visitors.push(pluginVisitor);
          }
        }
      }
    }
    for (i = 0; i < preEvalVisitors.length; i++) {
      preEvalVisitors[i].run(root);
    }
    evaldRoot = root.eval(evalEnv);
    for (i = 0; i < visitors.length; i++) {
      visitors[i].run(evaldRoot);
    }
    return evaldRoot;
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/utils.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {getLocation: function(index, inputStream) {
      var n = index + 1,
          line = null,
          column = -1;
      while (--n >= 0 && inputStream.charAt(n) !== '\n') {
        column++;
      }
      if (typeof index === 'number') {
        line = (inputStream.slice(0, index).match(/\n/g) || "").length;
      }
      return {
        line: line,
        column: column
      };
    }};
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/plugin-manager.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var PluginManager = function(less) {
    this.less = less;
    this.visitors = [];
    this.preProcessors = [];
    this.postProcessors = [];
    this.installedPlugins = [];
    this.fileManagers = [];
  };
  PluginManager.prototype.addPlugins = function(plugins) {
    if (plugins) {
      for (var i = 0; i < plugins.length; i++) {
        this.addPlugin(plugins[i]);
      }
    }
  };
  PluginManager.prototype.addPlugin = function(plugin) {
    this.installedPlugins.push(plugin);
    plugin.install(this.less, this);
  };
  PluginManager.prototype.addVisitor = function(visitor) {
    this.visitors.push(visitor);
  };
  PluginManager.prototype.addPreProcessor = function(preProcessor, priority) {
    var indexToInsertAt;
    for (indexToInsertAt = 0; indexToInsertAt < this.preProcessors.length; indexToInsertAt++) {
      if (this.preProcessors[indexToInsertAt].priority >= priority) {
        break;
      }
    }
    this.preProcessors.splice(indexToInsertAt, 0, {
      preProcessor: preProcessor,
      priority: priority
    });
  };
  PluginManager.prototype.addPostProcessor = function(postProcessor, priority) {
    var indexToInsertAt;
    for (indexToInsertAt = 0; indexToInsertAt < this.postProcessors.length; indexToInsertAt++) {
      if (this.postProcessors[indexToInsertAt].priority >= priority) {
        break;
      }
    }
    this.postProcessors.splice(indexToInsertAt, 0, {
      postProcessor: postProcessor,
      priority: priority
    });
  };
  PluginManager.prototype.addFileManager = function(manager) {
    this.fileManagers.push(manager);
  };
  PluginManager.prototype.getPreProcessors = function() {
    var preProcessors = [];
    for (var i = 0; i < this.preProcessors.length; i++) {
      preProcessors.push(this.preProcessors[i].preProcessor);
    }
    return preProcessors;
  };
  PluginManager.prototype.getPostProcessors = function() {
    var postProcessors = [];
    for (var i = 0; i < this.postProcessors.length; i++) {
      postProcessors.push(this.postProcessors[i].postProcessor);
    }
    return postProcessors;
  };
  PluginManager.prototype.getVisitors = function() {
    return this.visitors;
  };
  PluginManager.prototype.getFileManagers = function() {
    return this.fileManagers;
  };
  module.exports = PluginManager;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/logger.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    error: function(msg) {
      this._fireEvent("error", msg);
    },
    warn: function(msg) {
      this._fireEvent("warn", msg);
    },
    info: function(msg) {
      this._fireEvent("info", msg);
    },
    debug: function(msg) {
      this._fireEvent("debug", msg);
    },
    addListener: function(listener) {
      this._listeners.push(listener);
    },
    removeListener: function(listener) {
      for (var i = 0; i < this._listeners.length; i++) {
        if (this._listeners[i] === listener) {
          this._listeners.splice(i, 1);
          return;
        }
      }
    },
    _fireEvent: function(type, msg) {
      for (var i = 0; i < this._listeners.length; i++) {
        var logFunction = this._listeners[i][type];
        if (logFunction) {
          logFunction(msg);
        }
      }
    },
    _listeners: []
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/index.js", ["npm:less@2.6.1/lib/less/data/index.js", "npm:less@2.6.1/lib/less/tree/index.js", "npm:less@2.6.1/lib/less/environment/environment.js", "npm:less@2.6.1/lib/less/environment/abstract-file-manager.js", "npm:less@2.6.1/lib/less/visitors/index.js", "npm:less@2.6.1/lib/less/parser/parser.js", "npm:less@2.6.1/lib/less/functions/index.js", "npm:less@2.6.1/lib/less/contexts.js", "npm:less@2.6.1/lib/less/source-map-output.js", "npm:less@2.6.1/lib/less/source-map-builder.js", "npm:less@2.6.1/lib/less/parse-tree.js", "npm:less@2.6.1/lib/less/import-manager.js", "npm:less@2.6.1/lib/less/render.js", "npm:less@2.6.1/lib/less/parse.js", "npm:less@2.6.1/lib/less/less-error.js", "npm:less@2.6.1/lib/less/transform-tree.js", "npm:less@2.6.1/lib/less/utils.js", "npm:less@2.6.1/lib/less/plugin-manager.js", "npm:less@2.6.1/lib/less/logger.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function(environment, fileManagers) {
    var SourceMapOutput,
        SourceMapBuilder,
        ParseTree,
        ImportManager,
        Environment;
    var less = {
      version: [2, 6, 1],
      data: $__require('npm:less@2.6.1/lib/less/data/index.js'),
      tree: $__require('npm:less@2.6.1/lib/less/tree/index.js'),
      Environment: (Environment = $__require('npm:less@2.6.1/lib/less/environment/environment.js')),
      AbstractFileManager: $__require('npm:less@2.6.1/lib/less/environment/abstract-file-manager.js'),
      environment: (environment = new Environment(environment, fileManagers)),
      visitors: $__require('npm:less@2.6.1/lib/less/visitors/index.js'),
      Parser: $__require('npm:less@2.6.1/lib/less/parser/parser.js'),
      functions: $__require('npm:less@2.6.1/lib/less/functions/index.js')(environment),
      contexts: $__require('npm:less@2.6.1/lib/less/contexts.js'),
      SourceMapOutput: (SourceMapOutput = $__require('npm:less@2.6.1/lib/less/source-map-output.js')(environment)),
      SourceMapBuilder: (SourceMapBuilder = $__require('npm:less@2.6.1/lib/less/source-map-builder.js')(SourceMapOutput, environment)),
      ParseTree: (ParseTree = $__require('npm:less@2.6.1/lib/less/parse-tree.js')(SourceMapBuilder)),
      ImportManager: (ImportManager = $__require('npm:less@2.6.1/lib/less/import-manager.js')(environment)),
      render: $__require('npm:less@2.6.1/lib/less/render.js')(environment, ParseTree, ImportManager),
      parse: $__require('npm:less@2.6.1/lib/less/parse.js')(environment, ParseTree, ImportManager),
      LessError: $__require('npm:less@2.6.1/lib/less/less-error.js'),
      transformTree: $__require('npm:less@2.6.1/lib/less/transform-tree.js'),
      utils: $__require('npm:less@2.6.1/lib/less/utils.js'),
      PluginManager: $__require('npm:less@2.6.1/lib/less/plugin-manager.js'),
      logger: $__require('npm:less@2.6.1/lib/less/logger.js')
    };
    return less;
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less-node/lessc-helper.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var lessc_helper = {
    stylize: function(str, style) {
      var styles = {
        'reset': [0, 0],
        'bold': [1, 22],
        'inverse': [7, 27],
        'underline': [4, 24],
        'yellow': [33, 39],
        'green': [32, 39],
        'red': [31, 39],
        'grey': [90, 39]
      };
      return '\033[' + styles[style][0] + 'm' + str + '\033[' + styles[style][1] + 'm';
    },
    printUsage: function() {
      console.log("usage: lessc [option option=parameter ...] <source> [destination]");
      console.log("");
      console.log("If source is set to `-' (dash or hyphen-minus), input is read from stdin.");
      console.log("");
      console.log("options:");
      console.log("  -h, --help               Prints help (this message) and exit.");
      console.log("  --include-path=PATHS     Sets include paths. Separated by `:'. `;' also supported on windows.");
      console.log("  -M, --depends            Outputs a makefile import dependency list to stdout.");
      console.log("  --no-color               Disables colorized output.");
      console.log("  --no-ie-compat           Disables IE compatibility checks.");
      console.log("  --no-js                  Disables JavaScript in less files");
      console.log("  -l, --lint               Syntax check only (lint).");
      console.log("  -s, --silent             Suppresses output of error messages.");
      console.log("  --strict-imports         Forces evaluation of imports.");
      console.log("  --insecure               Allows imports from insecure https hosts.");
      console.log("  -v, --version            Prints version number and exit.");
      console.log("  --verbose                Be verbose.");
      console.log("  --source-map[=FILENAME]  Outputs a v3 sourcemap to the filename (or output filename.map).");
      console.log("  --source-map-rootpath=X  Adds this path onto the sourcemap filename and less file paths.");
      console.log("  --source-map-basepath=X  Sets sourcemap base path, defaults to current working directory.");
      console.log("  --source-map-less-inline Puts the less files into the map instead of referencing them.");
      console.log("  --source-map-map-inline  Puts the map (and any less files) as a base64 data uri into the output css file.");
      console.log("  --source-map-url=URL     Sets a custom URL to map file, for sourceMappingURL comment");
      console.log("                           in generated CSS file.");
      console.log("  -rp, --rootpath=URL      Sets rootpath for url rewriting in relative imports and urls");
      console.log("                           Works with or without the relative-urls option.");
      console.log("  -ru, --relative-urls     Re-writes relative urls to the base less file.");
      console.log("  -sm=on|off               Turns on or off strict math, where in strict mode, math.");
      console.log("  --strict-math=on|off     Requires brackets. This option may default to on and then");
      console.log("                           be removed in the future.");
      console.log("  -su=on|off               Allows mixed units, e.g. 1px+1em or 1px*1px which have units");
      console.log("  --strict-units=on|off    that cannot be represented.");
      console.log("  --global-var='VAR=VALUE' Defines a variable that can be referenced by the file.");
      console.log("  --modify-var='VAR=VALUE' Modifies a variable already declared in the file.");
      console.log("  --url-args='QUERYSTRING' Adds params into url tokens (e.g. 42, cb=42 or 'a=1&b=2')");
      console.log("  --plugin=PLUGIN=OPTIONS  Loads a plugin. You can also omit the --plugin= if the plugin begins");
      console.log("                           less-plugin. E.g. the clean css plugin is called less-plugin-clean-css");
      console.log("                           once installed (npm install less-plugin-clean-css), use either with");
      console.log("                           --plugin=less-plugin-clean-css or just --clean-css");
      console.log("                           specify options afterwards e.g. --plugin=less-plugin-clean-css=\"advanced\"");
      console.log("                           or --clean-css=\"advanced\"");
      console.log("");
      console.log("-------------------------- Deprecated ----------------");
      console.log("  --line-numbers=TYPE      Outputs filename and line numbers.");
      console.log("                           TYPE can be either 'comments', which will output");
      console.log("                           the debug info within comments, 'mediaquery'");
      console.log("                           that will output the information within a fake");
      console.log("                           media query which is compatible with the SASS");
      console.log("                           format, and 'all' which will do both.");
      console.log("  -x, --compress           Compresses output by removing some whitespaces.");
      console.log("                           We recommend you use a dedicated minifer like less-plugin-clean-css");
      console.log("");
      console.log("Report bugs to: http://github.com/less/less.js/issues");
      console.log("Home page: <http://lesscss.org/>");
    }
  };
  for (var h in lessc_helper) {
    if (lessc_helper.hasOwnProperty(h)) {
      exports[h] = lessc_helper[h];
    }
  }
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less-node/plugin-loader.js", ["@node/path", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var path = $__require('@node/path');
  var PluginLoader = function(less) {
    this.less = less;
  };
  PluginLoader.prototype.tryLoadPlugin = function(name, argument) {
    var plugin = this.tryRequirePlugin(name);
    if (plugin) {
      if (typeof plugin === "function") {
        plugin = new plugin();
      }
      if (plugin.minVersion) {
        if (this.compareVersion(plugin.minVersion, this.less.version) < 0) {
          console.log("plugin " + name + " requires version " + this.versionToString(plugin.minVersion));
          return null;
        }
      }
      if (argument) {
        if (!plugin.setOptions) {
          console.log("options have been provided but the plugin " + name + "does not support any options");
          return null;
        }
        try {
          plugin.setOptions(argument);
        } catch (e) {
          console.log("Error setting options on plugin " + name);
          console.log(e.message);
          return null;
        }
      }
      return plugin;
    }
    return null;
  };
  PluginLoader.prototype.compareVersion = function(aVersion, bVersion) {
    for (var i = 0; i < aVersion.length; i++) {
      if (aVersion[i] !== bVersion[i]) {
        return parseInt(aVersion[i]) > parseInt(bVersion[i]) ? -1 : 1;
      }
    }
    return 0;
  };
  PluginLoader.prototype.versionToString = function(version) {
    var versionString = "";
    for (var i = 0; i < version.length; i++) {
      versionString += (versionString ? "." : "") + version[i];
    }
    return versionString;
  };
  PluginLoader.prototype.tryRequirePlugin = function(name) {
    try {
      return $__require("../../../" + name);
    } catch (e) {}
    try {
      return $__require(path.join(process.cwd(), "node_modules", name));
    } catch (e) {}
    try {
      return $__require(path.join(process.cwd(), name));
    } catch (e) {}
    if (name[0] !== '.') {
      try {
        return $__require(name);
      } catch (e) {}
    }
  };
  PluginLoader.prototype.printUsage = function(plugins) {
    for (var i = 0; i < plugins.length; i++) {
      var plugin = plugins[i];
      if (plugin.printUsage) {
        plugin.printUsage();
      }
    }
  };
  module.exports = PluginLoader;
  return module.exports;
});

$__System.registerDynamic("npm:graceful-fs@4.1.3/polyfills.js", ["npm:graceful-fs@4.1.3/fs.js", "@node/constants", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var fs = $__require('npm:graceful-fs@4.1.3/fs.js');
  var constants = $__require('@node/constants');
  var origCwd = process.cwd;
  var cwd = null;
  process.cwd = function() {
    if (!cwd)
      cwd = origCwd.call(process);
    return cwd;
  };
  try {
    process.cwd();
  } catch (er) {}
  var chdir = process.chdir;
  process.chdir = function(d) {
    cwd = null;
    chdir.call(process, d);
  };
  module.exports = patch;
  function patch(fs) {
    if (constants.hasOwnProperty('O_SYMLINK') && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
      patchLchmod(fs);
    }
    if (!fs.lutimes) {
      patchLutimes(fs);
    }
    fs.chown = chownFix(fs.chown);
    fs.fchown = chownFix(fs.fchown);
    fs.lchown = chownFix(fs.lchown);
    fs.chmod = chownFix(fs.chmod);
    fs.fchmod = chownFix(fs.fchmod);
    fs.lchmod = chownFix(fs.lchmod);
    fs.chownSync = chownFixSync(fs.chownSync);
    fs.fchownSync = chownFixSync(fs.fchownSync);
    fs.lchownSync = chownFixSync(fs.lchownSync);
    fs.chmodSync = chownFix(fs.chmodSync);
    fs.fchmodSync = chownFix(fs.fchmodSync);
    fs.lchmodSync = chownFix(fs.lchmodSync);
    if (!fs.lchmod) {
      fs.lchmod = function(path, mode, cb) {
        process.nextTick(cb);
      };
      fs.lchmodSync = function() {};
    }
    if (!fs.lchown) {
      fs.lchown = function(path, uid, gid, cb) {
        process.nextTick(cb);
      };
      fs.lchownSync = function() {};
    }
    if (process.platform === "win32") {
      fs.rename = (function(fs$rename) {
        return function(from, to, cb) {
          var start = Date.now();
          fs$rename(from, to, function CB(er) {
            if (er && (er.code === "EACCES" || er.code === "EPERM") && Date.now() - start < 1000) {
              return fs$rename(from, to, CB);
            }
            if (cb)
              cb(er);
          });
        };
      })(fs.rename);
    }
    fs.read = (function(fs$read) {
      return function(fd, buffer, offset, length, position, callback_) {
        var callback;
        if (callback_ && typeof callback_ === 'function') {
          var eagCounter = 0;
          callback = function(er, _, __) {
            if (er && er.code === 'EAGAIN' && eagCounter < 10) {
              eagCounter++;
              return fs$read.call(fs, fd, buffer, offset, length, position, callback);
            }
            callback_.apply(this, arguments);
          };
        }
        return fs$read.call(fs, fd, buffer, offset, length, position, callback);
      };
    })(fs.read);
    fs.readSync = (function(fs$readSync) {
      return function(fd, buffer, offset, length, position) {
        var eagCounter = 0;
        while (true) {
          try {
            return fs$readSync.call(fs, fd, buffer, offset, length, position);
          } catch (er) {
            if (er.code === 'EAGAIN' && eagCounter < 10) {
              eagCounter++;
              continue;
            }
            throw er;
          }
        }
      };
    })(fs.readSync);
  }
  function patchLchmod(fs) {
    fs.lchmod = function(path, mode, callback) {
      callback = callback || noop;
      fs.open(path, constants.O_WRONLY | constants.O_SYMLINK, mode, function(err, fd) {
        if (err) {
          callback(err);
          return;
        }
        fs.fchmod(fd, mode, function(err) {
          fs.close(fd, function(err2) {
            callback(err || err2);
          });
        });
      });
    };
    fs.lchmodSync = function(path, mode) {
      var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode);
      var threw = true;
      var ret;
      try {
        ret = fs.fchmodSync(fd, mode);
        threw = false;
      } finally {
        if (threw) {
          try {
            fs.closeSync(fd);
          } catch (er) {}
        } else {
          fs.closeSync(fd);
        }
      }
      return ret;
    };
  }
  function patchLutimes(fs) {
    if (constants.hasOwnProperty("O_SYMLINK")) {
      fs.lutimes = function(path, at, mt, cb) {
        fs.open(path, constants.O_SYMLINK, function(er, fd) {
          cb = cb || noop;
          if (er)
            return cb(er);
          fs.futimes(fd, at, mt, function(er) {
            fs.close(fd, function(er2) {
              return cb(er || er2);
            });
          });
        });
      };
      fs.lutimesSync = function(path, at, mt) {
        var fd = fs.openSync(path, constants.O_SYMLINK);
        var ret;
        var threw = true;
        try {
          ret = fs.futimesSync(fd, at, mt);
          threw = false;
        } finally {
          if (threw) {
            try {
              fs.closeSync(fd);
            } catch (er) {}
          } else {
            fs.closeSync(fd);
          }
        }
        return ret;
      };
    } else {
      fs.lutimes = function(_a, _b, _c, cb) {
        process.nextTick(cb);
      };
      fs.lutimesSync = function() {};
    }
  }
  function chownFix(orig) {
    if (!orig)
      return orig;
    return function(target, uid, gid, cb) {
      return orig.call(fs, target, uid, gid, function(er, res) {
        if (chownErOk(er))
          er = null;
        cb(er, res);
      });
    };
  }
  function chownFixSync(orig) {
    if (!orig)
      return orig;
    return function(target, uid, gid) {
      try {
        return orig.call(fs, target, uid, gid);
      } catch (er) {
        if (!chownErOk(er))
          throw er;
      }
    };
  }
  function chownErOk(er) {
    if (!er)
      return true;
    if (er.code === "ENOSYS")
      return true;
    var nonroot = !process.getuid || process.getuid() !== 0;
    if (nonroot) {
      if (er.code === "EINVAL" || er.code === "EPERM")
        return true;
    }
    return false;
  }
  return module.exports;
});

$__System.registerDynamic("npm:graceful-fs@4.1.3/legacy-streams.js", ["@node/stream", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Stream = $__require('@node/stream').Stream;
  module.exports = legacy;
  function legacy(fs) {
    return {
      ReadStream: ReadStream,
      WriteStream: WriteStream
    };
    function ReadStream(path, options) {
      if (!(this instanceof ReadStream))
        return new ReadStream(path, options);
      Stream.call(this);
      var self = this;
      this.path = path;
      this.fd = null;
      this.readable = true;
      this.paused = false;
      this.flags = 'r';
      this.mode = 438;
      this.bufferSize = 64 * 1024;
      options = options || {};
      var keys = Object.keys(options);
      for (var index = 0,
          length = keys.length; index < length; index++) {
        var key = keys[index];
        this[key] = options[key];
      }
      if (this.encoding)
        this.setEncoding(this.encoding);
      if (this.start !== undefined) {
        if ('number' !== typeof this.start) {
          throw TypeError('start must be a Number');
        }
        if (this.end === undefined) {
          this.end = Infinity;
        } else if ('number' !== typeof this.end) {
          throw TypeError('end must be a Number');
        }
        if (this.start > this.end) {
          throw new Error('start must be <= end');
        }
        this.pos = this.start;
      }
      if (this.fd !== null) {
        process.nextTick(function() {
          self._read();
        });
        return;
      }
      fs.open(this.path, this.flags, this.mode, function(err, fd) {
        if (err) {
          self.emit('error', err);
          self.readable = false;
          return;
        }
        self.fd = fd;
        self.emit('open', fd);
        self._read();
      });
    }
    function WriteStream(path, options) {
      if (!(this instanceof WriteStream))
        return new WriteStream(path, options);
      Stream.call(this);
      this.path = path;
      this.fd = null;
      this.writable = true;
      this.flags = 'w';
      this.encoding = 'binary';
      this.mode = 438;
      this.bytesWritten = 0;
      options = options || {};
      var keys = Object.keys(options);
      for (var index = 0,
          length = keys.length; index < length; index++) {
        var key = keys[index];
        this[key] = options[key];
      }
      if (this.start !== undefined) {
        if ('number' !== typeof this.start) {
          throw TypeError('start must be a Number');
        }
        if (this.start < 0) {
          throw new Error('start must be >= zero');
        }
        this.pos = this.start;
      }
      this.busy = false;
      this._queue = [];
      if (this.fd === null) {
        this._open = fs.open;
        this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);
        this.flush();
      }
    }
  }
  return module.exports;
});

$__System.registerDynamic("npm:graceful-fs@4.1.3/fs.js", ["@node/fs", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  "use strict";
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var fs = $__require('@node/fs');
  module.exports = clone(fs);
  function clone(obj) {
    if (obj === null || typeof obj !== 'object')
      return obj;
    if (obj instanceof Object)
      var copy = {__proto__: obj.__proto__};
    else
      var copy = Object.create(null);
    Object.getOwnPropertyNames(obj).forEach(function(key) {
      Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
    });
    return copy;
  }
  return module.exports;
});

$__System.registerDynamic("npm:graceful-fs@4.1.3/graceful-fs.js", ["@node/fs", "npm:graceful-fs@4.1.3/polyfills.js", "npm:graceful-fs@4.1.3/legacy-streams.js", "@node/util", "@node/assert", "npm:graceful-fs@4.1.3/fs.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var fs = $__require('@node/fs');
  var polyfills = $__require('npm:graceful-fs@4.1.3/polyfills.js');
  var legacy = $__require('npm:graceful-fs@4.1.3/legacy-streams.js');
  var queue = [];
  var util = $__require('@node/util');
  function noop() {}
  var debug = noop;
  if (util.debuglog)
    debug = util.debuglog('gfs4');
  else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ''))
    debug = function() {
      var m = util.format.apply(util, arguments);
      m = 'GFS4: ' + m.split(/\n/).join('\nGFS4: ');
      console.error(m);
    };
  if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) {
    process.on('exit', function() {
      debug(queue);
      $__require('@node/assert').equal(queue.length, 0);
    });
  }
  module.exports = patch($__require('npm:graceful-fs@4.1.3/fs.js'));
  if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH) {
    module.exports = patch(fs);
  }
  module.exports.close = fs.close = (function(fs$close) {
    return function(fd, cb) {
      return fs$close.call(fs, fd, function(err) {
        if (!err)
          retry();
        if (typeof cb === 'function')
          cb.apply(this, arguments);
      });
    };
  })(fs.close);
  module.exports.closeSync = fs.closeSync = (function(fs$closeSync) {
    return function(fd) {
      var rval = fs$closeSync.apply(fs, arguments);
      retry();
      return rval;
    };
  })(fs.closeSync);
  function patch(fs) {
    polyfills(fs);
    fs.gracefulify = patch;
    fs.FileReadStream = ReadStream;
    fs.FileWriteStream = WriteStream;
    fs.createReadStream = createReadStream;
    fs.createWriteStream = createWriteStream;
    var fs$readFile = fs.readFile;
    fs.readFile = readFile;
    function readFile(path, options, cb) {
      if (typeof options === 'function')
        cb = options, options = null;
      return go$readFile(path, options, cb);
      function go$readFile(path, options, cb) {
        return fs$readFile(path, options, function(err) {
          if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
            enqueue([go$readFile, [path, options, cb]]);
          else {
            if (typeof cb === 'function')
              cb.apply(this, arguments);
            retry();
          }
        });
      }
    }
    var fs$writeFile = fs.writeFile;
    fs.writeFile = writeFile;
    function writeFile(path, data, options, cb) {
      if (typeof options === 'function')
        cb = options, options = null;
      return go$writeFile(path, data, options, cb);
      function go$writeFile(path, data, options, cb) {
        return fs$writeFile(path, data, options, function(err) {
          if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
            enqueue([go$writeFile, [path, data, options, cb]]);
          else {
            if (typeof cb === 'function')
              cb.apply(this, arguments);
            retry();
          }
        });
      }
    }
    var fs$appendFile = fs.appendFile;
    if (fs$appendFile)
      fs.appendFile = appendFile;
    function appendFile(path, data, options, cb) {
      if (typeof options === 'function')
        cb = options, options = null;
      return go$appendFile(path, data, options, cb);
      function go$appendFile(path, data, options, cb) {
        return fs$appendFile(path, data, options, function(err) {
          if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
            enqueue([go$appendFile, [path, data, options, cb]]);
          else {
            if (typeof cb === 'function')
              cb.apply(this, arguments);
            retry();
          }
        });
      }
    }
    var fs$readdir = fs.readdir;
    fs.readdir = readdir;
    function readdir(path, cb) {
      return go$readdir(path, cb);
      function go$readdir() {
        return fs$readdir(path, function(err, files) {
          if (files && files.sort)
            files.sort();
          if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
            enqueue([go$readdir, [path, cb]]);
          else {
            if (typeof cb === 'function')
              cb.apply(this, arguments);
            retry();
          }
        });
      }
    }
    if (process.version.substr(0, 4) === 'v0.8') {
      var legStreams = legacy(fs);
      ReadStream = legStreams.ReadStream;
      WriteStream = legStreams.WriteStream;
    }
    var fs$ReadStream = fs.ReadStream;
    ReadStream.prototype = Object.create(fs$ReadStream.prototype);
    ReadStream.prototype.open = ReadStream$open;
    var fs$WriteStream = fs.WriteStream;
    WriteStream.prototype = Object.create(fs$WriteStream.prototype);
    WriteStream.prototype.open = WriteStream$open;
    fs.ReadStream = ReadStream;
    fs.WriteStream = WriteStream;
    function ReadStream(path, options) {
      if (this instanceof ReadStream)
        return fs$ReadStream.apply(this, arguments), this;
      else
        return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
    }
    function ReadStream$open() {
      var that = this;
      open(that.path, that.flags, that.mode, function(err, fd) {
        if (err) {
          if (that.autoClose)
            that.destroy();
          that.emit('error', err);
        } else {
          that.fd = fd;
          that.emit('open', fd);
          that.read();
        }
      });
    }
    function WriteStream(path, options) {
      if (this instanceof WriteStream)
        return fs$WriteStream.apply(this, arguments), this;
      else
        return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
    }
    function WriteStream$open() {
      var that = this;
      open(that.path, that.flags, that.mode, function(err, fd) {
        if (err) {
          that.destroy();
          that.emit('error', err);
        } else {
          that.fd = fd;
          that.emit('open', fd);
        }
      });
    }
    function createReadStream(path, options) {
      return new ReadStream(path, options);
    }
    function createWriteStream(path, options) {
      return new WriteStream(path, options);
    }
    var fs$open = fs.open;
    fs.open = open;
    function open(path, flags, mode, cb) {
      if (typeof mode === 'function')
        cb = mode, mode = null;
      return go$open(path, flags, mode, cb);
      function go$open(path, flags, mode, cb) {
        return fs$open(path, flags, mode, function(err, fd) {
          if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
            enqueue([go$open, [path, flags, mode, cb]]);
          else {
            if (typeof cb === 'function')
              cb.apply(this, arguments);
            retry();
          }
        });
      }
    }
    return fs;
  }
  function enqueue(elem) {
    debug('ENQUEUE', elem[0].name, elem[1]);
    queue.push(elem);
  }
  function retry() {
    var elem = queue.shift();
    if (elem) {
      debug('RETRY', elem[0].name, elem[1]);
      elem[0].apply(null, elem[1]);
    }
  }
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less-node/fs.js", ["npm:graceful-fs@4.1.3/graceful-fs.js", "@node/fs", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var fs;
  try {
    fs = $__require('npm:graceful-fs@4.1.3/graceful-fs.js');
  } catch (e) {
    fs = $__require('@node/fs');
  }
  module.exports = fs;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/data/unit-conversions.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    length: {
      'm': 1,
      'cm': 0.01,
      'mm': 0.001,
      'in': 0.0254,
      'px': 0.0254 / 96,
      'pt': 0.0254 / 72,
      'pc': 0.0254 / 72 * 12
    },
    duration: {
      's': 1,
      'ms': 0.001
    },
    angle: {
      'rad': 1 / (2 * Math.PI),
      'deg': 1 / 360,
      'grad': 1 / 400,
      'turn': 1
    }
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/unit.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/data/unit-conversions.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js'),
      unitConversions = $__require('npm:less@2.6.1/lib/less/data/unit-conversions.js');
  var Unit = function(numerator, denominator, backupUnit) {
    this.numerator = numerator ? numerator.slice(0).sort() : [];
    this.denominator = denominator ? denominator.slice(0).sort() : [];
    if (backupUnit) {
      this.backupUnit = backupUnit;
    } else if (numerator && numerator.length) {
      this.backupUnit = numerator[0];
    }
  };
  Unit.prototype = new Node();
  Unit.prototype.type = "Unit";
  Unit.prototype.clone = function() {
    return new Unit(this.numerator.slice(0), this.denominator.slice(0), this.backupUnit);
  };
  Unit.prototype.genCSS = function(context, output) {
    var strictUnits = context && context.strictUnits;
    if (this.numerator.length === 1) {
      output.add(this.numerator[0]);
    } else if (!strictUnits && this.backupUnit) {
      output.add(this.backupUnit);
    } else if (!strictUnits && this.denominator.length) {
      output.add(this.denominator[0]);
    }
  };
  Unit.prototype.toString = function() {
    var i,
        returnStr = this.numerator.join("*");
    for (i = 0; i < this.denominator.length; i++) {
      returnStr += "/" + this.denominator[i];
    }
    return returnStr;
  };
  Unit.prototype.compare = function(other) {
    return this.is(other.toString()) ? 0 : undefined;
  };
  Unit.prototype.is = function(unitString) {
    return this.toString().toUpperCase() === unitString.toUpperCase();
  };
  Unit.prototype.isLength = function() {
    return Boolean(this.toCSS().match(/px|em|%|in|cm|mm|pc|pt|ex/));
  };
  Unit.prototype.isEmpty = function() {
    return this.numerator.length === 0 && this.denominator.length === 0;
  };
  Unit.prototype.isSingular = function() {
    return this.numerator.length <= 1 && this.denominator.length === 0;
  };
  Unit.prototype.map = function(callback) {
    var i;
    for (i = 0; i < this.numerator.length; i++) {
      this.numerator[i] = callback(this.numerator[i], false);
    }
    for (i = 0; i < this.denominator.length; i++) {
      this.denominator[i] = callback(this.denominator[i], true);
    }
  };
  Unit.prototype.usedUnits = function() {
    var group,
        result = {},
        mapUnit,
        groupName;
    mapUnit = function(atomicUnit) {
      if (group.hasOwnProperty(atomicUnit) && !result[groupName]) {
        result[groupName] = atomicUnit;
      }
      return atomicUnit;
    };
    for (groupName in unitConversions) {
      if (unitConversions.hasOwnProperty(groupName)) {
        group = unitConversions[groupName];
        this.map(mapUnit);
      }
    }
    return result;
  };
  Unit.prototype.cancel = function() {
    var counter = {},
        atomicUnit,
        i;
    for (i = 0; i < this.numerator.length; i++) {
      atomicUnit = this.numerator[i];
      counter[atomicUnit] = (counter[atomicUnit] || 0) + 1;
    }
    for (i = 0; i < this.denominator.length; i++) {
      atomicUnit = this.denominator[i];
      counter[atomicUnit] = (counter[atomicUnit] || 0) - 1;
    }
    this.numerator = [];
    this.denominator = [];
    for (atomicUnit in counter) {
      if (counter.hasOwnProperty(atomicUnit)) {
        var count = counter[atomicUnit];
        if (count > 0) {
          for (i = 0; i < count; i++) {
            this.numerator.push(atomicUnit);
          }
        } else if (count < 0) {
          for (i = 0; i < -count; i++) {
            this.denominator.push(atomicUnit);
          }
        }
      }
    }
    this.numerator.sort();
    this.denominator.sort();
  };
  module.exports = Unit;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/data/colors.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = {
    'aliceblue': '#f0f8ff',
    'antiquewhite': '#faebd7',
    'aqua': '#00ffff',
    'aquamarine': '#7fffd4',
    'azure': '#f0ffff',
    'beige': '#f5f5dc',
    'bisque': '#ffe4c4',
    'black': '#000000',
    'blanchedalmond': '#ffebcd',
    'blue': '#0000ff',
    'blueviolet': '#8a2be2',
    'brown': '#a52a2a',
    'burlywood': '#deb887',
    'cadetblue': '#5f9ea0',
    'chartreuse': '#7fff00',
    'chocolate': '#d2691e',
    'coral': '#ff7f50',
    'cornflowerblue': '#6495ed',
    'cornsilk': '#fff8dc',
    'crimson': '#dc143c',
    'cyan': '#00ffff',
    'darkblue': '#00008b',
    'darkcyan': '#008b8b',
    'darkgoldenrod': '#b8860b',
    'darkgray': '#a9a9a9',
    'darkgrey': '#a9a9a9',
    'darkgreen': '#006400',
    'darkkhaki': '#bdb76b',
    'darkmagenta': '#8b008b',
    'darkolivegreen': '#556b2f',
    'darkorange': '#ff8c00',
    'darkorchid': '#9932cc',
    'darkred': '#8b0000',
    'darksalmon': '#e9967a',
    'darkseagreen': '#8fbc8f',
    'darkslateblue': '#483d8b',
    'darkslategray': '#2f4f4f',
    'darkslategrey': '#2f4f4f',
    'darkturquoise': '#00ced1',
    'darkviolet': '#9400d3',
    'deeppink': '#ff1493',
    'deepskyblue': '#00bfff',
    'dimgray': '#696969',
    'dimgrey': '#696969',
    'dodgerblue': '#1e90ff',
    'firebrick': '#b22222',
    'floralwhite': '#fffaf0',
    'forestgreen': '#228b22',
    'fuchsia': '#ff00ff',
    'gainsboro': '#dcdcdc',
    'ghostwhite': '#f8f8ff',
    'gold': '#ffd700',
    'goldenrod': '#daa520',
    'gray': '#808080',
    'grey': '#808080',
    'green': '#008000',
    'greenyellow': '#adff2f',
    'honeydew': '#f0fff0',
    'hotpink': '#ff69b4',
    'indianred': '#cd5c5c',
    'indigo': '#4b0082',
    'ivory': '#fffff0',
    'khaki': '#f0e68c',
    'lavender': '#e6e6fa',
    'lavenderblush': '#fff0f5',
    'lawngreen': '#7cfc00',
    'lemonchiffon': '#fffacd',
    'lightblue': '#add8e6',
    'lightcoral': '#f08080',
    'lightcyan': '#e0ffff',
    'lightgoldenrodyellow': '#fafad2',
    'lightgray': '#d3d3d3',
    'lightgrey': '#d3d3d3',
    'lightgreen': '#90ee90',
    'lightpink': '#ffb6c1',
    'lightsalmon': '#ffa07a',
    'lightseagreen': '#20b2aa',
    'lightskyblue': '#87cefa',
    'lightslategray': '#778899',
    'lightslategrey': '#778899',
    'lightsteelblue': '#b0c4de',
    'lightyellow': '#ffffe0',
    'lime': '#00ff00',
    'limegreen': '#32cd32',
    'linen': '#faf0e6',
    'magenta': '#ff00ff',
    'maroon': '#800000',
    'mediumaquamarine': '#66cdaa',
    'mediumblue': '#0000cd',
    'mediumorchid': '#ba55d3',
    'mediumpurple': '#9370d8',
    'mediumseagreen': '#3cb371',
    'mediumslateblue': '#7b68ee',
    'mediumspringgreen': '#00fa9a',
    'mediumturquoise': '#48d1cc',
    'mediumvioletred': '#c71585',
    'midnightblue': '#191970',
    'mintcream': '#f5fffa',
    'mistyrose': '#ffe4e1',
    'moccasin': '#ffe4b5',
    'navajowhite': '#ffdead',
    'navy': '#000080',
    'oldlace': '#fdf5e6',
    'olive': '#808000',
    'olivedrab': '#6b8e23',
    'orange': '#ffa500',
    'orangered': '#ff4500',
    'orchid': '#da70d6',
    'palegoldenrod': '#eee8aa',
    'palegreen': '#98fb98',
    'paleturquoise': '#afeeee',
    'palevioletred': '#d87093',
    'papayawhip': '#ffefd5',
    'peachpuff': '#ffdab9',
    'peru': '#cd853f',
    'pink': '#ffc0cb',
    'plum': '#dda0dd',
    'powderblue': '#b0e0e6',
    'purple': '#800080',
    'rebeccapurple': '#663399',
    'red': '#ff0000',
    'rosybrown': '#bc8f8f',
    'royalblue': '#4169e1',
    'saddlebrown': '#8b4513',
    'salmon': '#fa8072',
    'sandybrown': '#f4a460',
    'seagreen': '#2e8b57',
    'seashell': '#fff5ee',
    'sienna': '#a0522d',
    'silver': '#c0c0c0',
    'skyblue': '#87ceeb',
    'slateblue': '#6a5acd',
    'slategray': '#708090',
    'slategrey': '#708090',
    'snow': '#fffafa',
    'springgreen': '#00ff7f',
    'steelblue': '#4682b4',
    'tan': '#d2b48c',
    'teal': '#008080',
    'thistle': '#d8bfd8',
    'tomato': '#ff6347',
    'turquoise': '#40e0d0',
    'violet': '#ee82ee',
    'wheat': '#f5deb3',
    'white': '#ffffff',
    'whitesmoke': '#f5f5f5',
    'yellow': '#ffff00',
    'yellowgreen': '#9acd32'
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/color.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/data/colors.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js'),
      colors = $__require('npm:less@2.6.1/lib/less/data/colors.js');
  var Color = function(rgb, a, originalForm) {
    if (Array.isArray(rgb)) {
      this.rgb = rgb;
    } else if (rgb.length == 6) {
      this.rgb = rgb.match(/.{2}/g).map(function(c) {
        return parseInt(c, 16);
      });
    } else {
      this.rgb = rgb.split('').map(function(c) {
        return parseInt(c + c, 16);
      });
    }
    this.alpha = typeof a === 'number' ? a : 1;
    if (typeof originalForm !== 'undefined') {
      this.value = originalForm;
    }
  };
  Color.prototype = new Node();
  Color.prototype.type = "Color";
  function clamp(v, max) {
    return Math.min(Math.max(v, 0), max);
  }
  function toHex(v) {
    return '#' + v.map(function(c) {
      c = clamp(Math.round(c), 255);
      return (c < 16 ? '0' : '') + c.toString(16);
    }).join('');
  }
  Color.prototype.luma = function() {
    var r = this.rgb[0] / 255,
        g = this.rgb[1] / 255,
        b = this.rgb[2] / 255;
    r = (r <= 0.03928) ? r / 12.92 : Math.pow(((r + 0.055) / 1.055), 2.4);
    g = (g <= 0.03928) ? g / 12.92 : Math.pow(((g + 0.055) / 1.055), 2.4);
    b = (b <= 0.03928) ? b / 12.92 : Math.pow(((b + 0.055) / 1.055), 2.4);
    return 0.2126 * r + 0.7152 * g + 0.0722 * b;
  };
  Color.prototype.genCSS = function(context, output) {
    output.add(this.toCSS(context));
  };
  Color.prototype.toCSS = function(context, doNotCompress) {
    var compress = context && context.compress && !doNotCompress,
        color,
        alpha;
    if (this.value) {
      return this.value;
    }
    alpha = this.fround(context, this.alpha);
    if (alpha < 1) {
      return "rgba(" + this.rgb.map(function(c) {
        return clamp(Math.round(c), 255);
      }).concat(clamp(alpha, 1)).join(',' + (compress ? '' : ' ')) + ")";
    }
    color = this.toRGB();
    if (compress) {
      var splitcolor = color.split('');
      if (splitcolor[1] === splitcolor[2] && splitcolor[3] === splitcolor[4] && splitcolor[5] === splitcolor[6]) {
        color = '#' + splitcolor[1] + splitcolor[3] + splitcolor[5];
      }
    }
    return color;
  };
  Color.prototype.operate = function(context, op, other) {
    var rgb = [];
    var alpha = this.alpha * (1 - other.alpha) + other.alpha;
    for (var c = 0; c < 3; c++) {
      rgb[c] = this._operate(context, op, this.rgb[c], other.rgb[c]);
    }
    return new Color(rgb, alpha);
  };
  Color.prototype.toRGB = function() {
    return toHex(this.rgb);
  };
  Color.prototype.toHSL = function() {
    var r = this.rgb[0] / 255,
        g = this.rgb[1] / 255,
        b = this.rgb[2] / 255,
        a = this.alpha;
    var max = Math.max(r, g, b),
        min = Math.min(r, g, b);
    var h,
        s,
        l = (max + min) / 2,
        d = max - min;
    if (max === min) {
      h = s = 0;
    } else {
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return {
      h: h * 360,
      s: s,
      l: l,
      a: a
    };
  };
  Color.prototype.toHSV = function() {
    var r = this.rgb[0] / 255,
        g = this.rgb[1] / 255,
        b = this.rgb[2] / 255,
        a = this.alpha;
    var max = Math.max(r, g, b),
        min = Math.min(r, g, b);
    var h,
        s,
        v = max;
    var d = max - min;
    if (max === 0) {
      s = 0;
    } else {
      s = d / max;
    }
    if (max === min) {
      h = 0;
    } else {
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return {
      h: h * 360,
      s: s,
      v: v,
      a: a
    };
  };
  Color.prototype.toARGB = function() {
    return toHex([this.alpha * 255].concat(this.rgb));
  };
  Color.prototype.compare = function(x) {
    return (x.rgb && x.rgb[0] === this.rgb[0] && x.rgb[1] === this.rgb[1] && x.rgb[2] === this.rgb[2] && x.alpha === this.alpha) ? 0 : undefined;
  };
  Color.fromKeyword = function(keyword) {
    var c,
        key = keyword.toLowerCase();
    if (colors.hasOwnProperty(key)) {
      c = new Color(colors[key].slice(1));
    } else if (key === "transparent") {
      c = new Color([0, 0, 0], 0);
    }
    if (c) {
      c.value = keyword;
      return c;
    }
  };
  module.exports = Color;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/dimension.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/data/unit-conversions.js", "npm:less@2.6.1/lib/less/tree/unit.js", "npm:less@2.6.1/lib/less/tree/color.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js'),
      unitConversions = $__require('npm:less@2.6.1/lib/less/data/unit-conversions.js'),
      Unit = $__require('npm:less@2.6.1/lib/less/tree/unit.js'),
      Color = $__require('npm:less@2.6.1/lib/less/tree/color.js');
  var Dimension = function(value, unit) {
    this.value = parseFloat(value);
    this.unit = (unit && unit instanceof Unit) ? unit : new Unit(unit ? [unit] : undefined);
  };
  Dimension.prototype = new Node();
  Dimension.prototype.type = "Dimension";
  Dimension.prototype.accept = function(visitor) {
    this.unit = visitor.visit(this.unit);
  };
  Dimension.prototype.eval = function(context) {
    return this;
  };
  Dimension.prototype.toColor = function() {
    return new Color([this.value, this.value, this.value]);
  };
  Dimension.prototype.genCSS = function(context, output) {
    if ((context && context.strictUnits) && !this.unit.isSingular()) {
      throw new Error("Multiple units in dimension. Correct the units or use the unit function. Bad unit: " + this.unit.toString());
    }
    var value = this.fround(context, this.value),
        strValue = String(value);
    if (value !== 0 && value < 0.000001 && value > -0.000001) {
      strValue = value.toFixed(20).replace(/0+$/, "");
    }
    if (context && context.compress) {
      if (value === 0 && this.unit.isLength()) {
        output.add(strValue);
        return;
      }
      if (value > 0 && value < 1) {
        strValue = (strValue).substr(1);
      }
    }
    output.add(strValue);
    this.unit.genCSS(context, output);
  };
  Dimension.prototype.operate = function(context, op, other) {
    var value = this._operate(context, op, this.value, other.value),
        unit = this.unit.clone();
    if (op === '+' || op === '-') {
      if (unit.numerator.length === 0 && unit.denominator.length === 0) {
        unit = other.unit.clone();
        if (this.unit.backupUnit) {
          unit.backupUnit = this.unit.backupUnit;
        }
      } else if (other.unit.numerator.length === 0 && unit.denominator.length === 0) {} else {
        other = other.convertTo(this.unit.usedUnits());
        if (context.strictUnits && other.unit.toString() !== unit.toString()) {
          throw new Error("Incompatible units. Change the units or use the unit function. Bad units: '" + unit.toString() + "' and '" + other.unit.toString() + "'.");
        }
        value = this._operate(context, op, this.value, other.value);
      }
    } else if (op === '*') {
      unit.numerator = unit.numerator.concat(other.unit.numerator).sort();
      unit.denominator = unit.denominator.concat(other.unit.denominator).sort();
      unit.cancel();
    } else if (op === '/') {
      unit.numerator = unit.numerator.concat(other.unit.denominator).sort();
      unit.denominator = unit.denominator.concat(other.unit.numerator).sort();
      unit.cancel();
    }
    return new Dimension(value, unit);
  };
  Dimension.prototype.compare = function(other) {
    var a,
        b;
    if (!(other instanceof Dimension)) {
      return undefined;
    }
    if (this.unit.isEmpty() || other.unit.isEmpty()) {
      a = this;
      b = other;
    } else {
      a = this.unify();
      b = other.unify();
      if (a.unit.compare(b.unit) !== 0) {
        return undefined;
      }
    }
    return Node.numericCompare(a.value, b.value);
  };
  Dimension.prototype.unify = function() {
    return this.convertTo({
      length: 'px',
      duration: 's',
      angle: 'rad'
    });
  };
  Dimension.prototype.convertTo = function(conversions) {
    var value = this.value,
        unit = this.unit.clone(),
        i,
        groupName,
        group,
        targetUnit,
        derivedConversions = {},
        applyUnit;
    if (typeof conversions === 'string') {
      for (i in unitConversions) {
        if (unitConversions[i].hasOwnProperty(conversions)) {
          derivedConversions = {};
          derivedConversions[i] = conversions;
        }
      }
      conversions = derivedConversions;
    }
    applyUnit = function(atomicUnit, denominator) {
      if (group.hasOwnProperty(atomicUnit)) {
        if (denominator) {
          value = value / (group[atomicUnit] / group[targetUnit]);
        } else {
          value = value * (group[atomicUnit] / group[targetUnit]);
        }
        return targetUnit;
      }
      return atomicUnit;
    };
    for (groupName in conversions) {
      if (conversions.hasOwnProperty(groupName)) {
        targetUnit = conversions[groupName];
        group = unitConversions[groupName];
        unit.map(applyUnit);
      }
    }
    unit.cancel();
    return new Dimension(value, unit);
  };
  module.exports = Dimension;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/paren.js", ["npm:less@2.6.1/lib/less/tree/node.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js');
  var Paren = function(node) {
    this.value = node;
  };
  Paren.prototype = new Node();
  Paren.prototype.type = "Paren";
  Paren.prototype.genCSS = function(context, output) {
    output.add('(');
    this.value.genCSS(context, output);
    output.add(')');
  };
  Paren.prototype.eval = function(context) {
    return new Paren(this.value.eval(context));
  };
  module.exports = Paren;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/node.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = function() {};
  Node.prototype.toCSS = function(context) {
    var strs = [];
    this.genCSS(context, {
      add: function(chunk, fileInfo, index) {
        strs.push(chunk);
      },
      isEmpty: function() {
        return strs.length === 0;
      }
    });
    return strs.join('');
  };
  Node.prototype.genCSS = function(context, output) {
    output.add(this.value);
  };
  Node.prototype.accept = function(visitor) {
    this.value = visitor.visit(this.value);
  };
  Node.prototype.eval = function() {
    return this;
  };
  Node.prototype._operate = function(context, op, a, b) {
    switch (op) {
      case '+':
        return a + b;
      case '-':
        return a - b;
      case '*':
        return a * b;
      case '/':
        return a / b;
    }
  };
  Node.prototype.fround = function(context, value) {
    var precision = context && context.numPrecision;
    return (precision == null) ? value : Number((value + 2e-16).toFixed(precision));
  };
  Node.compare = function(a, b) {
    if ((a.compare) && !(b.type === "Quoted" || b.type === "Anonymous")) {
      return a.compare(b);
    } else if (b.compare) {
      return -b.compare(a);
    } else if (a.type !== b.type) {
      return undefined;
    }
    a = a.value;
    b = b.value;
    if (!Array.isArray(a)) {
      return a === b ? 0 : undefined;
    }
    if (a.length !== b.length) {
      return undefined;
    }
    for (var i = 0; i < a.length; i++) {
      if (Node.compare(a[i], b[i]) !== 0) {
        return undefined;
      }
    }
    return 0;
  };
  Node.numericCompare = function(a, b) {
    return a < b ? -1 : a === b ? 0 : a > b ? 1 : undefined;
  };
  Node.prototype.blocksVisibility = function() {
    if (this.visibilityBlocks == null) {
      this.visibilityBlocks = 0;
    }
    return this.visibilityBlocks !== 0;
  };
  Node.prototype.addVisibilityBlock = function() {
    if (this.visibilityBlocks == null) {
      this.visibilityBlocks = 0;
    }
    this.visibilityBlocks = this.visibilityBlocks + 1;
  };
  Node.prototype.removeVisibilityBlock = function() {
    if (this.visibilityBlocks == null) {
      this.visibilityBlocks = 0;
    }
    this.visibilityBlocks = this.visibilityBlocks - 1;
  };
  Node.prototype.ensureVisibility = function() {
    this.nodeVisible = true;
  };
  Node.prototype.ensureInvisibility = function() {
    this.nodeVisible = false;
  };
  Node.prototype.isVisible = function() {
    return this.nodeVisible;
  };
  Node.prototype.visibilityInfo = function() {
    return {
      visibilityBlocks: this.visibilityBlocks,
      nodeVisible: this.nodeVisible
    };
  };
  Node.prototype.copyVisibilityInfo = function(info) {
    if (!info) {
      return;
    }
    this.visibilityBlocks = info.visibilityBlocks;
    this.nodeVisible = info.nodeVisible;
  };
  module.exports = Node;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/debug-info.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var debugInfo = function(context, ctx, lineSeparator) {
    var result = "";
    if (context.dumpLineNumbers && !context.compress) {
      switch (context.dumpLineNumbers) {
        case 'comments':
          result = debugInfo.asComment(ctx);
          break;
        case 'mediaquery':
          result = debugInfo.asMediaQuery(ctx);
          break;
        case 'all':
          result = debugInfo.asComment(ctx) + (lineSeparator || "") + debugInfo.asMediaQuery(ctx);
          break;
      }
    }
    return result;
  };
  debugInfo.asComment = function(ctx) {
    return '/* line ' + ctx.debugInfo.lineNumber + ', ' + ctx.debugInfo.fileName + ' */\n';
  };
  debugInfo.asMediaQuery = function(ctx) {
    var filenameWithProtocol = ctx.debugInfo.fileName;
    if (!/^[a-z]+:\/\//i.test(filenameWithProtocol)) {
      filenameWithProtocol = 'file://' + filenameWithProtocol;
    }
    return '@media -sass-debug-info{filename{font-family:' + filenameWithProtocol.replace(/([.:\/\\])/g, function(a) {
      if (a == '\\') {
        a = '\/';
      }
      return '\\' + a;
    }) + '}line{font-family:\\00003' + ctx.debugInfo.lineNumber + '}}\n';
  };
  module.exports = debugInfo;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/comment.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/tree/debug-info.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js'),
      getDebugInfo = $__require('npm:less@2.6.1/lib/less/tree/debug-info.js');
  var Comment = function(value, isLineComment, index, currentFileInfo) {
    this.value = value;
    this.isLineComment = isLineComment;
    this.currentFileInfo = currentFileInfo;
  };
  Comment.prototype = new Node();
  Comment.prototype.type = "Comment";
  Comment.prototype.genCSS = function(context, output) {
    if (this.debugInfo) {
      output.add(getDebugInfo(context, this), this.currentFileInfo, this.index);
    }
    output.add(this.value);
  };
  Comment.prototype.isSilent = function(context) {
    var isCompressed = context.compress && this.value[2] !== "!";
    return this.isLineComment || isCompressed;
  };
  module.exports = Comment;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/tree/expression.js", ["npm:less@2.6.1/lib/less/tree/node.js", "npm:less@2.6.1/lib/less/tree/paren.js", "npm:less@2.6.1/lib/less/tree/comment.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var Node = $__require('npm:less@2.6.1/lib/less/tree/node.js'),
      Paren = $__require('npm:less@2.6.1/lib/less/tree/paren.js'),
      Comment = $__require('npm:less@2.6.1/lib/less/tree/comment.js');
  var Expression = function(value) {
    this.value = value;
    if (!value) {
      throw new Error("Expression requires an array parameter");
    }
  };
  Expression.prototype = new Node();
  Expression.prototype.type = "Expression";
  Expression.prototype.accept = function(visitor) {
    this.value = visitor.visitArray(this.value);
  };
  Expression.prototype.eval = function(context) {
    var returnValue,
        inParenthesis = this.parens && !this.parensInOp,
        doubleParen = false;
    if (inParenthesis) {
      context.inParenthesis();
    }
    if (this.value.length > 1) {
      returnValue = new Expression(this.value.map(function(e) {
        return e.eval(context);
      }));
    } else if (this.value.length === 1) {
      if (this.value[0].parens && !this.value[0].parensInOp) {
        doubleParen = true;
      }
      returnValue = this.value[0].eval(context);
    } else {
      returnValue = this;
    }
    if (inParenthesis) {
      context.outOfParenthesis();
    }
    if (this.parens && this.parensInOp && !(context.isMathOn()) && !doubleParen) {
      returnValue = new Paren(returnValue);
    }
    return returnValue;
  };
  Expression.prototype.genCSS = function(context, output) {
    for (var i = 0; i < this.value.length; i++) {
      this.value[i].genCSS(context, output);
      if (i + 1 < this.value.length) {
        output.add(" ");
      }
    }
  };
  Expression.prototype.throwAwayComments = function() {
    this.value = this.value.filter(function(v) {
      return !(v instanceof Comment);
    });
  };
  module.exports = Expression;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less/functions/function-registry.js", ["github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  function makeRegistry(base) {
    return {
      _data: {},
      add: function(name, func) {
        name = name.toLowerCase();
        if (this._data.hasOwnProperty(name)) {}
        this._data[name] = func;
      },
      addMultiple: function(functions) {
        Object.keys(functions).forEach(function(name) {
          this.add(name, functions[name]);
        }.bind(this));
      },
      get: function(name) {
        return this._data[name] || (base && base.get(name));
      },
      inherit: function() {
        return makeRegistry(this);
      }
    };
  }
  module.exports = makeRegistry(null);
  return module.exports;
});

$__System.registerDynamic("npm:image-size@0.4.0/lib/types.js", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = ['bmp', 'gif', 'jpg', 'png', 'psd', 'svg', 'tiff', 'webp'];
  return module.exports;
});

$__System.registerDynamic("npm:image-size@0.4.0/lib/types/bmp.js", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  function isBMP(buffer) {
    return ('BM' === buffer.toString('ascii', 0, 2));
  }
  function calculate(buffer) {
    return {
      'width': buffer.readUInt32LE(18),
      'height': buffer.readUInt32LE(22)
    };
  }
  module.exports = {
    'detect': isBMP,
    'calculate': calculate
  };
  return module.exports;
});

$__System.registerDynamic("npm:image-size@0.4.0/lib/types/gif.js", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var gifRegexp = /^GIF8[7,9]a/;
  function isGIF(buffer) {
    var signature = buffer.toString('ascii', 0, 6);
    return (gifRegexp.test(signature));
  }
  function calculate(buffer) {
    return {
      'width': buffer.readUInt16LE(6),
      'height': buffer.readUInt16LE(8)
    };
  }
  module.exports = {
    'detect': isGIF,
    'calculate': calculate
  };
  return module.exports;
});

$__System.registerDynamic("npm:image-size@0.4.0/lib/types/jpg.js", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  function isJPG(buffer) {
    var SOIMarker = buffer.toString('hex', 0, 2);
    return ('ffd8' === SOIMarker);
  }
  function extractSize(buffer, i) {
    return {
      'height': buffer.readUInt16BE(i),
      'width': buffer.readUInt16BE(i + 2)
    };
  }
  function validateBuffer(buffer, i) {
    if (i > buffer.length) {
      throw new TypeError('Corrupt JPG, exceeded buffer limits');
    }
    if (buffer[i] !== 0xFF) {
      throw new TypeError('Invalid JPG, marker table corrupted');
    }
  }
  function calculate(buffer) {
    buffer = buffer.slice(4);
    var i,
        next;
    while (buffer.length) {
      i = buffer.readUInt16BE(0);
      validateBuffer(buffer, i);
      next = buffer[i + 1];
      if (next === 0xC0 || next === 0xC2) {
        return extractSize(buffer, i + 5);
      }
      buffer = buffer.slice(i + 2);
    }
    throw new TypeError('Invalid JPG, no size found');
  }
  module.exports = {
    'detect': isJPG,
    'calculate': calculate
  };
  return module.exports;
});

$__System.registerDynamic("npm:image-size@0.4.0/lib/types/png.js", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var pngSignature = 'PNG\r\n\x1a\n';
  function isPNG(buffer) {
    if (pngSignature === buffer.toString('ascii', 1, 8)) {
      if ('IHDR' !== buffer.toString('ascii', 12, 16)) {
        throw new TypeError('invalid png');
      }
      return true;
    }
  }
  function calculate(buffer) {
    return {
      'width': buffer.readUInt32BE(16),
      'height': buffer.readUInt32BE(20)
    };
  }
  module.exports = {
    'detect': isPNG,
    'calculate': calculate
  };
  return module.exports;
});

$__System.registerDynamic("npm:image-size@0.4.0/lib/types/psd.js", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  function isPSD(buffer) {
    return ('8BPS' === buffer.toString('ascii', 0, 4));
  }
  function calculate(buffer) {
    return {
      'width': buffer.readUInt32BE(18),
      'height': buffer.readUInt32BE(14)
    };
  }
  module.exports = {
    'detect': isPSD,
    'calculate': calculate
  };
  return module.exports;
});

$__System.registerDynamic("npm:image-size@0.4.0/lib/types/svg.js", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var svgReg = /<svg[^>]+[^>]*>/;
  function isSVG(buffer) {
    return svgReg.test(buffer);
  }
  var extractorRegExps = {
    'root': /<svg\s[^>]+>/,
    'width': /\bwidth=(['"])([^%]+?)\1/,
    'height': /\bheight=(['"])([^%]+?)\1/,
    'viewbox': /\bviewBox=(['"])(.+?)\1/
  };
  function parseViewbox(viewbox) {
    var bounds = viewbox.split(' ');
    return {
      'width': parseInt(bounds[2], 10),
      'height': parseInt(bounds[3], 10)
    };
  }
  function parseAttributes(root) {
    var width = root.match(extractorRegExps.width);
    var height = root.match(extractorRegExps.height);
    var viewbox = root.match(extractorRegExps.viewbox);
    return {
      'width': width && parseInt(width[2], 10),
      'height': height && parseInt(height[2], 10),
      'viewbox': viewbox && parseViewbox(viewbox[2])
    };
  }
  function calculateByDimensions(attrs) {
    return {
      'width': attrs.width,
      'height': attrs.height
    };
  }
  function calculateByViewbox(attrs) {
    var ratio = attrs.viewbox.width / attrs.viewbox.height;
    if (attrs.width) {
      return {
        'width': attrs.width,
        'height': Math.floor(attrs.width / ratio)
      };
    }
    if (attrs.height) {
      return {
        'width': Math.floor(attrs.height * ratio),
        'height': attrs.height
      };
    }
    return {
      'width': attrs.viewbox.width,
      'height': attrs.viewbox.height
    };
  }
  function calculate(buffer) {
    var root = buffer.toString('utf8').match(extractorRegExps.root);
    if (root) {
      var attrs = parseAttributes(root[0]);
      if (attrs.width && attrs.height) {
        return calculateByDimensions(attrs);
      }
      if (attrs.viewbox) {
        return calculateByViewbox(attrs);
      }
    }
    throw new TypeError('invalid svg');
  }
  module.exports = {
    'detect': isSVG,
    'calculate': calculate
  };
  return module.exports;
});

$__System.registerDynamic("npm:image-size@0.4.0/lib/readUInt.js", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  function readUInt(buffer, bits, offset, isBigEndian) {
    offset = offset || 0;
    var endian = !!isBigEndian ? 'BE' : 'LE';
    var method = buffer['readUInt' + bits + endian];
    return method.call(buffer, offset);
  }
  module.exports = readUInt;
  return module.exports;
});

$__System.registerDynamic("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js", ["@node/buffer"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('@node/buffer').Buffer;
  return module.exports;
});

$__System.registerDynamic("npm:image-size@0.4.0/lib/types/tiff.js", ["@node/fs", "npm:image-size@0.4.0/lib/readUInt.js", "github:jspm/nodelibs-buffer@0.2.0-alpha/global.js"], true, function($__require, exports, module) {
  "use strict";
  var Buffer = $__require("github:jspm/nodelibs-buffer@0.2.0-alpha/global.js");
  var define,
      global = this,
      GLOBAL = this;
  var fs = $__require('@node/fs');
  var readUInt = $__require('npm:image-size@0.4.0/lib/readUInt.js');
  function isTIFF(buffer) {
    var hex4 = buffer.toString('hex', 0, 4);
    return ('49492a00' === hex4 || '4d4d002a' === hex4);
  }
  function readIFD(buffer, filepath, isBigEndian) {
    var ifdOffset = readUInt(buffer, 32, 4, isBigEndian);
    var bufferSize = 1024;
    var fileSize = fs.statSync(filepath).size;
    if (ifdOffset + bufferSize > fileSize) {
      bufferSize = fileSize - ifdOffset - 10;
    }
    var endBuffer = new Buffer(bufferSize);
    var descriptor = fs.openSync(filepath, 'r');
    fs.readSync(descriptor, endBuffer, 0, bufferSize, ifdOffset);
    var ifdBuffer = endBuffer.slice(2);
    return ifdBuffer;
  }
  function readValue(buffer, isBigEndian) {
    var low = readUInt(buffer, 16, 8, isBigEndian);
    var high = readUInt(buffer, 16, 10, isBigEndian);
    return (high << 16) + low;
  }
  function nextTag(buffer) {
    if (buffer.length > 24) {
      return buffer.slice(12);
    }
  }
  function extractTags(buffer, isBigEndian) {
    var tags = {};
    var code,
        type,
        length;
    while (buffer && buffer.length) {
      code = readUInt(buffer, 16, 0, isBigEndian);
      type = readUInt(buffer, 16, 2, isBigEndian);
      length = readUInt(buffer, 32, 4, isBigEndian);
      if (code === 0) {
        break;
      } else {
        if (length === 1 && type === 3) {
          tags[code] = readValue(buffer, isBigEndian);
        }
        buffer = nextTag(buffer);
      }
    }
    return tags;
  }
  function determineEndianness(buffer) {
    var signature = buffer.toString('ascii', 0, 2);
    if ('II' === signature) {
      return 'LE';
    } else if ('MM' === signature) {
      return 'BE';
    }
  }
  function calculate(buffer, filepath) {
    if (!filepath) {
      throw new TypeError('Tiff doesn\'t support buffer');
    }
    var isBigEndian = determineEndianness(buffer) === 'BE';
    var ifdBuffer = readIFD(buffer, filepath, isBigEndian);
    var tags = extractTags(ifdBuffer, isBigEndian);
    var width = tags[256];
    var height = tags[257];
    if (!width || !height) {
      throw new TypeError('Invalid Tiff, missing tags');
    }
    return {
      'width': width,
      'height': height
    };
  }
  module.exports = {
    'detect': isTIFF,
    'calculate': calculate
  };
  return module.exports;
});

$__System.registerDynamic("npm:image-size@0.4.0/lib/types/webp.js", [], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  function isWebP(buffer) {
    var riffHeader = 'RIFF' === buffer.toString('ascii', 0, 4);
    var webpHeader = 'WEBP' === buffer.toString('ascii', 8, 12);
    var vp8Header = 'VP8' === buffer.toString('ascii', 12, 15);
    return (riffHeader && webpHeader && vp8Header);
  }
  function calculate(buffer) {
    var chunkHeader = buffer.toString('ascii', 12, 16);
    buffer = buffer.slice(20, 30);
    if (chunkHeader === 'VP8 ' && buffer[0] !== 0x2f) {
      return calculateLossy(buffer);
    }
    var signature = buffer.toString('hex', 3, 6);
    if (chunkHeader === 'VP8L' && signature !== '9d012a') {
      return calculateLossless(buffer);
    }
    return false;
  }
  function calculateLossless(buffer) {
    return {
      'width': 1 + (((buffer[2] & 0x3F) << 8) | buffer[1]),
      'height': 1 + (((buffer[4] & 0xF) << 10) | (buffer[3] << 2) | ((buffer[2] & 0xC0) >> 6))
    };
  }
  function calculateLossy(buffer) {
    return {
      'width': buffer.readInt16LE(6) & 0x3fff,
      'height': buffer.readInt16LE(8) & 0x3fff
    };
  }
  module.exports = {
    'detect': isWebP,
    'calculate': calculate
  };
  return module.exports;
});

$__System.registerDynamic("imagesize.js", ["@node/fs", "@node/path", "npm:image-size@0.4.0/lib/types.js", "npm:image-size@0.4.0/lib/types/bmp.js", "npm:image-size@0.4.0/lib/types/gif.js", "npm:image-size@0.4.0/lib/types/jpg.js", "npm:image-size@0.4.0/lib/types/png.js", "npm:image-size@0.4.0/lib/types/psd.js", "npm:image-size@0.4.0/lib/types/svg.js", "npm:image-size@0.4.0/lib/types/tiff.js", "npm:image-size@0.4.0/lib/types/webp.js"], true, function($__require, exports, module) {
  "use strict";
  ;
  var define,
      global = this,
      GLOBAL = this;
  var fs = $__require('@node/fs');
  var path = $__require('@node/path');
  var types = $__require('npm:image-size@0.4.0/lib/types.js');
  var handlers = {},
      typeMap = {};
  handlers.bmp = $__require('npm:image-size@0.4.0/lib/types/bmp.js');
  handlers.gif = $__require('npm:image-size@0.4.0/lib/types/gif.js');
  handlers.jpg = $__require('npm:image-size@0.4.0/lib/types/jpg.js');
  handlers.png = $__require('npm:image-size@0.4.0/lib/types/png.js');
  handlers.psd = $__require('npm:image-size@0.4.0/lib/types/psd.js');
  handlers.svg = $__require('npm:image-size@0.4.0/lib/types/svg.js');
  handlers.tiff = $__require('npm:image-size@0.4.0/lib/types/tiff.js');
  handlers.webp = $__require('npm:image-size@0.4.0/lib/types/webp.js');
  types.forEach(function(type) {
    typeMap[type] = handlers[type].detect;
  });
  var detector = function(buffer, filepath) {
    var type,
        result;
    for (type in typeMap) {
      result = typeMap[type](buffer, filepath);
      if (result) {
        return type;
      }
    }
  };
  var MaxBufferSize = 128 * 1024;
  function lookup(buffer, filepath) {
    var type = detector(buffer, filepath);
    if (type in handlers) {
      var size = handlers[type].calculate(buffer, filepath);
      if (size !== false) {
        size.type = type;
        return size;
      }
    }
    throw new TypeError('unsupported file type');
  }
  function asyncFileToBuffer(filepath, callback) {
    fs.open(filepath, 'r', function(err, descriptor) {
      if (err) {
        return callback(err);
      }
      var size = fs.fstatSync(descriptor).size;
      var bufferSize = Math.min(size, MaxBufferSize);
      var buffer = new Buffer(bufferSize);
      fs.read(descriptor, buffer, 0, bufferSize, 0, function(err) {
        if (err) {
          return callback(err);
        }
        fs.close(descriptor, function(err) {
          callback(err, buffer);
        });
      });
    });
  }
  function syncFileToBuffer(filepath) {
    var descriptor = fs.openSync(filepath, 'r');
    var size = fs.fstatSync(descriptor).size;
    var bufferSize = Math.min(size, MaxBufferSize);
    var buffer = new Buffer(bufferSize);
    fs.readSync(descriptor, buffer, 0, bufferSize, 0);
    fs.closeSync(descriptor);
    return buffer;
  }
  module.exports = function(input, callback) {
    if (Buffer.isBuffer(input)) {
      return lookup(input);
    }
    if (typeof input !== 'string') {
      throw new TypeError('invalid invocation');
    }
    var filepath = path.resolve(input);
    if (typeof callback === 'function') {
      asyncFileToBuffer(filepath, function(err, buffer) {
        if (err) {
          return callback(err);
        }
        var dimensions;
        try {
          dimensions = lookup(buffer, filepath);
        } catch (e) {
          err = e;
        }
        callback(err, dimensions);
      });
    } else {
      var buffer = syncFileToBuffer(filepath);
      return lookup(buffer, filepath);
    }
  };
  module.exports.types = types;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less-node/image-size.js", ["npm:less@2.6.1/lib/less/tree/dimension.js", "npm:less@2.6.1/lib/less/tree/expression.js", "npm:less@2.6.1/lib/less/functions/function-registry.js", "imagesize.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = function(environment) {
    var Dimension = $__require('npm:less@2.6.1/lib/less/tree/dimension.js'),
        Expression = $__require('npm:less@2.6.1/lib/less/tree/expression.js'),
        functionRegistry = $__require('npm:less@2.6.1/lib/less/functions/function-registry.js');
    function imageSize(functionContext, filePathNode) {
      var filePath = filePathNode.value;
      var currentFileInfo = functionContext.currentFileInfo;
      var currentDirectory = currentFileInfo.relativeUrls ? currentFileInfo.currentDirectory : currentFileInfo.entryPath;
      var fragmentStart = filePath.indexOf('#');
      var fragment = '';
      if (fragmentStart !== -1) {
        fragment = filePath.slice(fragmentStart);
        filePath = filePath.slice(0, fragmentStart);
      }
      var fileManager = environment.getFileManager(filePath, currentDirectory, functionContext.context, environment, true);
      if (!fileManager) {
        throw {
          type: "File",
          message: "Can not set up FileManager for " + filePathNode
        };
      }
      var fileSync = fileManager.loadFileSync(filePath, currentDirectory, functionContext.context, environment);
      if (fileSync.error) {
        throw fileSync.error;
      }
      var sizeOf = $__require('imagesize.js');
      return sizeOf(fileSync.filename);
    }
    var imageFunctions = {
      "image-size": function(filePathNode) {
        var size = imageSize(this, filePathNode);
        return new Expression([new Dimension(size.width, "px"), new Dimension(size.height, "px")]);
      },
      "image-width": function(filePathNode) {
        var size = imageSize(this, filePathNode);
        return new Dimension(size.width, "px");
      },
      "image-height": function(filePathNode) {
        var size = imageSize(this, filePathNode);
        return new Dimension(size.height, "px");
      }
    };
    functionRegistry.addMultiple(imageFunctions);
  };
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/lib/less-node/index.js", ["npm:less@2.6.1/lib/less-node/environment.js", "npm:less@2.6.1/lib/less-node/file-manager.js", "npm:less@2.6.1/lib/less-node/url-file-manager.js", "npm:less@2.6.1/lib/less/index.js", "npm:less@2.6.1/lib/less-node/lessc-helper.js", "npm:less@2.6.1/lib/less-node/plugin-loader.js", "npm:less@2.6.1/lib/less-node/fs.js", "npm:less@2.6.1/lib/less-node/image-size.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  var environment = $__require('npm:less@2.6.1/lib/less-node/environment.js'),
      FileManager = $__require('npm:less@2.6.1/lib/less-node/file-manager.js'),
      UrlFileManager = $__require('npm:less@2.6.1/lib/less-node/url-file-manager.js'),
      createFromEnvironment = $__require('npm:less@2.6.1/lib/less/index.js'),
      less = createFromEnvironment(environment, [new FileManager(), new UrlFileManager()]),
      lesscHelper = $__require('npm:less@2.6.1/lib/less-node/lessc-helper.js');
  less.createFromEnvironment = createFromEnvironment;
  less.lesscHelper = lesscHelper;
  less.PluginLoader = $__require('npm:less@2.6.1/lib/less-node/plugin-loader.js');
  less.fs = $__require('npm:less@2.6.1/lib/less-node/fs.js');
  less.FileManager = FileManager;
  less.UrlFileManager = UrlFileManager;
  less.formatError = function(ctx, options) {
    options = options || {};
    var message = "";
    var extract = ctx.extract;
    var error = [];
    var stylize = options.color ? lesscHelper.stylize : function(str) {
      return str;
    };
    if (ctx.stack && !ctx.type) {
      return stylize(ctx.stack, 'red');
    }
    if (!ctx.hasOwnProperty('index') || !extract) {
      return ctx.stack || ctx.message;
    }
    if (typeof extract[0] === 'string') {
      error.push(stylize((ctx.line - 1) + ' ' + extract[0], 'grey'));
    }
    if (typeof extract[1] === 'string') {
      var errorTxt = ctx.line + ' ';
      if (extract[1]) {
        errorTxt += extract[1].slice(0, ctx.column) + stylize(stylize(stylize(extract[1].substr(ctx.column, 1), 'bold') + extract[1].slice(ctx.column + 1), 'red'), 'inverse');
      }
      error.push(errorTxt);
    }
    if (typeof extract[2] === 'string') {
      error.push(stylize((ctx.line + 1) + ' ' + extract[2], 'grey'));
    }
    error = error.join('\n') + stylize('', 'reset') + '\n';
    message += stylize(ctx.type + 'Error: ' + ctx.message, 'red');
    if (ctx.filename) {
      message += stylize(' in ', 'red') + ctx.filename + stylize(' on line ' + ctx.line + ', column ' + (ctx.column + 1) + ':', 'grey');
    }
    message += '\n' + error;
    if (ctx.callLine) {
      message += stylize('from ', 'red') + (ctx.filename || '') + '/n';
      message += stylize(ctx.callLine, 'grey') + ' ' + ctx.callExtract + '/n';
    }
    return message;
  };
  less.writeError = function(ctx, options) {
    options = options || {};
    if (options.silent) {
      return;
    }
    console.error(less.formatError(ctx, options));
  };
  $__require('npm:less@2.6.1/lib/less-node/image-size.js')(less.environment);
  module.exports = less;
  return module.exports;
});

$__System.registerDynamic("@system-env", [], false, function() {
  return {
    "production": true,
    "browser": false,
    "node": true
  };
});

$__System.registerDynamic("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js", ["@system-env"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var productionEnv = $__require('@system-env').production;
  var pEnv = process.env;
  pEnv.NODE_ENV = productionEnv ? 'production' : 'development';
  module.exports = global.process;
  return module.exports;
});

$__System.registerDynamic("npm:less@2.6.1/index.js", ["npm:less@2.6.1/lib/less-node/index.js", "github:jspm/nodelibs-process@0.2.0-alpha/process-node.js"], true, function($__require, exports, module) {
  var process = $__require("github:jspm/nodelibs-process@0.2.0-alpha/process-node.js");
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('npm:less@2.6.1/lib/less-node/index.js');
  return module.exports;
});

})
(function(factory) {
  if (typeof define == 'function' && define.amd)
    define([], factory);
  else if (typeof module == 'object' && module.exports && typeof require == 'function')
    module.exports = factory();
  else
    factory();
});